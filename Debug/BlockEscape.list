
BlockEscape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d38  08009ca8  08009ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e0  0800b9e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9e0  0800b9e0  0001b9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9e8  0800b9e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9e8  0800b9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd0  20000070  0800ba60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005040  0800ba60  00025040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026beb  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005711  00000000  00000000  00046ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  0004c3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b9  00000000  00000000  0004e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003451f  00000000  00000000  0004fa89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000287c8  00000000  00000000  00083fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012dca1  00000000  00000000  000ac770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000835c  00000000  00000000  001da414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001e2770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08009c90 	.word	0x08009c90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08009c90 	.word	0x08009c90

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000540:	2001      	movs	r0, #1
 8000542:	f000 f803 	bl	800054c <BSP_LCD_InitEx>
 8000546:	4603      	mov	r3, r0
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}

0800054c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000556:	f646 3325 	movw	r3, #27429	; 0x6b25
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000564:	f000 f934 	bl	80007d0 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000568:	f000 faea 	bl	8000b40 <LCD_IO_GetID>
 800056c:	4603      	mov	r3, r0
 800056e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000570:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000572:	2b11      	cmp	r3, #17
 8000574:	d001      	beq.n	800057a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000576:	2301      	movs	r3, #1
 8000578:	e111      	b.n	800079e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800057a:	f000 fae9 	bl	8000b50 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800057e:	4b8a      	ldr	r3, [pc, #552]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000580:	4a8a      	ldr	r2, [pc, #552]	; (80007ac <BSP_LCD_InitEx+0x260>)
 8000582:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000584:	4888      	ldr	r0, [pc, #544]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000586:	f002 fe6d 	bl	8003264 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800058e:	2305      	movs	r3, #5
 8000590:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000596:	f24f 4324 	movw	r3, #62500	; 0xf424
 800059a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800059c:	4b82      	ldr	r3, [pc, #520]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80005a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a4:	089b      	lsrs	r3, r3, #2
 80005a6:	4a82      	ldr	r2, [pc, #520]	; (80007b0 <BSP_LCD_InitEx+0x264>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	0a9b      	lsrs	r3, r3, #10
 80005ae:	4a7e      	ldr	r2, [pc, #504]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80005b0:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	487b      	ldr	r0, [pc, #492]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80005ba:	f002 fd37 	bl	800302c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d108      	bne.n	80005d6 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80005c4:	4b7b      	ldr	r3, [pc, #492]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005ca:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80005cc:	4b7a      	ldr	r3, [pc, #488]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e007      	b.n	80005e6 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80005d6:	4b77      	ldr	r3, [pc, #476]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005dc:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80005de:	4b76      	ldr	r3, [pc, #472]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005e4:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80005ec:	4b72      	ldr	r3, [pc, #456]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80005f2:	2301      	movs	r3, #1
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80005f6:	230f      	movs	r3, #15
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80005fa:	2310      	movs	r3, #16
 80005fc:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000602:	2322      	movs	r3, #34	; 0x22
 8000604:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000606:	2322      	movs	r3, #34	; 0x22
 8000608:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800060a:	4b6c      	ldr	r3, [pc, #432]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000610:	4b6a      	ldr	r3, [pc, #424]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000612:	2205      	movs	r2, #5
 8000614:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000616:	4b69      	ldr	r3, [pc, #420]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800061c:	4b67      	ldr	r3, [pc, #412]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000628:	4b64      	ldr	r3, [pc, #400]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800062a:	2202      	movs	r2, #2
 800062c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800062e:	4b63      	ldr	r3, [pc, #396]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000630:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000634:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000636:	4b61      	ldr	r3, [pc, #388]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800063c:	4a5f      	ldr	r2, [pc, #380]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000640:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000646:	fb03 f202 	mul.w	r2, r3, r2
 800064a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	4a5a      	ldr	r2, [pc, #360]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000652:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000658:	fb03 f202 	mul.w	r2, r3, r2
 800065c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4a56      	ldr	r2, [pc, #344]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	441a      	add	r2, r3
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	441a      	add	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000676:	fb03 f202 	mul.w	r2, r3, r2
 800067a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000680:	4a4e      	ldr	r2, [pc, #312]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000684:	4a4d      	ldr	r2, [pc, #308]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000688:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800068a:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000696:	4a49      	ldr	r2, [pc, #292]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800069e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b6:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006be:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c6:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80006c8:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80006d0:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80006e0:	4936      	ldr	r1, [pc, #216]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006e2:	4831      	ldr	r0, [pc, #196]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80006e4:	f002 ff16 	bl	8003514 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 80006ee:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 80006fa:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	441a      	add	r2, r3
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	4413      	add	r3, r2
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800070c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	441a      	add	r2, r3
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	441a      	add	r2, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	3b01      	subs	r3, #1
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000722:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800072a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000732:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000736:	2208      	movs	r2, #8
 8000738:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 800073c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000740:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000744:	2207      	movs	r2, #7
 8000746:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800074e:	481d      	ldr	r0, [pc, #116]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000750:	f004 fe56 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <BSP_LCD_InitEx+0x27c>)
 8000776:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000778:	4910      	ldr	r1, [pc, #64]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800077c:	f004 f8de 	bl	800493c <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000782:	f003 fe33 	bl	80043ec <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000788:	f003 fa1e 	bl	8003bc8 <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <BSP_LCD_InitEx+0x280>)
 800078e:	f000 f911 	bl	80009b4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4619      	mov	r1, r3
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa7c 	bl	8000c94 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3740      	adds	r7, #64	; 0x40
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	40016c00 	.word	0x40016c00
 80007b0:	43215e57 	.word	0x43215e57
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	20000150 	.word	0x20000150
 80007c4:	20000230 	.word	0x20000230
 80007c8:	40016800 	.word	0x40016800
 80007cc:	20000008 	.word	0x20000008

080007d0 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80007ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f2:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000806:	f003 fb03 	bl	8003e10 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000812:	f003 fca9 	bl	8004168 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000816:	2014      	movs	r0, #20
 8000818:	f002 f812 	bl	8002840 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000824:	f003 fca0 	bl	8004168 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f002 f809 	bl	8002840 <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40022400 	.word	0x40022400

08000840 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <BSP_LCD_GetXSize+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <BSP_LCD_GetYSize+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000004 	.word	0x20000004

08000870 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000880:	f7ff ffde 	bl	8000840 <BSP_LCD_GetXSize>
 8000884:	4603      	mov	r3, r0
 8000886:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800088c:	f7ff ffe4 	bl	8000858 <BSP_LCD_GetYSize>
 8000890:	4603      	mov	r3, r0
 8000892:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800089c:	23ff      	movs	r3, #255	; 0xff
 800089e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008bc:	2307      	movs	r3, #7
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80008c0:	f7ff ffbe 	bl	8000840 <BSP_LCD_GetXSize>
 80008c4:	4603      	mov	r3, r0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80008c8:	f7ff ffc6 	bl	8000858 <BSP_LCD_GetYSize>
 80008cc:	4603      	mov	r3, r0
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <BSP_LCD_LayerDefaultInit+0xb4>)
 80008da:	f003 fe57 	bl	800458c <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	4911      	ldr	r1, [pc, #68]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	3304      	adds	r3, #4
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80008f4:	88fa      	ldrh	r2, [r7, #6]
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	3308      	adds	r3, #8
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000906:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	4907      	ldr	r1, [pc, #28]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	bf00      	nop
 800091e:	3740      	adds	r7, #64	; 0x40
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000150 	.word	0x20000150
 8000928:	20000218 	.word	0x20000218
 800092c:	20000008 	.word	0x20000008

08000930 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <BSP_LCD_SelectLayer+0x1c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000214 	.word	0x20000214

08000950 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <BSP_LCD_SetTextColor+0x28>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <BSP_LCD_SetTextColor+0x2c>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000214 	.word	0x20000214
 800097c:	20000218 	.word	0x20000218

08000980 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <BSP_LCD_SetBackColor+0x2c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <BSP_LCD_SetBackColor+0x30>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	3304      	adds	r3, #4
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000214 	.word	0x20000214
 80009b0:	20000218 	.word	0x20000218

080009b4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <BSP_LCD_SetFont+0x2c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <BSP_LCD_SetFont+0x30>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3308      	adds	r3, #8
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000214 	.word	0x20000214
 80009e4:	20000218 	.word	0x20000218

080009e8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <BSP_LCD_Clear+0x48>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <BSP_LCD_Clear+0x48>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <BSP_LCD_Clear+0x4c>)
 80009fa:	2134      	movs	r1, #52	; 0x34
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	335c      	adds	r3, #92	; 0x5c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461e      	mov	r6, r3
 8000a08:	f7ff ff1a 	bl	8000840 <BSP_LCD_GetXSize>
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	f7ff ff23 	bl	8000858 <BSP_LCD_GetYSize>
 8000a12:	4602      	mov	r2, r0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	462a      	mov	r2, r5
 8000a20:	4631      	mov	r1, r6
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 f8fe 	bl	8000c24 <LL_FillBuffer>
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	20000214 	.word	0x20000214
 8000a34:	20000150 	.word	0x20000150

08000a38 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af02      	add	r7, sp, #8
 8000a40:	4604      	mov	r4, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	461a      	mov	r2, r3
 8000a48:	4623      	mov	r3, r4
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80bb      	strh	r3, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	4613      	mov	r3, r2
 8000a56:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4920      	ldr	r1, [pc, #128]	; (8000ae4 <BSP_LCD_FillRect+0xac>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff6e 	bl	8000950 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <BSP_LCD_FillRect+0xb0>)
 8000a7a:	2134      	movs	r1, #52	; 0x34
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	335c      	adds	r3, #92	; 0x5c
 8000a84:	681c      	ldr	r4, [r3, #0]
 8000a86:	f7ff fedb 	bl	8000840 <BSP_LCD_GetXSize>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	fb03 f202 	mul.w	r2, r3, r2
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4423      	add	r3, r4
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	68fd      	ldr	r5, [r7, #12]
 8000aa2:	887e      	ldrh	r6, [r7, #2]
 8000aa4:	f8b7 8000 	ldrh.w	r8, [r7]
 8000aa8:	f7ff feca 	bl	8000840 <BSP_LCD_GetXSize>
 8000aac:	4602      	mov	r2, r0
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	1ad1      	subs	r1, r2, r3
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <BSP_LCD_FillRect+0xac>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9100      	str	r1, [sp, #0]
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4632      	mov	r2, r6
 8000acc:	4629      	mov	r1, r5
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 f8a8 	bl	8000c24 <LL_FillBuffer>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000214 	.word	0x20000214
 8000ae4:	20000218 	.word	0x20000218
 8000ae8:	20000150 	.word	0x20000150

08000aec <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d80d      	bhi.n	8000b18 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	2215      	movs	r2, #21
 8000b0e:	2100      	movs	r1, #0
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <DSI_IO_WriteCmd+0x50>)
 8000b12:	f003 f895 	bl	8003c40 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8000b16:	e00d      	b.n	8000b34 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2239      	movs	r2, #57	; 0x39
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <DSI_IO_WriteCmd+0x50>)
 8000b30:	f003 f8a8 	bl	8003c84 <HAL_DSI_LongWrite>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001f8 	.word	0x200001f8

08000b40 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8000b44:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b78:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b84:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000bb4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bd8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000be0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000be4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2103      	movs	r1, #3
 8000bea:	2058      	movs	r0, #88	; 0x58
 8000bec:	f001 ff04 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000bf0:	2058      	movs	r0, #88	; 0x58
 8000bf2:	f001 ff1d 	bl	8002a30 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	205a      	movs	r0, #90	; 0x5a
 8000bfc:	f001 fefc 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000c00:	205a      	movs	r0, #90	; 0x5a
 8000c02:	f001 ff15 	bl	8002a30 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2062      	movs	r0, #98	; 0x62
 8000c0c:	f001 fef4 	bl	80029f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000c10:	2062      	movs	r0, #98	; 0x62
 8000c12:	f001 ff0d 	bl	8002a30 <HAL_NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c38:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <LL_FillBuffer+0x6c>)
 8000c4a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c4e:	f001 fefd 	bl	8002a4c <HAL_DMA2D_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d115      	bne.n	8000c84 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c5c:	f002 f864 	bl	8002d28 <HAL_DMA2D_ConfigLayer>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10e      	bne.n	8000c84 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69f9      	ldr	r1, [r7, #28]
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c72:	f001 ff45 	bl	8002b00 <HAL_DMA2D_Start>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c80:	f001 ff69 	bl	8002b56 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000f8 	.word	0x200000f8
 8000c90:	4002b000 	.word	0x4002b000

08000c94 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c9e:	49c1      	ldr	r1, [pc, #772]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff23 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000ca6:	49c0      	ldr	r1, [pc, #768]	; (8000fa8 <OTM8009A_Init+0x314>)
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff ff1f 	bl	8000aec <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000cae:	49bf      	ldr	r1, [pc, #764]	; (8000fac <OTM8009A_Init+0x318>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff1b 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000cb6:	49be      	ldr	r1, [pc, #760]	; (8000fb0 <OTM8009A_Init+0x31c>)
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f7ff ff17 	bl	8000aec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000cbe:	49bb      	ldr	r1, [pc, #748]	; (8000fac <OTM8009A_Init+0x318>)
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff ff13 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000cc6:	49bb      	ldr	r1, [pc, #748]	; (8000fb4 <OTM8009A_Init+0x320>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ff0f 	bl	8000aec <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f001 fdb6 	bl	8002840 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000cd4:	49b8      	ldr	r1, [pc, #736]	; (8000fb8 <OTM8009A_Init+0x324>)
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff08 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000cdc:	49b7      	ldr	r1, [pc, #732]	; (8000fbc <OTM8009A_Init+0x328>)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff04 	bl	8000aec <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f001 fdab 	bl	8002840 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000cea:	49b5      	ldr	r1, [pc, #724]	; (8000fc0 <OTM8009A_Init+0x32c>)
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fefd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000cf2:	49b4      	ldr	r1, [pc, #720]	; (8000fc4 <OTM8009A_Init+0x330>)
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fef9 	bl	8000aec <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000cfa:	49b3      	ldr	r1, [pc, #716]	; (8000fc8 <OTM8009A_Init+0x334>)
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fef5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000d02:	49b2      	ldr	r1, [pc, #712]	; (8000fcc <OTM8009A_Init+0x338>)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fef1 	bl	8000aec <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000d0a:	49b1      	ldr	r1, [pc, #708]	; (8000fd0 <OTM8009A_Init+0x33c>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff feed 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000d12:	49b0      	ldr	r1, [pc, #704]	; (8000fd4 <OTM8009A_Init+0x340>)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fee9 	bl	8000aec <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d1a:	49a2      	ldr	r1, [pc, #648]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fee5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000d22:	49ad      	ldr	r1, [pc, #692]	; (8000fd8 <OTM8009A_Init+0x344>)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fee1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000d2a:	49ac      	ldr	r1, [pc, #688]	; (8000fdc <OTM8009A_Init+0x348>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fedd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000d32:	49ab      	ldr	r1, [pc, #684]	; (8000fe0 <OTM8009A_Init+0x34c>)
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fed9 	bl	8000aec <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000d3a:	49aa      	ldr	r1, [pc, #680]	; (8000fe4 <OTM8009A_Init+0x350>)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fed5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000d42:	49a9      	ldr	r1, [pc, #676]	; (8000fe8 <OTM8009A_Init+0x354>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fed1 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000d4a:	49a8      	ldr	r1, [pc, #672]	; (8000fec <OTM8009A_Init+0x358>)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fecd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000d52:	49a7      	ldr	r1, [pc, #668]	; (8000ff0 <OTM8009A_Init+0x35c>)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fec9 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000d5a:	49a6      	ldr	r1, [pc, #664]	; (8000ff4 <OTM8009A_Init+0x360>)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fec5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000d62:	499a      	ldr	r1, [pc, #616]	; (8000fcc <OTM8009A_Init+0x338>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fec1 	bl	8000aec <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d6a:	498e      	ldr	r1, [pc, #568]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff febd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000d72:	49a1      	ldr	r1, [pc, #644]	; (8000ff8 <OTM8009A_Init+0x364>)
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff feb9 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000d7a:	49a0      	ldr	r1, [pc, #640]	; (8000ffc <OTM8009A_Init+0x368>)
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff feb5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000d82:	499f      	ldr	r1, [pc, #636]	; (8001000 <OTM8009A_Init+0x36c>)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff feb1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000d8a:	499e      	ldr	r1, [pc, #632]	; (8001004 <OTM8009A_Init+0x370>)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fead 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8000d92:	499d      	ldr	r1, [pc, #628]	; (8001008 <OTM8009A_Init+0x374>)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fea9 	bl	8000aec <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000d9a:	499c      	ldr	r1, [pc, #624]	; (800100c <OTM8009A_Init+0x378>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fea5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000da2:	499b      	ldr	r1, [pc, #620]	; (8001010 <OTM8009A_Init+0x37c>)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fea1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000daa:	498c      	ldr	r1, [pc, #560]	; (8000fdc <OTM8009A_Init+0x348>)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fe9d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000db2:	4998      	ldr	r1, [pc, #608]	; (8001014 <OTM8009A_Init+0x380>)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fe99 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000dba:	498a      	ldr	r1, [pc, #552]	; (8000fe4 <OTM8009A_Init+0x350>)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fe95 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000dc2:	4995      	ldr	r1, [pc, #596]	; (8001018 <OTM8009A_Init+0x384>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fe91 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000dca:	4994      	ldr	r1, [pc, #592]	; (800101c <OTM8009A_Init+0x388>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fe8d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000dd2:	4993      	ldr	r1, [pc, #588]	; (8001020 <OTM8009A_Init+0x38c>)
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff fe89 	bl	8000aec <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000dda:	4974      	ldr	r1, [pc, #464]	; (8000fac <OTM8009A_Init+0x318>)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fe85 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000de2:	4990      	ldr	r1, [pc, #576]	; (8001024 <OTM8009A_Init+0x390>)
 8000de4:	2006      	movs	r0, #6
 8000de6:	f7ff fe81 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000dea:	498f      	ldr	r1, [pc, #572]	; (8001028 <OTM8009A_Init+0x394>)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fe7d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000df2:	498e      	ldr	r1, [pc, #568]	; (800102c <OTM8009A_Init+0x398>)
 8000df4:	200e      	movs	r0, #14
 8000df6:	f7ff fe79 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000dfa:	498d      	ldr	r1, [pc, #564]	; (8001030 <OTM8009A_Init+0x39c>)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fe75 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000e02:	498c      	ldr	r1, [pc, #560]	; (8001034 <OTM8009A_Init+0x3a0>)
 8000e04:	200e      	movs	r0, #14
 8000e06:	f7ff fe71 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000e0a:	498b      	ldr	r1, [pc, #556]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fe6d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000e12:	498a      	ldr	r1, [pc, #552]	; (800103c <OTM8009A_Init+0x3a8>)
 8000e14:	200a      	movs	r0, #10
 8000e16:	f7ff fe69 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000e1a:	4989      	ldr	r1, [pc, #548]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fe65 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000e22:	4988      	ldr	r1, [pc, #544]	; (8001044 <OTM8009A_Init+0x3b0>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fe61 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000e2a:	4960      	ldr	r1, [pc, #384]	; (8000fac <OTM8009A_Init+0x318>)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fe5d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000e32:	4985      	ldr	r1, [pc, #532]	; (8001048 <OTM8009A_Init+0x3b4>)
 8000e34:	200a      	movs	r0, #10
 8000e36:	f7ff fe59 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000e3a:	4984      	ldr	r1, [pc, #528]	; (800104c <OTM8009A_Init+0x3b8>)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fe55 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000e42:	4983      	ldr	r1, [pc, #524]	; (8001050 <OTM8009A_Init+0x3bc>)
 8000e44:	200f      	movs	r0, #15
 8000e46:	f7ff fe51 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000e4a:	4977      	ldr	r1, [pc, #476]	; (8001028 <OTM8009A_Init+0x394>)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fe4d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000e52:	4980      	ldr	r1, [pc, #512]	; (8001054 <OTM8009A_Init+0x3c0>)
 8000e54:	200f      	movs	r0, #15
 8000e56:	f7ff fe49 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000e5a:	4975      	ldr	r1, [pc, #468]	; (8001030 <OTM8009A_Init+0x39c>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fe45 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000e62:	497d      	ldr	r1, [pc, #500]	; (8001058 <OTM8009A_Init+0x3c4>)
 8000e64:	200a      	movs	r0, #10
 8000e66:	f7ff fe41 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000e6a:	4973      	ldr	r1, [pc, #460]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe3d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000e72:	497a      	ldr	r1, [pc, #488]	; (800105c <OTM8009A_Init+0x3c8>)
 8000e74:	200f      	movs	r0, #15
 8000e76:	f7ff fe39 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000e7a:	4971      	ldr	r1, [pc, #452]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe35 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000e82:	4977      	ldr	r1, [pc, #476]	; (8001060 <OTM8009A_Init+0x3cc>)
 8000e84:	200f      	movs	r0, #15
 8000e86:	f7ff fe31 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000e8a:	4976      	ldr	r1, [pc, #472]	; (8001064 <OTM8009A_Init+0x3d0>)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fe2d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000e92:	4975      	ldr	r1, [pc, #468]	; (8001068 <OTM8009A_Init+0x3d4>)
 8000e94:	200a      	movs	r0, #10
 8000e96:	f7ff fe29 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000e9a:	4974      	ldr	r1, [pc, #464]	; (800106c <OTM8009A_Init+0x3d8>)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe25 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000ea2:	4973      	ldr	r1, [pc, #460]	; (8001070 <OTM8009A_Init+0x3dc>)
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f7ff fe21 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000eaa:	4940      	ldr	r1, [pc, #256]	; (8000fac <OTM8009A_Init+0x318>)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fe1d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000eb2:	4970      	ldr	r1, [pc, #448]	; (8001074 <OTM8009A_Init+0x3e0>)
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f7ff fe19 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000eba:	4964      	ldr	r1, [pc, #400]	; (800104c <OTM8009A_Init+0x3b8>)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fe15 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000ec2:	496d      	ldr	r1, [pc, #436]	; (8001078 <OTM8009A_Init+0x3e4>)
 8000ec4:	200f      	movs	r0, #15
 8000ec6:	f7ff fe11 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000eca:	4957      	ldr	r1, [pc, #348]	; (8001028 <OTM8009A_Init+0x394>)
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fe0d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000ed2:	496a      	ldr	r1, [pc, #424]	; (800107c <OTM8009A_Init+0x3e8>)
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f7ff fe09 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000eda:	4955      	ldr	r1, [pc, #340]	; (8001030 <OTM8009A_Init+0x39c>)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fe05 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000ee2:	4967      	ldr	r1, [pc, #412]	; (8001080 <OTM8009A_Init+0x3ec>)
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f7ff fe01 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000eea:	4953      	ldr	r1, [pc, #332]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fdfd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000ef2:	4964      	ldr	r1, [pc, #400]	; (8001084 <OTM8009A_Init+0x3f0>)
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	f7ff fdf9 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000efa:	4951      	ldr	r1, [pc, #324]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fdf5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000f02:	4961      	ldr	r1, [pc, #388]	; (8001088 <OTM8009A_Init+0x3f4>)
 8000f04:	200f      	movs	r0, #15
 8000f06:	f7ff fdf1 	bl	8000aec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000f0a:	4934      	ldr	r1, [pc, #208]	; (8000fdc <OTM8009A_Init+0x348>)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fded 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000f12:	495e      	ldr	r1, [pc, #376]	; (800108c <OTM8009A_Init+0x3f8>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fde9 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000f1a:	495d      	ldr	r1, [pc, #372]	; (8001090 <OTM8009A_Init+0x3fc>)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fde5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000f22:	495c      	ldr	r1, [pc, #368]	; (8001094 <OTM8009A_Init+0x400>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fde1 	bl	8000aec <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000f2a:	495b      	ldr	r1, [pc, #364]	; (8001098 <OTM8009A_Init+0x404>)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fddd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000f32:	495a      	ldr	r1, [pc, #360]	; (800109c <OTM8009A_Init+0x408>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fdd9 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f3a:	491a      	ldr	r1, [pc, #104]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fdd5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000f42:	4957      	ldr	r1, [pc, #348]	; (80010a0 <OTM8009A_Init+0x40c>)
 8000f44:	2003      	movs	r0, #3
 8000f46:	f7ff fdd1 	bl	8000aec <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f4a:	4916      	ldr	r1, [pc, #88]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fdcd 	bl	8000aec <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f52:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fdc9 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000f5a:	4952      	ldr	r1, [pc, #328]	; (80010a4 <OTM8009A_Init+0x410>)
 8000f5c:	2010      	movs	r0, #16
 8000f5e:	f7ff fdc5 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f62:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fdc1 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000f6a:	494f      	ldr	r1, [pc, #316]	; (80010a8 <OTM8009A_Init+0x414>)
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f7ff fdbd 	bl	8000aec <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000f72:	494e      	ldr	r1, [pc, #312]	; (80010ac <OTM8009A_Init+0x418>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fdb9 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f001 fc60 	bl	8002840 <HAL_Delay>

  switch(ColorCoding)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <OTM8009A_Init+0x304>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	f040 8095 	bne.w	80010b8 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000f8e:	4948      	ldr	r1, [pc, #288]	; (80010b0 <OTM8009A_Init+0x41c>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fdab 	bl	8000aec <DSI_IO_WriteCmd>
    break;
 8000f96:	e090      	b.n	80010ba <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000f98:	4946      	ldr	r1, [pc, #280]	; (80010b4 <OTM8009A_Init+0x420>)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fda6 	bl	8000aec <DSI_IO_WriteCmd>
    break;
 8000fa0:	e08b      	b.n	80010ba <OTM8009A_Init+0x426>
 8000fa2:	bf00      	nop
 8000fa4:	08009e20 	.word	0x08009e20
 8000fa8:	08009cd8 	.word	0x08009cd8
 8000fac:	08009e24 	.word	0x08009e24
 8000fb0:	08009cdc 	.word	0x08009cdc
 8000fb4:	08009e28 	.word	0x08009e28
 8000fb8:	08009e2c 	.word	0x08009e2c
 8000fbc:	08009e30 	.word	0x08009e30
 8000fc0:	08009e34 	.word	0x08009e34
 8000fc4:	08009e38 	.word	0x08009e38
 8000fc8:	08009e3c 	.word	0x08009e3c
 8000fcc:	08009e40 	.word	0x08009e40
 8000fd0:	08009e44 	.word	0x08009e44
 8000fd4:	08009e48 	.word	0x08009e48
 8000fd8:	08009e4c 	.word	0x08009e4c
 8000fdc:	08009e50 	.word	0x08009e50
 8000fe0:	08009e54 	.word	0x08009e54
 8000fe4:	08009e58 	.word	0x08009e58
 8000fe8:	08009e5c 	.word	0x08009e5c
 8000fec:	08009e60 	.word	0x08009e60
 8000ff0:	08009e64 	.word	0x08009e64
 8000ff4:	08009e68 	.word	0x08009e68
 8000ff8:	08009d08 	.word	0x08009d08
 8000ffc:	08009e6c 	.word	0x08009e6c
 8001000:	08009e70 	.word	0x08009e70
 8001004:	08009e74 	.word	0x08009e74
 8001008:	08009e78 	.word	0x08009e78
 800100c:	08009e7c 	.word	0x08009e7c
 8001010:	08009e80 	.word	0x08009e80
 8001014:	08009e84 	.word	0x08009e84
 8001018:	08009e88 	.word	0x08009e88
 800101c:	08009e8c 	.word	0x08009e8c
 8001020:	08009d0c 	.word	0x08009d0c
 8001024:	08009d10 	.word	0x08009d10
 8001028:	08009e90 	.word	0x08009e90
 800102c:	08009d18 	.word	0x08009d18
 8001030:	08009e94 	.word	0x08009e94
 8001034:	08009d28 	.word	0x08009d28
 8001038:	08009e98 	.word	0x08009e98
 800103c:	08009d38 	.word	0x08009d38
 8001040:	08009e9c 	.word	0x08009e9c
 8001044:	08009ed4 	.word	0x08009ed4
 8001048:	08009d44 	.word	0x08009d44
 800104c:	08009ea0 	.word	0x08009ea0
 8001050:	08009d50 	.word	0x08009d50
 8001054:	08009d60 	.word	0x08009d60
 8001058:	08009d70 	.word	0x08009d70
 800105c:	08009d7c 	.word	0x08009d7c
 8001060:	08009d8c 	.word	0x08009d8c
 8001064:	08009ea4 	.word	0x08009ea4
 8001068:	08009d9c 	.word	0x08009d9c
 800106c:	08009ea8 	.word	0x08009ea8
 8001070:	08009da8 	.word	0x08009da8
 8001074:	08009db4 	.word	0x08009db4
 8001078:	08009dc0 	.word	0x08009dc0
 800107c:	08009dd0 	.word	0x08009dd0
 8001080:	08009de0 	.word	0x08009de0
 8001084:	08009dec 	.word	0x08009dec
 8001088:	08009dfc 	.word	0x08009dfc
 800108c:	08009ed8 	.word	0x08009ed8
 8001090:	08009edc 	.word	0x08009edc
 8001094:	08009ee0 	.word	0x08009ee0
 8001098:	08009ee4 	.word	0x08009ee4
 800109c:	08009ee8 	.word	0x08009ee8
 80010a0:	08009e0c 	.word	0x08009e0c
 80010a4:	08009ce0 	.word	0x08009ce0
 80010a8:	08009cf4 	.word	0x08009cf4
 80010ac:	08009eac 	.word	0x08009eac
 80010b0:	08009eb0 	.word	0x08009eb0
 80010b4:	08009eb4 	.word	0x08009eb4
  default :
    break;
 80010b8:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80010c0:	4916      	ldr	r1, [pc, #88]	; (800111c <OTM8009A_Init+0x488>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fd12 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80010c8:	4915      	ldr	r1, [pc, #84]	; (8001120 <OTM8009A_Init+0x48c>)
 80010ca:	2004      	movs	r0, #4
 80010cc:	f7ff fd0e 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80010d0:	4914      	ldr	r1, [pc, #80]	; (8001124 <OTM8009A_Init+0x490>)
 80010d2:	2004      	movs	r0, #4
 80010d4:	f7ff fd0a 	bl	8000aec <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80010d8:	4913      	ldr	r1, [pc, #76]	; (8001128 <OTM8009A_Init+0x494>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fd06 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80010e0:	4912      	ldr	r1, [pc, #72]	; (800112c <OTM8009A_Init+0x498>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fd02 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <OTM8009A_Init+0x49c>)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fcfe 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <OTM8009A_Init+0x4a0>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fcfa 	bl	8000aec <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80010f8:	490f      	ldr	r1, [pc, #60]	; (8001138 <OTM8009A_Init+0x4a4>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fcf6 	bl	8000aec <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <OTM8009A_Init+0x4a8>)
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fcf2 	bl	8000aec <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <OTM8009A_Init+0x4ac>)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fcee 	bl	8000aec <DSI_IO_WriteCmd>

  return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	08009eb8 	.word	0x08009eb8
 8001120:	08009e10 	.word	0x08009e10
 8001124:	08009e18 	.word	0x08009e18
 8001128:	08009ebc 	.word	0x08009ebc
 800112c:	08009ec0 	.word	0x08009ec0
 8001130:	08009ec4 	.word	0x08009ec4
 8001134:	08009ec8 	.word	0x08009ec8
 8001138:	08009ecc 	.word	0x08009ecc
 800113c:	08009e20 	.word	0x08009e20
 8001140:	08009ed0 	.word	0x08009ed0

08001144 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_DMA2D_Init+0x34>)
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <MX_DMA2D_Init+0x38>)
 800114c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MX_DMA2D_Init+0x34>)
 8001150:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001154:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_DMA2D_Init+0x34>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_DMA2D_Init+0x34>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_DMA2D_Init+0x34>)
 8001164:	f001 fc72 	bl	8002a4c <HAL_DMA2D_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800116e:	f001 f903 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002c0 	.word	0x200002c0
 800117c:	4002b000 	.word	0x4002b000

08001180 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_DMA2D_MspInit+0x38>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10b      	bne.n	80011aa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_DMA2D_MspInit+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <HAL_DMA2D_MspInit+0x3c>)
 8001198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <HAL_DMA2D_MspInit+0x3c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	4002b000 	.word	0x4002b000
 80011bc:	40023800 	.word	0x40023800

080011c0 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ae      	sub	sp, #184	; 0xb8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80011c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80011d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011d6:	2224      	movs	r2, #36	; 0x24
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f008 fc6e 	bl	8009abc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80011e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
 80011f0:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	226c      	movs	r2, #108	; 0x6c
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 fc5f 	bl	8009abc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80011fe:	4b65      	ldr	r3, [pc, #404]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <MX_DSIHOST_DSI_Init+0x1d8>)
 8001202:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 800120c:	2204      	movs	r2, #4
 800120e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001210:	4b60      	ldr	r3, [pc, #384]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8001216:	2314      	movs	r3, #20
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001228:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800122c:	4619      	mov	r1, r3
 800122e:	4859      	ldr	r0, [pc, #356]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001230:	f001 fefc 	bl	800302c <HAL_DSI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800123a:	f001 f89d 	bl	8002378 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001274:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001278:	4619      	mov	r1, r3
 800127a:	4846      	ldr	r0, [pc, #280]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 800127c:	f002 fbdc 	bl	8003a38 <HAL_DSI_ConfigHostTimeouts>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8001286:	f001 f877 	bl	8002378 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800128a:	231c      	movs	r3, #28
 800128c:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 800128e:	2321      	movs	r3, #33	; 0x21
 8001290:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 8001292:	230f      	movs	r3, #15
 8001294:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 8001296:	2319      	movs	r3, #25
 8001298:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80012a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012aa:	4619      	mov	r1, r3
 80012ac:	4839      	ldr	r0, [pc, #228]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 80012ae:	f002 fb59 	bl	8003964 <HAL_DSI_ConfigPhyTimer>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 80012b8:	f001 f85e 	bl	8002378 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80012bc:	2104      	movs	r1, #4
 80012be:	4835      	ldr	r0, [pc, #212]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 80012c0:	f002 fb28 	bl	8003914 <HAL_DSI_ConfigFlowControl>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 80012ca:	f001 f855 	bl	8002378 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80012ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80012d2:	4830      	ldr	r0, [pc, #192]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 80012d4:	f002 fd6e 	bl	8003db4 <HAL_DSI_SetLowPowerRXFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80012de:	f001 f84b 	bl	8002378 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	482b      	ldr	r0, [pc, #172]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 80012e6:	f002 f831 	bl	800334c <HAL_DSI_ConfigErrorMonitor>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 80012f0:	f001 f842 	bl	8002378 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80012f8:	2305      	movs	r3, #5
 80012fa:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 8001308:	f44f 7320 	mov.w	r3, #640	; 0x280
 800130c:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001312:	2304      	movs	r3, #4
 8001314:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001316:	2302      	movs	r3, #2
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 800131e:	2312      	movs	r3, #18
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 8001322:	2310      	movs	r3, #16
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 8001326:	f240 53e2 	movw	r3, #1506	; 0x5e2
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 800132c:	2304      	movs	r3, #4
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 8001330:	2302      	movs	r3, #2
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8001338:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 800136c:	f002 f8d2 	bl	8003514 <HAL_DSI_ConfigVideoMode>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 8001376:	f000 ffff 	bl	8002378 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_DSIHOST_DSI_Init+0x1d4>)
 800137e:	f002 f8a1 	bl	80034c4 <HAL_DSI_SetGenericVCID>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 8001388:	f000 fff6 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	37b8      	adds	r7, #184	; 0xb8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000318 	.word	0x20000318
 8001398:	40016c00 	.word	0x40016c00

0800139c <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_DSI_MspInit+0x38>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d10b      	bne.n	80013c6 <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_DSI_MspInit+0x3c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <HAL_DSI_MspInit+0x3c>)
 80013b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_DSI_MspInit+0x3c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40016c00 	.word	0x40016c00
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_DSI_MspDeInit+0x2c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d105      	bne.n	80013fa <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_DSI_MspDeInit+0x30>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <HAL_DSI_MspDeInit+0x30>)
 80013f4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40016c00 	.word	0x40016c00
 800140c:	40023800 	.word	0x40023800

08001410 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_FMC_Init+0x98>)
 800142a:	4a20      	ldr	r2, [pc, #128]	; (80014ac <MX_FMC_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_FMC_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_FMC_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_FMC_Init+0x98>)
 800143c:	2204      	movs	r2, #4
 800143e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_FMC_Init+0x98>)
 8001442:	2220      	movs	r2, #32
 8001444:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_FMC_Init+0x98>)
 8001448:	2240      	movs	r2, #64	; 0x40
 800144a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_FMC_Init+0x98>)
 800144e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001452:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_FMC_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_FMC_Init+0x98>)
 800145c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001460:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_FMC_Init+0x98>)
 8001464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_FMC_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001474:	2307      	movs	r3, #7
 8001476:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001478:	2304      	movs	r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800147c:	2307      	movs	r3, #7
 800147e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001480:	2303      	movs	r3, #3
 8001482:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001484:	2302      	movs	r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001488:	2302      	movs	r3, #2
 800148a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_FMC_Init+0x98>)
 8001492:	f004 fbdd 	bl	8005c50 <HAL_SDRAM_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800149c:	f000 ff6c 	bl	8002378 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000334 	.word	0x20000334
 80014ac:	a0000140 	.word	0xa0000140

080014b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d16f      	bne.n	80015ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_FMC_MspInit+0x104>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_FMC_MspInit+0x108>)
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	4a38      	ldr	r2, [pc, #224]	; (80015b8 <HAL_FMC_MspInit+0x108>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38
 80014de:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_FMC_MspInit+0x108>)
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80014ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014ee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	482d      	ldr	r0, [pc, #180]	; (80015bc <HAL_FMC_MspInit+0x10c>)
 8001506:	f002 fc83 	bl	8003e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800150a:	f248 1337 	movw	r3, #33079	; 0x8137
 800150e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151c:	230c      	movs	r3, #12
 800151e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4826      	ldr	r0, [pc, #152]	; (80015c0 <HAL_FMC_MspInit+0x110>)
 8001526:	f002 fc73 	bl	8003e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800152a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800152e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800153c:	230c      	movs	r3, #12
 800153e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <HAL_FMC_MspInit+0x114>)
 8001546:	f002 fc63 	bl	8003e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800154a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800154e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800155c:	230c      	movs	r3, #12
 800155e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <HAL_FMC_MspInit+0x118>)
 8001566:	f002 fc53 	bl	8003e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800156a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800156e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	4811      	ldr	r0, [pc, #68]	; (80015cc <HAL_FMC_MspInit+0x11c>)
 8001586:	f002 fc43 	bl	8003e10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 800158a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800158e:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <HAL_FMC_MspInit+0x120>)
 80015a6:	f002 fc33 	bl	8003e10 <HAL_GPIO_Init>
 80015aa:	e000      	b.n	80015ae <HAL_FMC_MspInit+0xfe>
    return;
 80015ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000368 	.word	0x20000368
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40021400 	.word	0x40021400
 80015d0:	40021c00 	.word	0x40021c00

080015d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015dc:	f7ff ff68 	bl	80014b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <MX_FREERTOS_Init+0x18>)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_FREERTOS_Init+0x1c>)
 80015f2:	f005 fc67 	bl	8006ec4 <osThreadNew>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <MX_FREERTOS_Init+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	0800b9a4 	.word	0x0800b9a4
 8001604:	0800160d 	.word	0x0800160d
 8001608:	2000036c 	.word	0x2000036c

0800160c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f005 fcfb 	bl	8007010 <osDelay>
 800161a:	e7fb      	b.n	8001614 <StartDefaultTask+0x8>

0800161c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b090      	sub	sp, #64	; 0x40
 8001620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4bac      	ldr	r3, [pc, #688]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4aab      	ldr	r2, [pc, #684]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4ba9      	ldr	r3, [pc, #676]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800164a:	4ba6      	ldr	r3, [pc, #664]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4aa5      	ldr	r2, [pc, #660]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a9f      	ldr	r2, [pc, #636]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	623b      	str	r3, [r7, #32]
 8001678:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800167a:	4b9a      	ldr	r3, [pc, #616]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a99      	ldr	r2, [pc, #612]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b97      	ldr	r3, [pc, #604]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b94      	ldr	r3, [pc, #592]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a93      	ldr	r2, [pc, #588]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b8e      	ldr	r3, [pc, #568]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a8d      	ldr	r2, [pc, #564]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a81      	ldr	r2, [pc, #516]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016f2:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a7b      	ldr	r2, [pc, #492]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 80016f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a75      	ldr	r2, [pc, #468]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a6f      	ldr	r2, [pc, #444]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <MX_GPIO_Init+0x2c8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800173a:	2378      	movs	r3, #120	; 0x78
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800174a:	2306      	movs	r3, #6
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	4864      	ldr	r0, [pc, #400]	; (80018e8 <MX_GPIO_Init+0x2cc>)
 8001756:	f002 fb5b 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800175a:	2304      	movs	r3, #4
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800176a:	2309      	movs	r3, #9
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	485c      	ldr	r0, [pc, #368]	; (80018e8 <MX_GPIO_Init+0x2cc>)
 8001776:	f002 fb4b 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800177a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800178c:	230b      	movs	r3, #11
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001794:	4619      	mov	r1, r3
 8001796:	4855      	ldr	r0, [pc, #340]	; (80018ec <MX_GPIO_Init+0x2d0>)
 8001798:	f002 fb3a 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800179c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a2:	2312      	movs	r3, #18
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ae:	2304      	movs	r3, #4
 80017b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b6:	4619      	mov	r1, r3
 80017b8:	484d      	ldr	r0, [pc, #308]	; (80018f0 <MX_GPIO_Init+0x2d4>)
 80017ba:	f002 fb29 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017be:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017d0:	230a      	movs	r3, #10
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	4845      	ldr	r0, [pc, #276]	; (80018f0 <MX_GPIO_Init+0x2d4>)
 80017dc:	f002 fb18 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 80017e0:	2310      	movs	r3, #16
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80017f0:	230a      	movs	r3, #10
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f8:	4619      	mov	r1, r3
 80017fa:	483d      	ldr	r0, [pc, #244]	; (80018f0 <MX_GPIO_Init+0x2d4>)
 80017fc:	f002 fb08 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001800:	23c0      	movs	r3, #192	; 0xc0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001810:	230b      	movs	r3, #11
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001818:	4619      	mov	r1, r3
 800181a:	4836      	ldr	r0, [pc, #216]	; (80018f4 <MX_GPIO_Init+0x2d8>)
 800181c:	f002 faf8 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001832:	2308      	movs	r3, #8
 8001834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183a:	4619      	mov	r1, r3
 800183c:	482e      	ldr	r0, [pc, #184]	; (80018f8 <MX_GPIO_Init+0x2dc>)
 800183e:	f002 fae7 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001842:	2340      	movs	r3, #64	; 0x40
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001852:	230a      	movs	r3, #10
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4824      	ldr	r0, [pc, #144]	; (80018f0 <MX_GPIO_Init+0x2d4>)
 800185e:	f002 fad7 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8001862:	f247 033b 	movw	r3, #28731	; 0x703b
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	4821      	ldr	r0, [pc, #132]	; (80018fc <MX_GPIO_Init+0x2e0>)
 8001878:	f002 faca 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 800187c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800188e:	2303      	movs	r3, #3
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	4619      	mov	r1, r3
 8001898:	4817      	ldr	r0, [pc, #92]	; (80018f8 <MX_GPIO_Init+0x2dc>)
 800189a:	f002 fab9 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 800189e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018b0:	2309      	movs	r3, #9
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	4619      	mov	r1, r3
 80018ba:	480f      	ldr	r0, [pc, #60]	; (80018f8 <MX_GPIO_Init+0x2dc>)
 80018bc:	f002 faa8 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d2:	2305      	movs	r3, #5
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <MX_GPIO_Init+0x2e4>)
 80018de:	f002 fa97 	bl	8003e10 <HAL_GPIO_Init>
 80018e2:	e00f      	b.n	8001904 <MX_GPIO_Init+0x2e8>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40021000 	.word	0x40021000
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40022400 	.word	0x40022400
 8001900:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001904:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001916:	4619      	mov	r1, r3
 8001918:	48bb      	ldr	r0, [pc, #748]	; (8001c08 <MX_GPIO_Init+0x5ec>)
 800191a:	f002 fa79 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 800191e:	23f8      	movs	r3, #248	; 0xf8
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	48b6      	ldr	r0, [pc, #728]	; (8001c0c <MX_GPIO_Init+0x5f0>)
 8001932:	f002 fa6d 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001948:	2307      	movs	r3, #7
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	48af      	ldr	r0, [pc, #700]	; (8001c10 <MX_GPIO_Init+0x5f4>)
 8001954:	f002 fa5c 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001958:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800196a:	230b      	movs	r3, #11
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	48a6      	ldr	r0, [pc, #664]	; (8001c10 <MX_GPIO_Init+0x5f4>)
 8001976:	f002 fa4b 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 800197a:	2330      	movs	r3, #48	; 0x30
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198a:	4619      	mov	r1, r3
 800198c:	48a1      	ldr	r0, [pc, #644]	; (8001c14 <MX_GPIO_Init+0x5f8>)
 800198e:	f002 fa3f 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80019a2:	2303      	movs	r3, #3
 80019a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	4899      	ldr	r0, [pc, #612]	; (8001c14 <MX_GPIO_Init+0x5f8>)
 80019ae:	f002 fa2f 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80019b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	2305      	movs	r3, #5
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4892      	ldr	r0, [pc, #584]	; (8001c18 <MX_GPIO_Init+0x5fc>)
 80019d0:	f002 fa1e 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80019e4:	2308      	movs	r3, #8
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4889      	ldr	r0, [pc, #548]	; (8001c14 <MX_GPIO_Init+0x5f8>)
 80019f0:	f002 fa0e 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80019f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a06:	2307      	movs	r3, #7
 8001a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4881      	ldr	r0, [pc, #516]	; (8001c18 <MX_GPIO_Init+0x5fc>)
 8001a12:	f002 f9fd 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4879      	ldr	r0, [pc, #484]	; (8001c18 <MX_GPIO_Init+0x5fc>)
 8001a34:	f002 f9ec 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	486c      	ldr	r0, [pc, #432]	; (8001c08 <MX_GPIO_Init+0x5ec>)
 8001a56:	f002 f9db 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4869      	ldr	r0, [pc, #420]	; (8001c1c <MX_GPIO_Init+0x600>)
 8001a76:	f002 f9cb 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4862      	ldr	r0, [pc, #392]	; (8001c20 <MX_GPIO_Init+0x604>)
 8001a96:	f002 f9bb 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001aaa:	2306      	movs	r3, #6
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4856      	ldr	r0, [pc, #344]	; (8001c10 <MX_GPIO_Init+0x5f4>)
 8001ab6:	f002 f9ab 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001aba:	2348      	movs	r3, #72	; 0x48
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aca:	4619      	mov	r1, r3
 8001acc:	4850      	ldr	r0, [pc, #320]	; (8001c10 <MX_GPIO_Init+0x5f4>)
 8001ace:	f002 f99f 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aea:	4619      	mov	r1, r3
 8001aec:	484d      	ldr	r0, [pc, #308]	; (8001c24 <MX_GPIO_Init+0x608>)
 8001aee:	f002 f98f 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001b02:	2303      	movs	r3, #3
 8001b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4845      	ldr	r0, [pc, #276]	; (8001c24 <MX_GPIO_Init+0x608>)
 8001b0e:	f002 f97f 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001b12:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	483f      	ldr	r0, [pc, #252]	; (8001c24 <MX_GPIO_Init+0x608>)
 8001b28:	f002 f972 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b44:	4619      	mov	r1, r3
 8001b46:	4835      	ldr	r0, [pc, #212]	; (8001c1c <MX_GPIO_Init+0x600>)
 8001b48:	f002 f962 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b4c:	2332      	movs	r3, #50	; 0x32
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b5c:	230b      	movs	r3, #11
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b64:	4619      	mov	r1, r3
 8001b66:	482d      	ldr	r0, [pc, #180]	; (8001c1c <MX_GPIO_Init+0x600>)
 8001b68:	f002 f952 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b70:	2303      	movs	r3, #3
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4827      	ldr	r0, [pc, #156]	; (8001c1c <MX_GPIO_Init+0x600>)
 8001b80:	f002 f946 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001b84:	2304      	movs	r3, #4
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b94:	2309      	movs	r3, #9
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4822      	ldr	r0, [pc, #136]	; (8001c28 <MX_GPIO_Init+0x60c>)
 8001ba0:	f002 f936 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_GPIO_Init+0x5f8>)
 8001bc2:	f002 f925 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bc6:	2386      	movs	r3, #134	; 0x86
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd6:	230b      	movs	r3, #11
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	480d      	ldr	r0, [pc, #52]	; (8001c18 <MX_GPIO_Init+0x5fc>)
 8001be2:	f002 f915 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <MX_GPIO_Init+0x5fc>)
 8001bfc:	f002 f908 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001c00:	2350      	movs	r3, #80	; 0x50
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c04:	e012      	b.n	8001c2c <MX_GPIO_Init+0x610>
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40022800 	.word	0x40022800
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40021400 	.word	0x40021400
 8001c28:	40020400 	.word	0x40020400
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	482a      	ldr	r0, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0x6c8>)
 8001c3c:	f002 f8e8 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c52:	230a      	movs	r3, #10
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <MX_GPIO_Init+0x6cc>)
 8001c5e:	f002 f8d7 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c72:	4619      	mov	r1, r3
 8001c74:	481d      	ldr	r0, [pc, #116]	; (8001cec <MX_GPIO_Init+0x6d0>)
 8001c76:	f002 f8cb 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001c7a:	2328      	movs	r3, #40	; 0x28
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	4619      	mov	r1, r3
 8001c94:	4813      	ldr	r0, [pc, #76]	; (8001ce4 <MX_GPIO_Init+0x6c8>)
 8001c96:	f002 f8bb 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001c9a:	2340      	movs	r3, #64	; 0x40
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001caa:	2309      	movs	r3, #9
 8001cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_GPIO_Init+0x6d0>)
 8001cb6:	f002 f8ab 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001cba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ccc:	2305      	movs	r3, #5
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_GPIO_Init+0x6d4>)
 8001cd8:	f002 f89a 	bl	8003e10 <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3740      	adds	r7, #64	; 0x40
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020c00 	.word	0x40020c00
 8001cec:	40021c00 	.word	0x40021c00
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <MX_I2C4_Init+0x78>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d00:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <MX_I2C4_Init+0x7c>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d30:	f002 fa34 	bl	800419c <HAL_I2C_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001d3a:	f000 fb1d 	bl	8002378 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d42:	f002 fabb 	bl	80042bc <HAL_I2CEx_ConfigAnalogFilter>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001d4c:	f000 fb14 	bl	8002378 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_I2C4_Init+0x74>)
 8001d54:	f002 fafd 	bl	8004352 <HAL_I2CEx_ConfigDigitalFilter>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001d5e:	f000 fb0b 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000370 	.word	0x20000370
 8001d6c:	40006000 	.word	0x40006000
 8001d70:	00c0eaff 	.word	0x00c0eaff

08001d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0ae      	sub	sp, #184	; 0xb8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2290      	movs	r2, #144	; 0x90
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f007 fe91 	bl	8009abc <memset>
  if(i2cHandle->Instance==I2C4)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_I2C_MspInit+0xf8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d15e      	bne.n	8001e62 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fb23 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001dc0:	f000 fada 	bl	8002378 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a23      	ldr	r2, [pc, #140]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001e0c:	230b      	movs	r3, #11
 8001e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4816      	ldr	r0, [pc, #88]	; (8001e74 <HAL_I2C_MspInit+0x100>)
 8001e1a:	f001 fff9 	bl	8003e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e26:	2312      	movs	r3, #18
 8001e28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <HAL_I2C_MspInit+0x104>)
 8001e46:	f001 ffe3 	bl	8003e10 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001e50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_I2C_MspInit+0xfc>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001e62:	bf00      	nop
 8001e64:	37b8      	adds	r7, #184	; 0xb8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40006000 	.word	0x40006000
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40020c00 	.word	0x40020c00

08001e7c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b09a      	sub	sp, #104	; 0x68
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e86:	2234      	movs	r2, #52	; 0x34
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f007 fe16 	bl	8009abc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2234      	movs	r2, #52	; 0x34
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f007 fe10 	bl	8009abc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001e9e:	4a4f      	ldr	r2, [pc, #316]	; (8001fdc <MX_LTDC_Init+0x160>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001eae:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001ec0:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ec8:	220e      	movs	r2, #14
 8001eca:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ece:	2205      	movs	r2, #5
 8001ed0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001ed2:	4b41      	ldr	r3, [pc, #260]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ed4:	f240 228e 	movw	r2, #654	; 0x28e
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001edc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ee4:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001eec:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001f0c:	f002 fa6e 	bl	80043ec <HAL_LTDC_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001f16:	f000 fa2f 	bl	8002378 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001f68:	f002 fb10 	bl	800458c <HAL_LTDC_ConfigLayer>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001f72:	f000 fa01 	bl	8002378 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f96:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f98:	2305      	movs	r3, #5
 8001f9a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_LTDC_Init+0x15c>)
 8001fc2:	f002 fae3 	bl	800458c <HAL_LTDC_ConfigLayer>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001fcc:	f000 f9d4 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3768      	adds	r7, #104	; 0x68
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200003c4 	.word	0x200003c4
 8001fdc:	40016800 	.word	0x40016800

08001fe0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0a8      	sub	sp, #160	; 0xa0
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2290      	movs	r2, #144	; 0x90
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f007 fd63 	bl	8009abc <memset>
  if(ltdcHandle->Instance==LTDC)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_LTDC_MspInit+0x74>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d124      	bne.n	800204a <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002000:	2308      	movs	r3, #8
 8002002:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002004:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800200e:	2303      	movs	r3, #3
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002016:	2301      	movs	r3, #1
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800201a:	2300      	movs	r3, #0
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4618      	mov	r0, r3
 8002024:	f003 f9ec 	bl	8005400 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 800202e:	f000 f9a3 	bl	8002378 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_LTDC_MspInit+0x78>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_LTDC_MspInit+0x78>)
 8002038:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_LTDC_MspInit+0x78>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800204a:	bf00      	nop
 800204c:	37a0      	adds	r7, #160	; 0xa0
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40016800 	.word	0x40016800
 8002058:	40023800 	.word	0x40023800

0800205c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002060:	f3bf 8f4f 	dsb	sy
}
 8002064:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002066:	f3bf 8f6f 	isb	sy
}
 800206a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800206c:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <SCB_EnableICache+0x48>)
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002074:	f3bf 8f4f 	dsb	sy
}
 8002078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800207a:	f3bf 8f6f 	isb	sy
}
 800207e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SCB_EnableICache+0x48>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SCB_EnableICache+0x48>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800208c:	f3bf 8f4f 	dsb	sy
}
 8002090:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002092:	f3bf 8f6f 	isb	sy
}
 8002096:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80020ae:	4b1f      	ldr	r3, [pc, #124]	; (800212c <SCB_EnableDCache+0x84>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020b6:	f3bf 8f4f 	dsb	sy
}
 80020ba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <SCB_EnableDCache+0x84>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0b5b      	lsrs	r3, r3, #13
 80020c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020cc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80020e0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020e6:	4911      	ldr	r1, [pc, #68]	; (800212c <SCB_EnableDCache+0x84>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	60ba      	str	r2, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ef      	bne.n	80020d8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e5a      	subs	r2, r3, #1
 80020fc:	60fa      	str	r2, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e5      	bne.n	80020ce <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8002102:	f3bf 8f4f 	dsb	sy
}
 8002106:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <SCB_EnableDCache+0x84>)
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <SCB_EnableDCache+0x84>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002114:	f3bf 8f4f 	dsb	sy
}
 8002118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800211a:	f3bf 8f6f 	isb	sy
}
 800211e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002134:	f7ff ff92 	bl	800205c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002138:	f7ff ffb6 	bl	80020a8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213c:	f000 fb4a 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002140:	f000 f836 	bl	80021b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002144:	f7ff fa6a 	bl	800161c <MX_GPIO_Init>
  MX_FMC_Init();
 8002148:	f7ff f962 	bl	8001410 <MX_FMC_Init>
  MX_I2C4_Init();
 800214c:	f7ff fdd2 	bl	8001cf4 <MX_I2C4_Init>
  MX_TIM3_Init();
 8002150:	f000 fa64 	bl	800261c <MX_TIM3_Init>
  MX_DMA2D_Init();
 8002154:	f7fe fff6 	bl	8001144 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8002158:	f7ff f832 	bl	80011c0 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 800215c:	f7ff fe8e 	bl	8001e7c <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 8002160:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002164:	f000 f896 	bl	8002294 <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 8002168:	f7fe f9e8 	bl	800053c <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800216c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe fb7d 	bl	8000870 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8002176:	2001      	movs	r0, #1
 8002178:	f7fe fbda 	bl	8000930 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800217c:	480b      	ldr	r0, [pc, #44]	; (80021ac <main+0x7c>)
 800217e:	f7fe fc19 	bl	80009b4 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_BLACK);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 8002182:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002186:	f7fe fc2f 	bl	80009e8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800218a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800218e:	f7fe fbf7 	bl	8000980 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002196:	f7fe fbdb 	bl	8000950 <BSP_LCD_SetTextColor>

  freeRTOS_user_init();
 800219a:	f000 f8f3 	bl	8002384 <freeRTOS_user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800219e:	f004 fe27 	bl	8006df0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80021a2:	f7ff fa21 	bl	80015e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021a6:	f004 fe57 	bl	8006e58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <main+0x7a>
 80021ac:	20000008 	.word	0x20000008

080021b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b094      	sub	sp, #80	; 0x50
 80021b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	2234      	movs	r2, #52	; 0x34
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f007 fc7c 	bl	8009abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021d4:	f002 fc02 	bl	80049dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <SystemClock_Config+0xdc>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4a2b      	ldr	r2, [pc, #172]	; (800228c <SystemClock_Config+0xdc>)
 80021de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	; 0x40
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <SystemClock_Config+0xdc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <SystemClock_Config+0xe0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <SystemClock_Config+0xe0>)
 80021f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <SystemClock_Config+0xe0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800220c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002210:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002212:	2302      	movs	r3, #2
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800221c:	2319      	movs	r3, #25
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002220:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002224:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002226:	2302      	movs	r3, #2
 8002228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800222a:	2304      	movs	r3, #4
 800222c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 800222e:	2307      	movs	r3, #7
 8002230:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 031c 	add.w	r3, r7, #28
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fc30 	bl	8004a9c <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002242:	f000 f899 	bl	8002378 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002246:	f002 fbd9 	bl	80049fc <HAL_PWREx_EnableOverDrive>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002250:	f000 f892 	bl	8002378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002254:	230f      	movs	r3, #15
 8002256:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002258:	2302      	movs	r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002264:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	2106      	movs	r1, #6
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fec0 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800227e:	f000 f87b 	bl	8002378 <Error_Handler>
  }
}
 8002282:	bf00      	nop
 8002284:	3750      	adds	r7, #80	; 0x50
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40007000 	.word	0x40007000

08002294 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a8:	2210      	movs	r2, #16
 80022aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80022b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022bc:	4923      	ldr	r1, [pc, #140]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022be:	4824      	ldr	r0, [pc, #144]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c0:	f003 fcfa 	bl	8005cb8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80022c4:	2001      	movs	r0, #1
 80022c6:	f000 fabb 	bl	8002840 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d2:	2210      	movs	r2, #16
 80022d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d8:	2201      	movs	r2, #1
 80022da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80022e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e6:	4919      	ldr	r1, [pc, #100]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022ea:	f003 fce5 	bl	8005cb8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f0:	2203      	movs	r2, #3
 80022f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f6:	2210      	movs	r2, #16
 80022f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fc:	2208      	movs	r2, #8
 80022fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230a:	4910      	ldr	r1, [pc, #64]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230c:	4810      	ldr	r0, [pc, #64]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230e:	f003 fcd3 	bl	8005cb8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002312:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002316:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	2204      	movs	r2, #4
 800231c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002320:	2210      	movs	r2, #16
 8002322:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002326:	2201      	movs	r2, #1
 8002328:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002338:	f003 fcbe 	bl	8005cb8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4804      	ldr	r0, [pc, #16]	; (8002350 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002340:	f003 fcef 	bl	8005d22 <HAL_SDRAM_ProgramRefreshRate>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000046c 	.word	0x2000046c
 8002350:	20000334 	.word	0x20000334

08002354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002366:	f000 fa4b 	bl	8002800 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40001000 	.word	0x40001000

08002378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <freeRTOS_user_init>:
/* Functions definition ------------------------------------------------------*/
/**
  * @brief Create the FreeRTOS objects and tasks.
  * @return true if the tasks are created, false otherwise.
  */
void freeRTOS_user_init(void){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af02      	add	r7, sp, #8
	bool retval = true;
 800238a:	2301      	movs	r3, #1
 800238c:	71fb      	strb	r3, [r7, #7]

	lcd_mut = xSemaphoreCreateMutex();			//Create mutex (LCD access)
 800238e:	2001      	movs	r0, #1
 8002390:	f005 f8bf 	bl	8007512 <xQueueCreateMutex>
 8002394:	4603      	mov	r3, r0
 8002396:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <freeRTOS_user_init+0x50>)
 8002398:	6013      	str	r3, [r2, #0]
	if(lcd_mut == NULL)
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <freeRTOS_user_init+0x50>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <freeRTOS_user_init+0x22>
		retval = false;
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate( task_draw_fct,		//Task function
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <freeRTOS_user_init+0x54>)
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2301      	movs	r3, #1
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <freeRTOS_user_init+0x58>)
 80023b6:	480a      	ldr	r0, [pc, #40]	; (80023e0 <freeRTOS_user_init+0x5c>)
 80023b8:	f005 fd21 	bl	8007dfe <xTaskCreate>
 80023bc:	4602      	mov	r2, r0
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf14      	ite	ne
 80023c6:	2301      	movne	r3, #1
 80023c8:	2300      	moveq	r3, #0
 80023ca:	71fb      	strb	r3, [r7, #7]
				"Task draw",					//Task function comment
				256,							//Task stack dimension (1kB)
				NULL,							//Task parameter
				1,								//Task priority
				&task_draw_handle );			//Task handle
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000480 	.word	0x20000480
 80023d8:	2000047c 	.word	0x2000047c
 80023dc:	08009cb4 	.word	0x08009cb4
 80023e0:	080023e5 	.word	0x080023e5

080023e4 <task_draw_fct>:

static void task_draw_fct( void *pvParameters ){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]

	uint16_t x = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	81fb      	strh	r3, [r7, #14]
	uint16_t y = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	81bb      	strh	r3, [r7, #12]
	uint16_t gap = 10;
 80023f4:	230a      	movs	r3, #10
 80023f6:	817b      	strh	r3, [r7, #10]

	while(1){
		draw_filled_square(x, y, CUBE_SIDE_LEN, CUBE_SIDE_LEN);
 80023f8:	89b9      	ldrh	r1, [r7, #12]
 80023fa:	89f8      	ldrh	r0, [r7, #14]
 80023fc:	2314      	movs	r3, #20
 80023fe:	2214      	movs	r2, #20
 8002400:	f000 f81a 	bl	8002438 <draw_filled_square>

		if(x + gap + CUBE_SIDE_LEN < DISP_X_SIZE){
 8002404:	89fa      	ldrh	r2, [r7, #14]
 8002406:	897b      	ldrh	r3, [r7, #10]
 8002408:	4413      	add	r3, r2
 800240a:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 800240e:	da06      	bge.n	800241e <task_draw_fct+0x3a>
			x += gap + CUBE_SIDE_LEN;
 8002410:	897a      	ldrh	r2, [r7, #10]
 8002412:	89fb      	ldrh	r3, [r7, #14]
 8002414:	4413      	add	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	3314      	adds	r3, #20
 800241a:	81fb      	strh	r3, [r7, #14]
 800241c:	e007      	b.n	800242e <task_draw_fct+0x4a>
		}else{
			x = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	81fb      	strh	r3, [r7, #14]
			y += gap + CUBE_SIDE_LEN;
 8002422:	897a      	ldrh	r2, [r7, #10]
 8002424:	89bb      	ldrh	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	3314      	adds	r3, #20
 800242c:	81bb      	strh	r3, [r7, #12]
		}

		vTaskDelay(pdMS_TO_TICKS(500));
 800242e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002432:	f005 fe41 	bl	80080b8 <vTaskDelay>
		draw_filled_square(x, y, CUBE_SIDE_LEN, CUBE_SIDE_LEN);
 8002436:	e7df      	b.n	80023f8 <task_draw_fct+0x14>

08002438 <draw_filled_square>:
	}
}

static void draw_filled_square(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4604      	mov	r4, r0
 8002440:	4608      	mov	r0, r1
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	80fb      	strh	r3, [r7, #6]
 800244a:	4603      	mov	r3, r0
 800244c:	80bb      	strh	r3, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
 8002452:	4613      	mov	r3, r2
 8002454:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(COLOR_C);	//Set border color
 8002456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800245a:	f7fe fa79 	bl	8000950 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, width, height); //Draw the circle border outline
 800245e:	883b      	ldrh	r3, [r7, #0]
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	88b9      	ldrh	r1, [r7, #4]
 8002464:	88f8      	ldrh	r0, [r7, #6]
 8002466:	f7fe fae7 	bl	8000a38 <BSP_LCD_FillRect>
	//BSP_LCD_DrawCircle(x, y, r);
	//BSP_LCD_SetTextColor(COLOR_T);		//Set the filling color
	//BSP_LCD_FillCircle(x, y, r-1);	//Draw the filled circle
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}
	...

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_MspInit+0x4c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	210f      	movs	r1, #15
 80024ae:	f06f 0001 	mvn.w	r0, #1
 80024b2:	f000 faa1 	bl	80029f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_InitTick+0xe0>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	4a32      	ldr	r2, [pc, #200]	; (80025a4 <HAL_InitTick+0xe0>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6413      	str	r3, [r2, #64]	; 0x40
 80024e0:	4b30      	ldr	r3, [pc, #192]	; (80025a4 <HAL_InitTick+0xe0>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ec:	f107 0210 	add.w	r2, r7, #16
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 ff50 	bl	800539c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002506:	f002 ff35 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 800250a:	6378      	str	r0, [r7, #52]	; 0x34
 800250c:	e004      	b.n	8002518 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800250e:	f002 ff31 	bl	8005374 <HAL_RCC_GetPCLK1Freq>
 8002512:	4603      	mov	r3, r0
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251a:	4a23      	ldr	r2, [pc, #140]	; (80025a8 <HAL_InitTick+0xe4>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9b      	lsrs	r3, r3, #18
 8002522:	3b01      	subs	r3, #1
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002526:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_InitTick+0xe8>)
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_InitTick+0xec>)
 800252a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_InitTick+0xe8>)
 800252e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002532:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <HAL_InitTick+0xe8>)
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_InitTick+0xe8>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_InitTick+0xe8>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_InitTick+0xe8>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800254c:	4817      	ldr	r0, [pc, #92]	; (80025ac <HAL_InitTick+0xe8>)
 800254e:	f003 fc10 	bl	8005d72 <HAL_TIM_Base_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800255c:	2b00      	cmp	r3, #0
 800255e:	d11b      	bne.n	8002598 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002560:	4812      	ldr	r0, [pc, #72]	; (80025ac <HAL_InitTick+0xe8>)
 8002562:	f003 fc67 	bl	8005e34 <HAL_TIM_Base_Start_IT>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800256c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002570:	2b00      	cmp	r3, #0
 8002572:	d111      	bne.n	8002598 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002574:	2036      	movs	r0, #54	; 0x36
 8002576:	f000 fa5b 	bl	8002a30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b0f      	cmp	r3, #15
 800257e:	d808      	bhi.n	8002592 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002580:	2200      	movs	r2, #0
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	2036      	movs	r0, #54	; 0x36
 8002586:	f000 fa37 	bl	80029f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <HAL_InitTick+0xf0>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e002      	b.n	8002598 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800259c:	4618      	mov	r0, r3
 800259e:	3738      	adds	r7, #56	; 0x38
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	20000484 	.word	0x20000484
 80025b0:	40001000 	.word	0x40001000
 80025b4:	20000014 	.word	0x20000014

080025b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <NMI_Handler+0x4>

080025be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <HardFault_Handler+0x4>

080025c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <MemManage_Handler+0x4>

080025ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ce:	e7fe      	b.n	80025ce <BusFault_Handler+0x4>

080025d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <UsageFault_Handler+0x4>

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <TIM6_DAC_IRQHandler+0x10>)
 80025ea:	f003 fcf2 	bl	8005fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000484 	.word	0x20000484

080025f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800262e:	463b      	mov	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
 800263c:	615a      	str	r2, [r3, #20]
 800263e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <MX_TIM3_Init+0xb0>)
 8002644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002648:	2200      	movs	r2, #0
 800264a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <MX_TIM3_Init+0xac>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002658:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <MX_TIM3_Init+0xac>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002666:	4818      	ldr	r0, [pc, #96]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002668:	f003 fc5c 	bl	8005f24 <HAL_TIM_PWM_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002672:	f7ff fe81 	bl	8002378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4810      	ldr	r0, [pc, #64]	; (80026c8 <MX_TIM3_Init+0xac>)
 8002686:	f004 f9fd 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002690:	f7ff fe72 	bl	8002378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002694:	2360      	movs	r3, #96	; 0x60
 8002696:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026a4:	463b      	mov	r3, r7
 80026a6:	2208      	movs	r2, #8
 80026a8:	4619      	mov	r1, r3
 80026aa:	4807      	ldr	r0, [pc, #28]	; (80026c8 <MX_TIM3_Init+0xac>)
 80026ac:	f003 fdb0 	bl	8006210 <HAL_TIM_PWM_ConfigChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80026b6:	f7ff fe5f 	bl	8002378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ba:	4803      	ldr	r0, [pc, #12]	; (80026c8 <MX_TIM3_Init+0xac>)
 80026bc:	f000 f828 	bl	8002710 <HAL_TIM_MspPostInit>

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	; 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200004d0 	.word	0x200004d0
 80026cc:	40000400 	.word	0x40000400

080026d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_TIM_PWM_MspInit+0x38>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10b      	bne.n	80026fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <HAL_TIM_PWM_MspInit+0x3c>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40000400 	.word	0x40000400
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_TIM_MspPostInit+0x64>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d11c      	bne.n	800276c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_TIM_MspPostInit+0x68>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_TIM_MspPostInit+0x68>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_TIM_MspPostInit+0x68>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800274a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275c:	2302      	movs	r3, #2
 800275e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4619      	mov	r1, r3
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_TIM_MspPostInit+0x6c>)
 8002768:	f001 fb52 	bl	8003e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800
 800277c:	40020800 	.word	0x40020800

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002784:	480d      	ldr	r0, [pc, #52]	; (80027bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800279c:	4c0b      	ldr	r4, [pc, #44]	; (80027cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027aa:	f7ff ff25 	bl	80025f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f007 f9e3 	bl	8009b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff fcbd 	bl	8002130 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027b8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027c4:	0800b9f0 	.word	0x0800b9f0
  ldr r2, =_sbss
 80027c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80027cc:	20005040 	.word	0x20005040

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_Init+0x28>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_Init+0x28>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e4:	2003      	movs	r0, #3
 80027e6:	f000 f8fc 	bl	80029e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ea:	200f      	movs	r0, #15
 80027ec:	f7ff fe6a 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f0:	f7ff fe40 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023c00 	.word	0x40023c00

08002800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_IncTick+0x20>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_IncTick+0x24>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000018 	.word	0x20000018
 8002824:	2000051c 	.word	0x2000051c

08002828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return uwTick;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_GetTick+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000051c 	.word	0x2000051c

08002840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff ffee 	bl	8002828 <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d005      	beq.n	8002866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_Delay+0x44>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002866:	bf00      	nop
 8002868:	f7ff ffde 	bl	8002828 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	d8f7      	bhi.n	8002868 <HAL_Delay+0x28>
  {
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000018 	.word	0x20000018

08002888 <__NVIC_SetPriorityGrouping>:
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a4:	4013      	ands	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <__NVIC_SetPriorityGrouping+0x44>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x40>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00
 80028cc:	05fa0000 	.word	0x05fa0000

080028d0 <__NVIC_GetPriorityGrouping>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d4:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <__NVIC_GetPriorityGrouping+0x18>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	f003 0307 	and.w	r3, r3, #7
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_EnableIRQ>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	db0b      	blt.n	8002916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4907      	ldr	r1, [pc, #28]	; (8002924 <__NVIC_EnableIRQ+0x38>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	2001      	movs	r0, #1
 800290e:	fa00 f202 	lsl.w	r2, r0, r2
 8002912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000e100 	.word	0xe000e100

08002928 <__NVIC_SetPriority>:
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002938:	2b00      	cmp	r3, #0
 800293a:	db0a      	blt.n	8002952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	490c      	ldr	r1, [pc, #48]	; (8002974 <__NVIC_SetPriority+0x4c>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	0112      	lsls	r2, r2, #4
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	440b      	add	r3, r1
 800294c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002950:	e00a      	b.n	8002968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4908      	ldr	r1, [pc, #32]	; (8002978 <__NVIC_SetPriority+0x50>)
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	3b04      	subs	r3, #4
 8002960:	0112      	lsls	r2, r2, #4
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	440b      	add	r3, r1
 8002966:	761a      	strb	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <NVIC_EncodePriority>:
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f1c3 0307 	rsb	r3, r3, #7
 8002996:	2b04      	cmp	r3, #4
 8002998:	bf28      	it	cs
 800299a:	2304      	movcs	r3, #4
 800299c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3304      	adds	r3, #4
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d902      	bls.n	80029ac <NVIC_EncodePriority+0x30>
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3b03      	subs	r3, #3
 80029aa:	e000      	b.n	80029ae <NVIC_EncodePriority+0x32>
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	401a      	ands	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	4313      	orrs	r3, r2
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3724      	adds	r7, #36	; 0x24
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ff4c 	bl	8002888 <__NVIC_SetPriorityGrouping>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0a:	f7ff ff61 	bl	80028d0 <__NVIC_GetPriorityGrouping>
 8002a0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	6978      	ldr	r0, [r7, #20]
 8002a16:	f7ff ffb1 	bl	800297c <NVIC_EncodePriority>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff80 	bl	8002928 <__NVIC_SetPriority>
}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ff54 	bl	80028ec <__NVIC_EnableIRQ>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e049      	b.n	8002af2 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fb84 	bl	8001180 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	f023 0107 	bic.w	r1, r3, #7
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_DMA2D_Init+0xb0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d1      	ldr	r1, [r2, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	051a      	lsls	r2, r3, #20
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	ffffc000 	.word	0xffffc000

08002b00 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_DMA2D_Start+0x1c>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e018      	b.n	8002b4e <HAL_DMA2D_Start+0x4e>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f994 	bl	8002e64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d056      	beq.n	8002c20 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7ff fe59 	bl	8002828 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002b78:	e04b      	b.n	8002c12 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	f043 0202 	orr.w	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2221      	movs	r2, #33	; 0x21
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0a5      	b.n	8002d20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bda:	d01a      	beq.n	8002c12 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bdc:	f7ff fe24 	bl	8002828 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <HAL_DMA2D_PollForTransfer+0x9c>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2203      	movs	r2, #3
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e086      	b.n	8002d20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ac      	beq.n	8002b7a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d061      	beq.n	8002d06 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c42:	f7ff fdf1 	bl	8002828 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002c48:	e056      	b.n	8002cf8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02e      	beq.n	8002cba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	f043 0202 	orr.w	r2, r3, #2
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2229      	movs	r2, #41	; 0x29
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e032      	b.n	8002d20 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc0:	d01a      	beq.n	8002cf8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff fdb1 	bl	8002828 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <HAL_DMA2D_PollForTransfer+0x182>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10f      	bne.n	8002cf8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e013      	b.n	8002d20 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0a1      	beq.n	8002c4a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2212      	movs	r2, #18
 8002d0c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA2D_ConfigLayer+0x20>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e084      	b.n	8002e52 <HAL_DMA2D_ConfigLayer+0x12a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	3320      	adds	r3, #32
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d7c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_DMA2D_ConfigLayer+0x138>)
 8002d8a:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b0a      	cmp	r3, #10
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA2D_ConfigLayer+0x74>
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b09      	cmp	r3, #9
 8002d9a:	d107      	bne.n	8002dac <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e005      	b.n	8002db8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d120      	bne.n	8002e00 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	ea02 0103 	and.w	r1, r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	6812      	ldr	r2, [r2, #0]
 8002dde:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA2D_ConfigLayer+0xc8>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b09      	cmp	r3, #9
 8002dee:	d127      	bne.n	8002e40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28
 8002dfe:	e01f      	b.n	8002e40 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	ea02 0103 	and.w	r1, r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d003      	beq.n	8002e32 <HAL_DMA2D_ConfigLayer+0x10a>
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d106      	bne.n	8002e40 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e3e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	ff33000f 	.word	0xff33000f

08002e64 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b08b      	sub	sp, #44	; 0x2c
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	431a      	orrs	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e9c:	d174      	bne.n	8002f88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ea4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002eac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002eb4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d108      	bne.n	8002ed6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed4:	e053      	b.n	8002f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d106      	bne.n	8002eec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	e048      	b.n	8002f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d111      	bne.n	8002f18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	0cdb      	lsrs	r3, r3, #19
 8002ef8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	0a9b      	lsrs	r3, r3, #10
 8002efe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	08db      	lsrs	r3, r3, #3
 8002f04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	02db      	lsls	r3, r3, #11
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e032      	b.n	8002f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d117      	bne.n	8002f50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	0fdb      	lsrs	r3, r3, #31
 8002f24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	0cdb      	lsrs	r3, r3, #19
 8002f2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	0adb      	lsrs	r3, r3, #11
 8002f30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	431a      	orrs	r2, r3
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	03db      	lsls	r3, r3, #15
 8002f46:	4313      	orrs	r3, r2
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4e:	e016      	b.n	8002f7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	0f1b      	lsrs	r3, r3, #28
 8002f54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	0b1b      	lsrs	r3, r3, #12
 8002f60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	031b      	lsls	r3, r3, #12
 8002f76:	4313      	orrs	r3, r2
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002f86:	e003      	b.n	8002f90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
}
 8002f90:	bf00      	nop
 8002f92:	372c      	adds	r7, #44	; 0x2c
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	019a      	lsls	r2, r3, #6
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7ff fc24 	bl	8002828 <HAL_GetTick>
 8002fe0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002fe4:	f7ff fc20 	bl	8002828 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff2:	d901      	bls.n	8002ff8 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e015      	b.n	8003024 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	019a      	lsls	r2, r3, #6
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	431a      	orrs	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	ea42 0103 	orr.w	r1, r2, r3
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e109      	b.n	8003254 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7c5b      	ldrb	r3, [r3, #17]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe f9a6 	bl	800139c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2203      	movs	r2, #3
 8003054:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800306a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800307e:	f7ff fbd3 	bl	8002828 <HAL_GetTick>
 8003082:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003084:	e009      	b.n	800309a <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003086:	f7ff fbcf 	bl	8002828 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003094:	d901      	bls.n	800309a <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0dc      	b.n	8003254 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80030a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0ed      	beq.n	8003086 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b69      	ldr	r3, [pc, #420]	; (800325c <HAL_DSI_Init+0x230>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80030d2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80030da:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800310e:	2001      	movs	r0, #1
 8003110:	f7ff fb96 	bl	8002840 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003114:	f7ff fb88 	bl	8002828 <HAL_GetTick>
 8003118:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800311a:	e009      	b.n	8003130 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800311c:	f7ff fb84 	bl	8002828 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312a:	d901      	bls.n	8003130 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e091      	b.n	8003254 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ed      	beq.n	800311c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0206 	orr.w	r2, r2, #6
 8003150:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0203 	bic.w	r2, r2, #3
 8003164:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0203 	bic.w	r2, r2, #3
 8003192:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ba:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_DSI_Init+0x1b0>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	e000      	b.n	80031de <HAL_DSI_Init+0x1b2>
 80031dc:	2301      	movs	r3, #1
 80031de:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_DSI_Init+0x234>)
 80031e4:	fb03 f202 	mul.w	r2, r3, r2
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	409a      	lsls	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003214:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	430a      	orrs	r2, r1
 8003228:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	fffc8603 	.word	0xfffc8603
 8003260:	003d0900 	.word	0x003d0900

08003264 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e066      	b.n	8003344 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0208 	bic.w	r2, r2, #8
 8003290:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0206 	bic.w	r2, r2, #6
 80032d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003316:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe f856 	bl	80013dc <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7c1b      	ldrb	r3, [r3, #16]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_DSI_ConfigErrorMonitor+0x16>
 800335e:	2302      	movs	r3, #2
 8003360:	e0aa      	b.n	80034b8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800339c:	430b      	orrs	r3, r1
 800339e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80033bc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0202 	orr.w	r2, r2, #2
 80033f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 020c 	orr.w	r2, r2, #12
 8003416:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0210 	orr.w	r2, r2, #16
 8003434:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003470:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800348e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80034ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7c1b      	ldrb	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_DSI_SetGenericVCID+0x16>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e016      	b.n	8003508 <HAL_DSI_SetGenericVCID+0x44>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0203 	bic.w	r2, r2, #3
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7c1b      	ldrb	r3, [r3, #16]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_DSI_ConfigVideoMode+0x16>
 8003526:	2302      	movs	r3, #2
 8003528:	e1ee      	b.n	8003908 <HAL_DSI_ConfigVideoMode+0x3f4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0203 	bic.w	r2, r2, #3
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4b8b      	ldr	r3, [pc, #556]	; (80037b0 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003582:	400b      	ands	r3, r1
 8003584:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b84      	ldr	r3, [pc, #528]	; (80037b4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0203 	bic.w	r2, r2, #3
 80035ea:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68d9      	ldr	r1, [r3, #12]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0207 	bic.w	r2, r2, #7
 800360c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6959      	ldr	r1, [r3, #20]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	431a      	orrs	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 020f 	bic.w	r2, r2, #15
 800363a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 020e 	bic.w	r2, r2, #14
 800365e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	005a      	lsls	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d110      	bne.n	80036a4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003690:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6919      	ldr	r1, [r3, #16]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80036b0:	400b      	ands	r3, r1
 80036b2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_DSI_ConfigVideoMode+0x2a8>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003716:	400b      	ands	r3, r1
 8003718:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003738:	400b      	ands	r3, r1
 800373a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800375a:	400b      	ands	r3, r1
 800375c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_DSI_ConfigVideoMode+0x29c>)
 800377c:	400b      	ands	r3, r1
 800377e:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ac:	e00a      	b.n	80037c4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80037ae:	bf00      	nop
 80037b0:	ffffc000 	.word	0xffffc000
 80037b4:	ffffe000 	.word	0xffffe000
 80037b8:	fffff000 	.word	0xfffff000
 80037bc:	ffff8000 	.word	0xffff8000
 80037c0:	fffffc00 	.word	0xfffffc00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80037da:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	041a      	lsls	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037fe:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7c1b      	ldrb	r3, [r3, #16]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d101      	bne.n	800392a <HAL_DSI_ConfigFlowControl+0x16>
 8003926:	2302      	movs	r3, #2
 8003928:	e016      	b.n	8003958 <HAL_DSI_ConfigFlowControl+0x44>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 021f 	bic.w	r2, r2, #31
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7c1b      	ldrb	r3, [r3, #16]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_DSI_ConfigPhyTimer+0x16>
 8003976:	2302      	movs	r3, #2
 8003978:	e058      	b.n	8003a2c <HAL_DSI_ConfigPhyTimer+0xc8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4293      	cmp	r3, r2
 800398a:	bf38      	it	cc
 800398c:	4613      	movcc	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80039a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	041a      	lsls	r2, r3, #16
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80039ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7c1b      	ldrb	r3, [r3, #16]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_DSI_ConfigHostTimeouts+0x16>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0b4      	b.n	8003bb8 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003a62:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6899      	ldr	r1, [r3, #8]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b292      	uxth	r2, r2
 8003a84:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003ac8:	400b      	ands	r3, r1
 8003aca:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003aec:	400b      	ands	r3, r1
 8003aee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b16:	400b      	ands	r3, r1
 8003b18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b6a:	400b      	ands	r3, r1
 8003b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003b94:	400b      	ands	r3, r1
 8003b96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6a1a      	ldr	r2, [r3, #32]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	ffff0000 	.word	0xffff0000

08003bc8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7c1b      	ldrb	r3, [r3, #16]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_DSI_Start+0x14>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e02b      	b.n	8003c34 <HAL_DSI_Start+0x6c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0208 	orr.w	r2, r2, #8
 8003c18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	7c1b      	ldrb	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_DSI_ShortWrite+0x1a>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e010      	b.n	8003c7c <HAL_DSI_ShortWrite+0x3c>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff f9af 	bl	8002fce <DSI_ShortWrite>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	741a      	strb	r2, [r3, #16]

  return status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	7c1b      	ldrb	r3, [r3, #16]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DSI_LongWrite+0x1e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e084      	b.n	8003dac <HAL_DSI_LongWrite+0x128>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca8:	f7fe fdbe 	bl	8002828 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cae:	e00c      	b.n	8003cca <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003cb0:	f7fe fdba 	bl	8002828 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cbe:	d904      	bls.n	8003cca <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e070      	b.n	8003dac <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0eb      	beq.n	8003cb0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	bf28      	it	cs
 8003ce2:	2303      	movcs	r3, #3
 8003ce4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	e00f      	b.n	8003d0c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	6a3a      	ldr	r2, [r7, #32]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3eb      	bcc.n	8003cec <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8003d2c:	e028      	b.n	8003d80 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	bf28      	it	cs
 8003d34:	2304      	movcs	r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	e00e      	b.n	8003d60 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	4413      	add	r3, r2
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	623b      	str	r3, [r7, #32]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3ec      	bcc.n	8003d42 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1d3      	bne.n	8003d2e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d8e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	f7ff f8fc 	bl	8002f9c <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7c1b      	ldrb	r3, [r3, #16]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e01b      	b.n	8003e02 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003de0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	065a      	lsls	r2, r3, #25
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e175      	b.n	800411c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 8164 	bne.w	8004116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d005      	beq.n	8003e66 <HAL_GPIO_Init+0x56>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d017      	beq.n	8003f04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80be 	beq.w	8004116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_GPIO_Init+0x324>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_GPIO_Init+0x324>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa6:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_GPIO_Init+0x324>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fb2:	4a61      	ldr	r2, [pc, #388]	; (8004138 <HAL_GPIO_Init+0x328>)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a58      	ldr	r2, [pc, #352]	; (800413c <HAL_GPIO_Init+0x32c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d037      	beq.n	800404e <HAL_GPIO_Init+0x23e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a57      	ldr	r2, [pc, #348]	; (8004140 <HAL_GPIO_Init+0x330>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d031      	beq.n	800404a <HAL_GPIO_Init+0x23a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a56      	ldr	r2, [pc, #344]	; (8004144 <HAL_GPIO_Init+0x334>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d02b      	beq.n	8004046 <HAL_GPIO_Init+0x236>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a55      	ldr	r2, [pc, #340]	; (8004148 <HAL_GPIO_Init+0x338>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d025      	beq.n	8004042 <HAL_GPIO_Init+0x232>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a54      	ldr	r2, [pc, #336]	; (800414c <HAL_GPIO_Init+0x33c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01f      	beq.n	800403e <HAL_GPIO_Init+0x22e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a53      	ldr	r2, [pc, #332]	; (8004150 <HAL_GPIO_Init+0x340>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d019      	beq.n	800403a <HAL_GPIO_Init+0x22a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a52      	ldr	r2, [pc, #328]	; (8004154 <HAL_GPIO_Init+0x344>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_GPIO_Init+0x226>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a51      	ldr	r2, [pc, #324]	; (8004158 <HAL_GPIO_Init+0x348>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00d      	beq.n	8004032 <HAL_GPIO_Init+0x222>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a50      	ldr	r2, [pc, #320]	; (800415c <HAL_GPIO_Init+0x34c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <HAL_GPIO_Init+0x21e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4f      	ldr	r2, [pc, #316]	; (8004160 <HAL_GPIO_Init+0x350>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_GPIO_Init+0x21a>
 8004026:	2309      	movs	r3, #9
 8004028:	e012      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800402a:	230a      	movs	r3, #10
 800402c:	e010      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800402e:	2308      	movs	r3, #8
 8004030:	e00e      	b.n	8004050 <HAL_GPIO_Init+0x240>
 8004032:	2307      	movs	r3, #7
 8004034:	e00c      	b.n	8004050 <HAL_GPIO_Init+0x240>
 8004036:	2306      	movs	r3, #6
 8004038:	e00a      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800403a:	2305      	movs	r3, #5
 800403c:	e008      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800403e:	2304      	movs	r3, #4
 8004040:	e006      	b.n	8004050 <HAL_GPIO_Init+0x240>
 8004042:	2303      	movs	r3, #3
 8004044:	e004      	b.n	8004050 <HAL_GPIO_Init+0x240>
 8004046:	2302      	movs	r3, #2
 8004048:	e002      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_GPIO_Init+0x240>
 800404e:	2300      	movs	r3, #0
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f002 0203 	and.w	r2, r2, #3
 8004056:	0092      	lsls	r2, r2, #2
 8004058:	4093      	lsls	r3, r2
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004060:	4935      	ldr	r1, [pc, #212]	; (8004138 <HAL_GPIO_Init+0x328>)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	3302      	adds	r3, #2
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <HAL_GPIO_Init+0x354>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004092:	4a34      	ldr	r2, [pc, #208]	; (8004164 <HAL_GPIO_Init+0x354>)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004098:	4b32      	ldr	r3, [pc, #200]	; (8004164 <HAL_GPIO_Init+0x354>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <HAL_GPIO_Init+0x354>)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040c2:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_GPIO_Init+0x354>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040e6:	4a1f      	ldr	r2, [pc, #124]	; (8004164 <HAL_GPIO_Init+0x354>)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <HAL_GPIO_Init+0x354>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <HAL_GPIO_Init+0x354>)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b0f      	cmp	r3, #15
 8004120:	f67f ae86 	bls.w	8003e30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3724      	adds	r7, #36	; 0x24
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	40013800 	.word	0x40013800
 800413c:	40020000 	.word	0x40020000
 8004140:	40020400 	.word	0x40020400
 8004144:	40020800 	.word	0x40020800
 8004148:	40020c00 	.word	0x40020c00
 800414c:	40021000 	.word	0x40021000
 8004150:	40021400 	.word	0x40021400
 8004154:	40021800 	.word	0x40021800
 8004158:	40021c00 	.word	0x40021c00
 800415c:	40022000 	.word	0x40022000
 8004160:	40022400 	.word	0x40022400
 8004164:	40013c00 	.word	0x40013c00

08004168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
 8004174:	4613      	mov	r3, r2
 8004176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004178:	787b      	ldrb	r3, [r7, #1]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004184:	e003      	b.n	800418e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	041a      	lsls	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	619a      	str	r2, [r3, #24]
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd fdd6 	bl	8001d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	; 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	e006      	b.n	8004224 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004222:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d104      	bne.n	8004236 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6859      	ldr	r1, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <HAL_I2C_Init+0x11c>)
 8004242:	430b      	orrs	r3, r1
 8004244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69d9      	ldr	r1, [r3, #28]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	02008000 	.word	0x02008000

080042bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d138      	bne.n	8004344 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042dc:	2302      	movs	r3, #2
 80042de:	e032      	b.n	8004346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800430e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	d139      	bne.n	80043dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004372:	2302      	movs	r3, #2
 8004374:	e033      	b.n	80043de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2224      	movs	r2, #36	; 0x24
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0bf      	b.n	800457e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fde4 	bl	8001fe0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800442e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004444:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6899      	ldr	r1, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_LTDC_Init+0x19c>)
 8004460:	400b      	ands	r3, r1
 8004462:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68d9      	ldr	r1, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_LTDC_Init+0x19c>)
 800448e:	400b      	ands	r3, r1
 8004490:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68d9      	ldr	r1, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_LTDC_Init+0x19c>)
 80044bc:	400b      	ands	r3, r1
 80044be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6919      	ldr	r1, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6959      	ldr	r1, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_LTDC_Init+0x19c>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6959      	ldr	r1, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0206 	orr.w	r2, r2, #6
 800455a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	f000f800 	.word	0xf000f800

0800458c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_LTDC_ConfigLayer+0x1a>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e02c      	b.n	8004600 <HAL_LTDC_ConfigLayer+0x74>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2134      	movs	r1, #52	; 0x34
 80045bc:	fb01 f303 	mul.w	r3, r1, r3
 80045c0:	4413      	add	r3, r2
 80045c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f811 	bl	8004608 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bdb0      	pop	{r4, r5, r7, pc}

08004608 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	4413      	add	r3, r2
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	01db      	lsls	r3, r3, #7
 8004634:	4413      	add	r3, r2
 8004636:	3384      	adds	r3, #132	; 0x84
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	4611      	mov	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	01d2      	lsls	r2, r2, #7
 8004644:	440a      	add	r2, r1
 8004646:	3284      	adds	r2, #132	; 0x84
 8004648:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800464c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800465e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004660:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4619      	mov	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	440b      	add	r3, r1
 800466e:	3384      	adds	r3, #132	; 0x84
 8004670:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004676:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004686:	4413      	add	r3, r2
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	01db      	lsls	r3, r3, #7
 8004696:	4413      	add	r3, r2
 8004698:	3384      	adds	r3, #132	; 0x84
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	4611      	mov	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	01d2      	lsls	r2, r2, #7
 80046a6:	440a      	add	r2, r1
 80046a8:	3284      	adds	r2, #132	; 0x84
 80046aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046be:	4413      	add	r3, r2
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	440b      	add	r3, r1
 80046ce:	3384      	adds	r3, #132	; 0x84
 80046d0:	4619      	mov	r1, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	4413      	add	r3, r2
 80046e4:	3384      	adds	r3, #132	; 0x84
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4611      	mov	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	01d2      	lsls	r2, r2, #7
 80046f2:	440a      	add	r2, r1
 80046f4:	3284      	adds	r2, #132	; 0x84
 80046f6:	f023 0307 	bic.w	r3, r3, #7
 80046fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	4413      	add	r3, r2
 8004708:	3384      	adds	r3, #132	; 0x84
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004718:	021b      	lsls	r3, r3, #8
 800471a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	01db      	lsls	r3, r3, #7
 8004738:	4413      	add	r3, r2
 800473a:	3384      	adds	r3, #132	; 0x84
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	01db      	lsls	r3, r3, #7
 8004748:	4413      	add	r3, r2
 800474a:	3384      	adds	r3, #132	; 0x84
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004758:	461a      	mov	r2, r3
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	431a      	orrs	r2, r3
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	440b      	add	r3, r1
 800476e:	3384      	adds	r3, #132	; 0x84
 8004770:	4619      	mov	r1, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	; 0x84
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	4611      	mov	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	01d2      	lsls	r2, r2, #7
 8004792:	440a      	add	r2, r1
 8004794:	3284      	adds	r2, #132	; 0x84
 8004796:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800479a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	01db      	lsls	r3, r3, #7
 80047a6:	4413      	add	r3, r2
 80047a8:	3384      	adds	r3, #132	; 0x84
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	4413      	add	r3, r2
 80047be:	3384      	adds	r3, #132	; 0x84
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	440b      	add	r3, r1
 80047ce:	3384      	adds	r3, #132	; 0x84
 80047d0:	4619      	mov	r1, r3
 80047d2:	4b58      	ldr	r3, [pc, #352]	; (8004934 <LTDC_SetConfig+0x32c>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	6809      	ldr	r1, [r1, #0]
 80047e4:	4608      	mov	r0, r1
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	01c9      	lsls	r1, r1, #7
 80047ea:	4401      	add	r1, r0
 80047ec:	3184      	adds	r1, #132	; 0x84
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	4413      	add	r3, r2
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	01db      	lsls	r3, r3, #7
 800480c:	4413      	add	r3, r2
 800480e:	3384      	adds	r3, #132	; 0x84
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	4413      	add	r3, r2
 8004822:	3384      	adds	r3, #132	; 0x84
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004834:	2304      	movs	r3, #4
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	e01b      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d102      	bne.n	8004848 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004842:	2303      	movs	r3, #3
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e014      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00b      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004854:	2b02      	cmp	r3, #2
 8004856:	d007      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800485c:	2b03      	cmp	r3, #3
 800485e:	d003      	beq.n	8004868 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004864:	2b07      	cmp	r3, #7
 8004866:	d102      	bne.n	800486e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004868:	2302      	movs	r3, #2
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e001      	b.n	8004872 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	01db      	lsls	r3, r3, #7
 800487c:	4413      	add	r3, r2
 800487e:	3384      	adds	r3, #132	; 0x84
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	4611      	mov	r1, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	01d2      	lsls	r2, r2, #7
 800488c:	440a      	add	r2, r1
 800488e:	3284      	adds	r2, #132	; 0x84
 8004890:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1acb      	subs	r3, r1, r3
 80048ac:	69f9      	ldr	r1, [r7, #28]
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	6809      	ldr	r1, [r1, #0]
 80048b8:	4608      	mov	r0, r1
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	01c9      	lsls	r1, r1, #7
 80048be:	4401      	add	r1, r0
 80048c0:	3184      	adds	r1, #132	; 0x84
 80048c2:	4313      	orrs	r3, r2
 80048c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	01db      	lsls	r3, r3, #7
 80048d0:	4413      	add	r3, r2
 80048d2:	3384      	adds	r3, #132	; 0x84
 80048d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	440b      	add	r3, r1
 80048e2:	3384      	adds	r3, #132	; 0x84
 80048e4:	4619      	mov	r1, r3
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <LTDC_SetConfig+0x330>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	01db      	lsls	r3, r3, #7
 80048f6:	4413      	add	r3, r2
 80048f8:	3384      	adds	r3, #132	; 0x84
 80048fa:	461a      	mov	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	01db      	lsls	r3, r3, #7
 800490c:	4413      	add	r3, r2
 800490e:	3384      	adds	r3, #132	; 0x84
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4611      	mov	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	01d2      	lsls	r2, r2, #7
 800491c:	440a      	add	r2, r1
 800491e:	3284      	adds	r2, #132	; 0x84
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	fffff8f8 	.word	0xfffff8f8
 8004938:	fffff800 	.word	0xfffff800

0800493c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800494e:	2200      	movs	r2, #0
 8004950:	e001      	b.n	8004956 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8004952:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8004962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004966:	e000      	b.n	800496a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004968:	2200      	movs	r2, #0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004976:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800497a:	e000      	b.n	800497e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800497c:	2200      	movs	r2, #0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	1e5a      	subs	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4413      	add	r3, r2
 8004996:	1e5a      	subs	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80049aa:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 80049ac:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80049c0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	4413      	add	r3, r2
 80049c8:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a04      	ldr	r2, [pc, #16]	; (80049f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40007000 	.word	0x40007000

080049fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6413      	str	r3, [r2, #64]	; 0x40
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2a:	f7fd fefd 	bl	8002828 <HAL_GetTick>
 8004a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a30:	e009      	b.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a32:	f7fd fef9 	bl	8002828 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a40:	d901      	bls.n	8004a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e022      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d1ee      	bne.n	8004a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0f      	ldr	r2, [pc, #60]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a60:	f7fd fee2 	bl	8002828 <HAL_GetTick>
 8004a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a66:	e009      	b.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a68:	f7fd fede 	bl	8002828 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a76:	d901      	bls.n	8004a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e007      	b.n	8004a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a88:	d1ee      	bne.n	8004a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e29b      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8087 	beq.w	8004bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004acc:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d112      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae6:	4b8d      	ldr	r3, [pc, #564]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d06c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x130>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d168      	bne.n	8004bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e275      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b06:	d106      	bne.n	8004b16 <HAL_RCC_OscConfig+0x7a>
 8004b08:	4b84      	ldr	r3, [pc, #528]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a83      	ldr	r2, [pc, #524]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e02e      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0x9c>
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b7c      	ldr	r3, [pc, #496]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7b      	ldr	r2, [pc, #492]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b42:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a75      	ldr	r2, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a72      	ldr	r2, [pc, #456]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xd8>
 8004b5c:	4b6f      	ldr	r3, [pc, #444]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a6e      	ldr	r2, [pc, #440]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fe54 	bl	8002828 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd fe50 	bl	8002828 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e229      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fe40 	bl	8002828 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd fe3c 	bl	8002828 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e215      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b57      	ldr	r3, [pc, #348]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x110>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d069      	beq.n	8004cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b4d      	ldr	r3, [pc, #308]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
 8004bf2:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1e9      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	493d      	ldr	r1, [pc, #244]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e040      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fdf2 	bl	8002828 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fd fdee 	bl	8002828 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1c7      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
 8004c7a:	e018      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fd fdce 	bl	8002828 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fd fdca 	bl	8002828 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1a3      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d038      	beq.n	8004d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd fdab 	bl	8002828 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fda7 	bl	8002828 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e180      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x23a>
 8004cf4:	e01a      	b.n	8004d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d02:	f7fd fd91 	bl	8002828 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0a:	f7fd fd8d 	bl	8002828 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d903      	bls.n	8004d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e166      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
 8004d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a4 	beq.w	8004e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a88      	ldr	r2, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b86      	ldr	r3, [pc, #536]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	4b83      	ldr	r3, [pc, #524]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d6e:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fd fd55 	bl	8002828 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fd fd51 	bl	8002828 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b64      	cmp	r3, #100	; 0x64
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e12a      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d94:	4b76      	ldr	r3, [pc, #472]	; (8004f70 <HAL_RCC_OscConfig+0x4d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31a>
 8004da8:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dac:	4a6f      	ldr	r2, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	; 0x70
 8004db4:	e02d      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x33c>
 8004dbe:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	4a6a      	ldr	r2, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dca:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a67      	ldr	r2, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x35e>
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a61      	ldr	r2, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	4b5f      	ldr	r3, [pc, #380]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a5e      	ldr	r2, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
 8004dfa:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a5b      	ldr	r2, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	4b59      	ldr	r3, [pc, #356]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd fd05 	bl	8002828 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd fd01 	bl	8002828 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0d8      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x386>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fd fcef 	bl	8002828 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fd fceb 	bl	8002828 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0c2      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80ae 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d06d      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d14b      	bne.n	8004f38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fd fcbc 	bl	8002828 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7fd fcb8 	bl	8002828 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e091      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69da      	ldr	r2, [r3, #28]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	061b      	lsls	r3, r3, #24
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	071b      	lsls	r3, r3, #28
 8004efe:	491b      	ldr	r1, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fc8a 	bl	8002828 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fc86 	bl	8002828 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e05f      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x47c>
 8004f36:	e057      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd fc70 	bl	8002828 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fd fc6c 	bl	8002828 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e045      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4b0>
 8004f6a:	e03d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <HAL_RCC_OscConfig+0x558>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d030      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d129      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d122      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d119      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d10f      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0d0      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b67      	ldr	r3, [pc, #412]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	4965      	ldr	r1, [pc, #404]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b63      	ldr	r3, [pc, #396]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0b8      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d020      	beq.n	800508e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005058:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4a58      	ldr	r2, [pc, #352]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800505e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005070:	4b53      	ldr	r3, [pc, #332]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4a52      	ldr	r2, [pc, #328]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800507a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507c:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	494d      	ldr	r1, [pc, #308]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d040      	beq.n	800511c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d115      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07f      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e073      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ca:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06b      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4936      	ldr	r1, [pc, #216]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fb9c 	bl	8002828 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd fb98 	bl	8002828 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e053      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 030f 	and.w	r3, r3, #15
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d210      	bcs.n	800514c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	4922      	ldr	r1, [pc, #136]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e032      	b.n	80051b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4916      	ldr	r1, [pc, #88]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005176:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	490e      	ldr	r1, [pc, #56]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005186:	4313      	orrs	r3, r2
 8005188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518a:	f000 f821 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 800518e:	4602      	mov	r2, r0
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	490a      	ldr	r1, [pc, #40]	; (80051c4 <HAL_RCC_ClockConfig+0x1cc>)
 800519c:	5ccb      	ldrb	r3, [r1, r3]
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <HAL_RCC_ClockConfig+0x1d0>)
 80051a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x1d4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd f98a 	bl	80024c4 <HAL_InitTick>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40023c00 	.word	0x40023c00
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800b9c8 	.word	0x0800b9c8
 80051c8:	20000010 	.word	0x20000010
 80051cc:	20000014 	.word	0x20000014

080051d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d4:	b090      	sub	sp, #64	; 0x40
 80051d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	2300      	movs	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	2300      	movs	r3, #0
 80051e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d00d      	beq.n	8005210 <HAL_RCC_GetSysClockFreq+0x40>
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	f200 80a1 	bhi.w	800533c <HAL_RCC_GetSysClockFreq+0x16c>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_RCC_GetSysClockFreq+0x34>
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d003      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x3a>
 8005202:	e09b      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005204:	4b53      	ldr	r3, [pc, #332]	; (8005354 <HAL_RCC_GetSysClockFreq+0x184>)
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005208:	e09b      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800520a:	4b53      	ldr	r3, [pc, #332]	; (8005358 <HAL_RCC_GetSysClockFreq+0x188>)
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800520e:	e098      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005210:	4b4f      	ldr	r3, [pc, #316]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800521a:	4b4d      	ldr	r3, [pc, #308]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d028      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	2200      	movs	r2, #0
 800522e:	623b      	str	r3, [r7, #32]
 8005230:	627a      	str	r2, [r7, #36]	; 0x24
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005238:	2100      	movs	r1, #0
 800523a:	4b47      	ldr	r3, [pc, #284]	; (8005358 <HAL_RCC_GetSysClockFreq+0x188>)
 800523c:	fb03 f201 	mul.w	r2, r3, r1
 8005240:	2300      	movs	r3, #0
 8005242:	fb00 f303 	mul.w	r3, r0, r3
 8005246:	4413      	add	r3, r2
 8005248:	4a43      	ldr	r2, [pc, #268]	; (8005358 <HAL_RCC_GetSysClockFreq+0x188>)
 800524a:	fba0 1202 	umull	r1, r2, r0, r2
 800524e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005250:	460a      	mov	r2, r1
 8005252:	62ba      	str	r2, [r7, #40]	; 0x28
 8005254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005256:	4413      	add	r3, r2
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	2200      	movs	r2, #0
 800525e:	61bb      	str	r3, [r7, #24]
 8005260:	61fa      	str	r2, [r7, #28]
 8005262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800526a:	f7fa ffe9 	bl	8000240 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4613      	mov	r3, r2
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005276:	e053      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	099b      	lsrs	r3, r3, #6
 800527e:	2200      	movs	r2, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	617a      	str	r2, [r7, #20]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800528a:	f04f 0b00 	mov.w	fp, #0
 800528e:	4652      	mov	r2, sl
 8005290:	465b      	mov	r3, fp
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	0159      	lsls	r1, r3, #5
 800529c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a0:	0150      	lsls	r0, r2, #5
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	ebb2 080a 	subs.w	r8, r2, sl
 80052aa:	eb63 090b 	sbc.w	r9, r3, fp
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052c2:	ebb2 0408 	subs.w	r4, r2, r8
 80052c6:	eb63 0509 	sbc.w	r5, r3, r9
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	00eb      	lsls	r3, r5, #3
 80052d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052d8:	00e2      	lsls	r2, r4, #3
 80052da:	4614      	mov	r4, r2
 80052dc:	461d      	mov	r5, r3
 80052de:	eb14 030a 	adds.w	r3, r4, sl
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	eb45 030b 	adc.w	r3, r5, fp
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052f6:	4629      	mov	r1, r5
 80052f8:	028b      	lsls	r3, r1, #10
 80052fa:	4621      	mov	r1, r4
 80052fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005300:	4621      	mov	r1, r4
 8005302:	028a      	lsls	r2, r1, #10
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	2200      	movs	r2, #0
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	60fa      	str	r2, [r7, #12]
 8005310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005314:	f7fa ff94 	bl	8000240 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4613      	mov	r3, r2
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_GetSysClockFreq+0x180>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	3301      	adds	r3, #1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	fbb2 f3f3 	udiv	r3, r2, r3
 8005338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800533a:	e002      	b.n	8005342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_RCC_GetSysClockFreq+0x184>)
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005344:	4618      	mov	r0, r3
 8005346:	3740      	adds	r7, #64	; 0x40
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	00f42400 	.word	0x00f42400
 8005358:	017d7840 	.word	0x017d7840

0800535c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <HAL_RCC_GetHCLKFreq+0x14>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20000010 	.word	0x20000010

08005374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005378:	f7ff fff0 	bl	800535c <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0a9b      	lsrs	r3, r3, #10
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40023800 	.word	0x40023800
 8005398:	0800b9d8 	.word	0x0800b9d8

0800539c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	220f      	movs	r2, #15
 80053aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0203 	and.w	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <HAL_RCC_GetClockConfig+0x5c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	08db      	lsrs	r3, r3, #3
 80053d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <HAL_RCC_GetClockConfig+0x60>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 020f 	and.w	r2, r3, #15
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40023c00 	.word	0x40023c00

08005400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005428:	4b69      	ldr	r3, [pc, #420]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4a68      	ldr	r2, [pc, #416]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005432:	6093      	str	r3, [r2, #8]
 8005434:	4b66      	ldr	r3, [pc, #408]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543c:	4964      	ldr	r1, [pc, #400]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800544a:	2301      	movs	r3, #1
 800544c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d017      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800545a:	4b5d      	ldr	r3, [pc, #372]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	4959      	ldr	r1, [pc, #356]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005478:	d101      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800547a:	2301      	movs	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005486:	2301      	movs	r3, #1
 8005488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d017      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005496:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	494a      	ldr	r1, [pc, #296]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b4:	d101      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 808b 	beq.w	80055fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b3a      	ldr	r3, [pc, #232]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	4a39      	ldr	r2, [pc, #228]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ee:	6413      	str	r3, [r2, #64]	; 0x40
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054fc:	4b35      	ldr	r3, [pc, #212]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a34      	ldr	r2, [pc, #208]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005508:	f7fd f98e 	bl	8002828 <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005510:	f7fd f98a 	bl	8002828 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	; 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e38f      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005522:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800552e:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005536:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d035      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	429a      	cmp	r2, r3
 800554a:	d02e      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005554:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005560:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800556e:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005574:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d114      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fd f952 	bl	8002828 <HAL_GetTick>
 8005584:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	e00a      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005588:	f7fd f94e 	bl	8002828 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	; 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e351      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ee      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055b6:	d111      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055c6:	400b      	ands	r3, r1
 80055c8:	4901      	ldr	r1, [pc, #4]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
 80055ce:	e00b      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40007000 	.word	0x40007000
 80055d8:	0ffffcff 	.word	0x0ffffcff
 80055dc:	4bac      	ldr	r3, [pc, #688]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	4aab      	ldr	r2, [pc, #684]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055e6:	6093      	str	r3, [r2, #8]
 80055e8:	4ba9      	ldr	r3, [pc, #676]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f4:	49a6      	ldr	r1, [pc, #664]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d010      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005606:	4ba2      	ldr	r3, [pc, #648]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560c:	4aa0      	ldr	r2, [pc, #640]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005612:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005616:	4b9e      	ldr	r3, [pc, #632]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005618:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	499b      	ldr	r1, [pc, #620]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005634:	4b96      	ldr	r3, [pc, #600]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005642:	4993      	ldr	r1, [pc, #588]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005656:	4b8e      	ldr	r3, [pc, #568]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005664:	498a      	ldr	r1, [pc, #552]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005678:	4b85      	ldr	r3, [pc, #532]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005686:	4982      	ldr	r1, [pc, #520]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800569a:	4b7d      	ldr	r3, [pc, #500]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	4979      	ldr	r1, [pc, #484]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056bc:	4b74      	ldr	r3, [pc, #464]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	4971      	ldr	r1, [pc, #452]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056de:	4b6c      	ldr	r3, [pc, #432]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e4:	f023 020c 	bic.w	r2, r3, #12
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	4968      	ldr	r1, [pc, #416]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005700:	4b63      	ldr	r3, [pc, #396]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570e:	4960      	ldr	r1, [pc, #384]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005728:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	4957      	ldr	r1, [pc, #348]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005744:	4b52      	ldr	r3, [pc, #328]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	494f      	ldr	r1, [pc, #316]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005766:	4b4a      	ldr	r3, [pc, #296]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	4946      	ldr	r1, [pc, #280]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005788:	4b41      	ldr	r3, [pc, #260]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005796:	493e      	ldr	r1, [pc, #248]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b8:	4935      	ldr	r1, [pc, #212]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057da:	492d      	ldr	r1, [pc, #180]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057fc:	4924      	ldr	r1, [pc, #144]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580c:	d101      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800581e:	2301      	movs	r3, #1
 8005820:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800582e:	4b18      	ldr	r3, [pc, #96]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	4914      	ldr	r1, [pc, #80]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005860:	490b      	ldr	r1, [pc, #44]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00f      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	4902      	ldr	r1, [pc, #8]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800588c:	e002      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058a0:	4b8a      	ldr	r3, [pc, #552]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	4986      	ldr	r1, [pc, #536]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058c4:	4b81      	ldr	r3, [pc, #516]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	497d      	ldr	r1, [pc, #500]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d006      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 80d6 	beq.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058f0:	4b76      	ldr	r3, [pc, #472]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a75      	ldr	r2, [pc, #468]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fc:	f7fc ff94 	bl	8002828 <HAL_GetTick>
 8005900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005904:	f7fc ff90 	bl	8002828 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b64      	cmp	r3, #100	; 0x64
 8005910:	d901      	bls.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e195      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005916:	4b6d      	ldr	r3, [pc, #436]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d021      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d11d      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005936:	4b65      	ldr	r3, [pc, #404]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005944:	4b61      	ldr	r3, [pc, #388]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594a:	0e1b      	lsrs	r3, r3, #24
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	019a      	lsls	r2, r3, #6
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	061b      	lsls	r3, r3, #24
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	071b      	lsls	r3, r3, #28
 800596a:	4958      	ldr	r1, [pc, #352]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02e      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599c:	d129      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800599e:	4b4b      	ldr	r3, [pc, #300]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059ac:	4b47      	ldr	r3, [pc, #284]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b2:	0f1b      	lsrs	r3, r3, #28
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	019a      	lsls	r2, r3, #6
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	061b      	lsls	r3, r3, #24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	493e      	ldr	r1, [pc, #248]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059da:	4b3c      	ldr	r3, [pc, #240]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e0:	f023 021f 	bic.w	r2, r3, #31
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	3b01      	subs	r3, #1
 80059ea:	4938      	ldr	r1, [pc, #224]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01d      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059fe:	4b33      	ldr	r3, [pc, #204]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a04:	0e1b      	lsrs	r3, r3, #24
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a0c:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a12:	0f1b      	lsrs	r3, r3, #28
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	019a      	lsls	r2, r3, #6
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	431a      	orrs	r2, r3
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	4926      	ldr	r1, [pc, #152]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d011      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	019a      	lsls	r2, r3, #6
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	061b      	lsls	r3, r3, #24
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	071b      	lsls	r3, r3, #28
 8005a62:	491a      	ldr	r1, [pc, #104]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fc fed7 	bl	8002828 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a7e:	f7fc fed3 	bl	8002828 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0d8      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f0      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f040 80ce 	bne.w	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc feba 	bl	8002828 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ab8:	f7fc feb6 	bl	8002828 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	; 0x64
 8005ac4:	d904      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0bb      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005aca:	bf00      	nop
 8005acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ad0:	4b5e      	ldr	r3, [pc, #376]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005adc:	d0ec      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12a      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b06:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b14:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1a:	0f1b      	lsrs	r3, r3, #28
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	4944      	ldr	r1, [pc, #272]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b42:	4b42      	ldr	r3, [pc, #264]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b48:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	3b01      	subs	r3, #1
 8005b52:	021b      	lsls	r3, r3, #8
 8005b54:	493d      	ldr	r1, [pc, #244]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d022      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b70:	d11d      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b72:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b78:	0e1b      	lsrs	r3, r3, #24
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b80:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	0f1b      	lsrs	r3, r3, #28
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	019a      	lsls	r2, r3, #6
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	061b      	lsls	r3, r3, #24
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	071b      	lsls	r3, r3, #28
 8005ba6:	4929      	ldr	r1, [pc, #164]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d028      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bba:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	0e1b      	lsrs	r3, r3, #24
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bc8:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	019a      	lsls	r2, r3, #6
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	431a      	orrs	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	071b      	lsls	r3, r3, #28
 8005bee:	4917      	ldr	r1, [pc, #92]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4911      	ldr	r1, [pc, #68]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a0e      	ldr	r2, [pc, #56]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fc fe06 	bl	8002828 <HAL_GetTick>
 8005c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c20:	f7fc fe02 	bl	8002828 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e007      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3e:	d1ef      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800

08005c50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e025      	b.n	8005cb0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fb fcab 	bl	80015d4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f000 ffa3 	bl	8006bdc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	f000 fff7 	bl	8006c94 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005cca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e021      	b.n	8005d1a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d002      	beq.n	8005ce2 <HAL_SDRAM_SendCommand+0x2a>
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d118      	bne.n	8005d14 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 f838 	bl	8006d68 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d104      	bne.n	8005d0a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2205      	movs	r2, #5
 8005d04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005d08:	e006      	b.n	8005d18 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005d12:	e001      	b.n	8005d18 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d101      	bne.n	8005d3c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e016      	b.n	8005d6a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10f      	bne.n	8005d68 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6839      	ldr	r1, [r7, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 f82a 	bl	8006db0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b082      	sub	sp, #8
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e049      	b.n	8005e18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f841 	bl	8005e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f000 fb69 	bl	8006488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d001      	beq.n	8005e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e054      	b.n	8005ef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d022      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e76:	d01d      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d018      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d013      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1f      	ldr	r2, [pc, #124]	; (8005f10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00e      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d115      	bne.n	8005ee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	4b19      	ldr	r3, [pc, #100]	; (8005f20 <HAL_TIM_Base_Start_IT+0xec>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b06      	cmp	r3, #6
 8005ec4:	d015      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0xbe>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ecc:	d011      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ede:	e008      	b.n	8005ef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e000      	b.n	8005ef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40010400 	.word	0x40010400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40001800 	.word	0x40001800
 8005f20:	00010007 	.word	0x00010007

08005f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e049      	b.n	8005fca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc fbc0 	bl	80026d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 fa90 	bl	8006488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d122      	bne.n	800602e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d11b      	bne.n	800602e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0202 	mvn.w	r2, #2
 8005ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa19 	bl	800644c <HAL_TIM_IC_CaptureCallback>
 800601a:	e005      	b.n	8006028 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fa0b 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa1c 	bl	8006460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b04      	cmp	r3, #4
 800603a:	d122      	bne.n	8006082 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d11b      	bne.n	8006082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0204 	mvn.w	r2, #4
 8006052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9ef 	bl	800644c <HAL_TIM_IC_CaptureCallback>
 800606e:	e005      	b.n	800607c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f9e1 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f9f2 	bl	8006460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b08      	cmp	r3, #8
 800608e:	d122      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b08      	cmp	r3, #8
 800609c:	d11b      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0208 	mvn.w	r2, #8
 80060a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2204      	movs	r2, #4
 80060ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9c5 	bl	800644c <HAL_TIM_IC_CaptureCallback>
 80060c2:	e005      	b.n	80060d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9b7 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9c8 	bl	8006460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0310 	and.w	r3, r3, #16
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d122      	bne.n	800612a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0310 	and.w	r3, r3, #16
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d11b      	bne.n	800612a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0210 	mvn.w	r2, #16
 80060fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2208      	movs	r2, #8
 8006100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f99b 	bl	800644c <HAL_TIM_IC_CaptureCallback>
 8006116:	e005      	b.n	8006124 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f98d 	bl	8006438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f99e 	bl	8006460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10e      	bne.n	8006156 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b01      	cmp	r3, #1
 8006144:	d107      	bne.n	8006156 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f06f 0201 	mvn.w	r2, #1
 800614e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fc f8ff 	bl	8002354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	d10e      	bne.n	8006182 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d107      	bne.n	8006182 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 fd19 	bl	8006bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006190:	d10e      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d107      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fd0c 	bl	8006bc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d10e      	bne.n	80061dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d107      	bne.n	80061dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f94c 	bl	8006474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d10e      	bne.n	8006208 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d107      	bne.n	8006208 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0220 	mvn.w	r2, #32
 8006200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fccc 	bl	8006ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800622a:	2302      	movs	r3, #2
 800622c:	e0ff      	b.n	800642e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b14      	cmp	r3, #20
 800623a:	f200 80f0 	bhi.w	800641e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006299 	.word	0x08006299
 8006248:	0800641f 	.word	0x0800641f
 800624c:	0800641f 	.word	0x0800641f
 8006250:	0800641f 	.word	0x0800641f
 8006254:	080062d9 	.word	0x080062d9
 8006258:	0800641f 	.word	0x0800641f
 800625c:	0800641f 	.word	0x0800641f
 8006260:	0800641f 	.word	0x0800641f
 8006264:	0800631b 	.word	0x0800631b
 8006268:	0800641f 	.word	0x0800641f
 800626c:	0800641f 	.word	0x0800641f
 8006270:	0800641f 	.word	0x0800641f
 8006274:	0800635b 	.word	0x0800635b
 8006278:	0800641f 	.word	0x0800641f
 800627c:	0800641f 	.word	0x0800641f
 8006280:	0800641f 	.word	0x0800641f
 8006284:	0800639d 	.word	0x0800639d
 8006288:	0800641f 	.word	0x0800641f
 800628c:	0800641f 	.word	0x0800641f
 8006290:	0800641f 	.word	0x0800641f
 8006294:	080063dd 	.word	0x080063dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f992 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	699a      	ldr	r2, [r3, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0208 	orr.w	r2, r2, #8
 80062b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0204 	bic.w	r2, r2, #4
 80062c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6999      	ldr	r1, [r3, #24]
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	619a      	str	r2, [r3, #24]
      break;
 80062d6:	e0a5      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f9e4 	bl	80066ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699a      	ldr	r2, [r3, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6999      	ldr	r1, [r3, #24]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	021a      	lsls	r2, r3, #8
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	619a      	str	r2, [r3, #24]
      break;
 8006318:	e084      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fa3b 	bl	800679c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0208 	orr.w	r2, r2, #8
 8006334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0204 	bic.w	r2, r2, #4
 8006344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69d9      	ldr	r1, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	61da      	str	r2, [r3, #28]
      break;
 8006358:	e064      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa91 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69da      	ldr	r2, [r3, #28]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69d9      	ldr	r1, [r3, #28]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	021a      	lsls	r2, r3, #8
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	61da      	str	r2, [r3, #28]
      break;
 800639a:	e043      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fac8 	bl	8006938 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0208 	orr.w	r2, r2, #8
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0204 	bic.w	r2, r2, #4
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063da:	e023      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68b9      	ldr	r1, [r7, #8]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fafa 	bl	80069dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800641c:	e002      	b.n	8006424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
      break;
 8006422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a40      	ldr	r2, [pc, #256]	; (800659c <TIM_Base_SetConfig+0x114>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <TIM_Base_SetConfig+0x40>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a6:	d00f      	beq.n	80064c8 <TIM_Base_SetConfig+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a3d      	ldr	r2, [pc, #244]	; (80065a0 <TIM_Base_SetConfig+0x118>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <TIM_Base_SetConfig+0x40>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a3c      	ldr	r2, [pc, #240]	; (80065a4 <TIM_Base_SetConfig+0x11c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_Base_SetConfig+0x40>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a3b      	ldr	r2, [pc, #236]	; (80065a8 <TIM_Base_SetConfig+0x120>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_Base_SetConfig+0x40>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a3a      	ldr	r2, [pc, #232]	; (80065ac <TIM_Base_SetConfig+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2f      	ldr	r2, [pc, #188]	; (800659c <TIM_Base_SetConfig+0x114>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d02b      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d027      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <TIM_Base_SetConfig+0x118>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d023      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a2b      	ldr	r2, [pc, #172]	; (80065a4 <TIM_Base_SetConfig+0x11c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01f      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	; (80065a8 <TIM_Base_SetConfig+0x120>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01b      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a29      	ldr	r2, [pc, #164]	; (80065ac <TIM_Base_SetConfig+0x124>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d017      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <TIM_Base_SetConfig+0x128>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d013      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <TIM_Base_SetConfig+0x12c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00f      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a26      	ldr	r2, [pc, #152]	; (80065b8 <TIM_Base_SetConfig+0x130>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00b      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a25      	ldr	r2, [pc, #148]	; (80065bc <TIM_Base_SetConfig+0x134>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <TIM_Base_SetConfig+0x138>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a23      	ldr	r2, [pc, #140]	; (80065c4 <TIM_Base_SetConfig+0x13c>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d108      	bne.n	800654c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a0a      	ldr	r2, [pc, #40]	; (800659c <TIM_Base_SetConfig+0x114>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d003      	beq.n	8006580 <TIM_Base_SetConfig+0xf8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a0c      	ldr	r2, [pc, #48]	; (80065ac <TIM_Base_SetConfig+0x124>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d103      	bne.n	8006588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	615a      	str	r2, [r3, #20]
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800
 80065bc:	40001800 	.word	0x40001800
 80065c0:	40001c00 	.word	0x40001c00
 80065c4:	40002000 	.word	0x40002000

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <TIM_OC1_SetConfig+0xd8>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f023 0302 	bic.w	r3, r3, #2
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <TIM_OC1_SetConfig+0xdc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC1_SetConfig+0x64>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <TIM_OC1_SetConfig+0xe0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d10c      	bne.n	8006646 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0308 	bic.w	r3, r3, #8
 8006632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <TIM_OC1_SetConfig+0xdc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_OC1_SetConfig+0x8e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <TIM_OC1_SetConfig+0xe0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d111      	bne.n	800667a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800665c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	fffeff8f 	.word	0xfffeff8f
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40010400 	.word	0x40010400

080066ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0210 	bic.w	r2, r3, #16
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4b2e      	ldr	r3, [pc, #184]	; (8006790 <TIM_OC2_SetConfig+0xe4>)
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0320 	bic.w	r3, r3, #32
 80066f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a23      	ldr	r2, [pc, #140]	; (8006794 <TIM_OC2_SetConfig+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC2_SetConfig+0x68>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a22      	ldr	r2, [pc, #136]	; (8006798 <TIM_OC2_SetConfig+0xec>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10d      	bne.n	8006730 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a18      	ldr	r2, [pc, #96]	; (8006794 <TIM_OC2_SetConfig+0xe8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC2_SetConfig+0x94>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC2_SetConfig+0xec>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d113      	bne.n	8006768 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006746:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800674e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	621a      	str	r2, [r3, #32]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	feff8fff 	.word	0xfeff8fff
 8006794:	40010000 	.word	0x40010000
 8006798:	40010400 	.word	0x40010400

0800679c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	4b2d      	ldr	r3, [pc, #180]	; (800687c <TIM_OC3_SetConfig+0xe0>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0303 	bic.w	r3, r3, #3
 80067d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <TIM_OC3_SetConfig+0xe4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_OC3_SetConfig+0x66>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a21      	ldr	r2, [pc, #132]	; (8006884 <TIM_OC3_SetConfig+0xe8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d10d      	bne.n	800681e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800681c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <TIM_OC3_SetConfig+0xe4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC3_SetConfig+0x92>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <TIM_OC3_SetConfig+0xe8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d113      	bne.n	8006856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	fffeff8f 	.word	0xfffeff8f
 8006880:	40010000 	.word	0x40010000
 8006884:	40010400 	.word	0x40010400

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <TIM_OC4_SetConfig+0xa4>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <TIM_OC4_SetConfig+0xa8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC4_SetConfig+0x68>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a12      	ldr	r2, [pc, #72]	; (8006934 <TIM_OC4_SetConfig+0xac>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d109      	bne.n	8006904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	feff8fff 	.word	0xfeff8fff
 8006930:	40010000 	.word	0x40010000
 8006934:	40010400 	.word	0x40010400

08006938 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <TIM_OC5_SetConfig+0x98>)
 8006964:	4013      	ands	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006978:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <TIM_OC5_SetConfig+0x9c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC5_SetConfig+0x5e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <TIM_OC5_SetConfig+0xa0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d109      	bne.n	80069aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800699c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	621a      	str	r2, [r3, #32]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	fffeff8f 	.word	0xfffeff8f
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40010400 	.word	0x40010400

080069dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4b1c      	ldr	r3, [pc, #112]	; (8006a78 <TIM_OC6_SetConfig+0x9c>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	051b      	lsls	r3, r3, #20
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <TIM_OC6_SetConfig+0xa0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC6_SetConfig+0x60>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <TIM_OC6_SetConfig+0xa4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d109      	bne.n	8006a50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	feff8fff 	.word	0xfeff8fff
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400

08006a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e06d      	b.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a30      	ldr	r2, [pc, #192]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d022      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d01d      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d018      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d013      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1a      	ldr	r2, [pc, #104]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00e      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d009      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d10c      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40010400 	.word	0x40010400
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40001800 	.word	0x40001800

08006ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d121      	bne.n	8006c32 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <FMC_SDRAM_Init+0xb4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	6851      	ldr	r1, [r2, #4]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	6892      	ldr	r2, [r2, #8]
 8006bfe:	4311      	orrs	r1, r2
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	68d2      	ldr	r2, [r2, #12]
 8006c04:	4311      	orrs	r1, r2
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	6912      	ldr	r2, [r2, #16]
 8006c0a:	4311      	orrs	r1, r2
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	6952      	ldr	r2, [r2, #20]
 8006c10:	4311      	orrs	r1, r2
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	6992      	ldr	r2, [r2, #24]
 8006c16:	4311      	orrs	r1, r2
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	69d2      	ldr	r2, [r2, #28]
 8006c1c:	4311      	orrs	r1, r2
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	6a12      	ldr	r2, [r2, #32]
 8006c22:	4311      	orrs	r1, r2
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e026      	b.n	8006c80 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	69d9      	ldr	r1, [r3, #28]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	4319      	orrs	r1, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <FMC_SDRAM_Init+0xb4>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	6851      	ldr	r1, [r2, #4]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	6892      	ldr	r2, [r2, #8]
 8006c60:	4311      	orrs	r1, r2
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68d2      	ldr	r2, [r2, #12]
 8006c66:	4311      	orrs	r1, r2
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	6912      	ldr	r2, [r2, #16]
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	6952      	ldr	r2, [r2, #20]
 8006c72:	4311      	orrs	r1, r2
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	6992      	ldr	r2, [r2, #24]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	ffff8000 	.word	0xffff8000

08006c94 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d128      	bne.n	8006cf8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	1e59      	subs	r1, r3, #1
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4319      	orrs	r1, r3
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	4319      	orrs	r1, r3
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	031b      	lsls	r3, r3, #12
 8006cd0:	4319      	orrs	r1, r3
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	4319      	orrs	r1, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	051b      	lsls	r3, r3, #20
 8006ce4:	4319      	orrs	r1, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	061b      	lsls	r3, r3, #24
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	e02d      	b.n	8006d54 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <FMC_SDRAM_Timing_Init+0xd0>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	68d2      	ldr	r2, [r2, #12]
 8006d04:	3a01      	subs	r2, #1
 8006d06:	0311      	lsls	r1, r2, #12
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	6952      	ldr	r2, [r2, #20]
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0512      	lsls	r2, r2, #20
 8006d10:	430a      	orrs	r2, r1
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	1e59      	subs	r1, r3, #1
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	4319      	orrs	r1, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	4319      	orrs	r1, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	4319      	orrs	r1, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	061b      	lsls	r3, r3, #24
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	ff0f0fff 	.word	0xff0f0fff

08006d68 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <FMC_SDRAM_SendCommand+0x44>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	6811      	ldr	r1, [r2, #0]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	6852      	ldr	r2, [r2, #4]
 8006d84:	4311      	orrs	r1, r2
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	6892      	ldr	r2, [r2, #8]
 8006d8a:	3a01      	subs	r2, #1
 8006d8c:	0152      	lsls	r2, r2, #5
 8006d8e:	4311      	orrs	r1, r2
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	68d2      	ldr	r2, [r2, #12]
 8006d94:	0252      	lsls	r2, r2, #9
 8006d96:	430a      	orrs	r2, r1
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	ffc00000 	.word	0xffc00000

08006db0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	0052      	lsls	r2, r2, #1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	ffffc001 	.word	0xffffc001

08006de0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
	...

08006df0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df6:	f3ef 8305 	mrs	r3, IPSR
 8006dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10f      	bne.n	8006e22 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e02:	f3ef 8310 	mrs	r3, PRIMASK
 8006e06:	607b      	str	r3, [r7, #4]
  return(result);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e12:	603b      	str	r3, [r7, #0]
  return(result);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <osKernelInitialize+0x3a>
 8006e1a:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <osKernelInitialize+0x64>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d103      	bne.n	8006e2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006e22:	f06f 0305 	mvn.w	r3, #5
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e00c      	b.n	8006e44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <osKernelInitialize+0x64>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d105      	bne.n	8006e3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <osKernelInitialize+0x64>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	e002      	b.n	8006e44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006e44:	68fb      	ldr	r3, [r7, #12]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000520 	.word	0x20000520

08006e58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e5e:	f3ef 8305 	mrs	r3, IPSR
 8006e62:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d105      	bne.n	8006e82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006e76:	f3ef 8311 	mrs	r3, BASEPRI
 8006e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <osKernelStart+0x3a>
 8006e82:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <osKernelStart+0x68>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d103      	bne.n	8006e92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8006e8a:	f06f 0305 	mvn.w	r3, #5
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	e010      	b.n	8006eb4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e92:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <osKernelStart+0x68>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d109      	bne.n	8006eae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e9a:	f7ff ffa1 	bl	8006de0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e9e:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <osKernelStart+0x68>)
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ea4:	f001 f93e 	bl	8008124 <vTaskStartScheduler>
      stat = osOK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e002      	b.n	8006eb4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000520 	.word	0x20000520

08006ec4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b090      	sub	sp, #64	; 0x40
 8006ec8:	af04      	add	r7, sp, #16
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed4:	f3ef 8305 	mrs	r3, IPSR
 8006ed8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006eda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 808f 	bne.w	8007000 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006eee:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <osThreadNew+0x3e>
 8006efa:	4b44      	ldr	r3, [pc, #272]	; (800700c <osThreadNew+0x148>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d07e      	beq.n	8007000 <osThreadNew+0x13c>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d07b      	beq.n	8007000 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006f0c:	2318      	movs	r3, #24
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d045      	beq.n	8006fac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <osThreadNew+0x6a>
        name = attr->name;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <osThreadNew+0x90>
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	2b38      	cmp	r3, #56	; 0x38
 8006f46:	d805      	bhi.n	8006f54 <osThreadNew+0x90>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <osThreadNew+0x94>
        return (NULL);
 8006f54:	2300      	movs	r3, #0
 8006f56:	e054      	b.n	8007002 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	089b      	lsrs	r3, r3, #2
 8006f66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <osThreadNew+0xca>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2ba7      	cmp	r3, #167	; 0xa7
 8006f76:	d90a      	bls.n	8006f8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d006      	beq.n	8006f8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <osThreadNew+0xca>
        mem = 1;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	e010      	b.n	8006fb0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10c      	bne.n	8006fb0 <osThreadNew+0xec>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d108      	bne.n	8006fb0 <osThreadNew+0xec>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <osThreadNew+0xec>
          mem = 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	623b      	str	r3, [r7, #32]
 8006faa:	e001      	b.n	8006fb0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d110      	bne.n	8006fd8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006fbe:	9202      	str	r2, [sp, #8]
 8006fc0:	9301      	str	r3, [sp, #4]
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 feb3 	bl	8007d38 <xTaskCreateStatic>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e013      	b.n	8007000 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d110      	bne.n	8007000 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f107 0310 	add.w	r3, r7, #16
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 ff04 	bl	8007dfe <xTaskCreate>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <osThreadNew+0x13c>
          hTask = NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007000:	693b      	ldr	r3, [r7, #16]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3730      	adds	r7, #48	; 0x30
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000520 	.word	0x20000520

08007010 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007018:	f3ef 8305 	mrs	r3, IPSR
 800701c:	613b      	str	r3, [r7, #16]
  return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10f      	bne.n	8007044 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007024:	f3ef 8310 	mrs	r3, PRIMASK
 8007028:	60fb      	str	r3, [r7, #12]
  return(result);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007030:	f3ef 8311 	mrs	r3, BASEPRI
 8007034:	60bb      	str	r3, [r7, #8]
  return(result);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <osDelay+0x3c>
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <osDelay+0x58>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b02      	cmp	r3, #2
 8007042:	d103      	bne.n	800704c <osDelay+0x3c>
    stat = osErrorISR;
 8007044:	f06f 0305 	mvn.w	r3, #5
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e007      	b.n	800705c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f82e 	bl	80080b8 <vTaskDelay>
    }
  }

  return (stat);
 800705c:	697b      	ldr	r3, [r7, #20]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000520 	.word	0x20000520

0800706c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a07      	ldr	r2, [pc, #28]	; (8007098 <vApplicationGetIdleTaskMemory+0x2c>)
 800707c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a06      	ldr	r2, [pc, #24]	; (800709c <vApplicationGetIdleTaskMemory+0x30>)
 8007082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000524 	.word	0x20000524
 800709c:	200005cc 	.word	0x200005cc

080070a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a07      	ldr	r2, [pc, #28]	; (80070cc <vApplicationGetTimerTaskMemory+0x2c>)
 80070b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4a06      	ldr	r2, [pc, #24]	; (80070d0 <vApplicationGetTimerTaskMemory+0x30>)
 80070b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070be:	601a      	str	r2, [r3, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	200007cc 	.word	0x200007cc
 80070d0:	20000874 	.word	0x20000874

080070d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f103 0208 	add.w	r2, r3, #8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f103 0208 	add.w	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f103 0208 	add.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718c:	d103      	bne.n	8007196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e00c      	b.n	80071b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3308      	adds	r3, #8
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e002      	b.n	80071a4 <vListInsert+0x2e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d2f6      	bcs.n	800719e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
}
 80071dc:	bf00      	nop
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6892      	ldr	r2, [r2, #8]
 80071fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6852      	ldr	r2, [r2, #4]
 8007208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d103      	bne.n	800721c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10c      	bne.n	800726a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	b672      	cpsid	i
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	b662      	cpsie	i
 8007264:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800726a:	f002 f917 	bl	800949c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	441a      	add	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729a:	3b01      	subs	r3, #1
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d114      	bne.n	80072ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01a      	beq.n	80072fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 f9d1 	bl	8008674 <xTaskRemoveFromEventList>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d012      	beq.n	80072fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <xQueueGenericReset+0xd0>)
 80072da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	e009      	b.n	80072fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3310      	adds	r3, #16
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff fef0 	bl	80070d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3324      	adds	r3, #36	; 0x24
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff feeb 	bl	80070d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072fe:	f002 f901 	bl	8009504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007302:	2301      	movs	r3, #1
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	; 0x38
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10c      	bne.n	800733e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	b672      	cpsid	i
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	b662      	cpsie	i
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10c      	bne.n	800735e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	b672      	cpsid	i
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	b662      	cpsie	i
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <xQueueGenericCreateStatic+0x5a>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <xQueueGenericCreateStatic+0x5e>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <xQueueGenericCreateStatic+0x60>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10c      	bne.n	800738e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	b672      	cpsid	i
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	b662      	cpsie	i
 8007388:	623b      	str	r3, [r7, #32]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <xQueueGenericCreateStatic+0x8a>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <xQueueGenericCreateStatic+0x8e>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericCreateStatic+0x90>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10c      	bne.n	80073be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	b672      	cpsid	i
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	b662      	cpsie	i
 80073b8:	61fb      	str	r3, [r7, #28]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073be:	2350      	movs	r3, #80	; 0x50
 80073c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b50      	cmp	r3, #80	; 0x50
 80073c6:	d00c      	beq.n	80073e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	b672      	cpsid	i
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	b662      	cpsie	i
 80073dc:	61bb      	str	r3, [r7, #24]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00d      	beq.n	800740a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 f847 	bl	8007498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800740c:	4618      	mov	r0, r3
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	b672      	cpsid	i
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	b662      	cpsie	i
 800743c:	613b      	str	r3, [r7, #16]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007448:	2300      	movs	r3, #0
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	e004      	b.n	8007458 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3350      	adds	r3, #80	; 0x50
 800745c:	4618      	mov	r0, r3
 800745e:	f002 f949 	bl	80096f4 <pvPortMalloc>
 8007462:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3350      	adds	r3, #80	; 0x50
 8007472:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f805 	bl	8007498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800748e:	69bb      	ldr	r3, [r7, #24]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c6:	2101      	movs	r1, #1
 80074c8:	69b8      	ldr	r0, [r7, #24]
 80074ca:	f7ff feb7 	bl	800723c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074d6:	bf00      	nop
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074fe:	2300      	movs	r3, #0
 8007500:	2200      	movs	r2, #0
 8007502:	2100      	movs	r1, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f81d 	bl	8007544 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800751c:	2301      	movs	r3, #1
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	461a      	mov	r2, r3
 8007528:	6939      	ldr	r1, [r7, #16]
 800752a:	6978      	ldr	r0, [r7, #20]
 800752c:	f7ff ff72 	bl	8007414 <xQueueGenericCreate>
 8007530:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ffd3 	bl	80074de <prvInitialiseMutex>

		return xNewQueue;
 8007538:	68fb      	ldr	r3, [r7, #12]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	; 0x38
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007552:	2300      	movs	r3, #0
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10c      	bne.n	800757a <xQueueGenericSend+0x36>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <xQueueGenericSend+0x44>
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <xQueueGenericSend+0x48>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <xQueueGenericSend+0x4a>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10c      	bne.n	80075ac <xQueueGenericSend+0x68>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	b672      	cpsid	i
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	b662      	cpsie	i
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x76>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0x7a>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0x7c>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <xQueueGenericSend+0x9a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075de:	f001 fa13 	bl	8008a08 <xTaskGetSchedulerState>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <xQueueGenericSend+0xaa>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <xQueueGenericSend+0xae>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericSend+0xb0>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <xQueueGenericSend+0xce>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	61fb      	str	r3, [r7, #28]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007612:	f001 ff43 	bl	800949c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <xQueueGenericSend+0xe4>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d129      	bne.n	800767c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762e:	f000 fa15 	bl	8007a5c <prvCopyDataToQueue>
 8007632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	3324      	adds	r3, #36	; 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f001 f817 	bl	8008674 <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d013      	beq.n	8007674 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800764c:	4b3f      	ldr	r3, [pc, #252]	; (800774c <xQueueGenericSend+0x208>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e00a      	b.n	8007674 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007664:	4b39      	ldr	r3, [pc, #228]	; (800774c <xQueueGenericSend+0x208>)
 8007666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007674:	f001 ff46 	bl	8009504 <vPortExitCritical>
				return pdPASS;
 8007678:	2301      	movs	r3, #1
 800767a:	e063      	b.n	8007744 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d103      	bne.n	800768a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007682:	f001 ff3f 	bl	8009504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007686:	2300      	movs	r3, #0
 8007688:	e05c      	b.n	8007744 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	4618      	mov	r0, r3
 8007696:	f001 f853 	bl	8008740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800769e:	f001 ff31 	bl	8009504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076a2:	f000 fdb3 	bl	800820c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a6:	f001 fef9 	bl	800949c <vPortEnterCritical>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b6:	d103      	bne.n	80076c0 <xQueueGenericSend+0x17c>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076cc:	d103      	bne.n	80076d6 <xQueueGenericSend+0x192>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d6:	f001 ff15 	bl	8009504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076da:	1d3a      	adds	r2, r7, #4
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 f842 	bl	800876c <xTaskCheckForTimeOut>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d124      	bne.n	8007738 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f0:	f000 faac 	bl	8007c4c <prvIsQueueFull>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d018      	beq.n	800772c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	3310      	adds	r3, #16
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f000 ff62 	bl	80085cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800770a:	f000 fa37 	bl	8007b7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800770e:	f000 fd8b 	bl	8008228 <xTaskResumeAll>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f af7c 	bne.w	8007612 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800771a:	4b0c      	ldr	r3, [pc, #48]	; (800774c <xQueueGenericSend+0x208>)
 800771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	e772      	b.n	8007612 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800772c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800772e:	f000 fa25 	bl	8007b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007732:	f000 fd79 	bl	8008228 <xTaskResumeAll>
 8007736:	e76c      	b.n	8007612 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800773a:	f000 fa1f 	bl	8007b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800773e:	f000 fd73 	bl	8008228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007744:	4618      	mov	r0, r3
 8007746:	3738      	adds	r7, #56	; 0x38
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08e      	sub	sp, #56	; 0x38
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	b672      	cpsid	i
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	b662      	cpsie	i
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <xQueueGenericSendFromISR+0x40>
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <xQueueGenericSendFromISR+0x44>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <xQueueGenericSendFromISR+0x46>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10c      	bne.n	80077b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	b672      	cpsid	i
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	b662      	cpsie	i
 80077ae:	623b      	str	r3, [r7, #32]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSendFromISR+0x72>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSendFromISR+0x76>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSendFromISR+0x78>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	b672      	cpsid	i
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	b662      	cpsie	i
 80077e0:	61fb      	str	r3, [r7, #28]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077e6:	f001 ff41 	bl	800966c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077ea:	f3ef 8211 	mrs	r2, BASEPRI
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	b672      	cpsid	i
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	b662      	cpsie	i
 8007802:	61ba      	str	r2, [r7, #24]
 8007804:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007806:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xQueueGenericSendFromISR+0xcc>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d12c      	bne.n	8007876 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782c:	f000 f916 	bl	8007a5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007838:	d112      	bne.n	8007860 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	3324      	adds	r3, #36	; 0x24
 8007846:	4618      	mov	r0, r3
 8007848:	f000 ff14 	bl	8008674 <xTaskRemoveFromEventList>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e007      	b.n	8007870 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007864:	3301      	adds	r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	b25a      	sxtb	r2, r3
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007870:	2301      	movs	r3, #1
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007874:	e001      	b.n	800787a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007876:	2300      	movs	r3, #0
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007888:	4618      	mov	r0, r3
 800788a:	3738      	adds	r7, #56	; 0x38
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800789c:	2300      	movs	r3, #0
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10c      	bne.n	80078c4 <xQueueReceive+0x34>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	b672      	cpsid	i
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	b662      	cpsie	i
 80078be:	623b      	str	r3, [r7, #32]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <xQueueReceive+0x42>
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <xQueueReceive+0x46>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <xQueueReceive+0x48>
 80078d6:	2300      	movs	r3, #0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10c      	bne.n	80078f6 <xQueueReceive+0x66>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	b672      	cpsid	i
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	b662      	cpsie	i
 80078f0:	61fb      	str	r3, [r7, #28]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f6:	f001 f887 	bl	8008a08 <xTaskGetSchedulerState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <xQueueReceive+0x76>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <xQueueReceive+0x7a>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <xQueueReceive+0x7c>
 800790a:	2300      	movs	r3, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10c      	bne.n	800792a <xQueueReceive+0x9a>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	b672      	cpsid	i
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	b662      	cpsie	i
 8007924:	61bb      	str	r3, [r7, #24]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800792a:	f001 fdb7 	bl	800949c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01f      	beq.n	800797a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f000 f8f7 	bl	8007b30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	1e5a      	subs	r2, r3, #1
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	3310      	adds	r3, #16
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fe8c 	bl	8008674 <xTaskRemoveFromEventList>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007962:	4b3d      	ldr	r3, [pc, #244]	; (8007a58 <xQueueReceive+0x1c8>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007972:	f001 fdc7 	bl	8009504 <vPortExitCritical>
				return pdPASS;
 8007976:	2301      	movs	r3, #1
 8007978:	e069      	b.n	8007a4e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007980:	f001 fdc0 	bl	8009504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007984:	2300      	movs	r3, #0
 8007986:	e062      	b.n	8007a4e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800798e:	f107 0310 	add.w	r3, r7, #16
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fed4 	bl	8008740 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800799c:	f001 fdb2 	bl	8009504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a0:	f000 fc34 	bl	800820c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a4:	f001 fd7a 	bl	800949c <vPortEnterCritical>
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b4:	d103      	bne.n	80079be <xQueueReceive+0x12e>
 80079b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ca:	d103      	bne.n	80079d4 <xQueueReceive+0x144>
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d4:	f001 fd96 	bl	8009504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079d8:	1d3a      	adds	r2, r7, #4
 80079da:	f107 0310 	add.w	r3, r7, #16
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fec3 	bl	800876c <xTaskCheckForTimeOut>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d123      	bne.n	8007a34 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ee:	f000 f917 	bl	8007c20 <prvIsQueueEmpty>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d017      	beq.n	8007a28 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	3324      	adds	r3, #36	; 0x24
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 fde3 	bl	80085cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a08:	f000 f8b8 	bl	8007b7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a0c:	f000 fc0c 	bl	8008228 <xTaskResumeAll>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d189      	bne.n	800792a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007a16:	4b10      	ldr	r3, [pc, #64]	; (8007a58 <xQueueReceive+0x1c8>)
 8007a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	e780      	b.n	800792a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2a:	f000 f8a7 	bl	8007b7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a2e:	f000 fbfb 	bl	8008228 <xTaskResumeAll>
 8007a32:	e77a      	b.n	800792a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a36:	f000 f8a1 	bl	8007b7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a3a:	f000 fbf5 	bl	8008228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a40:	f000 f8ee 	bl	8007c20 <prvIsQueueEmpty>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f43f af6f 	beq.w	800792a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3730      	adds	r7, #48	; 0x30
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10d      	bne.n	8007a96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d14d      	bne.n	8007b1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 ffdc 	bl	8008a44 <xTaskPriorityDisinherit>
 8007a8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	609a      	str	r2, [r3, #8]
 8007a94:	e043      	b.n	8007b1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d119      	bne.n	8007ad0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6858      	ldr	r0, [r3, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	f002 f88c 	bl	8009bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d32b      	bcc.n	8007b1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	e026      	b.n	8007b1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68d8      	ldr	r0, [r3, #12]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	f002 f872 	bl	8009bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	425b      	negs	r3, r3
 8007aea:	441a      	add	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d207      	bcs.n	8007b0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	689a      	ldr	r2, [r3, #8]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	425b      	negs	r3, r3
 8007b06:	441a      	add	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d105      	bne.n	8007b1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b26:	697b      	ldr	r3, [r7, #20]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d018      	beq.n	8007b74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	441a      	add	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d303      	bcc.n	8007b64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6838      	ldr	r0, [r7, #0]
 8007b70:	f002 f828 	bl	8009bc4 <memcpy>
	}
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b84:	f001 fc8a 	bl	800949c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b90:	e011      	b.n	8007bb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d012      	beq.n	8007bc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3324      	adds	r3, #36	; 0x24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fd68 	bl	8008674 <xTaskRemoveFromEventList>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007baa:	f000 fe45 	bl	8008838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	dce9      	bgt.n	8007b92 <prvUnlockQueue+0x16>
 8007bbe:	e000      	b.n	8007bc2 <prvUnlockQueue+0x46>
					break;
 8007bc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bca:	f001 fc9b 	bl	8009504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bce:	f001 fc65 	bl	800949c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bda:	e011      	b.n	8007c00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d012      	beq.n	8007c0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3310      	adds	r3, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fd43 	bl	8008674 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bf4:	f000 fe20 	bl	8008838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dce9      	bgt.n	8007bdc <prvUnlockQueue+0x60>
 8007c08:	e000      	b.n	8007c0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	22ff      	movs	r2, #255	; 0xff
 8007c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c14:	f001 fc76 	bl	8009504 <vPortExitCritical>
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c28:	f001 fc38 	bl	800949c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c34:	2301      	movs	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	e001      	b.n	8007c3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c3e:	f001 fc61 	bl	8009504 <vPortExitCritical>

	return xReturn;
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c54:	f001 fc22 	bl	800949c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d102      	bne.n	8007c6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e001      	b.n	8007c6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c6e:	f001 fc49 	bl	8009504 <vPortExitCritical>

	return xReturn;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e014      	b.n	8007cb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c8c:	4a0f      	ldr	r2, [pc, #60]	; (8007ccc <vQueueAddToRegistry+0x50>)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10b      	bne.n	8007cb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c98:	490c      	ldr	r1, [pc, #48]	; (8007ccc <vQueueAddToRegistry+0x50>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ca2:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <vQueueAddToRegistry+0x50>)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	4413      	add	r3, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cae:	e006      	b.n	8007cbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b07      	cmp	r3, #7
 8007cba:	d9e7      	bls.n	8007c8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000c74 	.word	0x20000c74

08007cd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ce0:	f001 fbdc 	bl	800949c <vPortEnterCritical>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf0:	d103      	bne.n	8007cfa <vQueueWaitForMessageRestricted+0x2a>
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d06:	d103      	bne.n	8007d10 <vQueueWaitForMessageRestricted+0x40>
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d10:	f001 fbf8 	bl	8009504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d106      	bne.n	8007d2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fc77 	bl	8008618 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d2a:	6978      	ldr	r0, [r7, #20]
 8007d2c:	f7ff ff26 	bl	8007b7c <prvUnlockQueue>
	}
 8007d30:	bf00      	nop
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08e      	sub	sp, #56	; 0x38
 8007d3c:	af04      	add	r7, sp, #16
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10c      	bne.n	8007d66 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	b672      	cpsid	i
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	b662      	cpsie	i
 8007d60:	623b      	str	r3, [r7, #32]
}
 8007d62:	bf00      	nop
 8007d64:	e7fe      	b.n	8007d64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10c      	bne.n	8007d86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	61fb      	str	r3, [r7, #28]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d86:	23a8      	movs	r3, #168	; 0xa8
 8007d88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2ba8      	cmp	r3, #168	; 0xa8
 8007d8e:	d00c      	beq.n	8007daa <xTaskCreateStatic+0x72>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	61bb      	str	r3, [r7, #24]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007daa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d01e      	beq.n	8007df0 <xTaskCreateStatic+0xb8>
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01b      	beq.n	8007df0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	f107 0314 	add.w	r3, r7, #20
 8007dd6:	9301      	str	r3, [sp, #4]
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	68b9      	ldr	r1, [r7, #8]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f850 	bl	8007e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dea:	f000 f8f5 	bl	8007fd8 <prvAddNewTaskToReadyList>
 8007dee:	e001      	b.n	8007df4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007df4:	697b      	ldr	r3, [r7, #20]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3728      	adds	r7, #40	; 0x28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b08c      	sub	sp, #48	; 0x30
 8007e02:	af04      	add	r7, sp, #16
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fc6e 	bl	80096f4 <pvPortMalloc>
 8007e18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00e      	beq.n	8007e3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e20:	20a8      	movs	r0, #168	; 0xa8
 8007e22:	f001 fc67 	bl	80096f4 <pvPortMalloc>
 8007e26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
 8007e34:	e005      	b.n	8007e42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e36:	6978      	ldr	r0, [r7, #20]
 8007e38:	f001 fd26 	bl	8009888 <vPortFree>
 8007e3c:	e001      	b.n	8007e42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d017      	beq.n	8007e78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e50:	88fa      	ldrh	r2, [r7, #6]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	9302      	str	r3, [sp, #8]
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68b9      	ldr	r1, [r7, #8]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 f80e 	bl	8007e88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e6c:	69f8      	ldr	r0, [r7, #28]
 8007e6e:	f000 f8b3 	bl	8007fd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e72:	2301      	movs	r3, #1
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	e002      	b.n	8007e7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
	}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	21a5      	movs	r1, #165	; 0xa5
 8007ea2:	f001 fe0b 	bl	8009abc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007eb0:	440b      	add	r3, r1
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	b672      	cpsid	i
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	b662      	cpsie	i
 8007ede:	617b      	str	r3, [r7, #20]
}
 8007ee0:	bf00      	nop
 8007ee2:	e7fe      	b.n	8007ee2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01f      	beq.n	8007f2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	e012      	b.n	8007f16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	7819      	ldrb	r1, [r3, #0]
 8007ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	3334      	adds	r3, #52	; 0x34
 8007f00:	460a      	mov	r2, r1
 8007f02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	2b0f      	cmp	r3, #15
 8007f1a:	d9e9      	bls.n	8007ef0 <prvInitialiseNewTask+0x68>
 8007f1c:	e000      	b.n	8007f20 <prvInitialiseNewTask+0x98>
			{
				break;
 8007f1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f28:	e003      	b.n	8007f32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	2b37      	cmp	r3, #55	; 0x37
 8007f36:	d901      	bls.n	8007f3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f38:	2337      	movs	r3, #55	; 0x37
 8007f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f8de 	bl	8007114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff f8d9 	bl	8007114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	3354      	adds	r3, #84	; 0x54
 8007f8c:	224c      	movs	r2, #76	; 0x4c
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 fd93 	bl	8009abc <memset>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	4a0c      	ldr	r2, [pc, #48]	; (8007fcc <prvInitialiseNewTask+0x144>)
 8007f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <prvInitialiseNewTask+0x148>)
 8007fa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <prvInitialiseNewTask+0x14c>)
 8007fa6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	69b8      	ldr	r0, [r7, #24]
 8007fae:	f001 f96b 	bl	8009288 <pxPortInitialiseStack>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc4:	bf00      	nop
 8007fc6:	3720      	adds	r7, #32
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20004f00 	.word	0x20004f00
 8007fd0:	20004f68 	.word	0x20004f68
 8007fd4:	20004fd0 	.word	0x20004fd0

08007fd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007fe0:	f001 fa5c 	bl	800949c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007fe4:	4b2d      	ldr	r3, [pc, #180]	; (800809c <prvAddNewTaskToReadyList+0xc4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	4a2c      	ldr	r2, [pc, #176]	; (800809c <prvAddNewTaskToReadyList+0xc4>)
 8007fec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007fee:	4b2c      	ldr	r3, [pc, #176]	; (80080a0 <prvAddNewTaskToReadyList+0xc8>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ff6:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <prvAddNewTaskToReadyList+0xc8>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ffc:	4b27      	ldr	r3, [pc, #156]	; (800809c <prvAddNewTaskToReadyList+0xc4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d110      	bne.n	8008026 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008004:	f000 fc3c 	bl	8008880 <prvInitialiseTaskLists>
 8008008:	e00d      	b.n	8008026 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800800a:	4b26      	ldr	r3, [pc, #152]	; (80080a4 <prvAddNewTaskToReadyList+0xcc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008012:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <prvAddNewTaskToReadyList+0xc8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801c:	429a      	cmp	r2, r3
 800801e:	d802      	bhi.n	8008026 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008020:	4a1f      	ldr	r2, [pc, #124]	; (80080a0 <prvAddNewTaskToReadyList+0xc8>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008026:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <prvAddNewTaskToReadyList+0xd0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3301      	adds	r3, #1
 800802c:	4a1e      	ldr	r2, [pc, #120]	; (80080a8 <prvAddNewTaskToReadyList+0xd0>)
 800802e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008030:	4b1d      	ldr	r3, [pc, #116]	; (80080a8 <prvAddNewTaskToReadyList+0xd0>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <prvAddNewTaskToReadyList+0xd4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <prvAddNewTaskToReadyList+0x74>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	4a18      	ldr	r2, [pc, #96]	; (80080ac <prvAddNewTaskToReadyList+0xd4>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <prvAddNewTaskToReadyList+0xd8>)
 800805a:	441a      	add	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7ff f863 	bl	800712e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008068:	f001 fa4c 	bl	8009504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800806c:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <prvAddNewTaskToReadyList+0xcc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00e      	beq.n	8008092 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <prvAddNewTaskToReadyList+0xc8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	429a      	cmp	r2, r3
 8008080:	d207      	bcs.n	8008092 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <prvAddNewTaskToReadyList+0xdc>)
 8008084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20001188 	.word	0x20001188
 80080a0:	20000cb4 	.word	0x20000cb4
 80080a4:	20001194 	.word	0x20001194
 80080a8:	200011a4 	.word	0x200011a4
 80080ac:	20001190 	.word	0x20001190
 80080b0:	20000cb8 	.word	0x20000cb8
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d019      	beq.n	80080fe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <vTaskDelay+0x64>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00c      	beq.n	80080ec <vTaskDelay+0x34>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	60bb      	str	r3, [r7, #8]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 80080ec:	f000 f88e 	bl	800820c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080f0:	2100      	movs	r1, #0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fd18 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080f8:	f000 f896 	bl	8008228 <xTaskResumeAll>
 80080fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008104:	4b06      	ldr	r3, [pc, #24]	; (8008120 <vTaskDelay+0x68>)
 8008106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200011b0 	.word	0x200011b0
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	; 0x28
 8008128:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008132:	463a      	mov	r2, r7
 8008134:	1d39      	adds	r1, r7, #4
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe ff96 	bl	800706c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	9202      	str	r2, [sp, #8]
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	460a      	mov	r2, r1
 8008152:	4926      	ldr	r1, [pc, #152]	; (80081ec <vTaskStartScheduler+0xc8>)
 8008154:	4826      	ldr	r0, [pc, #152]	; (80081f0 <vTaskStartScheduler+0xcc>)
 8008156:	f7ff fdef 	bl	8007d38 <xTaskCreateStatic>
 800815a:	4603      	mov	r3, r0
 800815c:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <vTaskStartScheduler+0xd0>)
 800815e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008160:	4b24      	ldr	r3, [pc, #144]	; (80081f4 <vTaskStartScheduler+0xd0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008168:	2301      	movs	r3, #1
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	e001      	b.n	8008172 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d102      	bne.n	800817e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008178:	f000 fd2a 	bl	8008bd0 <xTimerCreateTimerTask>
 800817c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d11d      	bne.n	80081c0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	b672      	cpsid	i
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	b662      	cpsie	i
 8008198:	613b      	str	r3, [r7, #16]
}
 800819a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800819c:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <vTaskStartScheduler+0xd4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3354      	adds	r3, #84	; 0x54
 80081a2:	4a16      	ldr	r2, [pc, #88]	; (80081fc <vTaskStartScheduler+0xd8>)
 80081a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <vTaskStartScheduler+0xdc>)
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081ae:	4b15      	ldr	r3, [pc, #84]	; (8008204 <vTaskStartScheduler+0xe0>)
 80081b0:	2201      	movs	r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081b4:	4b14      	ldr	r3, [pc, #80]	; (8008208 <vTaskStartScheduler+0xe4>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081ba:	f001 f8f1 	bl	80093a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081be:	e010      	b.n	80081e2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c6:	d10c      	bne.n	80081e2 <vTaskStartScheduler+0xbe>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	b672      	cpsid	i
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	b662      	cpsie	i
 80081dc:	60fb      	str	r3, [r7, #12]
}
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <vTaskStartScheduler+0xbc>
}
 80081e2:	bf00      	nop
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	08009cc0 	.word	0x08009cc0
 80081f0:	08008851 	.word	0x08008851
 80081f4:	200011ac 	.word	0x200011ac
 80081f8:	20000cb4 	.word	0x20000cb4
 80081fc:	2000006c 	.word	0x2000006c
 8008200:	200011a8 	.word	0x200011a8
 8008204:	20001194 	.word	0x20001194
 8008208:	2000118c 	.word	0x2000118c

0800820c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <vTaskSuspendAll+0x18>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	4a03      	ldr	r2, [pc, #12]	; (8008224 <vTaskSuspendAll+0x18>)
 8008218:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800821a:	bf00      	nop
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	200011b0 	.word	0x200011b0

08008228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008236:	4b43      	ldr	r3, [pc, #268]	; (8008344 <xTaskResumeAll+0x11c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10c      	bne.n	8008258 <xTaskResumeAll+0x30>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	603b      	str	r3, [r7, #0]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008258:	f001 f920 	bl	800949c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800825c:	4b39      	ldr	r3, [pc, #228]	; (8008344 <xTaskResumeAll+0x11c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3b01      	subs	r3, #1
 8008262:	4a38      	ldr	r2, [pc, #224]	; (8008344 <xTaskResumeAll+0x11c>)
 8008264:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008266:	4b37      	ldr	r3, [pc, #220]	; (8008344 <xTaskResumeAll+0x11c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d162      	bne.n	8008334 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <xTaskResumeAll+0x120>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d05e      	beq.n	8008334 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008276:	e02f      	b.n	80082d8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	4b34      	ldr	r3, [pc, #208]	; (800834c <xTaskResumeAll+0x124>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3318      	adds	r3, #24
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe ffaf 	bl	80071e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3304      	adds	r3, #4
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe ffaa 	bl	80071e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	4b2d      	ldr	r3, [pc, #180]	; (8008350 <xTaskResumeAll+0x128>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	429a      	cmp	r2, r3
 800829e:	d903      	bls.n	80082a8 <xTaskResumeAll+0x80>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <xTaskResumeAll+0x128>)
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4a27      	ldr	r2, [pc, #156]	; (8008354 <xTaskResumeAll+0x12c>)
 80082b6:	441a      	add	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f7fe ff35 	bl	800712e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	4b23      	ldr	r3, [pc, #140]	; (8008358 <xTaskResumeAll+0x130>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d302      	bcc.n	80082d8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80082d2:	4b22      	ldr	r3, [pc, #136]	; (800835c <xTaskResumeAll+0x134>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082d8:	4b1c      	ldr	r3, [pc, #112]	; (800834c <xTaskResumeAll+0x124>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1cb      	bne.n	8008278 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082e6:	f000 fb6f 	bl	80089c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082ea:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <xTaskResumeAll+0x138>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d010      	beq.n	8008318 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082f6:	f000 f847 	bl	8008388 <xTaskIncrementTick>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008300:	4b16      	ldr	r3, [pc, #88]	; (800835c <xTaskResumeAll+0x134>)
 8008302:	2201      	movs	r2, #1
 8008304:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3b01      	subs	r3, #1
 800830a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1f1      	bne.n	80082f6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008312:	4b13      	ldr	r3, [pc, #76]	; (8008360 <xTaskResumeAll+0x138>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <xTaskResumeAll+0x134>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008320:	2301      	movs	r3, #1
 8008322:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008324:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <xTaskResumeAll+0x13c>)
 8008326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008334:	f001 f8e6 	bl	8009504 <vPortExitCritical>

	return xAlreadyYielded;
 8008338:	68bb      	ldr	r3, [r7, #8]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200011b0 	.word	0x200011b0
 8008348:	20001188 	.word	0x20001188
 800834c:	20001148 	.word	0x20001148
 8008350:	20001190 	.word	0x20001190
 8008354:	20000cb8 	.word	0x20000cb8
 8008358:	20000cb4 	.word	0x20000cb4
 800835c:	2000119c 	.word	0x2000119c
 8008360:	20001198 	.word	0x20001198
 8008364:	e000ed04 	.word	0xe000ed04

08008368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <xTaskGetTickCount+0x1c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008374:	687b      	ldr	r3, [r7, #4]
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	2000118c 	.word	0x2000118c

08008388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008392:	4b50      	ldr	r3, [pc, #320]	; (80084d4 <xTaskIncrementTick+0x14c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f040 808b 	bne.w	80084b2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800839c:	4b4e      	ldr	r3, [pc, #312]	; (80084d8 <xTaskIncrementTick+0x150>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3301      	adds	r3, #1
 80083a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083a4:	4a4c      	ldr	r2, [pc, #304]	; (80084d8 <xTaskIncrementTick+0x150>)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d122      	bne.n	80083f6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80083b0:	4b4a      	ldr	r3, [pc, #296]	; (80084dc <xTaskIncrementTick+0x154>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00c      	beq.n	80083d4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	b672      	cpsid	i
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	b662      	cpsie	i
 80083ce:	603b      	str	r3, [r7, #0]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <xTaskIncrementTick+0x4a>
 80083d4:	4b41      	ldr	r3, [pc, #260]	; (80084dc <xTaskIncrementTick+0x154>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	4b41      	ldr	r3, [pc, #260]	; (80084e0 <xTaskIncrementTick+0x158>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a3f      	ldr	r2, [pc, #252]	; (80084dc <xTaskIncrementTick+0x154>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	4a3f      	ldr	r2, [pc, #252]	; (80084e0 <xTaskIncrementTick+0x158>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <xTaskIncrementTick+0x15c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	4a3d      	ldr	r2, [pc, #244]	; (80084e4 <xTaskIncrementTick+0x15c>)
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	f000 fae9 	bl	80089c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083f6:	4b3c      	ldr	r3, [pc, #240]	; (80084e8 <xTaskIncrementTick+0x160>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d349      	bcc.n	8008494 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008400:	4b36      	ldr	r3, [pc, #216]	; (80084dc <xTaskIncrementTick+0x154>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d104      	bne.n	8008414 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840a:	4b37      	ldr	r3, [pc, #220]	; (80084e8 <xTaskIncrementTick+0x160>)
 800840c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008410:	601a      	str	r2, [r3, #0]
					break;
 8008412:	e03f      	b.n	8008494 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008414:	4b31      	ldr	r3, [pc, #196]	; (80084dc <xTaskIncrementTick+0x154>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	429a      	cmp	r2, r3
 800842a:	d203      	bcs.n	8008434 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800842c:	4a2e      	ldr	r2, [pc, #184]	; (80084e8 <xTaskIncrementTick+0x160>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008432:	e02f      	b.n	8008494 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3304      	adds	r3, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe fed5 	bl	80071e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3318      	adds	r3, #24
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fecc 	bl	80071e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008454:	4b25      	ldr	r3, [pc, #148]	; (80084ec <xTaskIncrementTick+0x164>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	429a      	cmp	r2, r3
 800845a:	d903      	bls.n	8008464 <xTaskIncrementTick+0xdc>
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	4a22      	ldr	r2, [pc, #136]	; (80084ec <xTaskIncrementTick+0x164>)
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <xTaskIncrementTick+0x168>)
 8008472:	441a      	add	r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f7fe fe57 	bl	800712e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008484:	4b1b      	ldr	r3, [pc, #108]	; (80084f4 <xTaskIncrementTick+0x16c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	429a      	cmp	r2, r3
 800848c:	d3b8      	bcc.n	8008400 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800848e:	2301      	movs	r3, #1
 8008490:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008492:	e7b5      	b.n	8008400 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008494:	4b17      	ldr	r3, [pc, #92]	; (80084f4 <xTaskIncrementTick+0x16c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849a:	4915      	ldr	r1, [pc, #84]	; (80084f0 <xTaskIncrementTick+0x168>)
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d907      	bls.n	80084bc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e004      	b.n	80084bc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084b2:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <xTaskIncrementTick+0x170>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3301      	adds	r3, #1
 80084b8:	4a0f      	ldr	r2, [pc, #60]	; (80084f8 <xTaskIncrementTick+0x170>)
 80084ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <xTaskIncrementTick+0x174>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084c8:	697b      	ldr	r3, [r7, #20]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200011b0 	.word	0x200011b0
 80084d8:	2000118c 	.word	0x2000118c
 80084dc:	20001140 	.word	0x20001140
 80084e0:	20001144 	.word	0x20001144
 80084e4:	200011a0 	.word	0x200011a0
 80084e8:	200011a8 	.word	0x200011a8
 80084ec:	20001190 	.word	0x20001190
 80084f0:	20000cb8 	.word	0x20000cb8
 80084f4:	20000cb4 	.word	0x20000cb4
 80084f8:	20001198 	.word	0x20001198
 80084fc:	2000119c 	.word	0x2000119c

08008500 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <vTaskSwitchContext+0xb4>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800850e:	4b2a      	ldr	r3, [pc, #168]	; (80085b8 <vTaskSwitchContext+0xb8>)
 8008510:	2201      	movs	r2, #1
 8008512:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008514:	e048      	b.n	80085a8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008516:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <vTaskSwitchContext+0xb8>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851c:	4b27      	ldr	r3, [pc, #156]	; (80085bc <vTaskSwitchContext+0xbc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e012      	b.n	800854a <vTaskSwitchContext+0x4a>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10c      	bne.n	8008544 <vTaskSwitchContext+0x44>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vTaskSwitchContext+0x42>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3b01      	subs	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	491d      	ldr	r1, [pc, #116]	; (80085c0 <vTaskSwitchContext+0xc0>)
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	440b      	add	r3, r1
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0e2      	beq.n	8008524 <vTaskSwitchContext+0x24>
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4613      	mov	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <vTaskSwitchContext+0xc0>)
 800856a:	4413      	add	r3, r2
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	605a      	str	r2, [r3, #4]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	3308      	adds	r3, #8
 8008580:	429a      	cmp	r2, r3
 8008582:	d104      	bne.n	800858e <vTaskSwitchContext+0x8e>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	605a      	str	r2, [r3, #4]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	4a0b      	ldr	r2, [pc, #44]	; (80085c4 <vTaskSwitchContext+0xc4>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4a08      	ldr	r2, [pc, #32]	; (80085bc <vTaskSwitchContext+0xbc>)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <vTaskSwitchContext+0xc4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3354      	adds	r3, #84	; 0x54
 80085a4:	4a08      	ldr	r2, [pc, #32]	; (80085c8 <vTaskSwitchContext+0xc8>)
 80085a6:	6013      	str	r3, [r2, #0]
}
 80085a8:	bf00      	nop
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	200011b0 	.word	0x200011b0
 80085b8:	2000119c 	.word	0x2000119c
 80085bc:	20001190 	.word	0x20001190
 80085c0:	20000cb8 	.word	0x20000cb8
 80085c4:	20000cb4 	.word	0x20000cb4
 80085c8:	2000006c 	.word	0x2000006c

080085cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10c      	bne.n	80085f6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	b672      	cpsid	i
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	b662      	cpsie	i
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <vTaskPlaceOnEventList+0x48>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3318      	adds	r3, #24
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fe fdb9 	bl	8007176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008604:	2101      	movs	r1, #1
 8008606:	6838      	ldr	r0, [r7, #0]
 8008608:	f000 fa8e 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000cb4 	.word	0x20000cb4

08008618 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10c      	bne.n	8008644 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862e:	b672      	cpsid	i
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	b662      	cpsie	i
 800863e:	617b      	str	r3, [r7, #20]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008644:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <vTaskPlaceOnEventListRestricted+0x58>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3318      	adds	r3, #24
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7fe fd6e 	bl	800712e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800865c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	68b8      	ldr	r0, [r7, #8]
 8008662:	f000 fa61 	bl	8008b28 <prvAddCurrentTaskToDelayedList>
	}
 8008666:	bf00      	nop
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000cb4 	.word	0x20000cb4

08008674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	b672      	cpsid	i
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	b662      	cpsie	i
 800869e:	60fb      	str	r3, [r7, #12]
}
 80086a0:	bf00      	nop
 80086a2:	e7fe      	b.n	80086a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	3318      	adds	r3, #24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fe fd9d 	bl	80071e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ae:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <xTaskRemoveFromEventList+0xb4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d11d      	bne.n	80086f2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fd94 	bl	80071e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c4:	4b19      	ldr	r3, [pc, #100]	; (800872c <xTaskRemoveFromEventList+0xb8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d903      	bls.n	80086d4 <xTaskRemoveFromEventList+0x60>
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	4a16      	ldr	r2, [pc, #88]	; (800872c <xTaskRemoveFromEventList+0xb8>)
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4a13      	ldr	r2, [pc, #76]	; (8008730 <xTaskRemoveFromEventList+0xbc>)
 80086e2:	441a      	add	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	3304      	adds	r3, #4
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7fe fd1f 	bl	800712e <vListInsertEnd>
 80086f0:	e005      	b.n	80086fe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3318      	adds	r3, #24
 80086f6:	4619      	mov	r1, r3
 80086f8:	480e      	ldr	r0, [pc, #56]	; (8008734 <xTaskRemoveFromEventList+0xc0>)
 80086fa:	f7fe fd18 	bl	800712e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <xTaskRemoveFromEventList+0xc4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	429a      	cmp	r2, r3
 800870a:	d905      	bls.n	8008718 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800870c:	2301      	movs	r3, #1
 800870e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008710:	4b0a      	ldr	r3, [pc, #40]	; (800873c <xTaskRemoveFromEventList+0xc8>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e001      	b.n	800871c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800871c:	697b      	ldr	r3, [r7, #20]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	200011b0 	.word	0x200011b0
 800872c:	20001190 	.word	0x20001190
 8008730:	20000cb8 	.word	0x20000cb8
 8008734:	20001148 	.word	0x20001148
 8008738:	20000cb4 	.word	0x20000cb4
 800873c:	2000119c 	.word	0x2000119c

08008740 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008748:	4b06      	ldr	r3, [pc, #24]	; (8008764 <vTaskInternalSetTimeOutState+0x24>)
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <vTaskInternalSetTimeOutState+0x28>)
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	605a      	str	r2, [r3, #4]
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	200011a0 	.word	0x200011a0
 8008768:	2000118c 	.word	0x2000118c

0800876c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b088      	sub	sp, #32
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10c      	bne.n	8008796 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	b672      	cpsid	i
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	b662      	cpsie	i
 8008790:	613b      	str	r3, [r7, #16]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10c      	bne.n	80087b6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80087b6:	f000 fe71 	bl	800949c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <xTaskCheckForTimeOut+0xc4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	69ba      	ldr	r2, [r7, #24]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d2:	d102      	bne.n	80087da <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	e023      	b.n	8008822 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b15      	ldr	r3, [pc, #84]	; (8008834 <xTaskCheckForTimeOut+0xc8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d007      	beq.n	80087f6 <xTaskCheckForTimeOut+0x8a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	61fb      	str	r3, [r7, #28]
 80087f4:	e015      	b.n	8008822 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	697a      	ldr	r2, [r7, #20]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d20b      	bcs.n	8008818 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff ff97 	bl	8008740 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e004      	b.n	8008822 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800881e:	2301      	movs	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008822:	f000 fe6f 	bl	8009504 <vPortExitCritical>

	return xReturn;
 8008826:	69fb      	ldr	r3, [r7, #28]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000118c 	.word	0x2000118c
 8008834:	200011a0 	.word	0x200011a0

08008838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800883c:	4b03      	ldr	r3, [pc, #12]	; (800884c <vTaskMissedYield+0x14>)
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	2000119c 	.word	0x2000119c

08008850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008858:	f000 f852 	bl	8008900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <prvIdleTask+0x28>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d9f9      	bls.n	8008858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <prvIdleTask+0x2c>)
 8008866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008874:	e7f0      	b.n	8008858 <prvIdleTask+0x8>
 8008876:	bf00      	nop
 8008878:	20000cb8 	.word	0x20000cb8
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
 800888a:	e00c      	b.n	80088a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	4613      	mov	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4a12      	ldr	r2, [pc, #72]	; (80088e0 <prvInitialiseTaskLists+0x60>)
 8008898:	4413      	add	r3, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fc1a 	bl	80070d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3301      	adds	r3, #1
 80088a4:	607b      	str	r3, [r7, #4]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b37      	cmp	r3, #55	; 0x37
 80088aa:	d9ef      	bls.n	800888c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088ac:	480d      	ldr	r0, [pc, #52]	; (80088e4 <prvInitialiseTaskLists+0x64>)
 80088ae:	f7fe fc11 	bl	80070d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088b2:	480d      	ldr	r0, [pc, #52]	; (80088e8 <prvInitialiseTaskLists+0x68>)
 80088b4:	f7fe fc0e 	bl	80070d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088b8:	480c      	ldr	r0, [pc, #48]	; (80088ec <prvInitialiseTaskLists+0x6c>)
 80088ba:	f7fe fc0b 	bl	80070d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088be:	480c      	ldr	r0, [pc, #48]	; (80088f0 <prvInitialiseTaskLists+0x70>)
 80088c0:	f7fe fc08 	bl	80070d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088c4:	480b      	ldr	r0, [pc, #44]	; (80088f4 <prvInitialiseTaskLists+0x74>)
 80088c6:	f7fe fc05 	bl	80070d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <prvInitialiseTaskLists+0x78>)
 80088cc:	4a05      	ldr	r2, [pc, #20]	; (80088e4 <prvInitialiseTaskLists+0x64>)
 80088ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvInitialiseTaskLists+0x7c>)
 80088d2:	4a05      	ldr	r2, [pc, #20]	; (80088e8 <prvInitialiseTaskLists+0x68>)
 80088d4:	601a      	str	r2, [r3, #0]
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000cb8 	.word	0x20000cb8
 80088e4:	20001118 	.word	0x20001118
 80088e8:	2000112c 	.word	0x2000112c
 80088ec:	20001148 	.word	0x20001148
 80088f0:	2000115c 	.word	0x2000115c
 80088f4:	20001174 	.word	0x20001174
 80088f8:	20001140 	.word	0x20001140
 80088fc:	20001144 	.word	0x20001144

08008900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008906:	e019      	b.n	800893c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008908:	f000 fdc8 	bl	800949c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <prvCheckTasksWaitingTermination+0x50>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3304      	adds	r3, #4
 8008918:	4618      	mov	r0, r3
 800891a:	f7fe fc65 	bl	80071e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <prvCheckTasksWaitingTermination+0x54>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3b01      	subs	r3, #1
 8008924:	4a0b      	ldr	r2, [pc, #44]	; (8008954 <prvCheckTasksWaitingTermination+0x54>)
 8008926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008928:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <prvCheckTasksWaitingTermination+0x58>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3b01      	subs	r3, #1
 800892e:	4a0a      	ldr	r2, [pc, #40]	; (8008958 <prvCheckTasksWaitingTermination+0x58>)
 8008930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008932:	f000 fde7 	bl	8009504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f810 	bl	800895c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <prvCheckTasksWaitingTermination+0x58>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e1      	bne.n	8008908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	2000115c 	.word	0x2000115c
 8008954:	20001188 	.word	0x20001188
 8008958:	20001170 	.word	0x20001170

0800895c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3354      	adds	r3, #84	; 0x54
 8008968:	4618      	mov	r0, r3
 800896a:	f001 f8af 	bl	8009acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008974:	2b00      	cmp	r3, #0
 8008976:	d108      	bne.n	800898a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	4618      	mov	r0, r3
 800897e:	f000 ff83 	bl	8009888 <vPortFree>
				vPortFree( pxTCB );
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 ff80 	bl	8009888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008988:	e01a      	b.n	80089c0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008990:	2b01      	cmp	r3, #1
 8008992:	d103      	bne.n	800899c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 ff77 	bl	8009888 <vPortFree>
	}
 800899a:	e011      	b.n	80089c0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d00c      	beq.n	80089c0 <prvDeleteTCB+0x64>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	b672      	cpsid	i
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	b662      	cpsie	i
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <prvDeleteTCB+0x62>
	}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <prvResetNextTaskUnblockTime+0x38>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <prvResetNextTaskUnblockTime+0x3c>)
 80089da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089e0:	e008      	b.n	80089f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <prvResetNextTaskUnblockTime+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <prvResetNextTaskUnblockTime+0x3c>)
 80089f2:	6013      	str	r3, [r2, #0]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	20001140 	.word	0x20001140
 8008a04:	200011a8 	.word	0x200011a8

08008a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <xTaskGetSchedulerState+0x34>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a16:	2301      	movs	r3, #1
 8008a18:	607b      	str	r3, [r7, #4]
 8008a1a:	e008      	b.n	8008a2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <xTaskGetSchedulerState+0x38>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a24:	2302      	movs	r3, #2
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	e001      	b.n	8008a2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a2e:	687b      	ldr	r3, [r7, #4]
	}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20001194 	.word	0x20001194
 8008a40:	200011b0 	.word	0x200011b0

08008a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05a      	beq.n	8008b10 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a5a:	4b30      	ldr	r3, [pc, #192]	; (8008b1c <xTaskPriorityDisinherit+0xd8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d00c      	beq.n	8008a7e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	b672      	cpsid	i
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	b662      	cpsie	i
 8008a78:	60fb      	str	r3, [r7, #12]
}
 8008a7a:	bf00      	nop
 8008a7c:	e7fe      	b.n	8008a7c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10c      	bne.n	8008aa0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8a:	b672      	cpsid	i
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	b662      	cpsie	i
 8008a9a:	60bb      	str	r3, [r7, #8]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	1e5a      	subs	r2, r3, #1
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d02c      	beq.n	8008b10 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d128      	bne.n	8008b10 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fb90 	bl	80071e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <xTaskPriorityDisinherit+0xdc>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d903      	bls.n	8008af0 <xTaskPriorityDisinherit+0xac>
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	4a0c      	ldr	r2, [pc, #48]	; (8008b20 <xTaskPriorityDisinherit+0xdc>)
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4a09      	ldr	r2, [pc, #36]	; (8008b24 <xTaskPriorityDisinherit+0xe0>)
 8008afe:	441a      	add	r2, r3
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f7fe fb11 	bl	800712e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b10:	697b      	ldr	r3, [r7, #20]
	}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000cb4 	.word	0x20000cb4
 8008b20:	20001190 	.word	0x20001190
 8008b24:	20000cb8 	.word	0x20000cb8

08008b28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b32:	4b21      	ldr	r3, [pc, #132]	; (8008bb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b38:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fb52 	bl	80071e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b4a:	d10a      	bne.n	8008b62 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b52:	4b1a      	ldr	r3, [pc, #104]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4819      	ldr	r0, [pc, #100]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b5c:	f7fe fae7 	bl	800712e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b60:	e026      	b.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4413      	add	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b6a:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d209      	bcs.n	8008b8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe faf5 	bl	8007176 <vListInsert>
}
 8008b8c:	e010      	b.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <prvAddCurrentTaskToDelayedList+0x94>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe faeb 	bl	8007176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d202      	bcs.n	8008bb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008baa:	4a08      	ldr	r2, [pc, #32]	; (8008bcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6013      	str	r3, [r2, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	2000118c 	.word	0x2000118c
 8008bbc:	20000cb4 	.word	0x20000cb4
 8008bc0:	20001174 	.word	0x20001174
 8008bc4:	20001144 	.word	0x20001144
 8008bc8:	20001140 	.word	0x20001140
 8008bcc:	200011a8 	.word	0x200011a8

08008bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08a      	sub	sp, #40	; 0x28
 8008bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bda:	f000 fb15 	bl	8009208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <xTimerCreateTimerTask+0x84>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d021      	beq.n	8008c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bee:	1d3a      	adds	r2, r7, #4
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	f107 030c 	add.w	r3, r7, #12
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fa51 	bl	80070a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008bfe:	6879      	ldr	r1, [r7, #4]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	9202      	str	r2, [sp, #8]
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	2302      	movs	r3, #2
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	460a      	mov	r2, r1
 8008c10:	4911      	ldr	r1, [pc, #68]	; (8008c58 <xTimerCreateTimerTask+0x88>)
 8008c12:	4812      	ldr	r0, [pc, #72]	; (8008c5c <xTimerCreateTimerTask+0x8c>)
 8008c14:	f7ff f890 	bl	8007d38 <xTaskCreateStatic>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4a11      	ldr	r2, [pc, #68]	; (8008c60 <xTimerCreateTimerTask+0x90>)
 8008c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <xTimerCreateTimerTask+0x90>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c26:	2301      	movs	r3, #1
 8008c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10c      	bne.n	8008c4a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	b672      	cpsid	i
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	b662      	cpsie	i
 8008c44:	613b      	str	r3, [r7, #16]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c4a:	697b      	ldr	r3, [r7, #20]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200011e4 	.word	0x200011e4
 8008c58:	08009cc8 	.word	0x08009cc8
 8008c5c:	08008da1 	.word	0x08008da1
 8008c60:	200011e8 	.word	0x200011e8

08008c64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08a      	sub	sp, #40	; 0x28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10c      	bne.n	8008c96 <xTimerGenericCommand+0x32>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	b672      	cpsid	i
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	b662      	cpsie	i
 8008c90:	623b      	str	r3, [r7, #32]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <xTimerGenericCommand+0x9c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d02a      	beq.n	8008cf4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	dc18      	bgt.n	8008ce2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cb0:	f7ff feaa 	bl	8008a08 <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d109      	bne.n	8008cce <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <xTimerGenericCommand+0x9c>)
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f107 0110 	add.w	r1, r7, #16
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc6:	f7fe fc3d 	bl	8007544 <xQueueGenericSend>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
 8008ccc:	e012      	b.n	8008cf4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <xTimerGenericCommand+0x9c>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f107 0110 	add.w	r1, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f7fe fc33 	bl	8007544 <xQueueGenericSend>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce0:	e008      	b.n	8008cf4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <xTimerGenericCommand+0x9c>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	2300      	movs	r3, #0
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	f7fe fd2f 	bl	8007750 <xQueueGenericSendFromISR>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	200011e4 	.word	0x200011e4

08008d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <prvProcessExpiredTimer+0x98>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fa63 	bl	80071e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d024      	beq.n	8008d7a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	18d1      	adds	r1, r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	6978      	ldr	r0, [r7, #20]
 8008d3e:	f000 f8d3 	bl	8008ee8 <prvInsertTimerInActiveList>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d021      	beq.n	8008d8c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	2100      	movs	r1, #0
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f7ff ff86 	bl	8008c64 <xTimerGenericCommand>
 8008d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d115      	bne.n	8008d8c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	b672      	cpsid	i
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	b662      	cpsie	i
 8008d74:	60fb      	str	r3, [r7, #12]
}
 8008d76:	bf00      	nop
 8008d78:	e7fe      	b.n	8008d78 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	6978      	ldr	r0, [r7, #20]
 8008d92:	4798      	blx	r3
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200011dc 	.word	0x200011dc

08008da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008da8:	f107 0308 	add.w	r3, r7, #8
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f857 	bl	8008e60 <prvGetNextExpireTime>
 8008db2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4619      	mov	r1, r3
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f803 	bl	8008dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dbe:	f000 f8d5 	bl	8008f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dc2:	e7f1      	b.n	8008da8 <prvTimerTask+0x8>

08008dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dce:	f7ff fa1d 	bl	800820c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dd2:	f107 0308 	add.w	r3, r7, #8
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f866 	bl	8008ea8 <prvSampleTimeNow>
 8008ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d130      	bne.n	8008e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d806      	bhi.n	8008e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008df2:	f7ff fa19 	bl	8008228 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff ff83 	bl	8008d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dfe:	e024      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <prvProcessTimerOrBlockTask+0x90>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <prvProcessTimerOrBlockTask+0x50>
 8008e10:	2301      	movs	r3, #1
 8008e12:	e000      	b.n	8008e16 <prvProcessTimerOrBlockTask+0x52>
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e18:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <prvProcessTimerOrBlockTask+0x94>)
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fe ff53 	bl	8007cd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e2a:	f7ff f9fd 	bl	8008228 <xTaskResumeAll>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10a      	bne.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <prvProcessTimerOrBlockTask+0x98>)
 8008e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	f3bf 8f4f 	dsb	sy
 8008e40:	f3bf 8f6f 	isb	sy
}
 8008e44:	e001      	b.n	8008e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e46:	f7ff f9ef 	bl	8008228 <xTaskResumeAll>
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	200011e0 	.word	0x200011e0
 8008e58:	200011e4 	.word	0x200011e4
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <prvGetNextExpireTime+0x16>
 8008e72:	2201      	movs	r2, #1
 8008e74:	e000      	b.n	8008e78 <prvGetNextExpireTime+0x18>
 8008e76:	2200      	movs	r2, #0
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d105      	bne.n	8008e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <prvGetNextExpireTime+0x44>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e001      	b.n	8008e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e94:	68fb      	ldr	r3, [r7, #12]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	200011dc 	.word	0x200011dc

08008ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eb0:	f7ff fa5a 	bl	8008368 <xTaskGetTickCount>
 8008eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eb6:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <prvSampleTimeNow+0x3c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d205      	bcs.n	8008ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ec0:	f000 f93c 	bl	800913c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ed2:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <prvSampleTimeNow+0x3c>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200011ec 	.word	0x200011ec

08008ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d812      	bhi.n	8008f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad2      	subs	r2, r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d302      	bcc.n	8008f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	e01b      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f22:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <prvInsertTimerInActiveList+0x7c>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7fe f922 	bl	8007176 <vListInsert>
 8008f32:	e012      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d206      	bcs.n	8008f4a <prvInsertTimerInActiveList+0x62>
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d302      	bcc.n	8008f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e007      	b.n	8008f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f4a:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <prvInsertTimerInActiveList+0x80>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f7fe f90e 	bl	8007176 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200011e0 	.word	0x200011e0
 8008f68:	200011dc 	.word	0x200011dc

08008f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f72:	e0d0      	b.n	8009116 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da1a      	bge.n	8008fb0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f7a:	1d3b      	adds	r3, r7, #4
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	b672      	cpsid	i
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	b662      	cpsie	i
 8008f9a:	61fb      	str	r3, [r7, #28]
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa6:	6850      	ldr	r0, [r2, #4]
 8008fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008faa:	6892      	ldr	r2, [r2, #8]
 8008fac:	4611      	mov	r1, r2
 8008fae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f2c0 80af 	blt.w	8009116 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe f90d 	bl	80071e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fce:	463b      	mov	r3, r7
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7ff ff69 	bl	8008ea8 <prvSampleTimeNow>
 8008fd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	f200 809a 	bhi.w	8009114 <prvProcessReceivedCommands+0x1a8>
 8008fe0:	a201      	add	r2, pc, #4	; (adr r2, 8008fe8 <prvProcessReceivedCommands+0x7c>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	08009011 	.word	0x08009011
 8008fec:	08009011 	.word	0x08009011
 8008ff0:	08009011 	.word	0x08009011
 8008ff4:	08009089 	.word	0x08009089
 8008ff8:	0800909d 	.word	0x0800909d
 8008ffc:	080090eb 	.word	0x080090eb
 8009000:	08009011 	.word	0x08009011
 8009004:	08009011 	.word	0x08009011
 8009008:	08009089 	.word	0x08009089
 800900c:	0800909d 	.word	0x0800909d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009016:	f043 0301 	orr.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	18d1      	adds	r1, r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009030:	f7ff ff5a 	bl	8008ee8 <prvInsertTimerInActiveList>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d06d      	beq.n	8009116 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d062      	beq.n	8009116 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	441a      	add	r2, r3
 8009058:	2300      	movs	r3, #0
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2300      	movs	r3, #0
 800905e:	2100      	movs	r1, #0
 8009060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009062:	f7ff fdff 	bl	8008c64 <xTimerGenericCommand>
 8009066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d153      	bne.n	8009116 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	b672      	cpsid	i
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	b662      	cpsie	i
 8009082:	61bb      	str	r3, [r7, #24]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800909a:	e03c      	b.n	8009116 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10c      	bne.n	80090d6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	b672      	cpsid	i
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	b662      	cpsie	i
 80090d0:	617b      	str	r3, [r7, #20]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	699a      	ldr	r2, [r3, #24]
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	18d1      	adds	r1, r2, r3
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e4:	f7ff ff00 	bl	8008ee8 <prvInsertTimerInActiveList>
					break;
 80090e8:	e015      	b.n	8009116 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80090f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090fa:	f000 fbc5 	bl	8009888 <vPortFree>
 80090fe:	e00a      	b.n	8009116 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	b2da      	uxtb	r2, r3
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009112:	e000      	b.n	8009116 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <prvProcessReceivedCommands+0x1cc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	1d39      	adds	r1, r7, #4
 800911c:	2200      	movs	r2, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f7fe fbb6 	bl	8007890 <xQueueReceive>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	f47f af24 	bne.w	8008f74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3730      	adds	r7, #48	; 0x30
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	200011e4 	.word	0x200011e4

0800913c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009142:	e04a      	b.n	80091da <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009144:	4b2e      	ldr	r3, [pc, #184]	; (8009200 <prvSwitchTimerLists+0xc4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800914e:	4b2c      	ldr	r3, [pc, #176]	; (8009200 <prvSwitchTimerLists+0xc4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3304      	adds	r3, #4
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe f843 	bl	80071e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b00      	cmp	r3, #0
 8009176:	d030      	beq.n	80091da <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	4413      	add	r3, r2
 8009180:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	d90e      	bls.n	80091a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68ba      	ldr	r2, [r7, #8]
 800918e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009196:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <prvSwitchTimerLists+0xc4>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3304      	adds	r3, #4
 800919e:	4619      	mov	r1, r3
 80091a0:	4610      	mov	r0, r2
 80091a2:	f7fd ffe8 	bl	8007176 <vListInsert>
 80091a6:	e018      	b.n	80091da <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091a8:	2300      	movs	r3, #0
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	2300      	movs	r3, #0
 80091ae:	693a      	ldr	r2, [r7, #16]
 80091b0:	2100      	movs	r1, #0
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f7ff fd56 	bl	8008c64 <xTimerGenericCommand>
 80091b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10c      	bne.n	80091da <prvSwitchTimerLists+0x9e>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	b672      	cpsid	i
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	b662      	cpsie	i
 80091d4:	603b      	str	r3, [r7, #0]
}
 80091d6:	bf00      	nop
 80091d8:	e7fe      	b.n	80091d8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <prvSwitchTimerLists+0xc4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1af      	bne.n	8009144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <prvSwitchTimerLists+0xc4>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <prvSwitchTimerLists+0xc8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a04      	ldr	r2, [pc, #16]	; (8009200 <prvSwitchTimerLists+0xc4>)
 80091f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvSwitchTimerLists+0xc8>)
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	bf00      	nop
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	200011dc 	.word	0x200011dc
 8009204:	200011e0 	.word	0x200011e0

08009208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800920e:	f000 f945 	bl	800949c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009212:	4b15      	ldr	r3, [pc, #84]	; (8009268 <prvCheckForValidListAndQueue+0x60>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d120      	bne.n	800925c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800921a:	4814      	ldr	r0, [pc, #80]	; (800926c <prvCheckForValidListAndQueue+0x64>)
 800921c:	f7fd ff5a 	bl	80070d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009220:	4813      	ldr	r0, [pc, #76]	; (8009270 <prvCheckForValidListAndQueue+0x68>)
 8009222:	f7fd ff57 	bl	80070d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009226:	4b13      	ldr	r3, [pc, #76]	; (8009274 <prvCheckForValidListAndQueue+0x6c>)
 8009228:	4a10      	ldr	r2, [pc, #64]	; (800926c <prvCheckForValidListAndQueue+0x64>)
 800922a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800922c:	4b12      	ldr	r3, [pc, #72]	; (8009278 <prvCheckForValidListAndQueue+0x70>)
 800922e:	4a10      	ldr	r2, [pc, #64]	; (8009270 <prvCheckForValidListAndQueue+0x68>)
 8009230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009232:	2300      	movs	r3, #0
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <prvCheckForValidListAndQueue+0x74>)
 8009238:	4a11      	ldr	r2, [pc, #68]	; (8009280 <prvCheckForValidListAndQueue+0x78>)
 800923a:	2110      	movs	r1, #16
 800923c:	200a      	movs	r0, #10
 800923e:	f7fe f867 	bl	8007310 <xQueueGenericCreateStatic>
 8009242:	4603      	mov	r3, r0
 8009244:	4a08      	ldr	r2, [pc, #32]	; (8009268 <prvCheckForValidListAndQueue+0x60>)
 8009246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009248:	4b07      	ldr	r3, [pc, #28]	; (8009268 <prvCheckForValidListAndQueue+0x60>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <prvCheckForValidListAndQueue+0x60>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	490b      	ldr	r1, [pc, #44]	; (8009284 <prvCheckForValidListAndQueue+0x7c>)
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fd10 	bl	8007c7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800925c:	f000 f952 	bl	8009504 <vPortExitCritical>
}
 8009260:	bf00      	nop
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200011e4 	.word	0x200011e4
 800926c:	200011b4 	.word	0x200011b4
 8009270:	200011c8 	.word	0x200011c8
 8009274:	200011dc 	.word	0x200011dc
 8009278:	200011e0 	.word	0x200011e0
 800927c:	20001290 	.word	0x20001290
 8009280:	200011f0 	.word	0x200011f0
 8009284:	08009cd0 	.word	0x08009cd0

08009288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3b04      	subs	r3, #4
 8009298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3b04      	subs	r3, #4
 80092a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f023 0201 	bic.w	r2, r3, #1
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092b8:	4a0c      	ldr	r2, [pc, #48]	; (80092ec <pxPortInitialiseStack+0x64>)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3b14      	subs	r3, #20
 80092c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f06f 0202 	mvn.w	r2, #2
 80092d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3b20      	subs	r3, #32
 80092dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092de:	68fb      	ldr	r3, [r7, #12]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	080092f1 	.word	0x080092f1

080092f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092fa:	4b14      	ldr	r3, [pc, #80]	; (800934c <prvTaskExitError+0x5c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009302:	d00c      	beq.n	800931e <prvTaskExitError+0x2e>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	b672      	cpsid	i
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	b662      	cpsie	i
 8009318:	60fb      	str	r3, [r7, #12]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <prvTaskExitError+0x2c>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	b672      	cpsid	i
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	b662      	cpsie	i
 8009332:	60bb      	str	r3, [r7, #8]
}
 8009334:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009336:	bf00      	nop
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0fc      	beq.n	8009338 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	2000001c 	.word	0x2000001c

08009350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009350:	4b07      	ldr	r3, [pc, #28]	; (8009370 <pxCurrentTCBConst2>)
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	6808      	ldr	r0, [r1, #0]
 8009356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935a:	f380 8809 	msr	PSP, r0
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f04f 0000 	mov.w	r0, #0
 8009366:	f380 8811 	msr	BASEPRI, r0
 800936a:	4770      	bx	lr
 800936c:	f3af 8000 	nop.w

08009370 <pxCurrentTCBConst2>:
 8009370:	20000cb4 	.word	0x20000cb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop

08009378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009378:	4808      	ldr	r0, [pc, #32]	; (800939c <prvPortStartFirstTask+0x24>)
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	6800      	ldr	r0, [r0, #0]
 800937e:	f380 8808 	msr	MSP, r0
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8814 	msr	CONTROL, r0
 800938a:	b662      	cpsie	i
 800938c:	b661      	cpsie	f
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	df00      	svc	0
 8009398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800939a:	bf00      	nop
 800939c:	e000ed08 	.word	0xe000ed08

080093a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093a6:	4b37      	ldr	r3, [pc, #220]	; (8009484 <xPortStartScheduler+0xe4>)
 80093a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	4b2f      	ldr	r3, [pc, #188]	; (8009488 <xPortStartScheduler+0xe8>)
 80093cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ce:	4b2f      	ldr	r3, [pc, #188]	; (800948c <xPortStartScheduler+0xec>)
 80093d0:	2207      	movs	r2, #7
 80093d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093d4:	e009      	b.n	80093ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093d6:	4b2d      	ldr	r3, [pc, #180]	; (800948c <xPortStartScheduler+0xec>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3b01      	subs	r3, #1
 80093dc:	4a2b      	ldr	r2, [pc, #172]	; (800948c <xPortStartScheduler+0xec>)
 80093de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b80      	cmp	r3, #128	; 0x80
 80093f4:	d0ef      	beq.n	80093d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093f6:	4b25      	ldr	r3, [pc, #148]	; (800948c <xPortStartScheduler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1c3 0307 	rsb	r3, r3, #7
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d00c      	beq.n	800941c <xPortStartScheduler+0x7c>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	b672      	cpsid	i
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	b662      	cpsie	i
 8009416:	60bb      	str	r3, [r7, #8]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800941c:	4b1b      	ldr	r3, [pc, #108]	; (800948c <xPortStartScheduler+0xec>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	4a1a      	ldr	r2, [pc, #104]	; (800948c <xPortStartScheduler+0xec>)
 8009424:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009426:	4b19      	ldr	r3, [pc, #100]	; (800948c <xPortStartScheduler+0xec>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <xPortStartScheduler+0xec>)
 8009430:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	b2da      	uxtb	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <xPortStartScheduler+0xf0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a14      	ldr	r2, [pc, #80]	; (8009490 <xPortStartScheduler+0xf0>)
 8009440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009444:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <xPortStartScheduler+0xf0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a11      	ldr	r2, [pc, #68]	; (8009490 <xPortStartScheduler+0xf0>)
 800944c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009450:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009452:	f000 f8dd 	bl	8009610 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <xPortStartScheduler+0xf4>)
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800945c:	f000 f8fc 	bl	8009658 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009460:	4b0d      	ldr	r3, [pc, #52]	; (8009498 <xPortStartScheduler+0xf8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <xPortStartScheduler+0xf8>)
 8009466:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800946a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800946c:	f7ff ff84 	bl	8009378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009470:	f7ff f846 	bl	8008500 <vTaskSwitchContext>
	prvTaskExitError();
 8009474:	f7ff ff3c 	bl	80092f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	e000e400 	.word	0xe000e400
 8009488:	200012e0 	.word	0x200012e0
 800948c:	200012e4 	.word	0x200012e4
 8009490:	e000ed20 	.word	0xe000ed20
 8009494:	2000001c 	.word	0x2000001c
 8009498:	e000ef34 	.word	0xe000ef34

0800949c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	__asm volatile
 80094a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a6:	b672      	cpsid	i
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	b662      	cpsie	i
 80094b6:	607b      	str	r3, [r7, #4]
}
 80094b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ba:	4b10      	ldr	r3, [pc, #64]	; (80094fc <vPortEnterCritical+0x60>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3301      	adds	r3, #1
 80094c0:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <vPortEnterCritical+0x60>)
 80094c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094c4:	4b0d      	ldr	r3, [pc, #52]	; (80094fc <vPortEnterCritical+0x60>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d111      	bne.n	80094f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <vPortEnterCritical+0x64>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00c      	beq.n	80094f0 <vPortEnterCritical+0x54>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	b672      	cpsid	i
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	b662      	cpsie	i
 80094ea:	603b      	str	r3, [r7, #0]
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <vPortEnterCritical+0x52>
	}
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	2000001c 	.word	0x2000001c
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800950a:	4b13      	ldr	r3, [pc, #76]	; (8009558 <vPortExitCritical+0x54>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10c      	bne.n	800952c <vPortExitCritical+0x28>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	b672      	cpsid	i
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	b662      	cpsie	i
 8009526:	607b      	str	r3, [r7, #4]
}
 8009528:	bf00      	nop
 800952a:	e7fe      	b.n	800952a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800952c:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <vPortExitCritical+0x54>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	4a09      	ldr	r2, [pc, #36]	; (8009558 <vPortExitCritical+0x54>)
 8009534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <vPortExitCritical+0x54>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <vPortExitCritical+0x46>
 800953e:	2300      	movs	r3, #0
 8009540:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f383 8811 	msr	BASEPRI, r3
}
 8009548:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	2000001c 	.word	0x2000001c
 800955c:	00000000 	.word	0x00000000

08009560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009560:	f3ef 8009 	mrs	r0, PSP
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	4b15      	ldr	r3, [pc, #84]	; (80095c0 <pxCurrentTCBConst>)
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	f01e 0f10 	tst.w	lr, #16
 8009570:	bf08      	it	eq
 8009572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957a:	6010      	str	r0, [r2, #0]
 800957c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009584:	b672      	cpsid	i
 8009586:	f380 8811 	msr	BASEPRI, r0
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	b662      	cpsie	i
 8009594:	f7fe ffb4 	bl	8008500 <vTaskSwitchContext>
 8009598:	f04f 0000 	mov.w	r0, #0
 800959c:	f380 8811 	msr	BASEPRI, r0
 80095a0:	bc09      	pop	{r0, r3}
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	6808      	ldr	r0, [r1, #0]
 80095a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	f01e 0f10 	tst.w	lr, #16
 80095ae:	bf08      	it	eq
 80095b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095b4:	f380 8809 	msr	PSP, r0
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <pxCurrentTCBConst>:
 80095c0:	20000cb4 	.word	0x20000cb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop

080095c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	b672      	cpsid	i
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	b662      	cpsie	i
 80095e2:	607b      	str	r3, [r7, #4]
}
 80095e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095e6:	f7fe fecf 	bl	8008388 <xTaskIncrementTick>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <SysTick_Handler+0x44>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f383 8811 	msr	BASEPRI, r3
}
 8009602:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009604:	bf00      	nop
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <vPortSetupTimerInterrupt+0x34>)
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <vPortSetupTimerInterrupt+0x38>)
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009620:	4b0a      	ldr	r3, [pc, #40]	; (800964c <vPortSetupTimerInterrupt+0x3c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a0a      	ldr	r2, [pc, #40]	; (8009650 <vPortSetupTimerInterrupt+0x40>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	099b      	lsrs	r3, r3, #6
 800962c:	4a09      	ldr	r2, [pc, #36]	; (8009654 <vPortSetupTimerInterrupt+0x44>)
 800962e:	3b01      	subs	r3, #1
 8009630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009632:	4b04      	ldr	r3, [pc, #16]	; (8009644 <vPortSetupTimerInterrupt+0x34>)
 8009634:	2207      	movs	r2, #7
 8009636:	601a      	str	r2, [r3, #0]
}
 8009638:	bf00      	nop
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	e000e010 	.word	0xe000e010
 8009648:	e000e018 	.word	0xe000e018
 800964c:	20000010 	.word	0x20000010
 8009650:	10624dd3 	.word	0x10624dd3
 8009654:	e000e014 	.word	0xe000e014

08009658 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009658:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009668 <vPortEnableVFP+0x10>
 800965c:	6801      	ldr	r1, [r0, #0]
 800965e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009662:	6001      	str	r1, [r0, #0]
 8009664:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009666:	bf00      	nop
 8009668:	e000ed88 	.word	0xe000ed88

0800966c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009672:	f3ef 8305 	mrs	r3, IPSR
 8009676:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b0f      	cmp	r3, #15
 800967c:	d916      	bls.n	80096ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800967e:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <vPortValidateInterruptPriority+0x78>)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009688:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <vPortValidateInterruptPriority+0x7c>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	7afa      	ldrb	r2, [r7, #11]
 800968e:	429a      	cmp	r2, r3
 8009690:	d20c      	bcs.n	80096ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	b672      	cpsid	i
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	b662      	cpsie	i
 80096a6:	607b      	str	r3, [r7, #4]
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096ac:	4b0f      	ldr	r3, [pc, #60]	; (80096ec <vPortValidateInterruptPriority+0x80>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <vPortValidateInterruptPriority+0x84>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d90c      	bls.n	80096d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	b672      	cpsid	i
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	b662      	cpsie	i
 80096d0:	603b      	str	r3, [r7, #0]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <vPortValidateInterruptPriority+0x68>
	}
 80096d6:	bf00      	nop
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	e000e3f0 	.word	0xe000e3f0
 80096e8:	200012e0 	.word	0x200012e0
 80096ec:	e000ed0c 	.word	0xe000ed0c
 80096f0:	200012e4 	.word	0x200012e4

080096f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009700:	f7fe fd84 	bl	800820c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009704:	4b5b      	ldr	r3, [pc, #364]	; (8009874 <pvPortMalloc+0x180>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800970c:	f000 f91a 	bl	8009944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009710:	4b59      	ldr	r3, [pc, #356]	; (8009878 <pvPortMalloc+0x184>)
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	f040 8092 	bne.w	8009842 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01f      	beq.n	8009764 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009724:	2208      	movs	r2, #8
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4413      	add	r3, r2
 800972a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f023 0307 	bic.w	r3, r3, #7
 800973c:	3308      	adds	r3, #8
 800973e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <pvPortMalloc+0x70>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	b672      	cpsid	i
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	b662      	cpsie	i
 800975e:	617b      	str	r3, [r7, #20]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d06b      	beq.n	8009842 <pvPortMalloc+0x14e>
 800976a:	4b44      	ldr	r3, [pc, #272]	; (800987c <pvPortMalloc+0x188>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d866      	bhi.n	8009842 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009774:	4b42      	ldr	r3, [pc, #264]	; (8009880 <pvPortMalloc+0x18c>)
 8009776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009778:	4b41      	ldr	r3, [pc, #260]	; (8009880 <pvPortMalloc+0x18c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800977e:	e004      	b.n	800978a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d903      	bls.n	800979c <pvPortMalloc+0xa8>
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f1      	bne.n	8009780 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800979c:	4b35      	ldr	r3, [pc, #212]	; (8009874 <pvPortMalloc+0x180>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d04d      	beq.n	8009842 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2208      	movs	r2, #8
 80097ac:	4413      	add	r3, r2
 80097ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	2308      	movs	r3, #8
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d921      	bls.n	800980c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <pvPortMalloc+0x100>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	b672      	cpsid	i
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	b662      	cpsie	i
 80097ee:	613b      	str	r3, [r7, #16]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	1ad2      	subs	r2, r2, r3
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009806:	69b8      	ldr	r0, [r7, #24]
 8009808:	f000 f8fe 	bl	8009a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800980c:	4b1b      	ldr	r3, [pc, #108]	; (800987c <pvPortMalloc+0x188>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	4a19      	ldr	r2, [pc, #100]	; (800987c <pvPortMalloc+0x188>)
 8009818:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800981a:	4b18      	ldr	r3, [pc, #96]	; (800987c <pvPortMalloc+0x188>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4b19      	ldr	r3, [pc, #100]	; (8009884 <pvPortMalloc+0x190>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d203      	bcs.n	800982e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009826:	4b15      	ldr	r3, [pc, #84]	; (800987c <pvPortMalloc+0x188>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a16      	ldr	r2, [pc, #88]	; (8009884 <pvPortMalloc+0x190>)
 800982c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	4b11      	ldr	r3, [pc, #68]	; (8009878 <pvPortMalloc+0x184>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	431a      	orrs	r2, r3
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009842:	f7fe fcf1 	bl	8008228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <pvPortMalloc+0x176>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	b672      	cpsid	i
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	b662      	cpsie	i
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <pvPortMalloc+0x174>
	return pvReturn;
 800986a:	69fb      	ldr	r3, [r7, #28]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3728      	adds	r7, #40	; 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20004ef0 	.word	0x20004ef0
 8009878:	20004efc 	.word	0x20004efc
 800987c:	20004ef4 	.word	0x20004ef4
 8009880:	20004ee8 	.word	0x20004ee8
 8009884:	20004ef8 	.word	0x20004ef8

08009888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d04c      	beq.n	8009934 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800989a:	2308      	movs	r3, #8
 800989c:	425b      	negs	r3, r3
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	4b23      	ldr	r3, [pc, #140]	; (800993c <vPortFree+0xb4>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4013      	ands	r3, r2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10c      	bne.n	80098d0 <vPortFree+0x48>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ba:	b672      	cpsid	i
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	b662      	cpsie	i
 80098ca:	60fb      	str	r3, [r7, #12]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00c      	beq.n	80098f2 <vPortFree+0x6a>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	b672      	cpsid	i
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	b662      	cpsie	i
 80098ec:	60bb      	str	r3, [r7, #8]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	4b11      	ldr	r3, [pc, #68]	; (800993c <vPortFree+0xb4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d019      	beq.n	8009934 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d115      	bne.n	8009934 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	4b0b      	ldr	r3, [pc, #44]	; (800993c <vPortFree+0xb4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	43db      	mvns	r3, r3
 8009912:	401a      	ands	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009918:	f7fe fc78 	bl	800820c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <vPortFree+0xb8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4413      	add	r3, r2
 8009926:	4a06      	ldr	r2, [pc, #24]	; (8009940 <vPortFree+0xb8>)
 8009928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f000 f86c 	bl	8009a08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009930:	f7fe fc7a 	bl	8008228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009934:	bf00      	nop
 8009936:	3718      	adds	r7, #24
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20004efc 	.word	0x20004efc
 8009940:	20004ef4 	.word	0x20004ef4

08009944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800994a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800994e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009950:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <prvHeapInit+0xac>)
 8009952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f003 0307 	and.w	r3, r3, #7
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00c      	beq.n	8009978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3307      	adds	r3, #7
 8009962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0307 	bic.w	r3, r3, #7
 800996a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	4a1f      	ldr	r2, [pc, #124]	; (80099f0 <prvHeapInit+0xac>)
 8009974:	4413      	add	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800997c:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <prvHeapInit+0xb0>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009982:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <prvHeapInit+0xb0>)
 8009984:	2200      	movs	r2, #0
 8009986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	4413      	add	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009990:	2208      	movs	r2, #8
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	1a9b      	subs	r3, r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0307 	bic.w	r3, r3, #7
 800999e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a15      	ldr	r2, [pc, #84]	; (80099f8 <prvHeapInit+0xb4>)
 80099a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <prvHeapInit+0xb4>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2200      	movs	r2, #0
 80099ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ae:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <prvHeapInit+0xb4>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099c4:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <prvHeapInit+0xb4>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <prvHeapInit+0xb8>)
 80099d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <prvHeapInit+0xbc>)
 80099da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <prvHeapInit+0xc0>)
 80099de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	200012e8 	.word	0x200012e8
 80099f4:	20004ee8 	.word	0x20004ee8
 80099f8:	20004ef0 	.word	0x20004ef0
 80099fc:	20004ef8 	.word	0x20004ef8
 8009a00:	20004ef4 	.word	0x20004ef4
 8009a04:	20004efc 	.word	0x20004efc

08009a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a10:	4b28      	ldr	r3, [pc, #160]	; (8009ab4 <prvInsertBlockIntoFreeList+0xac>)
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e002      	b.n	8009a1c <prvInsertBlockIntoFreeList+0x14>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d8f7      	bhi.n	8009a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	4413      	add	r3, r2
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d108      	bne.n	8009a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685a      	ldr	r2, [r3, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	441a      	add	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d118      	bne.n	8009a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d00d      	beq.n	8009a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	441a      	add	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	e008      	b.n	8009a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a86:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e003      	b.n	8009a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d002      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20004ee8 	.word	0x20004ee8
 8009ab8:	20004ef0 	.word	0x20004ef0

08009abc <memset>:
 8009abc:	4402      	add	r2, r0
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d100      	bne.n	8009ac6 <memset+0xa>
 8009ac4:	4770      	bx	lr
 8009ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8009aca:	e7f9      	b.n	8009ac0 <memset+0x4>

08009acc <_reclaim_reent>:
 8009acc:	4b29      	ldr	r3, [pc, #164]	; (8009b74 <_reclaim_reent+0xa8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	4604      	mov	r4, r0
 8009ad6:	d04b      	beq.n	8009b70 <_reclaim_reent+0xa4>
 8009ad8:	69c3      	ldr	r3, [r0, #28]
 8009ada:	b143      	cbz	r3, 8009aee <_reclaim_reent+0x22>
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d144      	bne.n	8009b6c <_reclaim_reent+0xa0>
 8009ae2:	69e3      	ldr	r3, [r4, #28]
 8009ae4:	6819      	ldr	r1, [r3, #0]
 8009ae6:	b111      	cbz	r1, 8009aee <_reclaim_reent+0x22>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f879 	bl	8009be0 <_free_r>
 8009aee:	6961      	ldr	r1, [r4, #20]
 8009af0:	b111      	cbz	r1, 8009af8 <_reclaim_reent+0x2c>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f874 	bl	8009be0 <_free_r>
 8009af8:	69e1      	ldr	r1, [r4, #28]
 8009afa:	b111      	cbz	r1, 8009b02 <_reclaim_reent+0x36>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 f86f 	bl	8009be0 <_free_r>
 8009b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b04:	b111      	cbz	r1, 8009b0c <_reclaim_reent+0x40>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 f86a 	bl	8009be0 <_free_r>
 8009b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b0e:	b111      	cbz	r1, 8009b16 <_reclaim_reent+0x4a>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f865 	bl	8009be0 <_free_r>
 8009b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b18:	b111      	cbz	r1, 8009b20 <_reclaim_reent+0x54>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f860 	bl	8009be0 <_free_r>
 8009b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009b22:	b111      	cbz	r1, 8009b2a <_reclaim_reent+0x5e>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 f85b 	bl	8009be0 <_free_r>
 8009b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b2c:	b111      	cbz	r1, 8009b34 <_reclaim_reent+0x68>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f856 	bl	8009be0 <_free_r>
 8009b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009b36:	b111      	cbz	r1, 8009b3e <_reclaim_reent+0x72>
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f000 f851 	bl	8009be0 <_free_r>
 8009b3e:	6a23      	ldr	r3, [r4, #32]
 8009b40:	b1b3      	cbz	r3, 8009b70 <_reclaim_reent+0xa4>
 8009b42:	4620      	mov	r0, r4
 8009b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b48:	4718      	bx	r3
 8009b4a:	5949      	ldr	r1, [r1, r5]
 8009b4c:	b941      	cbnz	r1, 8009b60 <_reclaim_reent+0x94>
 8009b4e:	3504      	adds	r5, #4
 8009b50:	69e3      	ldr	r3, [r4, #28]
 8009b52:	2d80      	cmp	r5, #128	; 0x80
 8009b54:	68d9      	ldr	r1, [r3, #12]
 8009b56:	d1f8      	bne.n	8009b4a <_reclaim_reent+0x7e>
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 f841 	bl	8009be0 <_free_r>
 8009b5e:	e7c0      	b.n	8009ae2 <_reclaim_reent+0x16>
 8009b60:	680e      	ldr	r6, [r1, #0]
 8009b62:	4620      	mov	r0, r4
 8009b64:	f000 f83c 	bl	8009be0 <_free_r>
 8009b68:	4631      	mov	r1, r6
 8009b6a:	e7ef      	b.n	8009b4c <_reclaim_reent+0x80>
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	e7ef      	b.n	8009b50 <_reclaim_reent+0x84>
 8009b70:	bd70      	pop	{r4, r5, r6, pc}
 8009b72:	bf00      	nop
 8009b74:	2000006c 	.word	0x2000006c

08009b78 <__libc_init_array>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	4d0d      	ldr	r5, [pc, #52]	; (8009bb0 <__libc_init_array+0x38>)
 8009b7c:	4c0d      	ldr	r4, [pc, #52]	; (8009bb4 <__libc_init_array+0x3c>)
 8009b7e:	1b64      	subs	r4, r4, r5
 8009b80:	10a4      	asrs	r4, r4, #2
 8009b82:	2600      	movs	r6, #0
 8009b84:	42a6      	cmp	r6, r4
 8009b86:	d109      	bne.n	8009b9c <__libc_init_array+0x24>
 8009b88:	4d0b      	ldr	r5, [pc, #44]	; (8009bb8 <__libc_init_array+0x40>)
 8009b8a:	4c0c      	ldr	r4, [pc, #48]	; (8009bbc <__libc_init_array+0x44>)
 8009b8c:	f000 f880 	bl	8009c90 <_init>
 8009b90:	1b64      	subs	r4, r4, r5
 8009b92:	10a4      	asrs	r4, r4, #2
 8009b94:	2600      	movs	r6, #0
 8009b96:	42a6      	cmp	r6, r4
 8009b98:	d105      	bne.n	8009ba6 <__libc_init_array+0x2e>
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba0:	4798      	blx	r3
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7ee      	b.n	8009b84 <__libc_init_array+0xc>
 8009ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009baa:	4798      	blx	r3
 8009bac:	3601      	adds	r6, #1
 8009bae:	e7f2      	b.n	8009b96 <__libc_init_array+0x1e>
 8009bb0:	0800b9e8 	.word	0x0800b9e8
 8009bb4:	0800b9e8 	.word	0x0800b9e8
 8009bb8:	0800b9e8 	.word	0x0800b9e8
 8009bbc:	0800b9ec 	.word	0x0800b9ec

08009bc0 <__retarget_lock_acquire_recursive>:
 8009bc0:	4770      	bx	lr

08009bc2 <__retarget_lock_release_recursive>:
 8009bc2:	4770      	bx	lr

08009bc4 <memcpy>:
 8009bc4:	440a      	add	r2, r1
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009bcc:	d100      	bne.n	8009bd0 <memcpy+0xc>
 8009bce:	4770      	bx	lr
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	d1f9      	bne.n	8009bd2 <memcpy+0xe>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <_free_r>:
 8009be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d044      	beq.n	8009c70 <_free_r+0x90>
 8009be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bea:	9001      	str	r0, [sp, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f1a1 0404 	sub.w	r4, r1, #4
 8009bf2:	bfb8      	it	lt
 8009bf4:	18e4      	addlt	r4, r4, r3
 8009bf6:	f000 f83f 	bl	8009c78 <__malloc_lock>
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <_free_r+0x94>)
 8009bfc:	9801      	ldr	r0, [sp, #4]
 8009bfe:	6813      	ldr	r3, [r2, #0]
 8009c00:	b933      	cbnz	r3, 8009c10 <_free_r+0x30>
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	6014      	str	r4, [r2, #0]
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c0c:	f000 b83a 	b.w	8009c84 <__malloc_unlock>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d908      	bls.n	8009c26 <_free_r+0x46>
 8009c14:	6825      	ldr	r5, [r4, #0]
 8009c16:	1961      	adds	r1, r4, r5
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	bf01      	itttt	eq
 8009c1c:	6819      	ldreq	r1, [r3, #0]
 8009c1e:	685b      	ldreq	r3, [r3, #4]
 8009c20:	1949      	addeq	r1, r1, r5
 8009c22:	6021      	streq	r1, [r4, #0]
 8009c24:	e7ed      	b.n	8009c02 <_free_r+0x22>
 8009c26:	461a      	mov	r2, r3
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b10b      	cbz	r3, 8009c30 <_free_r+0x50>
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	d9fa      	bls.n	8009c26 <_free_r+0x46>
 8009c30:	6811      	ldr	r1, [r2, #0]
 8009c32:	1855      	adds	r5, r2, r1
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d10b      	bne.n	8009c50 <_free_r+0x70>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	4421      	add	r1, r4
 8009c3c:	1854      	adds	r4, r2, r1
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	6011      	str	r1, [r2, #0]
 8009c42:	d1e0      	bne.n	8009c06 <_free_r+0x26>
 8009c44:	681c      	ldr	r4, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	440c      	add	r4, r1
 8009c4c:	6014      	str	r4, [r2, #0]
 8009c4e:	e7da      	b.n	8009c06 <_free_r+0x26>
 8009c50:	d902      	bls.n	8009c58 <_free_r+0x78>
 8009c52:	230c      	movs	r3, #12
 8009c54:	6003      	str	r3, [r0, #0]
 8009c56:	e7d6      	b.n	8009c06 <_free_r+0x26>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf04      	itt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	bf04      	itt	eq
 8009c68:	1949      	addeq	r1, r1, r5
 8009c6a:	6021      	streq	r1, [r4, #0]
 8009c6c:	6054      	str	r4, [r2, #4]
 8009c6e:	e7ca      	b.n	8009c06 <_free_r+0x26>
 8009c70:	b003      	add	sp, #12
 8009c72:	bd30      	pop	{r4, r5, pc}
 8009c74:	2000503c 	.word	0x2000503c

08009c78 <__malloc_lock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__malloc_lock+0x8>)
 8009c7a:	f7ff bfa1 	b.w	8009bc0 <__retarget_lock_acquire_recursive>
 8009c7e:	bf00      	nop
 8009c80:	20005038 	.word	0x20005038

08009c84 <__malloc_unlock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__malloc_unlock+0x8>)
 8009c86:	f7ff bf9c 	b.w	8009bc2 <__retarget_lock_release_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	20005038 	.word	0x20005038

08009c90 <_init>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	bf00      	nop
 8009c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c96:	bc08      	pop	{r3}
 8009c98:	469e      	mov	lr, r3
 8009c9a:	4770      	bx	lr

08009c9c <_fini>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	bf00      	nop
 8009ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ca2:	bc08      	pop	{r3}
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	4770      	bx	lr
