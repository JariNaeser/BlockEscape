
BlockEscape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c118  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d68  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f080  0800f080  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f080  0800f080  0001f080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f088  0800f088  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f088  0800f088  0001f088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f08c  0800f08c  0001f08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051fc  2000008c  0800f11c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005288  0800f11c  00025288  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b57  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061e3  00000000  00000000  00049c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002150  00000000  00000000  0004fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000196a  00000000  00000000  00051f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000365a3  00000000  00000000  000538f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c6d1  00000000  00000000  00089e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00135294  00000000  00000000  000b6566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009290  00000000  00000000  001eb7fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001f4a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c300 	.word	0x0800c300

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	0800c300 	.word	0x0800c300

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f803 	bl	80005ec <BSP_LCD_InitEx>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80005f6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000604:	f000 f934 	bl	8000870 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000608:	f000 fbf6 	bl	8000df8 <LCD_IO_GetID>
 800060c:	4603      	mov	r3, r0
 800060e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000612:	2b11      	cmp	r3, #17
 8000614:	d001      	beq.n	800061a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000616:	2301      	movs	r3, #1
 8000618:	e111      	b.n	800083e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800061a:	f000 fbf5 	bl	8000e08 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000620:	4a8a      	ldr	r2, [pc, #552]	; (800084c <BSP_LCD_InitEx+0x260>)
 8000622:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000624:	4888      	ldr	r0, [pc, #544]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000626:	f004 f9bf 	bl	80049a8 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800062e:	2305      	movs	r3, #5
 8000630:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800063a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	4a82      	ldr	r2, [pc, #520]	; (8000850 <BSP_LCD_InitEx+0x264>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	0a9b      	lsrs	r3, r3, #10
 800064e:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000650:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800065a:	f004 f889 	bl	8004770 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800066a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800066e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800067c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 8000680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000684:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000692:	2301      	movs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000696:	230f      	movs	r3, #15
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800069a:	2310      	movs	r3, #16
 800069c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80006dc:	4a5f      	ldr	r2, [pc, #380]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e6:	fb03 f202 	mul.w	r2, r3, r2
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	441a      	add	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	441a      	add	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000716:	fb03 f202 	mul.w	r2, r3, r2
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800072a:	4a4c      	ldr	r2, [pc, #304]	; (800085c <BSP_LCD_InitEx+0x270>)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <BSP_LCD_InitEx+0x270>)
 800073e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000746:	2210      	movs	r2, #16
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BSP_LCD_InitEx+0x270>)
 800074c:	2200      	movs	r2, #0
 800074e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <BSP_LCD_InitEx+0x270>)
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <BSP_LCD_InitEx+0x270>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <BSP_LCD_InitEx+0x270>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000784:	f004 fa68 	bl	8004c58 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800078e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	3b01      	subs	r3, #1
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800079a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <BSP_LCD_InitEx+0x268>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	441a      	add	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4413      	add	r3, r2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	441a      	add	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	441a      	add	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007d2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007f0:	f006 f9d8 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <BSP_LCD_InitEx+0x27c>)
 8000816:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <BSP_LCD_InitEx+0x270>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800081c:	f005 fc60 	bl	80060e0 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000822:	f005 f9b5 	bl	8005b90 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000828:	f004 fd70 	bl	800530c <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <BSP_LCD_InitEx+0x280>)
 800082e:	f000 f911 	bl	8000a54 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fc66 	bl	8001108 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000214 	.word	0x20000214
 800084c:	40016c00 	.word	0x40016c00
 8000850:	43215e57 	.word	0x43215e57
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004
 800085c:	200000a8 	.word	0x200000a8
 8000860:	2000016c 	.word	0x2000016c
 8000864:	2000024c 	.word	0x2000024c
 8000868:	40016800 	.word	0x40016800
 800086c:	20000010 	.word	0x20000010

08000870 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <BSP_LCD_Reset+0x68>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008a6:	f004 fe55 	bl	8005554 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008b2:	f005 f813 	bl	80058dc <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80008b6:	2014      	movs	r0, #20
 80008b8:	f002 ff6a 	bl	8003790 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008c4:	f005 f80a 	bl	80058dc <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f002 ff61 	bl	8003790 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40022400 	.word	0x40022400

080008e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <BSP_LCD_GetXSize+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <BSP_LCD_GetYSize+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004

08000910 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000920:	f7ff ffde 	bl	80008e0 <BSP_LCD_GetXSize>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800092c:	f7ff ffe4 	bl	80008f8 <BSP_LCD_GetYSize>
 8000930:	4603      	mov	r3, r0
 8000932:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000960:	f7ff ffbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000964:	4603      	mov	r3, r0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000968:	f7ff ffc6 	bl	80008f8 <BSP_LCD_GetYSize>
 800096c:	4603      	mov	r3, r0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800097a:	f005 f9d9 	bl	8005d30 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3740      	adds	r7, #64	; 0x40
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000016c 	.word	0x2000016c
 80009c8:	20000234 	.word	0x20000234
 80009cc:	20000010 	.word	0x20000010

080009d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <BSP_LCD_SelectLayer+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000230 	.word	0x20000230

080009f0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <BSP_LCD_SetTextColor+0x28>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <BSP_LCD_SetTextColor+0x2c>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000230 	.word	0x20000230
 8000a1c:	20000234 	.word	0x20000234

08000a20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <BSP_LCD_SetBackColor+0x2c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <BSP_LCD_SetBackColor+0x30>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3304      	adds	r3, #4
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000230 	.word	0x20000230
 8000a50:	20000234 	.word	0x20000234

08000a54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <BSP_LCD_SetFont+0x2c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4908      	ldr	r1, [pc, #32]	; (8000a84 <BSP_LCD_SetFont+0x30>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000230 	.word	0x20000230
 8000a84:	20000234 	.word	0x20000234

08000a88 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <BSP_LCD_Clear+0x48>)
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <BSP_LCD_Clear+0x48>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <BSP_LCD_Clear+0x4c>)
 8000a9a:	2134      	movs	r1, #52	; 0x34
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	335c      	adds	r3, #92	; 0x5c
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461e      	mov	r6, r3
 8000aa8:	f7ff ff1a 	bl	80008e0 <BSP_LCD_GetXSize>
 8000aac:	4605      	mov	r5, r0
 8000aae:	f7ff ff23 	bl	80008f8 <BSP_LCD_GetYSize>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4613      	mov	r3, r2
 8000abe:	462a      	mov	r2, r5
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f000 fae8 	bl	8001098 <LL_FillBuffer>
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad0:	20000230 	.word	0x20000230
 8000ad4:	2000016c 	.word	0x2000016c

08000ad8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	80bb      	strh	r3, [r7, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	491b      	ldr	r1, [pc, #108]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	3308      	adds	r3, #8
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4c14      	ldr	r4, [pc, #80]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4423      	add	r3, r4
 8000b16:	3308      	adds	r3, #8
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b1c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4c0d      	ldr	r4, [pc, #52]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4423      	add	r3, r4
 8000b30:	3308      	adds	r3, #8
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	3307      	adds	r3, #7
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <BSP_LCD_DisplayChar+0x66>
 8000b3c:	3307      	adds	r3, #7
 8000b3e:	10db      	asrs	r3, r3, #3
 8000b40:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b44:	18ca      	adds	r2, r1, r3
 8000b46:	88b9      	ldrh	r1, [r7, #4]
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f9ec 	bl	8000f28 <DrawChar>
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	20000230 	.word	0x20000230
 8000b5c:	20000234 	.word	0x20000234

08000b60 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60ba      	str	r2, [r7, #8]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	81fb      	strh	r3, [r7, #14]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	81bb      	strh	r3, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	83fb      	strh	r3, [r7, #30]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000b8a:	e002      	b.n	8000b92 <BSP_LCD_DisplayStringAt+0x32>
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	617a      	str	r2, [r7, #20]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f6      	bne.n	8000b8c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000b9e:	f7ff fe9f 	bl	80008e0 <BSP_LCD_GetXSize>
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4850      	ldr	r0, [pc, #320]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4403      	add	r3, r0
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bbe:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d01c      	beq.n	8000c00 <BSP_LCD_DisplayStringAt+0xa0>
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	dc33      	bgt.n	8000c32 <BSP_LCD_DisplayStringAt+0xd2>
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d002      	beq.n	8000bd4 <BSP_LCD_DisplayStringAt+0x74>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d019      	beq.n	8000c06 <BSP_LCD_DisplayStringAt+0xa6>
 8000bd2:	e02e      	b.n	8000c32 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	1ad1      	subs	r1, r2, r3
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4843      	ldr	r0, [pc, #268]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4403      	add	r3, r0
 8000bea:	3308      	adds	r3, #8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	085b      	lsrs	r3, r3, #1
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	83fb      	strh	r3, [r7, #30]
      break;
 8000bfe:	e01b      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	83fb      	strh	r3, [r7, #30]
      break;
 8000c04:	e018      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4836      	ldr	r0, [pc, #216]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4403      	add	r3, r0
 8000c1e:	3308      	adds	r3, #8
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	889b      	ldrh	r3, [r3, #4]
 8000c24:	fb11 f303 	smulbb	r3, r1, r3
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	83fb      	strh	r3, [r7, #30]
      break;
 8000c30:	e002      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	83fb      	strh	r3, [r7, #30]
      break;
 8000c36:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c38:	8bfb      	ldrh	r3, [r7, #30]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <BSP_LCD_DisplayStringAt+0xe6>
 8000c3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da1d      	bge.n	8000c82 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c4a:	e01a      	b.n	8000c82 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	89b9      	ldrh	r1, [r7, #12]
 8000c52:	8bfb      	ldrh	r3, [r7, #30]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff3f 	bl	8000ad8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4923      	ldr	r1, [pc, #140]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	889a      	ldrh	r2, [r3, #4]
 8000c70:	8bfb      	ldrh	r3, [r7, #30]
 8000c72:	4413      	add	r3, r2
 8000c74:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    i++;
 8000c7c:	8bbb      	ldrh	r3, [r7, #28]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2dc      	uxtb	r4, r3
 8000c90:	f7ff fe26 	bl	80008e0 <BSP_LCD_GetXSize>
 8000c94:	8bb9      	ldrh	r1, [r7, #28]
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4d14      	ldr	r5, [pc, #80]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	fb01 f303 	mul.w	r3, r1, r3
 8000cb0:	1ac3      	subs	r3, r0, r3
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4403      	add	r3, r0
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	bf2c      	ite	cs
 8000cce:	2301      	movcs	r3, #1
 8000cd0:	2300      	movcc	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4023      	ands	r3, r4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1b7      	bne.n	8000c4c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000230 	.word	0x20000230
 8000cec:	20000234 	.word	0x20000234

08000cf0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4920      	ldr	r1, [pc, #128]	; (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fe62 	bl	80009f0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <BSP_LCD_FillRect+0xb0>)
 8000d32:	2134      	movs	r1, #52	; 0x34
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	335c      	adds	r3, #92	; 0x5c
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	f7ff fdcf 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d42:	4602      	mov	r2, r0
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	fb03 f202 	mul.w	r2, r3, r2
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4423      	add	r3, r4
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	68fd      	ldr	r5, [r7, #12]
 8000d5a:	887e      	ldrh	r6, [r7, #2]
 8000d5c:	f8b7 8000 	ldrh.w	r8, [r7]
 8000d60:	f7ff fdbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d64:	4602      	mov	r2, r0
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	1ad1      	subs	r1, r2, r3
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4403      	add	r3, r0
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	9100      	str	r1, [sp, #0]
 8000d80:	4643      	mov	r3, r8
 8000d82:	4632      	mov	r2, r6
 8000d84:	4629      	mov	r1, r5
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 f986 	bl	8001098 <LL_FillBuffer>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d96:	bf00      	nop
 8000d98:	20000230 	.word	0x20000230
 8000d9c:	20000234 	.word	0x20000234
 8000da0:	2000016c 	.word	0x2000016c

08000da4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d80d      	bhi.n	8000dd0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2215      	movs	r2, #21
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000dca:	f004 fadb 	bl	8005384 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8000dce:	e00d      	b.n	8000dec <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2239      	movs	r2, #57	; 0x39
 8000de4:	2100      	movs	r1, #0
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000de8:	f004 faee 	bl	80053c8 <HAL_DSI_LongWrite>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000214 	.word	0x20000214

08000df8 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8000dfc:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e30:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	4a28      	ldr	r2, [pc, #160]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e3c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e60:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e6c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e90:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e98:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000e9c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	2058      	movs	r0, #88	; 0x58
 8000ea4:	f003 f94a 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ea8:	2058      	movs	r0, #88	; 0x58
 8000eaa:	f003 f963 	bl	8004174 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	205a      	movs	r0, #90	; 0x5a
 8000eb4:	f003 f942 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb8:	205a      	movs	r0, #90	; 0x5a
 8000eba:	f003 f95b 	bl	8004174 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	2062      	movs	r0, #98	; 0x62
 8000ec4:	f003 f93a 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ec8:	2062      	movs	r0, #98	; 0x62
 8000eca:	f003 f953 	bl	8004174 <HAL_NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	603a      	str	r2, [r7, #0]
 8000ee6:	80fb      	strh	r3, [r7, #6]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <BSP_LCD_DrawPixel+0x44>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <BSP_LCD_DrawPixel+0x48>)
 8000ef2:	2134      	movs	r1, #52	; 0x34
 8000ef4:	fb01 f303 	mul.w	r3, r1, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	335c      	adds	r3, #92	; 0x5c
 8000efc:	681c      	ldr	r4, [r3, #0]
 8000efe:	88bd      	ldrh	r5, [r7, #4]
 8000f00:	f7ff fcee 	bl	80008e0 <BSP_LCD_GetXSize>
 8000f04:	4603      	mov	r3, r0
 8000f06:	fb03 f205 	mul.w	r2, r3, r5
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4423      	add	r3, r4
 8000f12:	461a      	mov	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	20000230 	.word	0x20000230
 8000f24:	2000016c 	.word	0x2000016c

08000f28 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	603a      	str	r2, [r7, #0]
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	460b      	mov	r3, r1
 8000f36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8000f40:	4b53      	ldr	r3, [pc, #332]	; (8001090 <DrawChar+0x168>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4953      	ldr	r1, [pc, #332]	; (8001094 <DrawChar+0x16c>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3308      	adds	r3, #8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	88db      	ldrh	r3, [r3, #6]
 8000f56:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <DrawChar+0x168>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	494d      	ldr	r1, [pc, #308]	; (8001094 <DrawChar+0x16c>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8000f70:	8a3b      	ldrh	r3, [r7, #16]
 8000f72:	3307      	adds	r3, #7
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <DrawChar+0x52>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e076      	b.n	800107e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000f90:	8a3b      	ldrh	r3, [r7, #16]
 8000f92:	3307      	adds	r3, #7
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da00      	bge.n	8000f9a <DrawChar+0x72>
 8000f98:	3307      	adds	r3, #7
 8000f9a:	10db      	asrs	r3, r3, #3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8000faa:	8a3b      	ldrh	r3, [r7, #16]
 8000fac:	3307      	adds	r3, #7
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da00      	bge.n	8000fb4 <DrawChar+0x8c>
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	10db      	asrs	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d002      	beq.n	8000fc0 <DrawChar+0x98>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d004      	beq.n	8000fc8 <DrawChar+0xa0>
 8000fbe:	e00c      	b.n	8000fda <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	617b      	str	r3, [r7, #20]
      break;
 8000fc6:	e016      	b.n	8000ff6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	3201      	adds	r2, #1
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
      break;
 8000fd8:	e00d      	b.n	8000ff6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	3202      	adds	r2, #2
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
      break;
 8000ff4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	e036      	b.n	800106a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8000ffc:	8a3a      	ldrh	r2, [r7, #16]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4413      	add	r3, r2
 8001006:	3b01      	subs	r3, #1
 8001008:	2201      	movs	r2, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d012      	beq.n	800103e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	b29a      	uxth	r2, r3
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4413      	add	r3, r2
 8001020:	b298      	uxth	r0, r3
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <DrawChar+0x168>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	491b      	ldr	r1, [pc, #108]	; (8001094 <DrawChar+0x16c>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff ff50 	bl	8000edc <BSP_LCD_DrawPixel>
 800103c:	e012      	b.n	8001064 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	b29a      	uxth	r2, r3
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4413      	add	r3, r2
 8001046:	b298      	uxth	r0, r3
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <DrawChar+0x168>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <DrawChar+0x16c>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff ff3c 	bl	8000edc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	3301      	adds	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	8a3b      	ldrh	r3, [r7, #16]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3c4      	bcc.n	8000ffc <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3301      	adds	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	8a7b      	ldrh	r3, [r7, #18]
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	d384      	bcc.n	8000f90 <DrawChar+0x68>
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000230 	.word	0x20000230
 8001094:	20000234 	.word	0x20000234

08001098 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <LL_FillBuffer+0x68>)
 80010a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ac:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <LL_FillBuffer+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <LL_FillBuffer+0x68>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <LL_FillBuffer+0x68>)
 80010bc:	4a11      	ldr	r2, [pc, #68]	; (8001104 <LL_FillBuffer+0x6c>)
 80010be:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <LL_FillBuffer+0x68>)
 80010c2:	f003 f865 	bl	8004190 <HAL_DMA2D_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d115      	bne.n	80010f8 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <LL_FillBuffer+0x68>)
 80010d0:	f003 f9cc 	bl	800446c <HAL_DMA2D_ConfigLayer>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10e      	bne.n	80010f8 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69f9      	ldr	r1, [r7, #28]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <LL_FillBuffer+0x68>)
 80010e6:	f003 f8ad 	bl	8004244 <HAL_DMA2D_Start>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80010f0:	210a      	movs	r1, #10
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <LL_FillBuffer+0x68>)
 80010f4:	f003 f8d1 	bl	800429a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000114 	.word	0x20000114
 8001104:	4002b000 	.word	0x4002b000

08001108 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001112:	49c1      	ldr	r1, [pc, #772]	; (8001418 <OTM8009A_Init+0x310>)
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe45 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800111a:	49c0      	ldr	r1, [pc, #768]	; (800141c <OTM8009A_Init+0x314>)
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff fe41 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001122:	49bf      	ldr	r1, [pc, #764]	; (8001420 <OTM8009A_Init+0x318>)
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fe3d 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800112a:	49be      	ldr	r1, [pc, #760]	; (8001424 <OTM8009A_Init+0x31c>)
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fe39 	bl	8000da4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001132:	49bb      	ldr	r1, [pc, #748]	; (8001420 <OTM8009A_Init+0x318>)
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fe35 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800113a:	49bb      	ldr	r1, [pc, #748]	; (8001428 <OTM8009A_Init+0x320>)
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe31 	bl	8000da4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f002 fb24 	bl	8003790 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001148:	49b8      	ldr	r1, [pc, #736]	; (800142c <OTM8009A_Init+0x324>)
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fe2a 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001150:	49b7      	ldr	r1, [pc, #732]	; (8001430 <OTM8009A_Init+0x328>)
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fe26 	bl	8000da4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f002 fb19 	bl	8003790 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800115e:	49b5      	ldr	r1, [pc, #724]	; (8001434 <OTM8009A_Init+0x32c>)
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fe1f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001166:	49b4      	ldr	r1, [pc, #720]	; (8001438 <OTM8009A_Init+0x330>)
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fe1b 	bl	8000da4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800116e:	49b3      	ldr	r1, [pc, #716]	; (800143c <OTM8009A_Init+0x334>)
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fe17 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001176:	49b2      	ldr	r1, [pc, #712]	; (8001440 <OTM8009A_Init+0x338>)
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe13 	bl	8000da4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800117e:	49b1      	ldr	r1, [pc, #708]	; (8001444 <OTM8009A_Init+0x33c>)
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe0f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001186:	49b0      	ldr	r1, [pc, #704]	; (8001448 <OTM8009A_Init+0x340>)
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fe0b 	bl	8000da4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800118e:	49a2      	ldr	r1, [pc, #648]	; (8001418 <OTM8009A_Init+0x310>)
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fe07 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001196:	49ad      	ldr	r1, [pc, #692]	; (800144c <OTM8009A_Init+0x344>)
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe03 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800119e:	49ac      	ldr	r1, [pc, #688]	; (8001450 <OTM8009A_Init+0x348>)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fdff 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80011a6:	49ab      	ldr	r1, [pc, #684]	; (8001454 <OTM8009A_Init+0x34c>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fdfb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80011ae:	49aa      	ldr	r1, [pc, #680]	; (8001458 <OTM8009A_Init+0x350>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fdf7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80011b6:	49a9      	ldr	r1, [pc, #676]	; (800145c <OTM8009A_Init+0x354>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fdf3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80011be:	49a8      	ldr	r1, [pc, #672]	; (8001460 <OTM8009A_Init+0x358>)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fdef 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80011c6:	49a7      	ldr	r1, [pc, #668]	; (8001464 <OTM8009A_Init+0x35c>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fdeb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80011ce:	49a6      	ldr	r1, [pc, #664]	; (8001468 <OTM8009A_Init+0x360>)
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fde7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80011d6:	499a      	ldr	r1, [pc, #616]	; (8001440 <OTM8009A_Init+0x338>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fde3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011de:	498e      	ldr	r1, [pc, #568]	; (8001418 <OTM8009A_Init+0x310>)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fddf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80011e6:	49a1      	ldr	r1, [pc, #644]	; (800146c <OTM8009A_Init+0x364>)
 80011e8:	2002      	movs	r0, #2
 80011ea:	f7ff fddb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80011ee:	49a0      	ldr	r1, [pc, #640]	; (8001470 <OTM8009A_Init+0x368>)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fdd7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80011f6:	499f      	ldr	r1, [pc, #636]	; (8001474 <OTM8009A_Init+0x36c>)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdd3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80011fe:	499e      	ldr	r1, [pc, #632]	; (8001478 <OTM8009A_Init+0x370>)
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fdcf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001206:	499d      	ldr	r1, [pc, #628]	; (800147c <OTM8009A_Init+0x374>)
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fdcb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800120e:	499c      	ldr	r1, [pc, #624]	; (8001480 <OTM8009A_Init+0x378>)
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fdc7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001216:	499b      	ldr	r1, [pc, #620]	; (8001484 <OTM8009A_Init+0x37c>)
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fdc3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800121e:	498c      	ldr	r1, [pc, #560]	; (8001450 <OTM8009A_Init+0x348>)
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdbf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001226:	4998      	ldr	r1, [pc, #608]	; (8001488 <OTM8009A_Init+0x380>)
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fdbb 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800122e:	498a      	ldr	r1, [pc, #552]	; (8001458 <OTM8009A_Init+0x350>)
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fdb7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001236:	4995      	ldr	r1, [pc, #596]	; (800148c <OTM8009A_Init+0x384>)
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fdb3 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800123e:	4994      	ldr	r1, [pc, #592]	; (8001490 <OTM8009A_Init+0x388>)
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fdaf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001246:	4993      	ldr	r1, [pc, #588]	; (8001494 <OTM8009A_Init+0x38c>)
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fdab 	bl	8000da4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800124e:	4974      	ldr	r1, [pc, #464]	; (8001420 <OTM8009A_Init+0x318>)
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fda7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001256:	4990      	ldr	r1, [pc, #576]	; (8001498 <OTM8009A_Init+0x390>)
 8001258:	2006      	movs	r0, #6
 800125a:	f7ff fda3 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800125e:	498f      	ldr	r1, [pc, #572]	; (800149c <OTM8009A_Init+0x394>)
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fd9f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001266:	498e      	ldr	r1, [pc, #568]	; (80014a0 <OTM8009A_Init+0x398>)
 8001268:	200e      	movs	r0, #14
 800126a:	f7ff fd9b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800126e:	498d      	ldr	r1, [pc, #564]	; (80014a4 <OTM8009A_Init+0x39c>)
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fd97 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001276:	498c      	ldr	r1, [pc, #560]	; (80014a8 <OTM8009A_Init+0x3a0>)
 8001278:	200e      	movs	r0, #14
 800127a:	f7ff fd93 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800127e:	498b      	ldr	r1, [pc, #556]	; (80014ac <OTM8009A_Init+0x3a4>)
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fd8f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001286:	498a      	ldr	r1, [pc, #552]	; (80014b0 <OTM8009A_Init+0x3a8>)
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff fd8b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800128e:	4989      	ldr	r1, [pc, #548]	; (80014b4 <OTM8009A_Init+0x3ac>)
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fd87 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001296:	4988      	ldr	r1, [pc, #544]	; (80014b8 <OTM8009A_Init+0x3b0>)
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd83 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800129e:	4960      	ldr	r1, [pc, #384]	; (8001420 <OTM8009A_Init+0x318>)
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fd7f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80012a6:	4985      	ldr	r1, [pc, #532]	; (80014bc <OTM8009A_Init+0x3b4>)
 80012a8:	200a      	movs	r0, #10
 80012aa:	f7ff fd7b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80012ae:	4984      	ldr	r1, [pc, #528]	; (80014c0 <OTM8009A_Init+0x3b8>)
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fd77 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80012b6:	4983      	ldr	r1, [pc, #524]	; (80014c4 <OTM8009A_Init+0x3bc>)
 80012b8:	200f      	movs	r0, #15
 80012ba:	f7ff fd73 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80012be:	4977      	ldr	r1, [pc, #476]	; (800149c <OTM8009A_Init+0x394>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fd6f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80012c6:	4980      	ldr	r1, [pc, #512]	; (80014c8 <OTM8009A_Init+0x3c0>)
 80012c8:	200f      	movs	r0, #15
 80012ca:	f7ff fd6b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80012ce:	4975      	ldr	r1, [pc, #468]	; (80014a4 <OTM8009A_Init+0x39c>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd67 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80012d6:	497d      	ldr	r1, [pc, #500]	; (80014cc <OTM8009A_Init+0x3c4>)
 80012d8:	200a      	movs	r0, #10
 80012da:	f7ff fd63 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80012de:	4973      	ldr	r1, [pc, #460]	; (80014ac <OTM8009A_Init+0x3a4>)
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fd5f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80012e6:	497a      	ldr	r1, [pc, #488]	; (80014d0 <OTM8009A_Init+0x3c8>)
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff fd5b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80012ee:	4971      	ldr	r1, [pc, #452]	; (80014b4 <OTM8009A_Init+0x3ac>)
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fd57 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80012f6:	4977      	ldr	r1, [pc, #476]	; (80014d4 <OTM8009A_Init+0x3cc>)
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fd53 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80012fe:	4976      	ldr	r1, [pc, #472]	; (80014d8 <OTM8009A_Init+0x3d0>)
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fd4f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001306:	4975      	ldr	r1, [pc, #468]	; (80014dc <OTM8009A_Init+0x3d4>)
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fd4b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800130e:	4974      	ldr	r1, [pc, #464]	; (80014e0 <OTM8009A_Init+0x3d8>)
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fd47 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001316:	4973      	ldr	r1, [pc, #460]	; (80014e4 <OTM8009A_Init+0x3dc>)
 8001318:	200a      	movs	r0, #10
 800131a:	f7ff fd43 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800131e:	4940      	ldr	r1, [pc, #256]	; (8001420 <OTM8009A_Init+0x318>)
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fd3f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001326:	4970      	ldr	r1, [pc, #448]	; (80014e8 <OTM8009A_Init+0x3e0>)
 8001328:	200a      	movs	r0, #10
 800132a:	f7ff fd3b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800132e:	4964      	ldr	r1, [pc, #400]	; (80014c0 <OTM8009A_Init+0x3b8>)
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fd37 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001336:	496d      	ldr	r1, [pc, #436]	; (80014ec <OTM8009A_Init+0x3e4>)
 8001338:	200f      	movs	r0, #15
 800133a:	f7ff fd33 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800133e:	4957      	ldr	r1, [pc, #348]	; (800149c <OTM8009A_Init+0x394>)
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fd2f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001346:	496a      	ldr	r1, [pc, #424]	; (80014f0 <OTM8009A_Init+0x3e8>)
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff fd2b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800134e:	4955      	ldr	r1, [pc, #340]	; (80014a4 <OTM8009A_Init+0x39c>)
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fd27 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001356:	4967      	ldr	r1, [pc, #412]	; (80014f4 <OTM8009A_Init+0x3ec>)
 8001358:	200a      	movs	r0, #10
 800135a:	f7ff fd23 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800135e:	4953      	ldr	r1, [pc, #332]	; (80014ac <OTM8009A_Init+0x3a4>)
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fd1f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001366:	4964      	ldr	r1, [pc, #400]	; (80014f8 <OTM8009A_Init+0x3f0>)
 8001368:	200f      	movs	r0, #15
 800136a:	f7ff fd1b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800136e:	4951      	ldr	r1, [pc, #324]	; (80014b4 <OTM8009A_Init+0x3ac>)
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fd17 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001376:	4961      	ldr	r1, [pc, #388]	; (80014fc <OTM8009A_Init+0x3f4>)
 8001378:	200f      	movs	r0, #15
 800137a:	f7ff fd13 	bl	8000da4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800137e:	4934      	ldr	r1, [pc, #208]	; (8001450 <OTM8009A_Init+0x348>)
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fd0f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001386:	495e      	ldr	r1, [pc, #376]	; (8001500 <OTM8009A_Init+0x3f8>)
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fd0b 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800138e:	495d      	ldr	r1, [pc, #372]	; (8001504 <OTM8009A_Init+0x3fc>)
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fd07 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001396:	495c      	ldr	r1, [pc, #368]	; (8001508 <OTM8009A_Init+0x400>)
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fd03 	bl	8000da4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800139e:	495b      	ldr	r1, [pc, #364]	; (800150c <OTM8009A_Init+0x404>)
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fcff 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80013a6:	495a      	ldr	r1, [pc, #360]	; (8001510 <OTM8009A_Init+0x408>)
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fcfb 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013ae:	491a      	ldr	r1, [pc, #104]	; (8001418 <OTM8009A_Init+0x310>)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fcf7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80013b6:	4957      	ldr	r1, [pc, #348]	; (8001514 <OTM8009A_Init+0x40c>)
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff fcf3 	bl	8000da4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013be:	4916      	ldr	r1, [pc, #88]	; (8001418 <OTM8009A_Init+0x310>)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fcef 	bl	8000da4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <OTM8009A_Init+0x310>)
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fceb 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80013ce:	4952      	ldr	r1, [pc, #328]	; (8001518 <OTM8009A_Init+0x410>)
 80013d0:	2010      	movs	r0, #16
 80013d2:	f7ff fce7 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013d6:	4910      	ldr	r1, [pc, #64]	; (8001418 <OTM8009A_Init+0x310>)
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fce3 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80013de:	494f      	ldr	r1, [pc, #316]	; (800151c <OTM8009A_Init+0x414>)
 80013e0:	2010      	movs	r0, #16
 80013e2:	f7ff fcdf 	bl	8000da4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80013e6:	494e      	ldr	r1, [pc, #312]	; (8001520 <OTM8009A_Init+0x418>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fcdb 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 80013ee:	2078      	movs	r0, #120	; 0x78
 80013f0:	f002 f9ce 	bl	8003790 <HAL_Delay>

  switch(ColorCoding)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d008      	beq.n	800140c <OTM8009A_Init+0x304>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	f040 8095 	bne.w	800152c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001402:	4948      	ldr	r1, [pc, #288]	; (8001524 <OTM8009A_Init+0x41c>)
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fccd 	bl	8000da4 <DSI_IO_WriteCmd>
    break;
 800140a:	e090      	b.n	800152e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800140c:	4946      	ldr	r1, [pc, #280]	; (8001528 <OTM8009A_Init+0x420>)
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fcc8 	bl	8000da4 <DSI_IO_WriteCmd>
    break;
 8001414:	e08b      	b.n	800152e <OTM8009A_Init+0x426>
 8001416:	bf00      	nop
 8001418:	0800c508 	.word	0x0800c508
 800141c:	0800c3c0 	.word	0x0800c3c0
 8001420:	0800c50c 	.word	0x0800c50c
 8001424:	0800c3c4 	.word	0x0800c3c4
 8001428:	0800c510 	.word	0x0800c510
 800142c:	0800c514 	.word	0x0800c514
 8001430:	0800c518 	.word	0x0800c518
 8001434:	0800c51c 	.word	0x0800c51c
 8001438:	0800c520 	.word	0x0800c520
 800143c:	0800c524 	.word	0x0800c524
 8001440:	0800c528 	.word	0x0800c528
 8001444:	0800c52c 	.word	0x0800c52c
 8001448:	0800c530 	.word	0x0800c530
 800144c:	0800c534 	.word	0x0800c534
 8001450:	0800c538 	.word	0x0800c538
 8001454:	0800c53c 	.word	0x0800c53c
 8001458:	0800c540 	.word	0x0800c540
 800145c:	0800c544 	.word	0x0800c544
 8001460:	0800c548 	.word	0x0800c548
 8001464:	0800c54c 	.word	0x0800c54c
 8001468:	0800c550 	.word	0x0800c550
 800146c:	0800c3f0 	.word	0x0800c3f0
 8001470:	0800c554 	.word	0x0800c554
 8001474:	0800c558 	.word	0x0800c558
 8001478:	0800c55c 	.word	0x0800c55c
 800147c:	0800c560 	.word	0x0800c560
 8001480:	0800c564 	.word	0x0800c564
 8001484:	0800c568 	.word	0x0800c568
 8001488:	0800c56c 	.word	0x0800c56c
 800148c:	0800c570 	.word	0x0800c570
 8001490:	0800c574 	.word	0x0800c574
 8001494:	0800c3f4 	.word	0x0800c3f4
 8001498:	0800c3f8 	.word	0x0800c3f8
 800149c:	0800c578 	.word	0x0800c578
 80014a0:	0800c400 	.word	0x0800c400
 80014a4:	0800c57c 	.word	0x0800c57c
 80014a8:	0800c410 	.word	0x0800c410
 80014ac:	0800c580 	.word	0x0800c580
 80014b0:	0800c420 	.word	0x0800c420
 80014b4:	0800c584 	.word	0x0800c584
 80014b8:	0800c5bc 	.word	0x0800c5bc
 80014bc:	0800c42c 	.word	0x0800c42c
 80014c0:	0800c588 	.word	0x0800c588
 80014c4:	0800c438 	.word	0x0800c438
 80014c8:	0800c448 	.word	0x0800c448
 80014cc:	0800c458 	.word	0x0800c458
 80014d0:	0800c464 	.word	0x0800c464
 80014d4:	0800c474 	.word	0x0800c474
 80014d8:	0800c58c 	.word	0x0800c58c
 80014dc:	0800c484 	.word	0x0800c484
 80014e0:	0800c590 	.word	0x0800c590
 80014e4:	0800c490 	.word	0x0800c490
 80014e8:	0800c49c 	.word	0x0800c49c
 80014ec:	0800c4a8 	.word	0x0800c4a8
 80014f0:	0800c4b8 	.word	0x0800c4b8
 80014f4:	0800c4c8 	.word	0x0800c4c8
 80014f8:	0800c4d4 	.word	0x0800c4d4
 80014fc:	0800c4e4 	.word	0x0800c4e4
 8001500:	0800c5c0 	.word	0x0800c5c0
 8001504:	0800c5c4 	.word	0x0800c5c4
 8001508:	0800c5c8 	.word	0x0800c5c8
 800150c:	0800c5cc 	.word	0x0800c5cc
 8001510:	0800c5d0 	.word	0x0800c5d0
 8001514:	0800c4f4 	.word	0x0800c4f4
 8001518:	0800c3c8 	.word	0x0800c3c8
 800151c:	0800c3dc 	.word	0x0800c3dc
 8001520:	0800c594 	.word	0x0800c594
 8001524:	0800c598 	.word	0x0800c598
 8001528:	0800c59c 	.word	0x0800c59c
  default :
    break;
 800152c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10b      	bne.n	800154c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <OTM8009A_Init+0x488>)
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fc34 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800153c:	4915      	ldr	r1, [pc, #84]	; (8001594 <OTM8009A_Init+0x48c>)
 800153e:	2004      	movs	r0, #4
 8001540:	f7ff fc30 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001544:	4914      	ldr	r1, [pc, #80]	; (8001598 <OTM8009A_Init+0x490>)
 8001546:	2004      	movs	r0, #4
 8001548:	f7ff fc2c 	bl	8000da4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800154c:	4913      	ldr	r1, [pc, #76]	; (800159c <OTM8009A_Init+0x494>)
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fc28 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001554:	4912      	ldr	r1, [pc, #72]	; (80015a0 <OTM8009A_Init+0x498>)
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fc24 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800155c:	4911      	ldr	r1, [pc, #68]	; (80015a4 <OTM8009A_Init+0x49c>)
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fc20 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001564:	4910      	ldr	r1, [pc, #64]	; (80015a8 <OTM8009A_Init+0x4a0>)
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fc1c 	bl	8000da4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800156c:	490f      	ldr	r1, [pc, #60]	; (80015ac <OTM8009A_Init+0x4a4>)
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fc18 	bl	8000da4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <OTM8009A_Init+0x4a8>)
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fc14 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <OTM8009A_Init+0x4ac>)
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fc10 	bl	8000da4 <DSI_IO_WriteCmd>

  return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800c5a0 	.word	0x0800c5a0
 8001594:	0800c4f8 	.word	0x0800c4f8
 8001598:	0800c500 	.word	0x0800c500
 800159c:	0800c5a4 	.word	0x0800c5a4
 80015a0:	0800c5a8 	.word	0x0800c5a8
 80015a4:	0800c5ac 	.word	0x0800c5ac
 80015a8:	0800c5b0 	.word	0x0800c5b0
 80015ac:	0800c5b4 	.word	0x0800c5b4
 80015b0:	0800c508 	.word	0x0800c508
 80015b4:	0800c5b8 	.word	0x0800c5b8

080015b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_ADC1_Init+0x98>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	; (8001654 <MX_ADC1_Init+0x9c>)
 80015ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_ADC1_Init+0x98>)
 80015d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_ADC1_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_ADC1_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_ADC1_Init+0x98>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_ADC1_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_ADC1_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_ADC1_Init+0x98>)
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <MX_ADC1_Init+0xa0>)
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_ADC1_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC1_Init+0x98>)
 8001606:	2201      	movs	r2, #1
 8001608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_ADC1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_ADC1_Init+0x98>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_ADC1_Init+0x98>)
 800161a:	f002 f8dd 	bl	80037d8 <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001624:	f001 fa48 	bl	8002ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001628:	2304      	movs	r3, #4
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162c:	2301      	movs	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_ADC1_Init+0x98>)
 800163a:	f002 fa77 	bl	8003b2c <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001644:	f001 fa38 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200002dc 	.word	0x200002dc
 8001654:	40012000 	.word	0x40012000
 8001658:	0f000001 	.word	0x0f000001

0800165c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_ADC2_Init+0x9c>)
 8001672:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800167a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_ADC2_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_ADC2_Init+0x98>)
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_ADC2_Init+0x98>)
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <MX_ADC2_Init+0xa0>)
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016be:	f002 f88b 	bl	80037d8 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80016c8:	f001 f9f6 	bl	8002ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016cc:	2306      	movs	r3, #6
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016de:	f002 fa25 	bl	8003b2c <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80016e8:	f001 f9e6 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000324 	.word	0x20000324
 80016f8:	40012100 	.word	0x40012100
 80016fc:	0f000001 	.word	0x0f000001

08001700 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13c      	bne.n	800179c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a35      	ldr	r2, [pc, #212]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 800176a:	2304      	movs	r3, #4
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176e:	2303      	movs	r3, #3
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <HAL_ADC_MspInit+0x100>)
 800177e:	f003 fee9 	bl	8005554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|GPIO_PIN_6;
 8001782:	2350      	movs	r3, #80	; 0x50
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x104>)
 8001796:	f003 fedd 	bl	8005554 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800179a:	e028      	b.n	80017ee <HAL_ADC_MspInit+0xee>
  else if(adcHandle->Instance==ADC2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_ADC_MspInit+0x108>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d123      	bne.n	80017ee <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4806      	ldr	r0, [pc, #24]	; (8001804 <HAL_ADC_MspInit+0x104>)
 80017ea:	f003 feb3 	bl	8005554 <HAL_GPIO_Init>
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40012000 	.word	0x40012000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
 8001808:	40012100 	.word	0x40012100

0800180c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <MX_DMA2D_Init+0x38>)
 8001814:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001818:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800181c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_DMA2D_Init+0x34>)
 800182c:	f002 fcb0 	bl	8004190 <HAL_DMA2D_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8001836:	f001 f93f 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000036c 	.word	0x2000036c
 8001844:	4002b000 	.word	0x4002b000

08001848 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_DMA2D_MspInit+0x38>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10b      	bne.n	8001872 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 8001860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	4002b000 	.word	0x4002b000
 8001884:	40023800 	.word	0x40023800

08001888 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ae      	sub	sp, #184	; 0xb8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800188e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800189a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 fe96 	bl	800b5d4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80018a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	226c      	movs	r2, #108	; 0x6c
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 fe87 	bl	800b5d4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018c8:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <MX_DSIHOST_DSI_Init+0x1d8>)
 80018ca:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018d4:	2204      	movs	r2, #4
 80018d6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80018de:	2314      	movs	r3, #20
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80018f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018f4:	4619      	mov	r1, r3
 80018f6:	4859      	ldr	r0, [pc, #356]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018f8:	f002 ff3a 	bl	8004770 <HAL_DSI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8001902:	f001 f8d9 	bl	8002ab8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800193c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001940:	4619      	mov	r1, r3
 8001942:	4846      	ldr	r0, [pc, #280]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001944:	f003 fc1a 	bl	800517c <HAL_DSI_ConfigHostTimeouts>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 800194e:	f001 f8b3 	bl	8002ab8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001952:	231c      	movs	r3, #28
 8001954:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001956:	2321      	movs	r3, #33	; 0x21
 8001958:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 800195a:	230f      	movs	r3, #15
 800195c:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 800195e:	2319      	movs	r3, #25
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800196e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001972:	4619      	mov	r1, r3
 8001974:	4839      	ldr	r0, [pc, #228]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001976:	f003 fb97 	bl	80050a8 <HAL_DSI_ConfigPhyTimer>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8001980:	f001 f89a 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001984:	2104      	movs	r1, #4
 8001986:	4835      	ldr	r0, [pc, #212]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001988:	f003 fb66 	bl	8005058 <HAL_DSI_ConfigFlowControl>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8001992:	f001 f891 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001996:	f242 7110 	movw	r1, #10000	; 0x2710
 800199a:	4830      	ldr	r0, [pc, #192]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 800199c:	f003 fdac 	bl	80054f8 <HAL_DSI_SetLowPowerRXFilter>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80019a6:	f001 f887 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	482b      	ldr	r0, [pc, #172]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80019ae:	f003 f86f 	bl	8004a90 <HAL_DSI_ConfigErrorMonitor>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 80019b8:	f001 f87e 	bl	8002ab8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80019c0:	2305      	movs	r3, #5
 80019c2:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 80019d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019d4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80019da:	2304      	movs	r3, #4
 80019dc:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 80019e6:	2312      	movs	r3, #18
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 80019ea:	2310      	movs	r3, #16
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 80019ee:	f240 53e2 	movw	r3, #1506	; 0x5e2
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8001a00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a04:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001a34:	f003 f910 	bl	8004c58 <HAL_DSI_ConfigVideoMode>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 8001a3e:	f001 f83b 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001a46:	f003 f8df 	bl	8004c08 <HAL_DSI_SetGenericVCID>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 8001a50:	f001 f832 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	37b8      	adds	r7, #184	; 0xb8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200003c4 	.word	0x200003c4
 8001a60:	40016c00 	.word	0x40016c00

08001a64 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_DSI_MspInit+0x38>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10b      	bne.n	8001a8e <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40016c00 	.word	0x40016c00
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_DSI_MspDeInit+0x2c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_DSI_MspDeInit+0x30>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_DSI_MspDeInit+0x30>)
 8001abc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40016c00 	.word	0x40016c00
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_FMC_Init+0x98>)
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <MX_FMC_Init+0x9c>)
 8001af4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_FMC_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_FMC_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b40:	2304      	movs	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b44:	2307      	movs	r3, #7
 8001b46:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b5a:	f005 fc4b 	bl	80073f4 <HAL_SDRAM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b64:	f000 ffa8 	bl	8002ab8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200003e0 	.word	0x200003e0
 8001b74:	a0000140 	.word	0xa0000140

08001b78 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_FMC_MspInit+0x104>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d16f      	bne.n	8001c74 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_FMC_MspInit+0x104>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001bb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001bb6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482d      	ldr	r0, [pc, #180]	; (8001c84 <HAL_FMC_MspInit+0x10c>)
 8001bce:	f003 fcc1 	bl	8005554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8001bd2:	f248 1337 	movw	r3, #33079	; 0x8137
 8001bd6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be4:	230c      	movs	r3, #12
 8001be6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4826      	ldr	r0, [pc, #152]	; (8001c88 <HAL_FMC_MspInit+0x110>)
 8001bee:	f003 fcb1 	bl	8005554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001bf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001bf6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c04:	230c      	movs	r3, #12
 8001c06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481f      	ldr	r0, [pc, #124]	; (8001c8c <HAL_FMC_MspInit+0x114>)
 8001c0e:	f003 fca1 	bl	8005554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001c12:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001c16:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c24:	230c      	movs	r3, #12
 8001c26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <HAL_FMC_MspInit+0x118>)
 8001c2e:	f003 fc91 	bl	8005554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001c32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c36:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c44:	230c      	movs	r3, #12
 8001c46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <HAL_FMC_MspInit+0x11c>)
 8001c4e:	f003 fc81 	bl	8005554 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8001c52:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001c56:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c64:	230c      	movs	r3, #12
 8001c66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <HAL_FMC_MspInit+0x120>)
 8001c6e:	f003 fc71 	bl	8005554 <HAL_GPIO_Init>
 8001c72:	e000      	b.n	8001c76 <HAL_FMC_MspInit+0xfe>
    return;
 8001c74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000414 	.word	0x20000414
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40021c00 	.word	0x40021c00

08001c9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ca4:	f7ff ff68 	bl	8001b78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <MX_FREERTOS_Init+0x18>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_FREERTOS_Init+0x1c>)
 8001cba:	f006 fcd5 	bl	8008668 <osThreadNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <MX_FREERTOS_Init+0x20>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0800ef64 	.word	0x0800ef64
 8001ccc:	08001cd5 	.word	0x08001cd5
 8001cd0:	20000418 	.word	0x20000418

08001cd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f006 fd69 	bl	80087b4 <osDelay>
 8001ce2:	e7fb      	b.n	8001cdc <StartDefaultTask+0x8>

08001ce4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfa:	4bac      	ldr	r3, [pc, #688]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4aab      	ldr	r2, [pc, #684]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aa5      	ldr	r2, [pc, #660]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4ba3      	ldr	r3, [pc, #652]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a9f      	ldr	r2, [pc, #636]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	4b9a      	ldr	r3, [pc, #616]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a99      	ldr	r2, [pc, #612]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b97      	ldr	r3, [pc, #604]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b94      	ldr	r3, [pc, #592]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a93      	ldr	r2, [pc, #588]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b91      	ldr	r3, [pc, #580]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a8d      	ldr	r2, [pc, #564]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b85      	ldr	r3, [pc, #532]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001da2:	4b82      	ldr	r3, [pc, #520]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a75      	ldr	r2, [pc, #468]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b70      	ldr	r3, [pc, #448]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a6f      	ldr	r2, [pc, #444]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8001e02:	2378      	movs	r3, #120	; 0x78
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e12:	2306      	movs	r3, #6
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4864      	ldr	r0, [pc, #400]	; (8001fb0 <MX_GPIO_Init+0x2cc>)
 8001e1e:	f003 fb99 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e22:	2304      	movs	r3, #4
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e32:	2309      	movs	r3, #9
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <MX_GPIO_Init+0x2cc>)
 8001e3e:	f003 fb89 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e42:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e54:	230b      	movs	r3, #11
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4855      	ldr	r0, [pc, #340]	; (8001fb4 <MX_GPIO_Init+0x2d0>)
 8001e60:	f003 fb78 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	2312      	movs	r3, #18
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	484d      	ldr	r0, [pc, #308]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001e82:	f003 fb67 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e86:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e98:	230a      	movs	r3, #10
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4845      	ldr	r0, [pc, #276]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001ea4:	f003 fb56 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	483d      	ldr	r0, [pc, #244]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001ec4:	f003 fb46 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4836      	ldr	r0, [pc, #216]	; (8001fbc <MX_GPIO_Init+0x2d8>)
 8001ee4:	f003 fb36 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001efa:	2308      	movs	r3, #8
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	482e      	ldr	r0, [pc, #184]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f06:	f003 fb25 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f22:	4619      	mov	r1, r3
 8001f24:	4824      	ldr	r0, [pc, #144]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001f26:	f003 fb15 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8001f2a:	f247 033b 	movw	r3, #28731	; 0x703b
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <MX_GPIO_Init+0x2e0>)
 8001f40:	f003 fb08 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001f56:	2303      	movs	r3, #3
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f62:	f003 faf7 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f78:	2309      	movs	r3, #9
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f84:	f003 fae6 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <MX_GPIO_Init+0x2e4>)
 8001fa6:	f003 fad5 	bl	8005554 <HAL_GPIO_Init>
 8001faa:	e00f      	b.n	8001fcc <MX_GPIO_Init+0x2e8>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001fcc:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	48bb      	ldr	r0, [pc, #748]	; (80022d0 <MX_GPIO_Init+0x5ec>)
 8001fe2:	f003 fab7 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001fe6:	23f8      	movs	r3, #248	; 0xf8
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	48b6      	ldr	r0, [pc, #728]	; (80022d4 <MX_GPIO_Init+0x5f0>)
 8001ffa:	f003 faab 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002010:	2307      	movs	r3, #7
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	48af      	ldr	r0, [pc, #700]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800201c:	f003 fa9a 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8002020:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002032:	230b      	movs	r3, #11
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	48a6      	ldr	r0, [pc, #664]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800203e:	f003 fa89 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8002042:	2330      	movs	r3, #48	; 0x30
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	48a1      	ldr	r0, [pc, #644]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002056:	f003 fa7d 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800205a:	2308      	movs	r3, #8
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800206a:	2303      	movs	r3, #3
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4899      	ldr	r0, [pc, #612]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002076:	f003 fa6d 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800207a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208c:	2305      	movs	r3, #5
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002094:	4619      	mov	r1, r3
 8002096:	4892      	ldr	r0, [pc, #584]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 8002098:	f003 fa5c 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800209c:	2304      	movs	r3, #4
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ac:	2308      	movs	r3, #8
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4889      	ldr	r0, [pc, #548]	; (80022dc <MX_GPIO_Init+0x5f8>)
 80020b8:	f003 fa4c 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ce:	2307      	movs	r3, #7
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	4881      	ldr	r0, [pc, #516]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80020da:	f003 fa3b 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f0:	2307      	movs	r3, #7
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4879      	ldr	r0, [pc, #484]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80020fc:	f003 fa2a 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002112:	230a      	movs	r3, #10
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	486c      	ldr	r0, [pc, #432]	; (80022d0 <MX_GPIO_Init+0x5ec>)
 800211e:	f003 fa19 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002132:	2308      	movs	r3, #8
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213a:	4619      	mov	r1, r3
 800213c:	4869      	ldr	r0, [pc, #420]	; (80022e4 <MX_GPIO_Init+0x600>)
 800213e:	f003 fa09 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002142:	2310      	movs	r3, #16
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002152:	230a      	movs	r3, #10
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4862      	ldr	r0, [pc, #392]	; (80022e8 <MX_GPIO_Init+0x604>)
 800215e:	f003 f9f9 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002172:	2306      	movs	r3, #6
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4856      	ldr	r0, [pc, #344]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800217e:	f003 f9e9 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8002182:	2348      	movs	r3, #72	; 0x48
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	4850      	ldr	r0, [pc, #320]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 8002196:	f003 f9dd 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80021aa:	2303      	movs	r3, #3
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	4619      	mov	r1, r3
 80021b4:	484d      	ldr	r0, [pc, #308]	; (80022ec <MX_GPIO_Init+0x608>)
 80021b6:	f003 f9cd 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021ca:	2303      	movs	r3, #3
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4845      	ldr	r0, [pc, #276]	; (80022ec <MX_GPIO_Init+0x608>)
 80021d6:	f003 f9bd 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80021da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ec:	4619      	mov	r1, r3
 80021ee:	483f      	ldr	r0, [pc, #252]	; (80022ec <MX_GPIO_Init+0x608>)
 80021f0:	f003 f9b0 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80021f4:	2301      	movs	r3, #1
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002204:	230a      	movs	r3, #10
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	4835      	ldr	r0, [pc, #212]	; (80022e4 <MX_GPIO_Init+0x600>)
 8002210:	f003 f9a0 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002214:	2332      	movs	r3, #50	; 0x32
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002224:	230b      	movs	r3, #11
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	482d      	ldr	r0, [pc, #180]	; (80022e4 <MX_GPIO_Init+0x600>)
 8002230:	f003 f990 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8002234:	2304      	movs	r3, #4
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002244:	2309      	movs	r3, #9
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224c:	4619      	mov	r1, r3
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <MX_GPIO_Init+0x60c>)
 8002250:	f003 f980 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002266:	2309      	movs	r3, #9
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226e:	4619      	mov	r1, r3
 8002270:	481a      	ldr	r0, [pc, #104]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002272:	f003 f96f 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002276:	2386      	movs	r3, #134	; 0x86
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002286:	230b      	movs	r3, #11
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 8002292:	f003 f95f 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800229a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80022ac:	f003 f952 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80022b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80022c2:	230a      	movs	r3, #10
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	e012      	b.n	80022f4 <MX_GPIO_Init+0x610>
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40022800 	.word	0x40022800
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40020400 	.word	0x40020400
 80022f4:	4825      	ldr	r0, [pc, #148]	; (800238c <MX_GPIO_Init+0x6a8>)
 80022f6:	f003 f92d 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	4820      	ldr	r0, [pc, #128]	; (8002390 <MX_GPIO_Init+0x6ac>)
 800230e:	f003 f921 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002312:	2328      	movs	r3, #40	; 0x28
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002322:	230a      	movs	r3, #10
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	4819      	ldr	r0, [pc, #100]	; (8002394 <MX_GPIO_Init+0x6b0>)
 800232e:	f003 f911 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002342:	2309      	movs	r3, #9
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4810      	ldr	r0, [pc, #64]	; (8002390 <MX_GPIO_Init+0x6ac>)
 800234e:	f003 f901 	bl	8005554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002352:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002364:	2305      	movs	r3, #5
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <MX_GPIO_Init+0x6b4>)
 8002370:	f003 f8f0 	bl	8005554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2105      	movs	r1, #5
 8002378:	2006      	movs	r0, #6
 800237a:	f001 fedf 	bl	800413c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800237e:	2006      	movs	r0, #6
 8002380:	f001 fef8 	bl	8004174 <HAL_NVIC_EnableIRQ>

}
 8002384:	bf00      	nop
 8002386:	3740      	adds	r7, #64	; 0x40
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021c00 	.word	0x40021c00
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400

0800239c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_I2C4_Init+0x74>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <MX_I2C4_Init+0x78>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_I2C4_Init+0x74>)
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <MX_I2C4_Init+0x7c>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_I2C4_Init+0x74>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_I2C4_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C4_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C4_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C4_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <MX_I2C4_Init+0x74>)
 80023d8:	f003 fab2 	bl	8005940 <HAL_I2C_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80023e2:	f000 fb69 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ea:	f003 fb39 	bl	8005a60 <HAL_I2CEx_ConfigAnalogFilter>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80023f4:	f000 fb60 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80023f8:	2100      	movs	r1, #0
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_I2C4_Init+0x74>)
 80023fc:	f003 fb7b 	bl	8005af6 <HAL_I2CEx_ConfigDigitalFilter>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002406:	f000 fb57 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000041c 	.word	0x2000041c
 8002414:	40006000 	.word	0x40006000
 8002418:	00c0eaff 	.word	0x00c0eaff

0800241c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ae      	sub	sp, #184	; 0xb8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2290      	movs	r2, #144	; 0x90
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f009 f8c9 	bl	800b5d4 <memset>
  if(i2cHandle->Instance==I2C4)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_I2C_MspInit+0xf8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d15e      	bne.n	800250a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fba1 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002468:	f000 fb26 	bl	8002ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a2:	2312      	movs	r3, #18
 80024a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80024b4:	230b      	movs	r3, #11
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024be:	4619      	mov	r1, r3
 80024c0:	4816      	ldr	r0, [pc, #88]	; (800251c <HAL_I2C_MspInit+0x100>)
 80024c2:	f003 f847 	bl	8005554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ce:	2312      	movs	r3, #18
 80024d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <HAL_I2C_MspInit+0x104>)
 80024ee:	f003 f831 	bl	8005554 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 80024f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	37b8      	adds	r7, #184	; 0xb8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40006000 	.word	0x40006000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400
 8002520:	40020c00 	.word	0x40020c00

08002524 <readJoystick>:
uint16_t readValueY = 0;

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;

enum Direction readJoystick(){
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

	// A0 BLU -> VRx
	// A1 BIANCO -> VRy

	// Enable ADC for joystick
	HAL_ADC_Start(&hadc1);
 8002528:	481e      	ldr	r0, [pc, #120]	; (80025a4 <readJoystick+0x80>)
 800252a:	f001 f999 	bl	8003860 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <readJoystick+0x84>)
 8002530:	f001 f996 	bl	8003860 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1,1000);
 8002534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <readJoystick+0x80>)
 800253a:	f001 fa5f 	bl	80039fc <HAL_ADC_PollForConversion>
	readValueX = HAL_ADC_GetValue(&hadc1);
 800253e:	4819      	ldr	r0, [pc, #100]	; (80025a4 <readJoystick+0x80>)
 8002540:	f001 fae7 	bl	8003b12 <HAL_ADC_GetValue>
 8002544:	4603      	mov	r3, r0
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <readJoystick+0x88>)
 800254a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc2,1000);
 800254c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002550:	4815      	ldr	r0, [pc, #84]	; (80025a8 <readJoystick+0x84>)
 8002552:	f001 fa53 	bl	80039fc <HAL_ADC_PollForConversion>
    readValueY = HAL_ADC_GetValue(&hadc2);
 8002556:	4814      	ldr	r0, [pc, #80]	; (80025a8 <readJoystick+0x84>)
 8002558:	f001 fadb 	bl	8003b12 <HAL_ADC_GetValue>
 800255c:	4603      	mov	r3, r0
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <readJoystick+0x8c>)
 8002562:	801a      	strh	r2, [r3, #0]

    // Check direction
    if(readValueX <= MARGIN)
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <readJoystick+0x88>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800256c:	d801      	bhi.n	8002572 <readJoystick+0x4e>
    	return LEFT;
 800256e:	2302      	movs	r3, #2
 8002570:	e015      	b.n	800259e <readJoystick+0x7a>
    else if(readValueX >= maxValue - MARGIN)
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <readJoystick+0x88>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f5b3 6f4e 	cmp.w	r3, #3296	; 0xce0
 800257a:	d301      	bcc.n	8002580 <readJoystick+0x5c>
    	return RIGHT;
 800257c:	2303      	movs	r3, #3
 800257e:	e00e      	b.n	800259e <readJoystick+0x7a>
    else if(readValueY <= MARGIN)
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <readJoystick+0x8c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002588:	d801      	bhi.n	800258e <readJoystick+0x6a>
    	return UP;
 800258a:	2300      	movs	r3, #0
 800258c:	e007      	b.n	800259e <readJoystick+0x7a>
    else if(readValueY >= maxValue - MARGIN)
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <readJoystick+0x8c>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f5b3 6f4e 	cmp.w	r3, #3296	; 0xce0
 8002596:	d301      	bcc.n	800259c <readJoystick+0x78>
    	return DOWN;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <readJoystick+0x7a>

    return IDLE;
 800259c:	2304      	movs	r3, #4
}
 800259e:	4618      	mov	r0, r3
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002dc 	.word	0x200002dc
 80025a8:	20000324 	.word	0x20000324
 80025ac:	20000470 	.word	0x20000470
 80025b0:	20000472 	.word	0x20000472

080025b4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b09a      	sub	sp, #104	; 0x68
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80025ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025be:	2234      	movs	r2, #52	; 0x34
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f009 f806 	bl	800b5d4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80025c8:	463b      	mov	r3, r7
 80025ca:	2234      	movs	r2, #52	; 0x34
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f009 f800 	bl	800b5d4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <MX_LTDC_Init+0x160>)
 80025d8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80025f8:	4b45      	ldr	r3, [pc, #276]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80025fe:	4b44      	ldr	r3, [pc, #272]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002600:	220e      	movs	r2, #14
 8002602:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002606:	2205      	movs	r2, #5
 8002608:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <MX_LTDC_Init+0x15c>)
 800260c:	f240 228e 	movw	r2, #654	; 0x28e
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002614:	f240 12e5 	movw	r2, #485	; 0x1e5
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <MX_LTDC_Init+0x15c>)
 800261c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002624:	f240 12e7 	movw	r2, #487	; 0x1e7
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <MX_LTDC_Init+0x15c>)
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002632:	4b37      	ldr	r3, [pc, #220]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <MX_LTDC_Init+0x15c>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002642:	4833      	ldr	r0, [pc, #204]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002644:	f003 faa4 	bl	8005b90 <HAL_LTDC_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800264e:	f000 fa33 	bl	8002ab8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800266e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002674:	2305      	movs	r3, #5
 8002676:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002696:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <MX_LTDC_Init+0x15c>)
 80026a0:	f003 fb46 	bl	8005d30 <HAL_LTDC_ConfigLayer>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80026aa:	f000 fa05 	bl	8002ab8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80026ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80026d0:	2305      	movs	r3, #5
 80026d2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_LTDC_Init+0x15c>)
 80026fa:	f003 fb19 	bl	8005d30 <HAL_LTDC_ConfigLayer>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002704:	f000 f9d8 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3768      	adds	r7, #104	; 0x68
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000474 	.word	0x20000474
 8002714:	40016800 	.word	0x40016800

08002718 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0a8      	sub	sp, #160	; 0xa0
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2290      	movs	r2, #144	; 0x90
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f008 ff53 	bl	800b5d4 <memset>
  if(ltdcHandle->Instance==LTDC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a16      	ldr	r2, [pc, #88]	; (800278c <HAL_LTDC_MspInit+0x74>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d124      	bne.n	8002782 <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002738:	2308      	movs	r3, #8
 800273a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800273c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002742:	2307      	movs	r3, #7
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fa22 	bl	8006ba4 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8002766:	f000 f9a7 	bl	8002ab8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 8002770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	37a0      	adds	r7, #160	; 0xa0
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40016800 	.word	0x40016800
 8002790:	40023800 	.word	0x40023800

08002794 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002798:	f3bf 8f4f 	dsb	sy
}
 800279c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800279e:	f3bf 8f6f 	isb	sy
}
 80027a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <SCB_EnableICache+0x48>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80027ac:	f3bf 8f4f 	dsb	sy
}
 80027b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027b2:	f3bf 8f6f 	isb	sy
}
 80027b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SCB_EnableICache+0x48>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <SCB_EnableICache+0x48>)
 80027be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c4:	f3bf 8f4f 	dsb	sy
}
 80027c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ca:	f3bf 8f6f 	isb	sy
}
 80027ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <SCB_EnableDCache+0x84>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80027ee:	f3bf 8f4f 	dsb	sy
}
 80027f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <SCB_EnableDCache+0x84>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002804:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002818:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800281e:	4911      	ldr	r1, [pc, #68]	; (8002864 <SCB_EnableDCache+0x84>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	60fa      	str	r2, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800283a:	f3bf 8f4f 	dsb	sy
}
 800283e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <SCB_EnableDCache+0x84>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <SCB_EnableDCache+0x84>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
}
 8002850:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002852:	f3bf 8f6f 	isb	sy
}
 8002856:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800286c:	f7ff ff92 	bl	8002794 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002870:	f7ff ffb6 	bl	80027e0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002874:	f000 ff56 	bl	8003724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002878:	f000 f83a 	bl	80028f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800287c:	f7ff fa32 	bl	8001ce4 <MX_GPIO_Init>
  MX_FMC_Init();
 8002880:	f7ff f92a 	bl	8001ad8 <MX_FMC_Init>
  MX_I2C4_Init();
 8002884:	f7ff fd8a 	bl	800239c <MX_I2C4_Init>
  MX_TIM3_Init();
 8002888:	f000 fe70 	bl	800356c <MX_TIM3_Init>
  MX_DMA2D_Init();
 800288c:	f7fe ffbe 	bl	800180c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8002890:	f7fe fffa 	bl	8001888 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8002894:	f7ff fe8e 	bl	80025b4 <MX_LTDC_Init>
  MX_ADC1_Init();
 8002898:	f7fe fe8e 	bl	80015b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800289c:	f7fe fede 	bl	800165c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 80028a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028a4:	f000 f896 	bl	80029d4 <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 80028a8:	f7fd fe98 	bl	80005dc <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 80028ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7fe f82d 	bl	8000910 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7fe f88a 	bl	80009d0 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <main+0x84>)
 80028be:	f7fe f8c9 	bl	8000a54 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_BLACK);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 80028c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028c6:	f7fe f8df 	bl	8000a88 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80028ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028ce:	f7fe f8a7 	bl	8000a20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80028d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d6:	f7fe f88b 	bl	80009f0 <BSP_LCD_SetTextColor>

  freeRTOS_user_init();
 80028da:	f000 f8f3 	bl	8002ac4 <freeRTOS_user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80028de:	f005 fe59 	bl	8008594 <osKernelInitialize>
  MX_FREERTOS_Init();
 80028e2:	f7ff f9e5 	bl	8001cb0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028e6:	f005 fe89 	bl	80085fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <main+0x82>
 80028ec:	20000010 	.word	0x20000010

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	; 0x50
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	2234      	movs	r2, #52	; 0x34
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f008 fe68 	bl	800b5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002914:	f003 fc34 	bl	8006180 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <SystemClock_Config+0xdc>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <SystemClock_Config+0xdc>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <SystemClock_Config+0xdc>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <SystemClock_Config+0xe0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <SystemClock_Config+0xe0>)
 8002936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <SystemClock_Config+0xe0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800294c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002950:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002952:	2302      	movs	r3, #2
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800295c:	2319      	movs	r3, #25
 800295e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002960:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002966:	2302      	movs	r3, #2
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800296a:	2304      	movs	r3, #4
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 800296e:	2307      	movs	r3, #7
 8002970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fc62 	bl	8006240 <HAL_RCC_OscConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002982:	f000 f899 	bl	8002ab8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002986:	f003 fc0b 	bl	80061a0 <HAL_PWREx_EnableOverDrive>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002990:	f000 f892 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002994:	230f      	movs	r3, #15
 8002996:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002998:	2302      	movs	r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	2106      	movs	r1, #6
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 fef2 	bl	800679c <HAL_RCC_ClockConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80029be:	f000 f87b 	bl	8002ab8 <Error_Handler>
  }
}
 80029c2:	bf00      	nop
 80029c4:	3750      	adds	r7, #80	; 0x50
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000

080029d4 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e8:	2210      	movs	r2, #16
 80029ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80029f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fc:	4923      	ldr	r1, [pc, #140]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fe:	4824      	ldr	r0, [pc, #144]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a00:	f004 fd2c 	bl	800745c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 fec3 	bl	8003790 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a12:	2210      	movs	r2, #16
 8002a14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a26:	4919      	ldr	r1, [pc, #100]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a28:	4819      	ldr	r0, [pc, #100]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a2a:	f004 fd17 	bl	800745c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a30:	2203      	movs	r2, #3
 8002a32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a36:	2210      	movs	r2, #16
 8002a38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4c:	4810      	ldr	r0, [pc, #64]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a4e:	f004 fd05 	bl	800745c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002a52:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a60:	2210      	movs	r2, #16
 8002a62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a74:	4905      	ldr	r1, [pc, #20]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a78:	f004 fcf0 	bl	800745c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a80:	f004 fd21 	bl	80074c6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000051c 	.word	0x2000051c
 8002a90:	200003e0 	.word	0x200003e0

08002a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aa6:	f000 fe53 	bl	8003750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40001000 	.word	0x40001000

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <freeRTOS_user_init>:
/* Functions definition ------------------------------------------------------*/
/**
  * @brief Create the FreeRTOS objects and tasks.
  * @return true if the tasks are created, false otherwise.
  */
void freeRTOS_user_init(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af02      	add	r7, sp, #8
	bool retval = true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	71fb      	strb	r3, [r7, #7]

	// Setup list
	currentDirection = UP;
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <freeRTOS_user_init+0x8c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
	startGame = 0;
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <freeRTOS_user_init+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
	//queue = initQueue();

	lcd_mut = xSemaphoreCreateMutex();			//Create mutex (LCD access)
 8002ada:	2001      	movs	r0, #1
 8002adc:	f006 f8eb 	bl	8008cb6 <xQueueCreateMutex>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <freeRTOS_user_init+0x94>)
 8002ae4:	6013      	str	r3, [r2, #0]
	if(lcd_mut == NULL)
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <freeRTOS_user_init+0x94>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <freeRTOS_user_init+0x2e>
		retval = false;
 8002aee:	2300      	movs	r3, #0
 8002af0:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate( task_draw_fct,		//Task function
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <freeRTOS_user_init+0x98>)
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2300      	movs	r3, #0
 8002afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b00:	4917      	ldr	r1, [pc, #92]	; (8002b60 <freeRTOS_user_init+0x9c>)
 8002b02:	4818      	ldr	r0, [pc, #96]	; (8002b64 <freeRTOS_user_init+0xa0>)
 8002b04:	f006 fd4d 	bl	80095a2 <xTaskCreate>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	71fb      	strb	r3, [r7, #7]
				256,							//Task stack dimension (1kB)
				NULL,							//Task parameter
				1,								//Task priority
				&task_draw_handle );			//Task handle

	retval &= xTaskCreate( task_readJoystick_fct,		//Task function
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <freeRTOS_user_init+0xa4>)
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b26:	4911      	ldr	r1, [pc, #68]	; (8002b6c <freeRTOS_user_init+0xa8>)
 8002b28:	4811      	ldr	r0, [pc, #68]	; (8002b70 <freeRTOS_user_init+0xac>)
 8002b2a:	f006 fd3a 	bl	80095a2 <xTaskCreate>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	71fb      	strb	r3, [r7, #7]
				NULL,									//Task parameter
				1,										//Task priority
				&task_readJoystick_handle );			//Task handle

	// Fill initial grid
	computeInitialGrid();
 8002b3e:	f000 f9a7 	bl	8002e90 <computeInitialGrid>

	// Print welcome message
	displayWelcomeMessage();
 8002b42:	f000 facf 	bl	80030e4 <displayWelcomeMessage>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000052d 	.word	0x2000052d
 8002b54:	200006a8 	.word	0x200006a8
 8002b58:	200006b8 	.word	0x200006b8
 8002b5c:	200006b0 	.word	0x200006b0
 8002b60:	0800c324 	.word	0x0800c324
 8002b64:	08002f21 	.word	0x08002f21
 8002b68:	200006b4 	.word	0x200006b4
 8002b6c:	0800c330 	.word	0x0800c330
 8002b70:	08002b75 	.word	0x08002b75

08002b74 <task_readJoystick_fct>:

void task_readJoystick_fct( void *pvParameters ){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	while(1){
		// Wait until game gets started
		while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002b7c:	e002      	b.n	8002b84 <task_readJoystick_fct+0x10>
 8002b7e:	2032      	movs	r0, #50	; 0x32
 8002b80:	f006 fe6c 	bl	800985c <vTaskDelay>
 8002b84:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <task_readJoystick_fct+0x68>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f8      	beq.n	8002b7e <task_readJoystick_fct+0xa>

		// Wait until initial delay is over
		while(showInitialDelay) vTaskDelay(pdMS_TO_TICKS(10));
 8002b8c:	e002      	b.n	8002b94 <task_readJoystick_fct+0x20>
 8002b8e:	200a      	movs	r0, #10
 8002b90:	f006 fe64 	bl	800985c <vTaskDelay>
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <task_readJoystick_fct+0x6c>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f8      	bne.n	8002b8e <task_readJoystick_fct+0x1a>

		while(!gameFinished){
 8002b9c:	e012      	b.n	8002bc4 <task_readJoystick_fct+0x50>
			enum Direction newDirection = readJoystick();
 8002b9e:	f7ff fcc1 	bl	8002524 <readJoystick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]

			if(newDirection != IDLE) currentDirection = newDirection;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d002      	beq.n	8002bb2 <task_readJoystick_fct+0x3e>
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <task_readJoystick_fct+0x70>)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	7013      	strb	r3, [r2, #0]

			move_and_compute_new_grid(currentDirection);
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <task_readJoystick_fct+0x70>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f818 	bl	8002bec <move_and_compute_new_grid>
			vTaskDelay(pdMS_TO_TICKS(MOVE_INTERVAL));
 8002bbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bc0:	f006 fe4c 	bl	800985c <vTaskDelay>
		while(!gameFinished){
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <task_readJoystick_fct+0x74>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e5      	bne.n	8002b9e <task_readJoystick_fct+0x2a>
		}

		vTaskDelay(pdMS_TO_TICKS(200));
 8002bd2:	20c8      	movs	r0, #200	; 0xc8
 8002bd4:	f006 fe42 	bl	800985c <vTaskDelay>
		while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002bd8:	e7d4      	b.n	8002b84 <task_readJoystick_fct+0x10>
 8002bda:	bf00      	nop
 8002bdc:	200006a8 	.word	0x200006a8
 8002be0:	2000001c 	.word	0x2000001c
 8002be4:	2000052d 	.word	0x2000052d
 8002be8:	200006ac 	.word	0x200006ac

08002bec <move_and_compute_new_grid>:
	}

}

void move_and_compute_new_grid(enum Direction newDirection){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]

	if(newDirection == DOWN){
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d14c      	bne.n	8002c96 <move_and_compute_new_grid+0xaa>
		// Check for collision
		if(matrix[Y_AXIS_CENTER + 1][X_AXIS_CENTER]){
 8002bfc:	4ba2      	ldr	r3, [pc, #648]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002bfe:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <move_and_compute_new_grid+0x22>
			gameFinished = true;
 8002c06:	4ba1      	ldr	r3, [pc, #644]	; (8002e8c <move_and_compute_new_grid+0x2a0>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
				matrix[i][X_AXIS_ELEMENTS - 1] = getRandomInt(100) <= SPAWN_PERCENTAGE;
			}
		}
	}
}
 8002c0c:	e137      	b.n	8002e7e <move_and_compute_new_grid+0x292>
			for(int i = 0; i < Y_AXIS_ELEMENTS - 1; i++){
 8002c0e:	2300      	movs	r3, #0
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34
 8002c12:	e023      	b.n	8002c5c <move_and_compute_new_grid+0x70>
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002c14:	2300      	movs	r3, #0
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
 8002c18:	e01a      	b.n	8002c50 <move_and_compute_new_grid+0x64>
					matrix[i][j] = matrix[i + 1][j];
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	499a      	ldr	r1, [pc, #616]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	18ca      	adds	r2, r1, r3
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	4413      	add	r3, r2
 8002c30:	7818      	ldrb	r0, [r3, #0]
 8002c32:	4995      	ldr	r1, [pc, #596]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	18ca      	adds	r2, r1, r3
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	4413      	add	r3, r2
 8002c46:	4602      	mov	r2, r0
 8002c48:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	dde1      	ble.n	8002c1a <move_and_compute_new_grid+0x2e>
			for(int i = 0; i < Y_AXIS_ELEMENTS - 1; i++){
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	3301      	adds	r3, #1
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	2b0d      	cmp	r3, #13
 8002c60:	ddd8      	ble.n	8002c14 <move_and_compute_new_grid+0x28>
			for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c66:	e012      	b.n	8002c8e <move_and_compute_new_grid+0xa2>
				matrix[Y_AXIS_ELEMENTS - 1][j] = getRandomInt(100) <= SPAWN_PERCENTAGE;
 8002c68:	2064      	movs	r0, #100	; 0x64
 8002c6a:	f000 f945 	bl	8002ef8 <getRandomInt>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	bfd4      	ite	le
 8002c74:	2301      	movle	r3, #1
 8002c76:	2300      	movgt	r3, #0
 8002c78:	b2d9      	uxtb	r1, r3
 8002c7a:	4a83      	ldr	r2, [pc, #524]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 8002c84:	460a      	mov	r2, r1
 8002c86:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b18      	cmp	r3, #24
 8002c92:	dde9      	ble.n	8002c68 <move_and_compute_new_grid+0x7c>
}
 8002c94:	e0f3      	b.n	8002e7e <move_and_compute_new_grid+0x292>
	}else if(newDirection == UP){
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d14a      	bne.n	8002d32 <move_and_compute_new_grid+0x146>
		if(matrix[Y_AXIS_CENTER - 1][X_AXIS_CENTER]){
 8002c9c:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002c9e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <move_and_compute_new_grid+0xc2>
			gameFinished = true;
 8002ca6:	4b79      	ldr	r3, [pc, #484]	; (8002e8c <move_and_compute_new_grid+0x2a0>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	e0e7      	b.n	8002e7e <move_and_compute_new_grid+0x292>
			for(int i = Y_AXIS_ELEMENTS - 1; i > 0; i--){
 8002cae:	230e      	movs	r3, #14
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	e023      	b.n	8002cfc <move_and_compute_new_grid+0x110>
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	e01a      	b.n	8002cf0 <move_and_compute_new_grid+0x104>
					matrix[i][j] = matrix[i - 1][j];
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	1e5a      	subs	r2, r3, #1
 8002cbe:	4972      	ldr	r1, [pc, #456]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	18ca      	adds	r2, r1, r3
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	4413      	add	r3, r2
 8002cd0:	7818      	ldrb	r0, [r3, #0]
 8002cd2:	496d      	ldr	r1, [pc, #436]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	18ca      	adds	r2, r1, r3
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	dde1      	ble.n	8002cba <move_and_compute_new_grid+0xce>
			for(int i = Y_AXIS_ELEMENTS - 1; i > 0; i--){
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dcd8      	bgt.n	8002cb4 <move_and_compute_new_grid+0xc8>
			for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
 8002d06:	e010      	b.n	8002d2a <move_and_compute_new_grid+0x13e>
				matrix[0][j] = getRandomInt(100) <= SPAWN_PERCENTAGE;
 8002d08:	2064      	movs	r0, #100	; 0x64
 8002d0a:	f000 f8f5 	bl	8002ef8 <getRandomInt>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	bfd4      	ite	le
 8002d14:	2301      	movle	r3, #1
 8002d16:	2300      	movgt	r3, #0
 8002d18:	b2d9      	uxtb	r1, r3
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	4413      	add	r3, r2
 8002d20:	460a      	mov	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	3301      	adds	r3, #1
 8002d28:	623b      	str	r3, [r7, #32]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2b18      	cmp	r3, #24
 8002d2e:	ddeb      	ble.n	8002d08 <move_and_compute_new_grid+0x11c>
}
 8002d30:	e0a5      	b.n	8002e7e <move_and_compute_new_grid+0x292>
	}else if(newDirection == LEFT){
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d14f      	bne.n	8002dd8 <move_and_compute_new_grid+0x1ec>
		if(matrix[Y_AXIS_CENTER][X_AXIS_CENTER - 1]){
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002d3a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <move_and_compute_new_grid+0x15e>
			gameFinished = true;
 8002d42:	4b52      	ldr	r3, [pc, #328]	; (8002e8c <move_and_compute_new_grid+0x2a0>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
}
 8002d48:	e099      	b.n	8002e7e <move_and_compute_new_grid+0x292>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e023      	b.n	8002d98 <move_and_compute_new_grid+0x1ac>
				for(int j = X_AXIS_ELEMENTS - 1; j > 0; j--){
 8002d50:	2318      	movs	r3, #24
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e01a      	b.n	8002d8c <move_and_compute_new_grid+0x1a0>
					matrix[i][j] = 	matrix[i][j - 1];
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1e59      	subs	r1, r3, #1
 8002d5a:	484b      	ldr	r0, [pc, #300]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	4403      	add	r3, r0
 8002d6a:	440b      	add	r3, r1
 8002d6c:	7818      	ldrb	r0, [r3, #0]
 8002d6e:	4946      	ldr	r1, [pc, #280]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009a      	lsls	r2, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	18ca      	adds	r2, r1, r3
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	4602      	mov	r2, r0
 8002d84:	701a      	strb	r2, [r3, #0]
				for(int j = X_AXIS_ELEMENTS - 1; j > 0; j--){
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	dce1      	bgt.n	8002d56 <move_and_compute_new_grid+0x16a>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0e      	cmp	r3, #14
 8002d9c:	ddd8      	ble.n	8002d50 <move_and_compute_new_grid+0x164>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e015      	b.n	8002dd0 <move_and_compute_new_grid+0x1e4>
				matrix[i][0] = getRandomInt(100) <= SPAWN_PERCENTAGE;
 8002da4:	2064      	movs	r0, #100	; 0x64
 8002da6:	f000 f8a7 	bl	8002ef8 <getRandomInt>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	bfd4      	ite	le
 8002db0:	2301      	movle	r3, #1
 8002db2:	2300      	movgt	r3, #0
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	4934      	ldr	r1, [pc, #208]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009a      	lsls	r2, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b0e      	cmp	r3, #14
 8002dd4:	dde6      	ble.n	8002da4 <move_and_compute_new_grid+0x1b8>
}
 8002dd6:	e052      	b.n	8002e7e <move_and_compute_new_grid+0x292>
	}else if(newDirection == RIGHT){
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d14f      	bne.n	8002e7e <move_and_compute_new_grid+0x292>
		if(matrix[Y_AXIS_CENTER][X_AXIS_CENTER + 1]){
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002de0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <move_and_compute_new_grid+0x204>
			gameFinished = true;
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <move_and_compute_new_grid+0x2a0>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	e046      	b.n	8002e7e <move_and_compute_new_grid+0x292>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e023      	b.n	8002e3e <move_and_compute_new_grid+0x252>
				for(int j = 0; j < X_AXIS_ELEMENTS - 1; j++){
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e01a      	b.n	8002e32 <move_and_compute_new_grid+0x246>
					matrix[i][j] = matrix[i][j + 1];
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1c59      	adds	r1, r3, #1
 8002e00:	4821      	ldr	r0, [pc, #132]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4403      	add	r3, r0
 8002e10:	440b      	add	r3, r1
 8002e12:	7818      	ldrb	r0, [r3, #0]
 8002e14:	491c      	ldr	r1, [pc, #112]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	18ca      	adds	r2, r1, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	4602      	mov	r2, r0
 8002e2a:	701a      	strb	r2, [r3, #0]
				for(int j = 0; j < X_AXIS_ELEMENTS - 1; j++){
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b17      	cmp	r3, #23
 8002e36:	dde1      	ble.n	8002dfc <move_and_compute_new_grid+0x210>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b0e      	cmp	r3, #14
 8002e42:	ddd8      	ble.n	8002df6 <move_and_compute_new_grid+0x20a>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	e016      	b.n	8002e78 <move_and_compute_new_grid+0x28c>
				matrix[i][X_AXIS_ELEMENTS - 1] = getRandomInt(100) <= SPAWN_PERCENTAGE;
 8002e4a:	2064      	movs	r0, #100	; 0x64
 8002e4c:	f000 f854 	bl	8002ef8 <getRandomInt>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bfd4      	ite	le
 8002e56:	2301      	movle	r3, #1
 8002e58:	2300      	movgt	r3, #0
 8002e5a:	b2d8      	uxtb	r0, r3
 8002e5c:	490a      	ldr	r1, [pc, #40]	; (8002e88 <move_and_compute_new_grid+0x29c>)
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	4602      	mov	r2, r0
 8002e70:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b0e      	cmp	r3, #14
 8002e7c:	dde5      	ble.n	8002e4a <move_and_compute_new_grid+0x25e>
}
 8002e7e:	bf00      	nop
 8002e80:	3738      	adds	r7, #56	; 0x38
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000530 	.word	0x20000530
 8002e8c:	200006ac 	.word	0x200006ac

08002e90 <computeInitialGrid>:

void computeInitialGrid(){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
	for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e020      	b.n	8002ede <computeInitialGrid+0x4e>
		for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	e017      	b.n	8002ed2 <computeInitialGrid+0x42>
			matrix[i][j] = getRandomInt(100) <= SPAWN_PERCENTAGE;
 8002ea2:	2064      	movs	r0, #100	; 0x64
 8002ea4:	f000 f828 	bl	8002ef8 <getRandomInt>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bfd4      	ite	le
 8002eae:	2301      	movle	r3, #1
 8002eb0:	2300      	movgt	r3, #0
 8002eb2:	b2d8      	uxtb	r0, r3
 8002eb4:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <computeInitialGrid+0x64>)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009a      	lsls	r2, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	18ca      	adds	r2, r1, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4602      	mov	r2, r0
 8002eca:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b18      	cmp	r3, #24
 8002ed6:	dde4      	ble.n	8002ea2 <computeInitialGrid+0x12>
	for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3301      	adds	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0e      	cmp	r3, #14
 8002ee2:	dddb      	ble.n	8002e9c <computeInitialGrid+0xc>
		}
	}

	// Free central block
	matrix[Y_AXIS_ELEMENTS][X_AXIS_ELEMENTS] = false;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <computeInitialGrid+0x64>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000530 	.word	0x20000530

08002ef8 <getRandomInt>:

int getRandomInt(int max){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	// returns from 1 to max
	return (rand() % max) + 1;
 8002f00:	f008 fa68 	bl	800b3d4 <rand>
 8002f04:	4603      	mov	r3, r0
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	fb93 f2f2 	sdiv	r2, r3, r2
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	fb01 f202 	mul.w	r2, r1, r2
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	3301      	adds	r3, #1
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <task_draw_fct>:

void task_draw_fct( void *pvParameters ){
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]

	// Wait until game gets started
	while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002f28:	e002      	b.n	8002f30 <task_draw_fct+0x10>
 8002f2a:	2032      	movs	r0, #50	; 0x32
 8002f2c:	f006 fc96 	bl	800985c <vTaskDelay>
 8002f30:	4b55      	ldr	r3, [pc, #340]	; (8003088 <task_draw_fct+0x168>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f8      	beq.n	8002f2a <task_draw_fct+0xa>

	while(1){
		if(gameFinished){
 8002f38:	4b54      	ldr	r3, [pc, #336]	; (800308c <task_draw_fct+0x16c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <task_draw_fct+0x26>
			displayGameEndMessage();
 8002f40:	f000 f8fc 	bl	800313c <displayGameEndMessage>
 8002f44:	e7f8      	b.n	8002f38 <task_draw_fct+0x18>
		}else{
			// Draw bricks
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e02a      	b.n	8002fa2 <task_draw_fct+0x82>
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	e021      	b.n	8002f96 <task_draw_fct+0x76>
					draw_filled_square(
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	b298      	uxth	r0, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	015b      	lsls	r3, r3, #5
 8002f60:	b299      	uxth	r1, r3
							j * CUBE_SIDE_LEN,
							i * CUBE_SIDE_LEN,
							CUBE_SIDE_LEN,
							CUBE_SIDE_LEN,
							matrix[i][j] ? LCD_COLOR_WHITE : LCD_COLOR_BLACK
 8002f62:	4c4b      	ldr	r4, [pc, #300]	; (8003090 <task_draw_fct+0x170>)
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	18e2      	adds	r2, r4, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4413      	add	r3, r2
 8002f76:	781b      	ldrb	r3, [r3, #0]
					draw_filled_square(
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <task_draw_fct+0x62>
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f80:	e001      	b.n	8002f86 <task_draw_fct+0x66>
 8002f82:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2320      	movs	r3, #32
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f000 f88e 	bl	80030ac <draw_filled_square>
				for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b18      	cmp	r3, #24
 8002f9a:	ddda      	ble.n	8002f52 <task_draw_fct+0x32>
			for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b0e      	cmp	r3, #14
 8002fa6:	ddd1      	ble.n	8002f4c <task_draw_fct+0x2c>
					);
				}
			}

			// Draw player
			draw_filled_square(X_AXIS_CENTER * CUBE_SIDE_LEN, Y_AXIS_CENTER * CUBE_SIDE_LEN, CUBE_SIDE_LEN, CUBE_SIDE_LEN, LCD_COLOR_ORANGE);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <task_draw_fct+0x174>)
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2320      	movs	r3, #32
 8002fae:	2220      	movs	r2, #32
 8002fb0:	21e0      	movs	r1, #224	; 0xe0
 8002fb2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8002fb6:	f000 f879 	bl	80030ac <draw_filled_square>

			if(showInitialDelay){
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <task_draw_fct+0x178>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <task_draw_fct+0xb0>
				// Wait for 3 seconds
				vTaskDelay(pdMS_TO_TICKS(2000));
 8002fc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fc6:	f006 fc49 	bl	800985c <vTaskDelay>
				showInitialDelay = false;
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <task_draw_fct+0x178>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
			}

			// Delay
			vTaskDelay(pdMS_TO_TICKS(MOVE_INTERVAL/speed));
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <task_draw_fct+0x17c>)
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	eddf 6a32 	vldr	s13, [pc, #200]	; 80030a0 <task_draw_fct+0x180>
 8002fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe2:	ee17 2a90 	vmov	r2, s15
 8002fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <task_draw_fct+0x184>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f006 fc30 	bl	800985c <vTaskDelay>

			// Enhance speed
			if(difficultyLevel == LOW){
 8002ffc:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <task_draw_fct+0x188>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <task_draw_fct+0x102>
				speed += 0.01;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <task_draw_fct+0x17c>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800300e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8003070 <task_draw_fct+0x150>
 8003012:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003016:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <task_draw_fct+0x17c>)
 800301c:	edc3 7a00 	vstr	s15, [r3]
 8003020:	e78a      	b.n	8002f38 <task_draw_fct+0x18>
			}else if(difficultyLevel == MEDIUM){
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <task_draw_fct+0x188>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d10e      	bne.n	8003048 <task_draw_fct+0x128>
				speed += 0.02;
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <task_draw_fct+0x17c>)
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003034:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003078 <task_draw_fct+0x158>
 8003038:	ee37 7b06 	vadd.f64	d7, d7, d6
 800303c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <task_draw_fct+0x17c>)
 8003042:	edc3 7a00 	vstr	s15, [r3]
 8003046:	e777      	b.n	8002f38 <task_draw_fct+0x18>
			}else if(difficultyLevel == HIGH){
 8003048:	4b17      	ldr	r3, [pc, #92]	; (80030a8 <task_draw_fct+0x188>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	f47f af73 	bne.w	8002f38 <task_draw_fct+0x18>
				speed += 0.03;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <task_draw_fct+0x17c>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800305c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8003080 <task_draw_fct+0x160>
 8003060:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003064:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <task_draw_fct+0x17c>)
 800306a:	edc3 7a00 	vstr	s15, [r3]
		if(gameFinished){
 800306e:	e763      	b.n	8002f38 <task_draw_fct+0x18>
 8003070:	47ae147b 	.word	0x47ae147b
 8003074:	3f847ae1 	.word	0x3f847ae1
 8003078:	47ae147b 	.word	0x47ae147b
 800307c:	3f947ae1 	.word	0x3f947ae1
 8003080:	eb851eb8 	.word	0xeb851eb8
 8003084:	3f9eb851 	.word	0x3f9eb851
 8003088:	200006a8 	.word	0x200006a8
 800308c:	200006ac 	.word	0x200006ac
 8003090:	20000530 	.word	0x20000530
 8003094:	ffffa500 	.word	0xffffa500
 8003098:	2000001c 	.word	0x2000001c
 800309c:	20000018 	.word	0x20000018
 80030a0:	43fa0000 	.word	0x43fa0000
 80030a4:	10624dd3 	.word	0x10624dd3
 80030a8:	2000052c 	.word	0x2000052c

080030ac <draw_filled_square>:
			}
		}
	}
}

void draw_filled_square(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color){
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4604      	mov	r4, r0
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	80fb      	strh	r3, [r7, #6]
 80030be:	4603      	mov	r3, r0
 80030c0:	80bb      	strh	r3, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	807b      	strh	r3, [r7, #2]
 80030c6:	4613      	mov	r3, r2
 80030c8:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(color);
 80030ca:	69b8      	ldr	r0, [r7, #24]
 80030cc:	f7fd fc90 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, width, height);
 80030d0:	883b      	ldrh	r3, [r7, #0]
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	88b9      	ldrh	r1, [r7, #4]
 80030d6:	88f8      	ldrh	r0, [r7, #6]
 80030d8:	f7fd fe0a 	bl	8000cf0 <BSP_LCD_FillRect>
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <displayWelcomeMessage>:

void displayWelcomeMessage(){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80030e8:	480f      	ldr	r0, [pc, #60]	; (8003128 <displayWelcomeMessage+0x44>)
 80030ea:	f7fd fc81 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80030ee:	480f      	ldr	r0, [pc, #60]	; (800312c <displayWelcomeMessage+0x48>)
 80030f0:	f7fd fcb0 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 - 20, "Welcome to BlockEscape", CENTER_MODE);
 80030f4:	2301      	movs	r3, #1
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <displayWelcomeMessage+0x4c>)
 80030f8:	21dc      	movs	r1, #220	; 0xdc
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7fd fd30 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003104:	f7fd fc74 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8003108:	480a      	ldr	r0, [pc, #40]	; (8003134 <displayWelcomeMessage+0x50>)
 800310a:	f7fd fca3 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 + 20, "To start a new game press the [user] button", CENTER_MODE);
 800310e:	2301      	movs	r3, #1
 8003110:	4a09      	ldr	r2, [pc, #36]	; (8003138 <displayWelcomeMessage+0x54>)
 8003112:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003116:	2000      	movs	r0, #0
 8003118:	f7fd fd22 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <displayWelcomeMessage+0x48>)
 800311e:	f7fd fc99 	bl	8000a54 <BSP_LCD_SetFont>
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	ffffa500 	.word	0xffffa500
 800312c:	20000010 	.word	0x20000010
 8003130:	0800c344 	.word	0x0800c344
 8003134:	20000008 	.word	0x20000008
 8003138:	0800c35c 	.word	0x0800c35c

0800313c <displayGameEndMessage>:

void displayGameEndMessage(){
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0

	vTaskDelay(pdMS_TO_TICKS(1000));
 8003140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003144:	f006 fb8a 	bl	800985c <vTaskDelay>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8003148:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800314c:	f7fd fc9c 	bl	8000a88 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8003150:	481c      	ldr	r0, [pc, #112]	; (80031c4 <displayGameEndMessage+0x88>)
 8003152:	f7fd fc4d 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8003156:	481c      	ldr	r0, [pc, #112]	; (80031c8 <displayGameEndMessage+0x8c>)
 8003158:	f7fd fc7c 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 - 20, "You lost! Your score was: TBD", CENTER_MODE);
 800315c:	2301      	movs	r3, #1
 800315e:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <displayGameEndMessage+0x90>)
 8003160:	21dc      	movs	r1, #220	; 0xdc
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd fcfc 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800316c:	f7fd fc40 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 8003170:	4817      	ldr	r0, [pc, #92]	; (80031d0 <displayGameEndMessage+0x94>)
 8003172:	f7fd fc6f 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 + 20, "To start a new game press the [user] button", CENTER_MODE);
 8003176:	2301      	movs	r3, #1
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <displayGameEndMessage+0x98>)
 800317a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd fcee 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 8003184:	4810      	ldr	r0, [pc, #64]	; (80031c8 <displayGameEndMessage+0x8c>)
 8003186:	f7fd fc65 	bl	8000a54 <BSP_LCD_SetFont>

	// Reset variables
	speed = 1;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <displayGameEndMessage+0x9c>)
 800318c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003190:	601a      	str	r2, [r3, #0]
	startGame = 0;
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <displayGameEndMessage+0xa0>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
	currentDirection = UP;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <displayGameEndMessage+0xa4>)
 800319a:	2200      	movs	r2, #0
 800319c:	701a      	strb	r2, [r3, #0]
	showInitialDelay = true;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <displayGameEndMessage+0xa8>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
	gameFinished = false;
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <displayGameEndMessage+0xac>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]

	// Fill initial grid
	computeInitialGrid();
 80031aa:	f7ff fe71 	bl	8002e90 <computeInitialGrid>

	// Wait until new game gets started
	while(!startGame) vTaskDelay(pdMS_TO_TICKS(200));
 80031ae:	e002      	b.n	80031b6 <displayGameEndMessage+0x7a>
 80031b0:	20c8      	movs	r0, #200	; 0xc8
 80031b2:	f006 fb53 	bl	800985c <vTaskDelay>
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <displayGameEndMessage+0xa0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f8      	beq.n	80031b0 <displayGameEndMessage+0x74>

}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	ffffa500 	.word	0xffffa500
 80031c8:	20000010 	.word	0x20000010
 80031cc:	0800c388 	.word	0x0800c388
 80031d0:	20000008 	.word	0x20000008
 80031d4:	0800c35c 	.word	0x0800c35c
 80031d8:	20000018 	.word	0x20000018
 80031dc:	200006a8 	.word	0x200006a8
 80031e0:	2000052d 	.word	0x2000052d
 80031e4:	2000001c 	.word	0x2000001c
 80031e8:	200006ac 	.word	0x200006ac

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_MspInit+0x4c>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_MspInit+0x4c>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6413      	str	r3, [r2, #64]	; 0x40
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_MspInit+0x4c>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_MspInit+0x4c>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_MspInit+0x4c>)
 8003210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_MspInit+0x4c>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	210f      	movs	r1, #15
 8003226:	f06f 0001 	mvn.w	r0, #1
 800322a:	f000 ff87 	bl	800413c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08e      	sub	sp, #56	; 0x38
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_InitTick+0xe0>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_InitTick+0xe0>)
 8003252:	f043 0310 	orr.w	r3, r3, #16
 8003256:	6413      	str	r3, [r2, #64]	; 0x40
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_InitTick+0xe0>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003264:	f107 0210 	add.w	r2, r7, #16
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f003 fc66 	bl	8006b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800327e:	f003 fc4b 	bl	8006b18 <HAL_RCC_GetPCLK1Freq>
 8003282:	6378      	str	r0, [r7, #52]	; 0x34
 8003284:	e004      	b.n	8003290 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003286:	f003 fc47 	bl	8006b18 <HAL_RCC_GetPCLK1Freq>
 800328a:	4603      	mov	r3, r0
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	4a23      	ldr	r2, [pc, #140]	; (8003320 <HAL_InitTick+0xe4>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	0c9b      	lsrs	r3, r3, #18
 800329a:	3b01      	subs	r3, #1
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800329e:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_InitTick+0xe8>)
 80032a0:	4a21      	ldr	r2, [pc, #132]	; (8003328 <HAL_InitTick+0xec>)
 80032a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <HAL_InitTick+0xe8>)
 80032a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032ac:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_InitTick+0xe8>)
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_InitTick+0xe8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_InitTick+0xe8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_InitTick+0xe8>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032c4:	4817      	ldr	r0, [pc, #92]	; (8003324 <HAL_InitTick+0xe8>)
 80032c6:	f004 f926 	bl	8007516 <HAL_TIM_Base_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80032d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d11b      	bne.n	8003310 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032d8:	4812      	ldr	r0, [pc, #72]	; (8003324 <HAL_InitTick+0xe8>)
 80032da:	f004 f97d 	bl	80075d8 <HAL_TIM_Base_Start_IT>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80032e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d111      	bne.n	8003310 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032ec:	2036      	movs	r0, #54	; 0x36
 80032ee:	f000 ff41 	bl	8004174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d808      	bhi.n	800330a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80032f8:	2200      	movs	r2, #0
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	2036      	movs	r0, #54	; 0x36
 80032fe:	f000 ff1d 	bl	800413c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003302:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_InitTick+0xf0>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	e002      	b.n	8003310 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003314:	4618      	mov	r0, r3
 8003316:	3738      	adds	r7, #56	; 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	431bde83 	.word	0x431bde83
 8003324:	200006bc 	.word	0x200006bc
 8003328:	40001000 	.word	0x40001000
 800332c:	20000024 	.word	0x20000024

08003330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003334:	e7fe      	b.n	8003334 <NMI_Handler+0x4>

08003336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003336:	b480      	push	{r7}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800333a:	e7fe      	b.n	800333a <HardFault_Handler+0x4>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <MemManage_Handler+0x4>

08003342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <UsageFault_Handler+0x4>

0800334e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003360:	2001      	movs	r0, #1
 8003362:	f002 fad5 	bl	8005910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <TIM6_DAC_IRQHandler+0x10>)
 8003372:	f004 fa00 	bl	8007776 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200006bc 	.word	0x200006bc

08003380 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10b      	bne.n	80033a8 <HAL_GPIO_EXTI_Callback+0x28>
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, GPIO_Pin) == 1){
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	4619      	mov	r1, r3
 8003394:	4807      	ldr	r0, [pc, #28]	; (80033b4 <HAL_GPIO_EXTI_Callback+0x34>)
 8003396:	f002 fa89 	bl	80058ac <HAL_GPIO_ReadPin>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d104      	bne.n	80033aa <HAL_GPIO_EXTI_Callback+0x2a>
			// Button is pressed
			startGame = 1;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_GPIO_EXTI_Callback+0x38>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
			// Button is released
		}
	}else{
	      __NOP();
	}
}
 80033a6:	e000      	b.n	80033aa <HAL_GPIO_EXTI_Callback+0x2a>
	      __NOP();
 80033a8:	bf00      	nop
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40020000 	.word	0x40020000
 80033b8:	200006a8 	.word	0x200006a8

080033bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <_kill>:

int _kill(int pid, int sig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033d6:	f008 f96b 	bl	800b6b0 <__errno>
 80033da:	4603      	mov	r3, r0
 80033dc:	2216      	movs	r2, #22
 80033de:	601a      	str	r2, [r3, #0]
  return -1;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <_exit>:

void _exit (int status)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ffe7 	bl	80033cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80033fe:	e7fe      	b.n	80033fe <_exit+0x12>

08003400 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e00a      	b.n	8003428 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003412:	f3af 8000 	nop.w
 8003416:	4601      	mov	r1, r0
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	60ba      	str	r2, [r7, #8]
 800341e:	b2ca      	uxtb	r2, r1
 8003420:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	3301      	adds	r3, #1
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	dbf0      	blt.n	8003412 <_read+0x12>
  }

  return len;
 8003430:	687b      	ldr	r3, [r7, #4]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e009      	b.n	8003460 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf1      	blt.n	800344c <_write+0x12>
  }
  return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_close>:

int _close(int file)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800347a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349a:	605a      	str	r2, [r3, #4]
  return 0;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <_isatty>:

int _isatty(int file)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <_sbrk+0x5c>)
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <_sbrk+0x60>)
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <_sbrk+0x64>)
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <_sbrk+0x68>)
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d207      	bcs.n	800351c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800350c:	f008 f8d0 	bl	800b6b0 <__errno>
 8003510:	4603      	mov	r3, r0
 8003512:	220c      	movs	r2, #12
 8003514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800351a:	e009      	b.n	8003530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_sbrk+0x64>)
 800352c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20080000 	.word	0x20080000
 800353c:	00000400 	.word	0x00000400
 8003540:	20000708 	.word	0x20000708
 8003544:	20005288 	.word	0x20005288

08003548 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <SystemInit+0x20>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	4a05      	ldr	r2, [pc, #20]	; (8003568 <SystemInit+0x20>)
 8003554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003572:	f107 031c 	add.w	r3, r7, #28
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800357e:	463b      	mov	r3, r7
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
 800358a:	611a      	str	r2, [r3, #16]
 800358c:	615a      	str	r2, [r3, #20]
 800358e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <MX_TIM3_Init+0xac>)
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <MX_TIM3_Init+0xb0>)
 8003594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <MX_TIM3_Init+0xac>)
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <MX_TIM3_Init+0xac>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <MX_TIM3_Init+0xac>)
 80035a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035aa:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <MX_TIM3_Init+0xac>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <MX_TIM3_Init+0xac>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035b6:	4818      	ldr	r0, [pc, #96]	; (8003618 <MX_TIM3_Init+0xac>)
 80035b8:	f004 f886 	bl	80076c8 <HAL_TIM_PWM_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80035c2:	f7ff fa79 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	4810      	ldr	r0, [pc, #64]	; (8003618 <MX_TIM3_Init+0xac>)
 80035d6:	f004 fe27 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80035e0:	f7ff fa6a 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e4:	2360      	movs	r3, #96	; 0x60
 80035e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035f4:	463b      	mov	r3, r7
 80035f6:	2208      	movs	r2, #8
 80035f8:	4619      	mov	r1, r3
 80035fa:	4807      	ldr	r0, [pc, #28]	; (8003618 <MX_TIM3_Init+0xac>)
 80035fc:	f004 f9da 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003606:	f7ff fa57 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800360a:	4803      	ldr	r0, [pc, #12]	; (8003618 <MX_TIM3_Init+0xac>)
 800360c:	f000 f828 	bl	8003660 <HAL_TIM_MspPostInit>

}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	2000070c 	.word	0x2000070c
 800361c:	40000400 	.word	0x40000400

08003620 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <HAL_TIM_PWM_MspInit+0x38>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10b      	bne.n	800364a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_TIM_PWM_MspInit+0x3c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a09      	ldr	r2, [pc, #36]	; (800365c <HAL_TIM_PWM_MspInit+0x3c>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_TIM_PWM_MspInit+0x3c>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40000400 	.word	0x40000400
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 030c 	add.w	r3, r7, #12
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_TIM_MspPostInit+0x64>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d11c      	bne.n	80036bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_TIM_MspPostInit+0x68>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <HAL_TIM_MspPostInit+0x68>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_TIM_MspPostInit+0x68>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 800369a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800369e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ac:	2302      	movs	r3, #2
 80036ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	4619      	mov	r1, r3
 80036b6:	4805      	ldr	r0, [pc, #20]	; (80036cc <HAL_TIM_MspPostInit+0x6c>)
 80036b8:	f001 ff4c 	bl	8005554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036bc:	bf00      	nop
 80036be:	3720      	adds	r7, #32
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40020800 	.word	0x40020800

080036d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d4:	480d      	ldr	r0, [pc, #52]	; (800370c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d6:	490e      	ldr	r1, [pc, #56]	; (8003710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036dc:	e002      	b.n	80036e4 <LoopCopyDataInit>

080036de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e2:	3304      	adds	r3, #4

080036e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e8:	d3f9      	bcc.n	80036de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036ec:	4c0b      	ldr	r4, [pc, #44]	; (800371c <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f0:	e001      	b.n	80036f6 <LoopFillZerobss>

080036f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f4:	3204      	adds	r2, #4

080036f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f8:	d3fb      	bcc.n	80036f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036fa:	f7ff ff25 	bl	8003548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fe:	f007 ffdd 	bl	800b6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003702:	f7ff f8b1 	bl	8002868 <main>
  bx  lr    
 8003706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003710:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003714:	0800f090 	.word	0x0800f090
  ldr r2, =_sbss
 8003718:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800371c:	20005288 	.word	0x20005288

08003720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003720:	e7fe      	b.n	8003720 <ADC_IRQHandler>
	...

08003724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_Init+0x28>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_Init+0x28>)
 800372e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003734:	2003      	movs	r0, #3
 8003736:	f000 fcf6 	bl	8004126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373a:	200f      	movs	r0, #15
 800373c:	f7ff fd7e 	bl	800323c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003740:	f7ff fd54 	bl	80031ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00

08003750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x20>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x24>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_IncTick+0x24>)
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000028 	.word	0x20000028
 8003774:	20000758 	.word	0x20000758

08003778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return uwTick;
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_GetTick+0x14>)
 800377e:	681b      	ldr	r3, [r3, #0]
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000758 	.word	0x20000758

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff ffee 	bl	8003778 <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffde 	bl	8003778 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000028 	.word	0x20000028

080037d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e031      	b.n	8003852 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd ff82 	bl	8001700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_ADC_Init+0x84>)
 800381c:	4013      	ands	r3, r2
 800381e:	f043 0202 	orr.w	r2, r3, #2
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fad6 	bl	8003dd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
 8003842:	e001      	b.n	8003848 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	ffffeefd 	.word	0xffffeefd

08003860 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_ADC_Start+0x1a>
 8003876:	2302      	movs	r3, #2
 8003878:	e0ad      	b.n	80039d6 <HAL_ADC_Start+0x176>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d018      	beq.n	80038c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_ADC_Start+0x184>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a50      	ldr	r2, [pc, #320]	; (80039e8 <HAL_ADC_Start+0x188>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	0c9a      	lsrs	r2, r3, #18
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80038b4:	e002      	b.n	80038bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f9      	bne.n	80038b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d175      	bne.n	80039bc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d4:	4b45      	ldr	r3, [pc, #276]	; (80039ec <HAL_ADC_Start+0x18c>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390a:	d106      	bne.n	800391a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f023 0206 	bic.w	r2, r3, #6
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
 8003918:	e002      	b.n	8003920 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003930:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_ADC_Start+0x190>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d143      	bne.n	80039d4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	e03a      	b.n	80039d4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_ADC_Start+0x194>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d10e      	bne.n	8003986 <HAL_ADC_Start+0x126>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003984:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_ADC_Start+0x190>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d120      	bne.n	80039d4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_ADC_Start+0x198>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d11b      	bne.n	80039d4 <HAL_ADC_Start+0x174>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d114      	bne.n	80039d4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	e00b      	b.n	80039d4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000020 	.word	0x20000020
 80039e8:	431bde83 	.word	0x431bde83
 80039ec:	fffff8fe 	.word	0xfffff8fe
 80039f0:	40012300 	.word	0x40012300
 80039f4:	40012000 	.word	0x40012000
 80039f8:	40012200 	.word	0x40012200

080039fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a18:	d113      	bne.n	8003a42 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a28:	d10b      	bne.n	8003a42 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e063      	b.n	8003b0a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a42:	f7ff fe99 	bl	8003778 <HAL_GetTick>
 8003a46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a48:	e021      	b.n	8003a8e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a50:	d01d      	beq.n	8003a8e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_ADC_PollForConversion+0x6c>
 8003a58:	f7ff fe8e 	bl	8003778 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d212      	bcs.n	8003a8e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d00b      	beq.n	8003a8e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f043 0204 	orr.w	r2, r3, #4
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e03d      	b.n	8003b0a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d1d6      	bne.n	8003a4a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0212 	mvn.w	r2, #18
 8003aa4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d123      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11f      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d006      	beq.n	8003ae4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d111      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_ADC_ConfigChannel+0x1c>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e136      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x28a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b09      	cmp	r3, #9
 8003b56:	d93a      	bls.n	8003bce <HAL_ADC_ConfigChannel+0xa2>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b60:	d035      	beq.n	8003bce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68d9      	ldr	r1, [r3, #12]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	3b1e      	subs	r3, #30
 8003b78:	2207      	movs	r2, #7
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	400a      	ands	r2, r1
 8003b86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a8d      	ldr	r2, [pc, #564]	; (8003dc4 <HAL_ADC_ConfigChannel+0x298>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10a      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	061a      	lsls	r2, r3, #24
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba6:	e035      	b.n	8003c14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68d9      	ldr	r1, [r3, #12]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4403      	add	r3, r0
 8003bc0:	3b1e      	subs	r3, #30
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bcc:	e022      	b.n	8003c14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6919      	ldr	r1, [r3, #16]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	2207      	movs	r2, #7
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43da      	mvns	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	400a      	ands	r2, r1
 8003bf0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4403      	add	r3, r0
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b06      	cmp	r3, #6
 8003c1a:	d824      	bhi.n	8003c66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b05      	subs	r3, #5
 8003c2e:	221f      	movs	r2, #31
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43da      	mvns	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	3b05      	subs	r3, #5
 8003c58:	fa00 f203 	lsl.w	r2, r0, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34
 8003c64:	e04c      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d824      	bhi.n	8003cb8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3b23      	subs	r3, #35	; 0x23
 8003c80:	221f      	movs	r2, #31
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43da      	mvns	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3b23      	subs	r3, #35	; 0x23
 8003caa:	fa00 f203 	lsl.w	r2, r0, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cb6:	e023      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b41      	subs	r3, #65	; 0x41
 8003cca:	221f      	movs	r2, #31
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3b41      	subs	r3, #65	; 0x41
 8003cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10a      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1f4>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d12:	d105      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d10f      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x21e>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d10b      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d3c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d3e:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_ADC_ConfigChannel+0x29c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d12b      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x280>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_ADC_ConfigChannel+0x298>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <HAL_ADC_ConfigChannel+0x23a>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b11      	cmp	r3, #17
 8003d64:	d122      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d70:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d72:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_ADC_ConfigChannel+0x2a0>)
 8003d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_ADC_ConfigChannel+0x298>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_ADC_ConfigChannel+0x2a4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HAL_ADC_ConfigChannel+0x2a8>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9a      	lsrs	r2, r3, #18
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d9e:	e002      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f9      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	10000012 	.word	0x10000012
 8003dc8:	40012000 	.word	0x40012000
 8003dcc:	40012300 	.word	0x40012300
 8003dd0:	20000020 	.word	0x20000020
 8003dd4:	431bde83 	.word	0x431bde83

08003dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <ADC_Init+0x1ec>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <ADC_Init+0x1ec>)
 8003de6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003dec:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <ADC_Init+0x1ec>)
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4973      	ldr	r1, [pc, #460]	; (8003fc4 <ADC_Init+0x1ec>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6899      	ldr	r1, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <ADC_Init+0x1f0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d022      	beq.n	8003eb2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6899      	ldr	r1, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6899      	ldr	r1, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	e00f      	b.n	8003ed2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0202 	bic.w	r2, r2, #2
 8003ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	005a      	lsls	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	035a      	lsls	r2, r3, #13
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e007      	b.n	8003f48 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	051a      	lsls	r2, r3, #20
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6899      	ldr	r1, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f8a:	025a      	lsls	r2, r3, #9
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6899      	ldr	r1, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	029a      	lsls	r2, r3, #10
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40012300 	.word	0x40012300
 8003fc8:	0f000001 	.word	0x0f000001

08003fcc <__NVIC_SetPriorityGrouping>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00
 8004010:	05fa0000 	.word	0x05fa0000

08004014 <__NVIC_GetPriorityGrouping>:
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	; (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	; (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	; (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff ff4c 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800414e:	f7ff ff61 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	6978      	ldr	r0, [r7, #20]
 800415a:	f7ff ffb1 	bl	80040c0 <NVIC_EncodePriority>
 800415e:	4602      	mov	r2, r0
 8004160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ff80 	bl	800406c <__NVIC_SetPriority>
}
 800416c:	bf00      	nop
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ff54 	bl	8004030 <__NVIC_EnableIRQ>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e049      	b.n	8004236 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fd fb46 	bl	8001848 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	f023 0107 	bic.w	r1, r3, #7
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_DMA2D_Init+0xb0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d1      	ldr	r1, [r2, #12]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	430b      	orrs	r3, r1
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	051a      	lsls	r2, r3, #20
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	055b      	lsls	r3, r3, #21
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	ffffc000 	.word	0xffffc000

08004244 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_DMA2D_Start+0x1c>
 800425c:	2302      	movs	r3, #2
 800425e:	e018      	b.n	8004292 <HAL_DMA2D_Start+0x4e>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f994 	bl	80045a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d056      	beq.n	8004364 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042b6:	f7ff fa5f 	bl	8003778 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042bc:	e04b      	b.n	8004356 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d023      	beq.n	8004318 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2221      	movs	r2, #33	; 0x21
 8004302:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2204      	movs	r2, #4
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0a5      	b.n	8004464 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431e:	d01a      	beq.n	8004356 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004320:	f7ff fa2a 	bl	8003778 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d302      	bcc.n	8004336 <HAL_DMA2D_PollForTransfer+0x9c>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2203      	movs	r2, #3
 8004346:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e086      	b.n	8004464 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0ac      	beq.n	80042be <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d061      	beq.n	800444a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004386:	f7ff f9f7 	bl	8003778 <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800438c:	e056      	b.n	800443c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800439c:	2b00      	cmp	r3, #0
 800439e:	d02e      	beq.n	80043fe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	f043 0204 	orr.w	r2, r3, #4
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f043 0202 	orr.w	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2229      	movs	r2, #41	; 0x29
 80043e8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e032      	b.n	8004464 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004404:	d01a      	beq.n	800443c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7ff f9b7 	bl	8003778 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <HAL_DMA2D_PollForTransfer+0x182>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10f      	bne.n	800443c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2203      	movs	r2, #3
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e013      	b.n	8004464 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0a1      	beq.n	800438e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2212      	movs	r2, #18
 8004450:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_DMA2D_ConfigLayer+0x20>
 8004488:	2302      	movs	r3, #2
 800448a:	e084      	b.n	8004596 <HAL_DMA2D_ConfigLayer+0x12a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	3320      	adds	r3, #32
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	041b      	lsls	r3, r3, #16
 80044b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80044c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80044c8:	4313      	orrs	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <HAL_DMA2D_ConfigLayer+0x138>)
 80044ce:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b0a      	cmp	r3, #10
 80044d6:	d003      	beq.n	80044e0 <HAL_DMA2D_ConfigLayer+0x74>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b09      	cmp	r3, #9
 80044de:	d107      	bne.n	80044f0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e005      	b.n	80044fc <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d120      	bne.n	8004544 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	ea02 0103 	and.w	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	430a      	orrs	r2, r1
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b0a      	cmp	r3, #10
 800452a:	d003      	beq.n	8004534 <HAL_DMA2D_ConfigLayer+0xc8>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b09      	cmp	r3, #9
 8004532:	d127      	bne.n	8004584 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
 8004542:	e01f      	b.n	8004584 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	43db      	mvns	r3, r3
 800454e:	ea02 0103 	and.w	r1, r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b0a      	cmp	r3, #10
 800456c:	d003      	beq.n	8004576 <HAL_DMA2D_ConfigLayer+0x10a>
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b09      	cmp	r3, #9
 8004574:	d106      	bne.n	8004584 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004582:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	ff33000f 	.word	0xff33000f

080045a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b08b      	sub	sp, #44	; 0x2c
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	431a      	orrs	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045e0:	d174      	bne.n	80046cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	431a      	orrs	r2, r3
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	4313      	orrs	r3, r2
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	e053      	b.n	80046c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d106      	bne.n	8004630 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	4313      	orrs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	e048      	b.n	80046c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d111      	bne.n	800465c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	0cdb      	lsrs	r3, r3, #19
 800463c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	0a9b      	lsrs	r3, r3, #10
 8004642:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	08db      	lsrs	r3, r3, #3
 8004648:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	02db      	lsls	r3, r3, #11
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e032      	b.n	80046c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d117      	bne.n	8004694 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	0fdb      	lsrs	r3, r3, #31
 8004668:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	0cdb      	lsrs	r3, r3, #19
 800466e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	0adb      	lsrs	r3, r3, #11
 8004674:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	08db      	lsrs	r3, r3, #3
 800467a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	029b      	lsls	r3, r3, #10
 8004684:	431a      	orrs	r2, r3
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	03db      	lsls	r3, r3, #15
 800468a:	4313      	orrs	r3, r2
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
 8004692:	e016      	b.n	80046c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	0f1b      	lsrs	r3, r3, #28
 8004698:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	0d1b      	lsrs	r3, r3, #20
 800469e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	0b1b      	lsrs	r3, r3, #12
 80046a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	011a      	lsls	r2, r3, #4
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	431a      	orrs	r2, r3
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	4313      	orrs	r3, r2
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046ca:	e003      	b.n	80046d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	60da      	str	r2, [r3, #12]
}
 80046d4:	bf00      	nop
 80046d6:	372c      	adds	r7, #44	; 0x2c
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	019a      	lsls	r2, r3, #6
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	431a      	orrs	r2, r3
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004720:	f7ff f82a 	bl	8003778 <HAL_GetTick>
 8004724:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004726:	e009      	b.n	800473c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004728:	f7ff f826 	bl	8003778 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004736:	d901      	bls.n	800473c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e015      	b.n	8004768 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	019a      	lsls	r2, r3, #6
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	431a      	orrs	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	ea42 0103 	orr.w	r1, r2, r3
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	041a      	lsls	r2, r3, #16
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e109      	b.n	8004998 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7c5b      	ldrb	r3, [r3, #17]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f968 	bl	8001a64 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2203      	movs	r2, #3
 8004798:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80047ae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80047ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c2:	f7fe ffd9 	bl	8003778 <HAL_GetTick>
 80047c6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80047c8:	e009      	b.n	80047de <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80047ca:	f7fe ffd5 	bl	8003778 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d8:	d901      	bls.n	80047de <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e0dc      	b.n	8004998 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80047e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0ed      	beq.n	80047ca <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <HAL_DSI_Init+0x230>)
 80047fc:	400b      	ands	r3, r1
 80047fe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004816:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800481e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004852:	2001      	movs	r0, #1
 8004854:	f7fe ff9c 	bl	8003790 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004858:	f7fe ff8e 	bl	8003778 <HAL_GetTick>
 800485c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800485e:	e009      	b.n	8004874 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004860:	f7fe ff8a 	bl	8003778 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800486e:	d901      	bls.n	8004874 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e091      	b.n	8004998 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ed      	beq.n	8004860 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0206 	orr.w	r2, r2, #6
 8004894:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0203 	bic.w	r2, r2, #3
 80048a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0203 	bic.w	r2, r2, #3
 80048d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048fe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_DSI_Init+0x1b0>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	e000      	b.n	8004922 <HAL_DSI_Init+0x1b2>
 8004920:	2301      	movs	r3, #1
 8004922:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_DSI_Init+0x234>)
 8004928:	fb03 f202 	mul.w	r2, r3, r2
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	409a      	lsls	r2, r3
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004958:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	430a      	orrs	r2, r1
 800496c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2200      	movs	r2, #0
 8004976:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	fffc8603 	.word	0xfffc8603
 80049a4:	003d0900 	.word	0x003d0900

080049a8 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e066      	b.n	8004a88 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0208 	bic.w	r2, r2, #8
 80049d4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0206 	bic.w	r2, r2, #6
 8004a1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004a5a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fd f818 	bl	8001aa4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7c1b      	ldrb	r3, [r3, #16]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DSI_ConfigErrorMonitor+0x16>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0aa      	b.n	8004bfc <HAL_DSI_ConfigErrorMonitor+0x16c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004b00:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0202 	orr.w	r2, r2, #2
 8004b3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 020c 	orr.w	r2, r2, #12
 8004b5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0210 	orr.w	r2, r2, #16
 8004b78:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0220 	orr.w	r2, r2, #32
 8004b96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d009      	beq.n	8004bb8 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004bf0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7c1b      	ldrb	r3, [r3, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_DSI_SetGenericVCID+0x16>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e016      	b.n	8004c4c <HAL_DSI_SetGenericVCID+0x44>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0203 	bic.w	r2, r2, #3
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	7c1b      	ldrb	r3, [r3, #16]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_DSI_ConfigVideoMode+0x16>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e1ee      	b.n	800504c <HAL_DSI_ConfigVideoMode+0x3f4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0203 	bic.w	r2, r2, #3
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b8b      	ldr	r3, [pc, #556]	; (8004ef4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b84      	ldr	r3, [pc, #528]	; (8004ef8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004ce8:	400b      	ands	r3, r1
 8004cea:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0203 	bic.w	r2, r2, #3
 8004d2e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68d9      	ldr	r1, [r3, #12]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0207 	bic.w	r2, r2, #7
 8004d50:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6959      	ldr	r1, [r3, #20]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 020f 	bic.w	r2, r2, #15
 8004d7e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6919      	ldr	r1, [r3, #16]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 020e 	bic.w	r2, r2, #14
 8004da2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	005a      	lsls	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d110      	bne.n	8004de8 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd4:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6919      	ldr	r1, [r3, #16]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b42      	ldr	r3, [pc, #264]	; (8004efc <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004df4:	400b      	ands	r3, r1
 8004df6:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4b39      	ldr	r3, [pc, #228]	; (8004efc <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004e16:	400b      	ands	r3, r1
 8004e18:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b32      	ldr	r3, [pc, #200]	; (8004f00 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004e38:	400b      	ands	r3, r1
 8004e3a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b2a      	ldr	r3, [pc, #168]	; (8004f04 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004e5a:	400b      	ands	r3, r1
 8004e5c:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004e7c:	400b      	ands	r3, r1
 8004e7e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004e9e:	400b      	ands	r3, r1
 8004ea0:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004ec0:	400b      	ands	r3, r1
 8004ec2:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef0:	e00a      	b.n	8004f08 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004ef2:	bf00      	nop
 8004ef4:	ffffc000 	.word	0xffffc000
 8004ef8:	ffffe000 	.word	0xffffe000
 8004efc:	fffff000 	.word	0xfffff000
 8004f00:	ffff8000 	.word	0xffff8000
 8004f04:	fffffc00 	.word	0xfffffc00
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004f1e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2a:	041a      	lsls	r2, r3, #16
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f42:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7c1b      	ldrb	r3, [r3, #16]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_DSI_ConfigFlowControl+0x16>
 800506a:	2302      	movs	r3, #2
 800506c:	e016      	b.n	800509c <HAL_DSI_ConfigFlowControl+0x44>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 021f 	bic.w	r2, r2, #31
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7c1b      	ldrb	r3, [r3, #16]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d101      	bne.n	80050be <HAL_DSI_ConfigPhyTimer+0x16>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e058      	b.n	8005170 <HAL_DSI_ConfigPhyTimer+0xc8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bf38      	it	cc
 80050d0:	4613      	movcc	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80050e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	041a      	lsls	r2, r3, #16
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005112:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800514c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	021a      	lsls	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7c1b      	ldrb	r3, [r3, #16]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_DSI_ConfigHostTimeouts+0x16>
 800518e:	2302      	movs	r3, #2
 8005190:	e0b4      	b.n	80052fc <HAL_DSI_ConfigHostTimeouts+0x180>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80051a6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	b292      	uxth	r2, r2
 80051c8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	041a      	lsls	r2, r3, #16
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b3f      	ldr	r3, [pc, #252]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800520c:	400b      	ands	r3, r1
 800520e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b36      	ldr	r3, [pc, #216]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005230:	400b      	ands	r3, r1
 8005232:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800525a:	400b      	ands	r3, r1
 800525c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b16      	ldr	r3, [pc, #88]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80052ae:	400b      	ands	r3, r1
 80052b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80052d8:	400b      	ands	r3, r1
 80052da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	ffff0000 	.word	0xffff0000

0800530c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7c1b      	ldrb	r3, [r3, #16]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_DSI_Start+0x14>
 800531c:	2302      	movs	r3, #2
 800531e:	e02b      	b.n	8005378 <HAL_DSI_Start+0x6c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0208 	orr.w	r2, r2, #8
 800535c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	7c1b      	ldrb	r3, [r3, #16]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_DSI_ShortWrite+0x1a>
 800539a:	2302      	movs	r3, #2
 800539c:	e010      	b.n	80053c0 <HAL_DSI_ShortWrite+0x3c>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff f9af 	bl	8004712 <DSI_ShortWrite>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	741a      	strb	r2, [r3, #16]

  return status;
 80053be:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08c      	sub	sp, #48	; 0x30
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	7c1b      	ldrb	r3, [r3, #16]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_DSI_LongWrite+0x1e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e084      	b.n	80054f0 <HAL_DSI_LongWrite+0x128>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ec:	f7fe f9c4 	bl	8003778 <HAL_GetTick>
 80053f0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80053f2:	e00c      	b.n	800540e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80053f4:	f7fe f9c0 	bl	8003778 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005402:	d904      	bls.n	800540e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e070      	b.n	80054f0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0eb      	beq.n	80053f4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b03      	cmp	r3, #3
 8005424:	bf28      	it	cs
 8005426:	2303      	movcs	r3, #3
 8005428:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800542a:	2300      	movs	r3, #0
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	e00f      	b.n	8005450 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	4413      	add	r3, r2
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	3301      	adds	r3, #1
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	4313      	orrs	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	3301      	adds	r3, #1
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3eb      	bcc.n	8005430 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005470:	e028      	b.n	80054c4 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b04      	cmp	r3, #4
 8005476:	bf28      	it	cs
 8005478:	2304      	movcs	r3, #4
 800547a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005480:	2300      	movs	r3, #0
 8005482:	623b      	str	r3, [r7, #32]
 8005484:	e00e      	b.n	80054a4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	3301      	adds	r3, #1
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3ec      	bcc.n	8005486 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80054b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1d3      	bne.n	8005472 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80054d2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	f7ff f8fc 	bl	80046e0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	; 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7c1b      	ldrb	r3, [r3, #16]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800550a:	2302      	movs	r3, #2
 800550c:	e01b      	b.n	8005546 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005524:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	065a      	lsls	r2, r3, #25
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005562:	2300      	movs	r3, #0
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e175      	b.n	8005860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005574:	2201      	movs	r2, #1
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	429a      	cmp	r2, r3
 800558e:	f040 8164 	bne.w	800585a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d005      	beq.n	80055aa <HAL_GPIO_Init+0x56>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d130      	bne.n	800560c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2203      	movs	r2, #3
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e0:	2201      	movs	r2, #1
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 0201 	and.w	r2, r3, #1
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	2b03      	cmp	r3, #3
 8005616:	d017      	beq.n	8005648 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	2203      	movs	r2, #3
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4013      	ands	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d123      	bne.n	800569c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	220f      	movs	r2, #15
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	43db      	mvns	r3, r3
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4013      	ands	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4313      	orrs	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	08da      	lsrs	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3208      	adds	r2, #8
 8005696:	69b9      	ldr	r1, [r7, #24]
 8005698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	2203      	movs	r2, #3
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0203 	and.w	r2, r3, #3
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80be 	beq.w	800585a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056de:	4b66      	ldr	r3, [pc, #408]	; (8005878 <HAL_GPIO_Init+0x324>)
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	4a65      	ldr	r2, [pc, #404]	; (8005878 <HAL_GPIO_Init+0x324>)
 80056e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056e8:	6453      	str	r3, [r2, #68]	; 0x44
 80056ea:	4b63      	ldr	r3, [pc, #396]	; (8005878 <HAL_GPIO_Init+0x324>)
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056f6:	4a61      	ldr	r2, [pc, #388]	; (800587c <HAL_GPIO_Init+0x328>)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	089b      	lsrs	r3, r3, #2
 80056fc:	3302      	adds	r3, #2
 80056fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	220f      	movs	r2, #15
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4013      	ands	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a58      	ldr	r2, [pc, #352]	; (8005880 <HAL_GPIO_Init+0x32c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d037      	beq.n	8005792 <HAL_GPIO_Init+0x23e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a57      	ldr	r2, [pc, #348]	; (8005884 <HAL_GPIO_Init+0x330>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d031      	beq.n	800578e <HAL_GPIO_Init+0x23a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a56      	ldr	r2, [pc, #344]	; (8005888 <HAL_GPIO_Init+0x334>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02b      	beq.n	800578a <HAL_GPIO_Init+0x236>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a55      	ldr	r2, [pc, #340]	; (800588c <HAL_GPIO_Init+0x338>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d025      	beq.n	8005786 <HAL_GPIO_Init+0x232>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a54      	ldr	r2, [pc, #336]	; (8005890 <HAL_GPIO_Init+0x33c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01f      	beq.n	8005782 <HAL_GPIO_Init+0x22e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a53      	ldr	r2, [pc, #332]	; (8005894 <HAL_GPIO_Init+0x340>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d019      	beq.n	800577e <HAL_GPIO_Init+0x22a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a52      	ldr	r2, [pc, #328]	; (8005898 <HAL_GPIO_Init+0x344>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_GPIO_Init+0x226>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a51      	ldr	r2, [pc, #324]	; (800589c <HAL_GPIO_Init+0x348>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00d      	beq.n	8005776 <HAL_GPIO_Init+0x222>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a50      	ldr	r2, [pc, #320]	; (80058a0 <HAL_GPIO_Init+0x34c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <HAL_GPIO_Init+0x21e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4f      	ldr	r2, [pc, #316]	; (80058a4 <HAL_GPIO_Init+0x350>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d101      	bne.n	800576e <HAL_GPIO_Init+0x21a>
 800576a:	2309      	movs	r3, #9
 800576c:	e012      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800576e:	230a      	movs	r3, #10
 8005770:	e010      	b.n	8005794 <HAL_GPIO_Init+0x240>
 8005772:	2308      	movs	r3, #8
 8005774:	e00e      	b.n	8005794 <HAL_GPIO_Init+0x240>
 8005776:	2307      	movs	r3, #7
 8005778:	e00c      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800577a:	2306      	movs	r3, #6
 800577c:	e00a      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800577e:	2305      	movs	r3, #5
 8005780:	e008      	b.n	8005794 <HAL_GPIO_Init+0x240>
 8005782:	2304      	movs	r3, #4
 8005784:	e006      	b.n	8005794 <HAL_GPIO_Init+0x240>
 8005786:	2303      	movs	r3, #3
 8005788:	e004      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800578a:	2302      	movs	r3, #2
 800578c:	e002      	b.n	8005794 <HAL_GPIO_Init+0x240>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <HAL_GPIO_Init+0x240>
 8005792:	2300      	movs	r3, #0
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	f002 0203 	and.w	r2, r2, #3
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	4093      	lsls	r3, r2
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80057a4:	4935      	ldr	r1, [pc, #212]	; (800587c <HAL_GPIO_Init+0x328>)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	3302      	adds	r3, #2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057b2:	4b3d      	ldr	r3, [pc, #244]	; (80058a8 <HAL_GPIO_Init+0x354>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057d6:	4a34      	ldr	r2, [pc, #208]	; (80058a8 <HAL_GPIO_Init+0x354>)
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057dc:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_GPIO_Init+0x354>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	43db      	mvns	r3, r3
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4013      	ands	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005800:	4a29      	ldr	r2, [pc, #164]	; (80058a8 <HAL_GPIO_Init+0x354>)
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005806:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <HAL_GPIO_Init+0x354>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	43db      	mvns	r3, r3
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	4013      	ands	r3, r2
 8005814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800582a:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_GPIO_Init+0x354>)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <HAL_GPIO_Init+0x354>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <HAL_GPIO_Init+0x354>)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3301      	adds	r3, #1
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	f67f ae86 	bls.w	8005574 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	40013800 	.word	0x40013800
 8005880:	40020000 	.word	0x40020000
 8005884:	40020400 	.word	0x40020400
 8005888:	40020800 	.word	0x40020800
 800588c:	40020c00 	.word	0x40020c00
 8005890:	40021000 	.word	0x40021000
 8005894:	40021400 	.word	0x40021400
 8005898:	40021800 	.word	0x40021800
 800589c:	40021c00 	.word	0x40021c00
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40022400 	.word	0x40022400
 80058a8:	40013c00 	.word	0x40013c00

080058ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	887b      	ldrh	r3, [r7, #2]
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058c4:	2301      	movs	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
 80058c8:	e001      	b.n	80058ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	807b      	strh	r3, [r7, #2]
 80058e8:	4613      	mov	r3, r2
 80058ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058ec:	787b      	ldrb	r3, [r7, #1]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058f2:	887a      	ldrh	r2, [r7, #2]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058f8:	e003      	b.n	8005902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	041a      	lsls	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	619a      	str	r2, [r3, #24]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800591c:	695a      	ldr	r2, [r3, #20]
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005926:	4a05      	ldr	r2, [pc, #20]	; (800593c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800592c:	88fb      	ldrh	r3, [r7, #6]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd fd26 	bl	8003380 <HAL_GPIO_EXTI_Callback>
  }
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40013c00 	.word	0x40013c00

08005940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e07f      	b.n	8005a52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc fd58 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e006      	b.n	80059c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80059c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d104      	bne.n	80059da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <HAL_I2C_Init+0x11c>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69d9      	ldr	r1, [r3, #28]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1a      	ldr	r2, [r3, #32]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	02008000 	.word	0x02008000

08005a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d138      	bne.n	8005ae8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e032      	b.n	8005aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	; 0x24
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ab2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d139      	bne.n	8005b80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e033      	b.n	8005b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
	...

08005b90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0bf      	b.n	8005d22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc fdae 	bl	8002718 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005bd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6999      	ldr	r1, [r3, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005be8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6899      	ldr	r1, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b4a      	ldr	r3, [pc, #296]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c04:	400b      	ands	r3, r1
 8005c06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	041b      	lsls	r3, r3, #16
 8005c0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68d9      	ldr	r1, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68d9      	ldr	r1, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6919      	ldr	r1, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6959      	ldr	r1, [r3, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <HAL_LTDC_Init+0x19c>)
 8005c8e:	400b      	ands	r3, r1
 8005c90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6959      	ldr	r1, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0206 	orr.w	r2, r2, #6
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	f000f800 	.word	0xf000f800

08005d30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d30:	b5b0      	push	{r4, r5, r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_LTDC_ConfigLayer+0x1a>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e02c      	b.n	8005da4 <HAL_LTDC_ConfigLayer+0x74>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2134      	movs	r1, #52	; 0x34
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f811 	bl	8005dac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bdb0      	pop	{r4, r5, r7, pc}

08005dac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dc8:	4413      	add	r3, r2
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	01db      	lsls	r3, r3, #7
 8005dd8:	4413      	add	r3, r2
 8005dda:	3384      	adds	r3, #132	; 0x84
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	4611      	mov	r1, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	01d2      	lsls	r2, r2, #7
 8005de8:	440a      	add	r2, r1
 8005dea:	3284      	adds	r2, #132	; 0x84
 8005dec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005df0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e02:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e04:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	01db      	lsls	r3, r3, #7
 8005e10:	440b      	add	r3, r1
 8005e12:	3384      	adds	r3, #132	; 0x84
 8005e14:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e2a:	4413      	add	r3, r2
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	01db      	lsls	r3, r3, #7
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3384      	adds	r3, #132	; 0x84
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	4611      	mov	r1, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	01d2      	lsls	r2, r2, #7
 8005e4a:	440a      	add	r2, r1
 8005e4c:	3284      	adds	r2, #132	; 0x84
 8005e4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e62:	4413      	add	r3, r2
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	440b      	add	r3, r1
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	4619      	mov	r1, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	01db      	lsls	r3, r3, #7
 8005e86:	4413      	add	r3, r2
 8005e88:	3384      	adds	r3, #132	; 0x84
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	4611      	mov	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	01d2      	lsls	r2, r2, #7
 8005e96:	440a      	add	r2, r1
 8005e98:	3284      	adds	r2, #132	; 0x84
 8005e9a:	f023 0307 	bic.w	r3, r3, #7
 8005e9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	3384      	adds	r3, #132	; 0x84
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	061b      	lsls	r3, r3, #24
 8005ed0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	01db      	lsls	r3, r3, #7
 8005edc:	4413      	add	r3, r2
 8005ede:	3384      	adds	r3, #132	; 0x84
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	01db      	lsls	r3, r3, #7
 8005eec:	4413      	add	r3, r2
 8005eee:	3384      	adds	r3, #132	; 0x84
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005efc:	461a      	mov	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	01db      	lsls	r3, r3, #7
 8005f10:	440b      	add	r3, r1
 8005f12:	3384      	adds	r3, #132	; 0x84
 8005f14:	4619      	mov	r1, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	4413      	add	r3, r2
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	4611      	mov	r1, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	01d2      	lsls	r2, r2, #7
 8005f36:	440a      	add	r2, r1
 8005f38:	3284      	adds	r2, #132	; 0x84
 8005f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f3e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	461a      	mov	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	01db      	lsls	r3, r3, #7
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3384      	adds	r3, #132	; 0x84
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	4413      	add	r3, r2
 8005f62:	3384      	adds	r3, #132	; 0x84
 8005f64:	69da      	ldr	r2, [r3, #28]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	01db      	lsls	r3, r3, #7
 8005f70:	440b      	add	r3, r1
 8005f72:	3384      	adds	r3, #132	; 0x84
 8005f74:	4619      	mov	r1, r3
 8005f76:	4b58      	ldr	r3, [pc, #352]	; (80060d8 <LTDC_SetConfig+0x32c>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	6809      	ldr	r1, [r1, #0]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	01c9      	lsls	r1, r1, #7
 8005f8e:	4401      	add	r1, r0
 8005f90:	3184      	adds	r1, #132	; 0x84
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3384      	adds	r3, #132	; 0x84
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3384      	adds	r3, #132	; 0x84
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	01db      	lsls	r3, r3, #7
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3384      	adds	r3, #132	; 0x84
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005fd8:	2304      	movs	r3, #4
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	e01b      	b.n	8006016 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d102      	bne.n	8005fec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	e014      	b.n	8006016 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d00b      	beq.n	800600c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d007      	beq.n	800600c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006000:	2b03      	cmp	r3, #3
 8006002:	d003      	beq.n	800600c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006008:	2b07      	cmp	r3, #7
 800600a:	d102      	bne.n	8006012 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800600c:	2302      	movs	r3, #2
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	e001      	b.n	8006016 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	4413      	add	r3, r2
 8006022:	3384      	adds	r3, #132	; 0x84
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	6812      	ldr	r2, [r2, #0]
 800602a:	4611      	mov	r1, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	01d2      	lsls	r2, r2, #7
 8006030:	440a      	add	r2, r1
 8006032:	3284      	adds	r2, #132	; 0x84
 8006034:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006038:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	fb02 f303 	mul.w	r3, r2, r3
 8006044:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1acb      	subs	r3, r1, r3
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006058:	68f9      	ldr	r1, [r7, #12]
 800605a:	6809      	ldr	r1, [r1, #0]
 800605c:	4608      	mov	r0, r1
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	01c9      	lsls	r1, r1, #7
 8006062:	4401      	add	r1, r0
 8006064:	3184      	adds	r1, #132	; 0x84
 8006066:	4313      	orrs	r3, r2
 8006068:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	01db      	lsls	r3, r3, #7
 8006074:	4413      	add	r3, r2
 8006076:	3384      	adds	r3, #132	; 0x84
 8006078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	01db      	lsls	r3, r3, #7
 8006084:	440b      	add	r3, r1
 8006086:	3384      	adds	r3, #132	; 0x84
 8006088:	4619      	mov	r1, r3
 800608a:	4b14      	ldr	r3, [pc, #80]	; (80060dc <LTDC_SetConfig+0x330>)
 800608c:	4013      	ands	r3, r2
 800608e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	4413      	add	r3, r2
 800609c:	3384      	adds	r3, #132	; 0x84
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	461a      	mov	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	01db      	lsls	r3, r3, #7
 80060b0:	4413      	add	r3, r2
 80060b2:	3384      	adds	r3, #132	; 0x84
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	4611      	mov	r1, r2
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	01d2      	lsls	r2, r2, #7
 80060c0:	440a      	add	r2, r1
 80060c2:	3284      	adds	r2, #132	; 0x84
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	6013      	str	r3, [r2, #0]
}
 80060ca:	bf00      	nop
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	fffff8f8 	.word	0xfffff8f8
 80060dc:	fffff800 	.word	0xfffff800

080060e0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80060f2:	2200      	movs	r2, #0
 80060f4:	e001      	b.n	80060fa <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80060f6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800610a:	e000      	b.n	800610e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800610c:	2200      	movs	r2, #0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d102      	bne.n	8006120 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800611a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800611e:	e000      	b.n	8006122 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006120:	2200      	movs	r2, #0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612a:	1e5a      	subs	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	4413      	add	r3, r2
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800614e:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8006150:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006164:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	4413      	add	r3, r2
 800616c:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a04      	ldr	r2, [pc, #16]	; (800619c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]
}
 8006190:	bf00      	nop
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40007000 	.word	0x40007000

080061a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a22      	ldr	r2, [pc, #136]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b4:	6413      	str	r3, [r2, #64]	; 0x40
 80061b6:	4b20      	ldr	r3, [pc, #128]	; (8006238 <HAL_PWREx_EnableOverDrive+0x98>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1d      	ldr	r2, [pc, #116]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061ce:	f7fd fad3 	bl	8003778 <HAL_GetTick>
 80061d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061d4:	e009      	b.n	80061ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061d6:	f7fd facf 	bl	8003778 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e4:	d901      	bls.n	80061ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e022      	b.n	8006230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d1ee      	bne.n	80061d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061f8:	4b10      	ldr	r3, [pc, #64]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0f      	ldr	r2, [pc, #60]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006202:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006204:	f7fd fab8 	bl	8003778 <HAL_GetTick>
 8006208:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800620a:	e009      	b.n	8006220 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800620c:	f7fd fab4 	bl	8003778 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800621a:	d901      	bls.n	8006220 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e007      	b.n	8006230 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622c:	d1ee      	bne.n	800620c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40023800 	.word	0x40023800
 800623c:	40007000 	.word	0x40007000

08006240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006248:	2300      	movs	r3, #0
 800624a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e29b      	b.n	800678e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 8087 	beq.w	8006372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006264:	4b96      	ldr	r3, [pc, #600]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 030c 	and.w	r3, r3, #12
 800626c:	2b04      	cmp	r3, #4
 800626e:	d00c      	beq.n	800628a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006270:	4b93      	ldr	r3, [pc, #588]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b08      	cmp	r3, #8
 800627a:	d112      	bne.n	80062a2 <HAL_RCC_OscConfig+0x62>
 800627c:	4b90      	ldr	r3, [pc, #576]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006288:	d10b      	bne.n	80062a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800628a:	4b8d      	ldr	r3, [pc, #564]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d06c      	beq.n	8006370 <HAL_RCC_OscConfig+0x130>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d168      	bne.n	8006370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e275      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062aa:	d106      	bne.n	80062ba <HAL_RCC_OscConfig+0x7a>
 80062ac:	4b84      	ldr	r3, [pc, #528]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a83      	ldr	r2, [pc, #524]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	e02e      	b.n	8006318 <HAL_RCC_OscConfig+0xd8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10c      	bne.n	80062dc <HAL_RCC_OscConfig+0x9c>
 80062c2:	4b7f      	ldr	r3, [pc, #508]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a7e      	ldr	r2, [pc, #504]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	4b7c      	ldr	r3, [pc, #496]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a7b      	ldr	r2, [pc, #492]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e01d      	b.n	8006318 <HAL_RCC_OscConfig+0xd8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0xc0>
 80062e6:	4b76      	ldr	r3, [pc, #472]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a75      	ldr	r2, [pc, #468]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b73      	ldr	r3, [pc, #460]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a72      	ldr	r2, [pc, #456]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0xd8>
 8006300:	4b6f      	ldr	r3, [pc, #444]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a6e      	ldr	r2, [pc, #440]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b6c      	ldr	r3, [pc, #432]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a6b      	ldr	r2, [pc, #428]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fd fa2a 	bl	8003778 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006328:	f7fd fa26 	bl	8003778 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	; 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e229      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b61      	ldr	r3, [pc, #388]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0xe8>
 8006346:	e014      	b.n	8006372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fd fa16 	bl	8003778 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006350:	f7fd fa12 	bl	8003778 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e215      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	4b57      	ldr	r3, [pc, #348]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x110>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d069      	beq.n	8006452 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800637e:	4b50      	ldr	r3, [pc, #320]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b4d      	ldr	r3, [pc, #308]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x190>
 8006396:	4b4a      	ldr	r3, [pc, #296]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a2:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x17a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e1e9      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b41      	ldr	r3, [pc, #260]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	493d      	ldr	r1, [pc, #244]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	e040      	b.n	8006452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d8:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a38      	ldr	r2, [pc, #224]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fd f9c8 	bl	8003778 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063ec:	f7fd f9c4 	bl	8003778 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e1c7      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800640a:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4929      	ldr	r1, [pc, #164]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]
 800641e:	e018      	b.n	8006452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006420:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fd f9a4 	bl	8003778 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006434:	f7fd f9a0 	bl	8003778 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e1a3      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006446:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d038      	beq.n	80064d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d019      	beq.n	800649a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006466:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006472:	f7fd f981 	bl	8003778 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800647a:	f7fd f97d 	bl	8003778 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e180      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800648e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0f0      	beq.n	800647a <HAL_RCC_OscConfig+0x23a>
 8006498:	e01a      	b.n	80064d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 800649c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649e:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <HAL_RCC_OscConfig+0x280>)
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a6:	f7fd f967 	bl	8003778 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ac:	e00a      	b.n	80064c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ae:	f7fd f963 	bl	8003778 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d903      	bls.n	80064c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e166      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
 80064c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c4:	4b92      	ldr	r3, [pc, #584]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80064c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1ee      	bne.n	80064ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80a4 	beq.w	8006626 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064de:	4b8c      	ldr	r3, [pc, #560]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10d      	bne.n	8006506 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ea:	4b89      	ldr	r3, [pc, #548]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	4a88      	ldr	r2, [pc, #544]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80064f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f4:	6413      	str	r3, [r2, #64]	; 0x40
 80064f6:	4b86      	ldr	r3, [pc, #536]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006506:	4b83      	ldr	r3, [pc, #524]	; (8006714 <HAL_RCC_OscConfig+0x4d4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d118      	bne.n	8006544 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006512:	4b80      	ldr	r3, [pc, #512]	; (8006714 <HAL_RCC_OscConfig+0x4d4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a7f      	ldr	r2, [pc, #508]	; (8006714 <HAL_RCC_OscConfig+0x4d4>)
 8006518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800651e:	f7fd f92b 	bl	8003778 <HAL_GetTick>
 8006522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006526:	f7fd f927 	bl	8003778 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b64      	cmp	r3, #100	; 0x64
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e12a      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006538:	4b76      	ldr	r3, [pc, #472]	; (8006714 <HAL_RCC_OscConfig+0x4d4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f0      	beq.n	8006526 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d106      	bne.n	800655a <HAL_RCC_OscConfig+0x31a>
 800654c:	4b70      	ldr	r3, [pc, #448]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	4a6f      	ldr	r2, [pc, #444]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	6713      	str	r3, [r2, #112]	; 0x70
 8006558:	e02d      	b.n	80065b6 <HAL_RCC_OscConfig+0x376>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <HAL_RCC_OscConfig+0x33c>
 8006562:	4b6b      	ldr	r3, [pc, #428]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006566:	4a6a      	ldr	r2, [pc, #424]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	6713      	str	r3, [r2, #112]	; 0x70
 800656e:	4b68      	ldr	r3, [pc, #416]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	4a67      	ldr	r2, [pc, #412]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	6713      	str	r3, [r2, #112]	; 0x70
 800657a:	e01c      	b.n	80065b6 <HAL_RCC_OscConfig+0x376>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b05      	cmp	r3, #5
 8006582:	d10c      	bne.n	800659e <HAL_RCC_OscConfig+0x35e>
 8006584:	4b62      	ldr	r3, [pc, #392]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	4a61      	ldr	r2, [pc, #388]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800658a:	f043 0304 	orr.w	r3, r3, #4
 800658e:	6713      	str	r3, [r2, #112]	; 0x70
 8006590:	4b5f      	ldr	r3, [pc, #380]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006594:	4a5e      	ldr	r2, [pc, #376]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6713      	str	r3, [r2, #112]	; 0x70
 800659c:	e00b      	b.n	80065b6 <HAL_RCC_OscConfig+0x376>
 800659e:	4b5c      	ldr	r3, [pc, #368]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a2:	4a5b      	ldr	r2, [pc, #364]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	6713      	str	r3, [r2, #112]	; 0x70
 80065aa:	4b59      	ldr	r3, [pc, #356]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a58      	ldr	r2, [pc, #352]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80065b0:	f023 0304 	bic.w	r3, r3, #4
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d015      	beq.n	80065ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065be:	f7fd f8db 	bl	8003778 <HAL_GetTick>
 80065c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c4:	e00a      	b.n	80065dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c6:	f7fd f8d7 	bl	8003778 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e0d8      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065dc:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0ee      	beq.n	80065c6 <HAL_RCC_OscConfig+0x386>
 80065e8:	e014      	b.n	8006614 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fd f8c5 	bl	8003778 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fd f8c1 	bl	8003778 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e0c2      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006608:	4b41      	ldr	r3, [pc, #260]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ee      	bne.n	80065f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d105      	bne.n	8006626 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800661a:	4b3d      	ldr	r3, [pc, #244]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	4a3c      	ldr	r2, [pc, #240]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 80ae 	beq.w	800678c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006630:	4b37      	ldr	r3, [pc, #220]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 030c 	and.w	r3, r3, #12
 8006638:	2b08      	cmp	r3, #8
 800663a:	d06d      	beq.n	8006718 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d14b      	bne.n	80066dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006644:	4b32      	ldr	r3, [pc, #200]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a31      	ldr	r2, [pc, #196]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800664a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800664e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fd f892 	bl	8003778 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006658:	f7fd f88e 	bl	8003778 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e091      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666a:	4b29      	ldr	r3, [pc, #164]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	3b01      	subs	r3, #1
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	071b      	lsls	r3, r3, #28
 80066a2:	491b      	ldr	r1, [pc, #108]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a8:	4b19      	ldr	r3, [pc, #100]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a18      	ldr	r2, [pc, #96]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fd f860 	bl	8003778 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066bc:	f7fd f85c 	bl	8003778 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e05f      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ce:	4b10      	ldr	r3, [pc, #64]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x47c>
 80066da:	e057      	b.n	800678c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 80066e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fd f846 	bl	8003778 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f0:	f7fd f842 	bl	8003778 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e045      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006702:	4b03      	ldr	r3, [pc, #12]	; (8006710 <HAL_RCC_OscConfig+0x4d0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0x4b0>
 800670e:	e03d      	b.n	800678c <HAL_RCC_OscConfig+0x54c>
 8006710:	40023800 	.word	0x40023800
 8006714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006718:	4b1f      	ldr	r3, [pc, #124]	; (8006798 <HAL_RCC_OscConfig+0x558>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d030      	beq.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006730:	429a      	cmp	r2, r3
 8006732:	d129      	bne.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673e:	429a      	cmp	r2, r3
 8006740:	d122      	bne.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800674e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006750:	4293      	cmp	r3, r2
 8006752:	d119      	bne.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	3b01      	subs	r3, #1
 8006762:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d10f      	bne.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006774:	429a      	cmp	r2, r3
 8006776:	d107      	bne.n	8006788 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800

0800679c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0d0      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067b4:	4b6a      	ldr	r3, [pc, #424]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d910      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c2:	4b67      	ldr	r3, [pc, #412]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f023 020f 	bic.w	r2, r3, #15
 80067ca:	4965      	ldr	r1, [pc, #404]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d2:	4b63      	ldr	r3, [pc, #396]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e0b8      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067fc:	4b59      	ldr	r3, [pc, #356]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	4a58      	ldr	r2, [pc, #352]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006814:	4b53      	ldr	r3, [pc, #332]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	4a52      	ldr	r2, [pc, #328]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800681a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800681e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006820:	4b50      	ldr	r3, [pc, #320]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	494d      	ldr	r1, [pc, #308]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d040      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b47      	ldr	r3, [pc, #284]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d115      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e07f      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d107      	bne.n	800686e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800685e:	4b41      	ldr	r3, [pc, #260]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e073      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800686e:	4b3d      	ldr	r3, [pc, #244]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e06b      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800687e:	4b39      	ldr	r3, [pc, #228]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f023 0203 	bic.w	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4936      	ldr	r1, [pc, #216]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006890:	f7fc ff72 	bl	8003778 <HAL_GetTick>
 8006894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	e00a      	b.n	80068ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006898:	f7fc ff6e 	bl	8003778 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e053      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ae:	4b2d      	ldr	r3, [pc, #180]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 020c 	and.w	r2, r3, #12
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	429a      	cmp	r2, r3
 80068be:	d1eb      	bne.n	8006898 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068c0:	4b27      	ldr	r3, [pc, #156]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d210      	bcs.n	80068f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b24      	ldr	r3, [pc, #144]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 020f 	bic.w	r2, r3, #15
 80068d6:	4922      	ldr	r1, [pc, #136]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b20      	ldr	r3, [pc, #128]	; (8006960 <HAL_RCC_ClockConfig+0x1c4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e032      	b.n	8006956 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fc:	4b19      	ldr	r3, [pc, #100]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4916      	ldr	r1, [pc, #88]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	490e      	ldr	r1, [pc, #56]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 800692a:	4313      	orrs	r3, r2
 800692c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800692e:	f000 f821 	bl	8006974 <HAL_RCC_GetSysClockFreq>
 8006932:	4602      	mov	r2, r0
 8006934:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <HAL_RCC_ClockConfig+0x1c8>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	091b      	lsrs	r3, r3, #4
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	490a      	ldr	r1, [pc, #40]	; (8006968 <HAL_RCC_ClockConfig+0x1cc>)
 8006940:	5ccb      	ldrb	r3, [r1, r3]
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <HAL_RCC_ClockConfig+0x1d0>)
 8006948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800694a:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCC_ClockConfig+0x1d4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7fc fc74 	bl	800323c <HAL_InitTick>

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	40023c00 	.word	0x40023c00
 8006964:	40023800 	.word	0x40023800
 8006968:	0800ef88 	.word	0x0800ef88
 800696c:	20000020 	.word	0x20000020
 8006970:	20000024 	.word	0x20000024

08006974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006978:	b090      	sub	sp, #64	; 0x40
 800697a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	2300      	movs	r3, #0
 8006986:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800698c:	4b59      	ldr	r3, [pc, #356]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b08      	cmp	r3, #8
 8006996:	d00d      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006998:	2b08      	cmp	r3, #8
 800699a:	f200 80a1 	bhi.w	8006ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_RCC_GetSysClockFreq+0x34>
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d003      	beq.n	80069ae <HAL_RCC_GetSysClockFreq+0x3a>
 80069a6:	e09b      	b.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069a8:	4b53      	ldr	r3, [pc, #332]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069ac:	e09b      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ae:	4b53      	ldr	r3, [pc, #332]	; (8006afc <HAL_RCC_GetSysClockFreq+0x188>)
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069b2:	e098      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069b4:	4b4f      	ldr	r3, [pc, #316]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80069be:	4b4d      	ldr	r3, [pc, #308]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d028      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ca:	4b4a      	ldr	r3, [pc, #296]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	2200      	movs	r2, #0
 80069d2:	623b      	str	r3, [r7, #32]
 80069d4:	627a      	str	r2, [r7, #36]	; 0x24
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80069dc:	2100      	movs	r1, #0
 80069de:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_RCC_GetSysClockFreq+0x188>)
 80069e0:	fb03 f201 	mul.w	r2, r3, r1
 80069e4:	2300      	movs	r3, #0
 80069e6:	fb00 f303 	mul.w	r3, r0, r3
 80069ea:	4413      	add	r3, r2
 80069ec:	4a43      	ldr	r2, [pc, #268]	; (8006afc <HAL_RCC_GetSysClockFreq+0x188>)
 80069ee:	fba0 1202 	umull	r1, r2, r0, r2
 80069f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069f4:	460a      	mov	r2, r1
 80069f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80069f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fa:	4413      	add	r3, r2
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a00:	2200      	movs	r2, #0
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	61fa      	str	r2, [r7, #28]
 8006a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006a0e:	f7f9 fc67 	bl	80002e0 <__aeabi_uldivmod>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4613      	mov	r3, r2
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a1a:	e053      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	099b      	lsrs	r3, r3, #6
 8006a22:	2200      	movs	r2, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	617a      	str	r2, [r7, #20]
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a2e:	f04f 0b00 	mov.w	fp, #0
 8006a32:	4652      	mov	r2, sl
 8006a34:	465b      	mov	r3, fp
 8006a36:	f04f 0000 	mov.w	r0, #0
 8006a3a:	f04f 0100 	mov.w	r1, #0
 8006a3e:	0159      	lsls	r1, r3, #5
 8006a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a44:	0150      	lsls	r0, r2, #5
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a66:	ebb2 0408 	subs.w	r4, r2, r8
 8006a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	00eb      	lsls	r3, r5, #3
 8006a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a7c:	00e2      	lsls	r2, r4, #3
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461d      	mov	r5, r3
 8006a82:	eb14 030a 	adds.w	r3, r4, sl
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	eb45 030b 	adc.w	r3, r5, fp
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	f04f 0200 	mov.w	r2, #0
 8006a92:	f04f 0300 	mov.w	r3, #0
 8006a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a9a:	4629      	mov	r1, r5
 8006a9c:	028b      	lsls	r3, r1, #10
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006aa4:	4621      	mov	r1, r4
 8006aa6:	028a      	lsls	r2, r1, #10
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aae:	2200      	movs	r2, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	60fa      	str	r2, [r7, #12]
 8006ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ab8:	f7f9 fc12 	bl	80002e0 <__aeabi_uldivmod>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	0c1b      	lsrs	r3, r3, #16
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	3301      	adds	r3, #1
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006ad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ade:	e002      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ae2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3740      	adds	r7, #64	; 0x40
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800
 8006af8:	00f42400 	.word	0x00f42400
 8006afc:	017d7840 	.word	0x017d7840

08006b00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b06:	681b      	ldr	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000020 	.word	0x20000020

08006b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b1c:	f7ff fff0 	bl	8006b00 <HAL_RCC_GetHCLKFreq>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	0a9b      	lsrs	r3, r3, #10
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	4903      	ldr	r1, [pc, #12]	; (8006b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b2e:	5ccb      	ldrb	r3, [r1, r3]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	0800ef98 	.word	0x0800ef98

08006b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	220f      	movs	r2, #15
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b50:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <HAL_RCC_GetClockConfig+0x5c>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0203 	and.w	r2, r3, #3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <HAL_RCC_GetClockConfig+0x5c>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b68:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <HAL_RCC_GetClockConfig+0x5c>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <HAL_RCC_GetClockConfig+0x5c>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	08db      	lsrs	r3, r3, #3
 8006b7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b82:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <HAL_RCC_GetClockConfig+0x60>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 020f 	and.w	r2, r3, #15
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	601a      	str	r2, [r3, #0]
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40023c00 	.word	0x40023c00

08006ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d012      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006bcc:	4b69      	ldr	r3, [pc, #420]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a68      	ldr	r2, [pc, #416]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006bd6:	6093      	str	r3, [r2, #8]
 8006bd8:	4b66      	ldr	r3, [pc, #408]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	4964      	ldr	r1, [pc, #400]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d017      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bfe:	4b5d      	ldr	r3, [pc, #372]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0c:	4959      	ldr	r1, [pc, #356]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d017      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c3a:	4b4e      	ldr	r3, [pc, #312]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	494a      	ldr	r1, [pc, #296]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c58:	d101      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006c66:	2301      	movs	r3, #1
 8006c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c76:	2301      	movs	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 808b 	beq.w	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c88:	4b3a      	ldr	r3, [pc, #232]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	4a39      	ldr	r2, [pc, #228]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c92:	6413      	str	r3, [r2, #64]	; 0x40
 8006c94:	4b37      	ldr	r3, [pc, #220]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ca0:	4b35      	ldr	r3, [pc, #212]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a34      	ldr	r2, [pc, #208]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cac:	f7fc fd64 	bl	8003778 <HAL_GetTick>
 8006cb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb4:	f7fc fd60 	bl	8003778 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b64      	cmp	r3, #100	; 0x64
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e38f      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cd2:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d035      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d02e      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cf0:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cfa:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	4a1d      	ldr	r2, [pc, #116]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d06:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0a:	4a1a      	ldr	r2, [pc, #104]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006d12:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d18:	4b16      	ldr	r3, [pc, #88]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d114      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fc fd28 	bl	8003778 <HAL_GetTick>
 8006d28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d2a:	e00a      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2c:	f7fc fd24 	bl	8003778 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e351      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ee      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5a:	d111      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d6a:	400b      	ands	r3, r1
 8006d6c:	4901      	ldr	r1, [pc, #4]	; (8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	608b      	str	r3, [r1, #8]
 8006d72:	e00b      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40007000 	.word	0x40007000
 8006d7c:	0ffffcff 	.word	0x0ffffcff
 8006d80:	4bac      	ldr	r3, [pc, #688]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4aab      	ldr	r2, [pc, #684]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d8a:	6093      	str	r3, [r2, #8]
 8006d8c:	4ba9      	ldr	r3, [pc, #676]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d98:	49a6      	ldr	r1, [pc, #664]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0310 	and.w	r3, r3, #16
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d010      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006daa:	4ba2      	ldr	r3, [pc, #648]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db0:	4aa0      	ldr	r2, [pc, #640]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006db6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006dba:	4b9e      	ldr	r3, [pc, #632]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	499b      	ldr	r1, [pc, #620]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006dd8:	4b96      	ldr	r3, [pc, #600]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de6:	4993      	ldr	r1, [pc, #588]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dfa:	4b8e      	ldr	r3, [pc, #568]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e08:	498a      	ldr	r1, [pc, #552]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e1c:	4b85      	ldr	r3, [pc, #532]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2a:	4982      	ldr	r1, [pc, #520]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e3e:	4b7d      	ldr	r3, [pc, #500]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4979      	ldr	r1, [pc, #484]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e60:	4b74      	ldr	r3, [pc, #464]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e66:	f023 0203 	bic.w	r2, r3, #3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	4971      	ldr	r1, [pc, #452]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e82:	4b6c      	ldr	r3, [pc, #432]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e88:	f023 020c 	bic.w	r2, r3, #12
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e90:	4968      	ldr	r1, [pc, #416]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00a      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ea4:	4b63      	ldr	r3, [pc, #396]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	4960      	ldr	r1, [pc, #384]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ec6:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	4957      	ldr	r1, [pc, #348]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ee8:	4b52      	ldr	r3, [pc, #328]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef6:	494f      	ldr	r1, [pc, #316]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006f0a:	4b4a      	ldr	r3, [pc, #296]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	4946      	ldr	r1, [pc, #280]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006f2c:	4b41      	ldr	r3, [pc, #260]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3a:	493e      	ldr	r1, [pc, #248]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006f4e:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	4935      	ldr	r1, [pc, #212]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f70:	4b30      	ldr	r3, [pc, #192]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7e:	492d      	ldr	r1, [pc, #180]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f80:	4313      	orrs	r3, r2
 8006f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d011      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f92:	4b28      	ldr	r3, [pc, #160]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa0:	4924      	ldr	r1, [pc, #144]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fd2:	4b18      	ldr	r3, [pc, #96]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe0:	4914      	ldr	r1, [pc, #80]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007004:	490b      	ldr	r1, [pc, #44]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00f      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007028:	4902      	ldr	r1, [pc, #8]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007030:	e002      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007032:	bf00      	nop
 8007034:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007044:	4b8a      	ldr	r3, [pc, #552]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007054:	4986      	ldr	r1, [pc, #536]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007056:	4313      	orrs	r3, r2
 8007058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007068:	4b81      	ldr	r3, [pc, #516]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800706a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007078:	497d      	ldr	r1, [pc, #500]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d006      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 80d6 	beq.w	8007240 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007094:	4b76      	ldr	r3, [pc, #472]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a75      	ldr	r2, [pc, #468]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800709a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800709e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a0:	f7fc fb6a 	bl	8003778 <HAL_GetTick>
 80070a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070a8:	f7fc fb66 	bl	8003778 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e195      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070ba:	4b6d      	ldr	r3, [pc, #436]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d021      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d11d      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070da:	4b65      	ldr	r3, [pc, #404]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e0:	0c1b      	lsrs	r3, r3, #16
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070e8:	4b61      	ldr	r3, [pc, #388]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	019a      	lsls	r2, r3, #6
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	061b      	lsls	r3, r3, #24
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	071b      	lsls	r3, r3, #28
 800710e:	4958      	ldr	r1, [pc, #352]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007110:	4313      	orrs	r3, r2
 8007112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02e      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007140:	d129      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007142:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007150:	4b47      	ldr	r3, [pc, #284]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007156:	0f1b      	lsrs	r3, r3, #28
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	019a      	lsls	r2, r3, #6
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	431a      	orrs	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	071b      	lsls	r3, r3, #28
 8007176:	493e      	ldr	r1, [pc, #248]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007178:	4313      	orrs	r3, r2
 800717a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800717e:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007184:	f023 021f 	bic.w	r2, r3, #31
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	3b01      	subs	r3, #1
 800718e:	4938      	ldr	r1, [pc, #224]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007190:	4313      	orrs	r3, r2
 8007192:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01d      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071a2:	4b33      	ldr	r3, [pc, #204]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a8:	0e1b      	lsrs	r3, r3, #24
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071b0:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	019a      	lsls	r2, r3, #6
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	041b      	lsls	r3, r3, #16
 80071ca:	431a      	orrs	r2, r3
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	061b      	lsls	r3, r3, #24
 80071d0:	431a      	orrs	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	071b      	lsls	r3, r3, #28
 80071d6:	4926      	ldr	r1, [pc, #152]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	019a      	lsls	r2, r3, #6
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	491a      	ldr	r1, [pc, #104]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a17      	ldr	r2, [pc, #92]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721a:	f7fc faad 	bl	8003778 <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007222:	f7fc faa9 	bl	8003778 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b64      	cmp	r3, #100	; 0x64
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e0d8      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b01      	cmp	r3, #1
 8007244:	f040 80ce 	bne.w	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800724e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007254:	f7fc fa90 	bl	8003778 <HAL_GetTick>
 8007258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800725a:	e00b      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800725c:	f7fc fa8c 	bl	8003778 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b64      	cmp	r3, #100	; 0x64
 8007268:	d904      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e0bb      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800726e:	bf00      	nop
 8007270:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007274:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800727c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007280:	d0ec      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d02e      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d12a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072aa:	4b51      	ldr	r3, [pc, #324]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072b8:	4b4d      	ldr	r3, [pc, #308]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	019a      	lsls	r2, r3, #6
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	071b      	lsls	r3, r3, #28
 80072de:	4944      	ldr	r1, [pc, #272]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80072e6:	4b42      	ldr	r3, [pc, #264]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	3b01      	subs	r3, #1
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	493d      	ldr	r1, [pc, #244]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d022      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007314:	d11d      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007316:	4b36      	ldr	r3, [pc, #216]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007324:	4b32      	ldr	r3, [pc, #200]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	019a      	lsls	r2, r3, #6
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	4929      	ldr	r1, [pc, #164]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d028      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800735e:	4b24      	ldr	r3, [pc, #144]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800736c:	4b20      	ldr	r3, [pc, #128]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	019a      	lsls	r2, r3, #6
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	431a      	orrs	r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	071b      	lsls	r3, r3, #28
 8007392:	4917      	ldr	r1, [pc, #92]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	4911      	ldr	r1, [pc, #68]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a0e      	ldr	r2, [pc, #56]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073bc:	f7fc f9dc 	bl	8003778 <HAL_GetTick>
 80073c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073c4:	f7fc f9d8 	bl	8003778 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b64      	cmp	r3, #100	; 0x64
 80073d0:	d901      	bls.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e007      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073e2:	d1ef      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800

080073f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e025      	b.n	8007454 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fa fc3d 	bl	8001c9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2202      	movs	r2, #2
 8007426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f000 ffa3 	bl	8008380 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	461a      	mov	r2, r3
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	f000 fff7 	bl	8008438 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800746e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d101      	bne.n	800747a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007476:	2302      	movs	r3, #2
 8007478:	e021      	b.n	80074be <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d002      	beq.n	8007486 <HAL_SDRAM_SendCommand+0x2a>
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b05      	cmp	r3, #5
 8007484:	d118      	bne.n	80074b8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f001 f838 	bl	800850c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d104      	bne.n	80074ae <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2205      	movs	r2, #5
 80074a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074ac:	e006      	b.n	80074bc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074b6:	e001      	b.n	80074bc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d101      	bne.n	80074e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80074dc:	2302      	movs	r3, #2
 80074de:	e016      	b.n	800750e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d10f      	bne.n	800750c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f82a 	bl	8008554 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
 800750a:	e000      	b.n	800750e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e049      	b.n	80075bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f841 	bl	80075c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f000 fb69 	bl	8007c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d001      	beq.n	80075f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e054      	b.n	800769a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a26      	ldr	r2, [pc, #152]	; (80076a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d022      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800761a:	d01d      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a22      	ldr	r2, [pc, #136]	; (80076ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d018      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1f      	ldr	r2, [pc, #124]	; (80076b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIM_Base_Start_IT+0xe4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_TIM_Base_Start_IT+0x80>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d115      	bne.n	8007684 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <HAL_TIM_Base_Start_IT+0xec>)
 8007660:	4013      	ands	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b06      	cmp	r3, #6
 8007668:	d015      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0xbe>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007670:	d011      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0201 	orr.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007682:	e008      	b.n	8007696 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e000      	b.n	8007698 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40001800 	.word	0x40001800
 80076c4:	00010007 	.word	0x00010007

080076c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e049      	b.n	800776e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fb ff96 	bl	8003620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	4619      	mov	r1, r3
 8007706:	4610      	mov	r0, r2
 8007708:	f000 fa90 	bl	8007c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0302 	and.w	r3, r3, #2
 8007788:	2b02      	cmp	r3, #2
 800778a:	d122      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d11b      	bne.n	80077d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f06f 0202 	mvn.w	r2, #2
 80077a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f003 0303 	and.w	r3, r3, #3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa19 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 80077be:	e005      	b.n	80077cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fa0b 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa1c 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d122      	bne.n	8007826 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d11b      	bne.n	8007826 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f06f 0204 	mvn.w	r2, #4
 80077f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f9ef 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007812:	e005      	b.n	8007820 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f9e1 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f9f2 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b08      	cmp	r3, #8
 8007832:	d122      	bne.n	800787a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b08      	cmp	r3, #8
 8007840:	d11b      	bne.n	800787a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0208 	mvn.w	r2, #8
 800784a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2204      	movs	r2, #4
 8007850:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9c5 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 8007866:	e005      	b.n	8007874 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9b7 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9c8 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b10      	cmp	r3, #16
 8007886:	d122      	bne.n	80078ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b10      	cmp	r3, #16
 8007894:	d11b      	bne.n	80078ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0210 	mvn.w	r2, #16
 800789e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2208      	movs	r2, #8
 80078a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f99b 	bl	8007bf0 <HAL_TIM_IC_CaptureCallback>
 80078ba:	e005      	b.n	80078c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f98d 	bl	8007bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f99e 	bl	8007c04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d10e      	bne.n	80078fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0201 	mvn.w	r2, #1
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7fb f8cd 	bl	8002a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fd19 	bl	8008358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007934:	d10e      	bne.n	8007954 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b80      	cmp	r3, #128	; 0x80
 8007942:	d107      	bne.n	8007954 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800794c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fd0c 	bl	800836c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d10e      	bne.n	8007980 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d107      	bne.n	8007980 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f94c 	bl	8007c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b20      	cmp	r3, #32
 800798c:	d10e      	bne.n	80079ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b20      	cmp	r3, #32
 800799a:	d107      	bne.n	80079ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0220 	mvn.w	r2, #32
 80079a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fccc 	bl	8008344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0ff      	b.n	8007bd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b14      	cmp	r3, #20
 80079de:	f200 80f0 	bhi.w	8007bc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079e2:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a3d 	.word	0x08007a3d
 80079ec:	08007bc3 	.word	0x08007bc3
 80079f0:	08007bc3 	.word	0x08007bc3
 80079f4:	08007bc3 	.word	0x08007bc3
 80079f8:	08007a7d 	.word	0x08007a7d
 80079fc:	08007bc3 	.word	0x08007bc3
 8007a00:	08007bc3 	.word	0x08007bc3
 8007a04:	08007bc3 	.word	0x08007bc3
 8007a08:	08007abf 	.word	0x08007abf
 8007a0c:	08007bc3 	.word	0x08007bc3
 8007a10:	08007bc3 	.word	0x08007bc3
 8007a14:	08007bc3 	.word	0x08007bc3
 8007a18:	08007aff 	.word	0x08007aff
 8007a1c:	08007bc3 	.word	0x08007bc3
 8007a20:	08007bc3 	.word	0x08007bc3
 8007a24:	08007bc3 	.word	0x08007bc3
 8007a28:	08007b41 	.word	0x08007b41
 8007a2c:	08007bc3 	.word	0x08007bc3
 8007a30:	08007bc3 	.word	0x08007bc3
 8007a34:	08007bc3 	.word	0x08007bc3
 8007a38:	08007b81 	.word	0x08007b81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 f992 	bl	8007d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699a      	ldr	r2, [r3, #24]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0208 	orr.w	r2, r2, #8
 8007a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0204 	bic.w	r2, r2, #4
 8007a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6999      	ldr	r1, [r3, #24]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	619a      	str	r2, [r3, #24]
      break;
 8007a7a:	e0a5      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68b9      	ldr	r1, [r7, #8]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f9e4 	bl	8007e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699a      	ldr	r2, [r3, #24]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6999      	ldr	r1, [r3, #24]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	021a      	lsls	r2, r3, #8
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	619a      	str	r2, [r3, #24]
      break;
 8007abc:	e084      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 fa3b 	bl	8007f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0208 	orr.w	r2, r2, #8
 8007ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0204 	bic.w	r2, r2, #4
 8007ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69d9      	ldr	r1, [r3, #28]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	61da      	str	r2, [r3, #28]
      break;
 8007afc:	e064      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fa91 	bl	800802c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	69da      	ldr	r2, [r3, #28]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69da      	ldr	r2, [r3, #28]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69d9      	ldr	r1, [r3, #28]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	021a      	lsls	r2, r3, #8
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	61da      	str	r2, [r3, #28]
      break;
 8007b3e:	e043      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fac8 	bl	80080dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0208 	orr.w	r2, r2, #8
 8007b5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0204 	bic.w	r2, r2, #4
 8007b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b7e:	e023      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 fafa 	bl	8008180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007baa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	021a      	lsls	r2, r3, #8
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bc0:	e002      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop

08007bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a40      	ldr	r2, [pc, #256]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d013      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d00f      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a3d      	ldr	r2, [pc, #244]	; (8007d44 <TIM_Base_SetConfig+0x118>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00b      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a3c      	ldr	r2, [pc, #240]	; (8007d48 <TIM_Base_SetConfig+0x11c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d007      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a3b      	ldr	r2, [pc, #236]	; (8007d4c <TIM_Base_SetConfig+0x120>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_Base_SetConfig+0x40>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a3a      	ldr	r2, [pc, #232]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d108      	bne.n	8007c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2f      	ldr	r2, [pc, #188]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d02b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8c:	d027      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2c      	ldr	r2, [pc, #176]	; (8007d44 <TIM_Base_SetConfig+0x118>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d023      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a2b      	ldr	r2, [pc, #172]	; (8007d48 <TIM_Base_SetConfig+0x11c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d01f      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2a      	ldr	r2, [pc, #168]	; (8007d4c <TIM_Base_SetConfig+0x120>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d01b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a29      	ldr	r2, [pc, #164]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d017      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a28      	ldr	r2, [pc, #160]	; (8007d54 <TIM_Base_SetConfig+0x128>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d013      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a27      	ldr	r2, [pc, #156]	; (8007d58 <TIM_Base_SetConfig+0x12c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00f      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	; (8007d5c <TIM_Base_SetConfig+0x130>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00b      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <TIM_Base_SetConfig+0x134>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d007      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	; (8007d64 <TIM_Base_SetConfig+0x138>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d003      	beq.n	8007cde <TIM_Base_SetConfig+0xb2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <TIM_Base_SetConfig+0x13c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d108      	bne.n	8007cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <TIM_Base_SetConfig+0x114>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_Base_SetConfig+0xf8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a0c      	ldr	r2, [pc, #48]	; (8007d50 <TIM_Base_SetConfig+0x124>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d103      	bne.n	8007d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	615a      	str	r2, [r3, #20]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800
 8007d60:	40001800 	.word	0x40001800
 8007d64:	40001c00 	.word	0x40001c00
 8007d68:	40002000 	.word	0x40002000

08007d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	4b2b      	ldr	r3, [pc, #172]	; (8007e44 <TIM_OC1_SetConfig+0xd8>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <TIM_OC1_SetConfig+0xdc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_OC1_SetConfig+0x64>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a20      	ldr	r2, [pc, #128]	; (8007e4c <TIM_OC1_SetConfig+0xe0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10c      	bne.n	8007dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f023 0308 	bic.w	r3, r3, #8
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a16      	ldr	r2, [pc, #88]	; (8007e48 <TIM_OC1_SetConfig+0xdc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_OC1_SetConfig+0x8e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <TIM_OC1_SetConfig+0xe0>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d111      	bne.n	8007e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	fffeff8f 	.word	0xfffeff8f
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40010400 	.word	0x40010400

08007e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b087      	sub	sp, #28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	f023 0210 	bic.w	r2, r3, #16
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	; (8007f34 <TIM_OC2_SetConfig+0xe4>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0320 	bic.w	r3, r3, #32
 8007e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a23      	ldr	r2, [pc, #140]	; (8007f38 <TIM_OC2_SetConfig+0xe8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_OC2_SetConfig+0x68>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a22      	ldr	r2, [pc, #136]	; (8007f3c <TIM_OC2_SetConfig+0xec>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10d      	bne.n	8007ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <TIM_OC2_SetConfig+0xe8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_OC2_SetConfig+0x94>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <TIM_OC2_SetConfig+0xec>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d113      	bne.n	8007f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	feff8fff 	.word	0xfeff8fff
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40010400 	.word	0x40010400

08007f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4b2d      	ldr	r3, [pc, #180]	; (8008020 <TIM_OC3_SetConfig+0xe0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a22      	ldr	r2, [pc, #136]	; (8008024 <TIM_OC3_SetConfig+0xe4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_OC3_SetConfig+0x66>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a21      	ldr	r2, [pc, #132]	; (8008028 <TIM_OC3_SetConfig+0xe8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d10d      	bne.n	8007fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a17      	ldr	r2, [pc, #92]	; (8008024 <TIM_OC3_SetConfig+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_OC3_SetConfig+0x92>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <TIM_OC3_SetConfig+0xe8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d113      	bne.n	8007ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	621a      	str	r2, [r3, #32]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	fffeff8f 	.word	0xfffeff8f
 8008024:	40010000 	.word	0x40010000
 8008028:	40010400 	.word	0x40010400

0800802c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <TIM_OC4_SetConfig+0xa4>)
 8008058:	4013      	ands	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	021b      	lsls	r3, r3, #8
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4313      	orrs	r3, r2
 800806e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	031b      	lsls	r3, r3, #12
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <TIM_OC4_SetConfig+0xa8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_OC4_SetConfig+0x68>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <TIM_OC4_SetConfig+0xac>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d109      	bne.n	80080a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800809a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	019b      	lsls	r3, r3, #6
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	feff8fff 	.word	0xfeff8fff
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40010400 	.word	0x40010400

080080dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <TIM_OC5_SetConfig+0x98>)
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800811c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	041b      	lsls	r3, r3, #16
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a12      	ldr	r2, [pc, #72]	; (8008178 <TIM_OC5_SetConfig+0x9c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_OC5_SetConfig+0x5e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <TIM_OC5_SetConfig+0xa0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d109      	bne.n	800814e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	621a      	str	r2, [r3, #32]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	fffeff8f 	.word	0xfffeff8f
 8008178:	40010000 	.word	0x40010000
 800817c:	40010400 	.word	0x40010400

08008180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008180:	b480      	push	{r7}
 8008182:	b087      	sub	sp, #28
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4b1c      	ldr	r3, [pc, #112]	; (800821c <TIM_OC6_SetConfig+0x9c>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	051b      	lsls	r3, r3, #20
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a13      	ldr	r2, [pc, #76]	; (8008220 <TIM_OC6_SetConfig+0xa0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_OC6_SetConfig+0x60>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a12      	ldr	r2, [pc, #72]	; (8008224 <TIM_OC6_SetConfig+0xa4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d109      	bne.n	80081f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	029b      	lsls	r3, r3, #10
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	621a      	str	r2, [r3, #32]
}
 800820e:	bf00      	nop
 8008210:	371c      	adds	r7, #28
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	feff8fff 	.word	0xfeff8fff
 8008220:	40010000 	.word	0x40010000
 8008224:	40010400 	.word	0x40010400

08008228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e06d      	b.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a30      	ldr	r2, [pc, #192]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2f      	ldr	r2, [pc, #188]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d108      	bne.n	8008286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800827a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a20      	ldr	r2, [pc, #128]	; (8008328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d022      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b2:	d01d      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d018      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d013      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d10c      	bne.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	40010000 	.word	0x40010000
 800832c:	40010400 	.word	0x40010400
 8008330:	40000400 	.word	0x40000400
 8008334:	40000800 	.word	0x40000800
 8008338:	40000c00 	.word	0x40000c00
 800833c:	40014000 	.word	0x40014000
 8008340:	40001800 	.word	0x40001800

08008344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d121      	bne.n	80083d6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b27      	ldr	r3, [pc, #156]	; (8008434 <FMC_SDRAM_Init+0xb4>)
 8008398:	4013      	ands	r3, r2
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	6851      	ldr	r1, [r2, #4]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	6892      	ldr	r2, [r2, #8]
 80083a2:	4311      	orrs	r1, r2
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	68d2      	ldr	r2, [r2, #12]
 80083a8:	4311      	orrs	r1, r2
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	4311      	orrs	r1, r2
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	6952      	ldr	r2, [r2, #20]
 80083b4:	4311      	orrs	r1, r2
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	6992      	ldr	r2, [r2, #24]
 80083ba:	4311      	orrs	r1, r2
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	69d2      	ldr	r2, [r2, #28]
 80083c0:	4311      	orrs	r1, r2
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	6a12      	ldr	r2, [r2, #32]
 80083c6:	4311      	orrs	r1, r2
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083cc:	430a      	orrs	r2, r1
 80083ce:	431a      	orrs	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e026      	b.n	8008424 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	69d9      	ldr	r1, [r3, #28]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	4319      	orrs	r1, r3
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	430b      	orrs	r3, r1
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <FMC_SDRAM_Init+0xb4>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	6851      	ldr	r1, [r2, #4]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	6892      	ldr	r2, [r2, #8]
 8008404:	4311      	orrs	r1, r2
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	68d2      	ldr	r2, [r2, #12]
 800840a:	4311      	orrs	r1, r2
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	6912      	ldr	r2, [r2, #16]
 8008410:	4311      	orrs	r1, r2
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6952      	ldr	r2, [r2, #20]
 8008416:	4311      	orrs	r1, r2
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	6992      	ldr	r2, [r2, #24]
 800841c:	430a      	orrs	r2, r1
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	ffff8000 	.word	0xffff8000

08008438 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d128      	bne.n	800849c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	1e59      	subs	r1, r3, #1
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	3b01      	subs	r3, #1
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	4319      	orrs	r1, r3
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	3b01      	subs	r3, #1
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	4319      	orrs	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	3b01      	subs	r3, #1
 8008472:	031b      	lsls	r3, r3, #12
 8008474:	4319      	orrs	r1, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	3b01      	subs	r3, #1
 800847c:	041b      	lsls	r3, r3, #16
 800847e:	4319      	orrs	r1, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	3b01      	subs	r3, #1
 8008486:	051b      	lsls	r3, r3, #20
 8008488:	4319      	orrs	r1, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	3b01      	subs	r3, #1
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	430b      	orrs	r3, r1
 8008494:	431a      	orrs	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	609a      	str	r2, [r3, #8]
 800849a:	e02d      	b.n	80084f8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	4b19      	ldr	r3, [pc, #100]	; (8008508 <FMC_SDRAM_Timing_Init+0xd0>)
 80084a2:	4013      	ands	r3, r2
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	68d2      	ldr	r2, [r2, #12]
 80084a8:	3a01      	subs	r2, #1
 80084aa:	0311      	lsls	r1, r2, #12
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	6952      	ldr	r2, [r2, #20]
 80084b0:	3a01      	subs	r2, #1
 80084b2:	0512      	lsls	r2, r2, #20
 80084b4:	430a      	orrs	r2, r1
 80084b6:	431a      	orrs	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	1e59      	subs	r1, r3, #1
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	4319      	orrs	r1, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	3b01      	subs	r3, #1
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	4319      	orrs	r1, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	041b      	lsls	r3, r3, #16
 80084e6:	4319      	orrs	r1, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	061b      	lsls	r3, r3, #24
 80084f0:	430b      	orrs	r3, r1
 80084f2:	431a      	orrs	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	ff0f0fff 	.word	0xff0f0fff

0800850c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691a      	ldr	r2, [r3, #16]
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <FMC_SDRAM_SendCommand+0x44>)
 800851e:	4013      	ands	r3, r2
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	6811      	ldr	r1, [r2, #0]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	6852      	ldr	r2, [r2, #4]
 8008528:	4311      	orrs	r1, r2
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	6892      	ldr	r2, [r2, #8]
 800852e:	3a01      	subs	r2, #1
 8008530:	0152      	lsls	r2, r2, #5
 8008532:	4311      	orrs	r1, r2
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	68d2      	ldr	r2, [r2, #12]
 8008538:	0252      	lsls	r2, r2, #9
 800853a:	430a      	orrs	r2, r1
 800853c:	431a      	orrs	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	ffc00000 	.word	0xffc00000

08008554 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008564:	4013      	ands	r3, r2
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	0052      	lsls	r2, r2, #1
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	ffffc001 	.word	0xffffc001

08008584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008588:	bf00      	nop
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
	...

08008594 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800859a:	f3ef 8305 	mrs	r3, IPSR
 800859e:	60bb      	str	r3, [r7, #8]
  return(result);
 80085a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10f      	bne.n	80085c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085a6:	f3ef 8310 	mrs	r3, PRIMASK
 80085aa:	607b      	str	r3, [r7, #4]
  return(result);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d105      	bne.n	80085be <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085b2:	f3ef 8311 	mrs	r3, BASEPRI
 80085b6:	603b      	str	r3, [r7, #0]
  return(result);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <osKernelInitialize+0x3a>
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <osKernelInitialize+0x64>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d103      	bne.n	80085ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80085c6:	f06f 0305 	mvn.w	r3, #5
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e00c      	b.n	80085e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80085ce:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <osKernelInitialize+0x64>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <osKernelInitialize+0x64>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80085dc:	2300      	movs	r3, #0
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e002      	b.n	80085e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	2000075c 	.word	0x2000075c

080085fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008602:	f3ef 8305 	mrs	r3, IPSR
 8008606:	60bb      	str	r3, [r7, #8]
  return(result);
 8008608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10f      	bne.n	800862e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860e:	f3ef 8310 	mrs	r3, PRIMASK
 8008612:	607b      	str	r3, [r7, #4]
  return(result);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800861a:	f3ef 8311 	mrs	r3, BASEPRI
 800861e:	603b      	str	r3, [r7, #0]
  return(result);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <osKernelStart+0x3a>
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <osKernelStart+0x68>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d103      	bne.n	8008636 <osKernelStart+0x3a>
    stat = osErrorISR;
 800862e:	f06f 0305 	mvn.w	r3, #5
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	e010      	b.n	8008658 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <osKernelStart+0x68>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d109      	bne.n	8008652 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800863e:	f7ff ffa1 	bl	8008584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008642:	4b08      	ldr	r3, [pc, #32]	; (8008664 <osKernelStart+0x68>)
 8008644:	2202      	movs	r2, #2
 8008646:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008648:	f001 f93e 	bl	80098c8 <vTaskStartScheduler>
      stat = osOK;
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e002      	b.n	8008658 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008656:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000075c 	.word	0x2000075c

08008668 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b090      	sub	sp, #64	; 0x40
 800866c:	af04      	add	r7, sp, #16
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008678:	f3ef 8305 	mrs	r3, IPSR
 800867c:	61fb      	str	r3, [r7, #28]
  return(result);
 800867e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008680:	2b00      	cmp	r3, #0
 8008682:	f040 808f 	bne.w	80087a4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008686:	f3ef 8310 	mrs	r3, PRIMASK
 800868a:	61bb      	str	r3, [r7, #24]
  return(result);
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008692:	f3ef 8311 	mrs	r3, BASEPRI
 8008696:	617b      	str	r3, [r7, #20]
  return(result);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <osThreadNew+0x3e>
 800869e:	4b44      	ldr	r3, [pc, #272]	; (80087b0 <osThreadNew+0x148>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d07e      	beq.n	80087a4 <osThreadNew+0x13c>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d07b      	beq.n	80087a4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80086ac:	2380      	movs	r3, #128	; 0x80
 80086ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80086b0:	2318      	movs	r3, #24
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d045      	beq.n	8008750 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d002      	beq.n	80086d2 <osThreadNew+0x6a>
        name = attr->name;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d008      	beq.n	80086f8 <osThreadNew+0x90>
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	2b38      	cmp	r3, #56	; 0x38
 80086ea:	d805      	bhi.n	80086f8 <osThreadNew+0x90>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <osThreadNew+0x94>
        return (NULL);
 80086f8:	2300      	movs	r3, #0
 80086fa:	e054      	b.n	80087a6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	089b      	lsrs	r3, r3, #2
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00e      	beq.n	8008732 <osThreadNew+0xca>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2ba7      	cmp	r3, #167	; 0xa7
 800871a:	d90a      	bls.n	8008732 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <osThreadNew+0xca>
        mem = 1;
 800872c:	2301      	movs	r3, #1
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	e010      	b.n	8008754 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10c      	bne.n	8008754 <osThreadNew+0xec>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d108      	bne.n	8008754 <osThreadNew+0xec>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <osThreadNew+0xec>
          mem = 0;
 800874a:	2300      	movs	r3, #0
 800874c:	623b      	str	r3, [r7, #32]
 800874e:	e001      	b.n	8008754 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d110      	bne.n	800877c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800876e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 feb3 	bl	80094dc <xTaskCreateStatic>
 8008776:	4603      	mov	r3, r0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	e013      	b.n	80087a4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d110      	bne.n	80087a4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	b29a      	uxth	r2, r3
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 ff04 	bl	80095a2 <xTaskCreate>
 800879a:	4603      	mov	r3, r0
 800879c:	2b01      	cmp	r3, #1
 800879e:	d001      	beq.n	80087a4 <osThreadNew+0x13c>
          hTask = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80087a4:	693b      	ldr	r3, [r7, #16]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3730      	adds	r7, #48	; 0x30
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	2000075c 	.word	0x2000075c

080087b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087bc:	f3ef 8305 	mrs	r3, IPSR
 80087c0:	613b      	str	r3, [r7, #16]
  return(result);
 80087c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10f      	bne.n	80087e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c8:	f3ef 8310 	mrs	r3, PRIMASK
 80087cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d4:	f3ef 8311 	mrs	r3, BASEPRI
 80087d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d007      	beq.n	80087f0 <osDelay+0x3c>
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <osDelay+0x58>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d103      	bne.n	80087f0 <osDelay+0x3c>
    stat = osErrorISR;
 80087e8:	f06f 0305 	mvn.w	r3, #5
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	e007      	b.n	8008800 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <osDelay+0x4c>
      vTaskDelay(ticks);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 f82e 	bl	800985c <vTaskDelay>
    }
  }

  return (stat);
 8008800:	697b      	ldr	r3, [r7, #20]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3718      	adds	r7, #24
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	2000075c 	.word	0x2000075c

08008810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4a07      	ldr	r2, [pc, #28]	; (800883c <vApplicationGetIdleTaskMemory+0x2c>)
 8008820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4a06      	ldr	r2, [pc, #24]	; (8008840 <vApplicationGetIdleTaskMemory+0x30>)
 8008826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2280      	movs	r2, #128	; 0x80
 800882c:	601a      	str	r2, [r3, #0]
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000760 	.word	0x20000760
 8008840:	20000808 	.word	0x20000808

08008844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a07      	ldr	r2, [pc, #28]	; (8008870 <vApplicationGetTimerTaskMemory+0x2c>)
 8008854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	4a06      	ldr	r2, [pc, #24]	; (8008874 <vApplicationGetTimerTaskMemory+0x30>)
 800885a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000a08 	.word	0x20000a08
 8008874:	20000ab0 	.word	0x20000ab0

08008878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f103 0208 	add.w	r2, r3, #8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f103 0208 	add.w	r2, r3, #8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f103 0208 	add.w	r2, r3, #8
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800891a:	b480      	push	{r7}
 800891c:	b085      	sub	sp, #20
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008930:	d103      	bne.n	800893a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	e00c      	b.n	8008954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	3308      	adds	r3, #8
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e002      	b.n	8008948 <vListInsert+0x2e>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	60fb      	str	r3, [r7, #12]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	429a      	cmp	r2, r3
 8008952:	d2f6      	bcs.n	8008942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	601a      	str	r2, [r3, #0]
}
 8008980:	bf00      	nop
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6892      	ldr	r2, [r2, #8]
 80089a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6852      	ldr	r2, [r2, #4]
 80089ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d103      	bne.n	80089c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	1e5a      	subs	r2, r3, #1
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f8:	b672      	cpsid	i
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	b662      	cpsie	i
 8008a08:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008a0e:	f002 f91d 	bl	800ac4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a1e:	fb01 f303 	mul.w	r3, r1, r3
 8008a22:	441a      	add	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	68f9      	ldr	r1, [r7, #12]
 8008a42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	441a      	add	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	22ff      	movs	r2, #255	; 0xff
 8008a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	22ff      	movs	r2, #255	; 0xff
 8008a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d114      	bne.n	8008a8e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01a      	beq.n	8008aa2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3310      	adds	r3, #16
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 f9d1 	bl	8009e18 <xTaskRemoveFromEventList>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d012      	beq.n	8008aa2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <xQueueGenericReset+0xd0>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	e009      	b.n	8008aa2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3310      	adds	r3, #16
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fef0 	bl	8008878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3324      	adds	r3, #36	; 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff feeb 	bl	8008878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008aa2:	f002 f907 	bl	800acb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008aa6:	2301      	movs	r3, #1
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08e      	sub	sp, #56	; 0x38
 8008ab8:	af02      	add	r7, sp, #8
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10c      	bne.n	8008ae2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	b672      	cpsid	i
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	b662      	cpsie	i
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10c      	bne.n	8008b02 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <xQueueGenericCreateStatic+0x5a>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <xQueueGenericCreateStatic+0x5e>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <xQueueGenericCreateStatic+0x60>
 8008b12:	2300      	movs	r3, #0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	b672      	cpsid	i
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	b662      	cpsie	i
 8008b2c:	623b      	str	r3, [r7, #32]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <xQueueGenericCreateStatic+0x8a>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <xQueueGenericCreateStatic+0x8e>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <xQueueGenericCreateStatic+0x90>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	b672      	cpsid	i
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	b662      	cpsie	i
 8008b5c:	61fb      	str	r3, [r7, #28]
}
 8008b5e:	bf00      	nop
 8008b60:	e7fe      	b.n	8008b60 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b62:	2350      	movs	r3, #80	; 0x50
 8008b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b50      	cmp	r3, #80	; 0x50
 8008b6a:	d00c      	beq.n	8008b86 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	b672      	cpsid	i
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	b662      	cpsie	i
 8008b80:	61bb      	str	r3, [r7, #24]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00d      	beq.n	8008bae <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f847 	bl	8008c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3730      	adds	r7, #48	; 0x30
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10c      	bne.n	8008be6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd0:	b672      	cpsid	i
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	b662      	cpsie	i
 8008be0:	613b      	str	r3, [r7, #16]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d102      	bne.n	8008bf2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	e004      	b.n	8008bfc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3350      	adds	r3, #80	; 0x50
 8008c00:	4618      	mov	r0, r3
 8008c02:	f002 f94f 	bl	800aea4 <pvPortMalloc>
 8008c06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d011      	beq.n	8008c32 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	3350      	adds	r3, #80	; 0x50
 8008c16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c20:	79fa      	ldrb	r2, [r7, #7]
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	4613      	mov	r3, r2
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	68b9      	ldr	r1, [r7, #8]
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f805 	bl	8008c3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c32:	69bb      	ldr	r3, [r7, #24]
	}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3720      	adds	r7, #32
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d103      	bne.n	8008c58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	69b8      	ldr	r0, [r7, #24]
 8008c6e:	f7ff feb7 	bl	80089e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b082      	sub	sp, #8
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00e      	beq.n	8008cae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f81d 	bl	8008ce8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b086      	sub	sp, #24
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008cc8:	79fb      	ldrb	r3, [r7, #7]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6939      	ldr	r1, [r7, #16]
 8008cce:	6978      	ldr	r0, [r7, #20]
 8008cd0:	f7ff ff72 	bl	8008bb8 <xQueueGenericCreate>
 8008cd4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff ffd3 	bl	8008c82 <prvInitialiseMutex>

		return xNewQueue;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
	}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08e      	sub	sp, #56	; 0x38
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10c      	bne.n	8008d1e <xQueueGenericSend+0x36>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	b672      	cpsid	i
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	b662      	cpsie	i
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d103      	bne.n	8008d2c <xQueueGenericSend+0x44>
 8008d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <xQueueGenericSend+0x48>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <xQueueGenericSend+0x4a>
 8008d30:	2300      	movs	r3, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10c      	bne.n	8008d50 <xQueueGenericSend+0x68>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	b672      	cpsid	i
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	b662      	cpsie	i
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d103      	bne.n	8008d5e <xQueueGenericSend+0x76>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d101      	bne.n	8008d62 <xQueueGenericSend+0x7a>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <xQueueGenericSend+0x7c>
 8008d62:	2300      	movs	r3, #0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10c      	bne.n	8008d82 <xQueueGenericSend+0x9a>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	b672      	cpsid	i
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	b662      	cpsie	i
 8008d7c:	623b      	str	r3, [r7, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	e7fe      	b.n	8008d80 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d82:	f001 fa13 	bl	800a1ac <xTaskGetSchedulerState>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <xQueueGenericSend+0xaa>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <xQueueGenericSend+0xae>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <xQueueGenericSend+0xb0>
 8008d96:	2300      	movs	r3, #0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10c      	bne.n	8008db6 <xQueueGenericSend+0xce>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	b672      	cpsid	i
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	b662      	cpsie	i
 8008db0:	61fb      	str	r3, [r7, #28]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008db6:	f001 ff49 	bl	800ac4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d302      	bcc.n	8008dcc <xQueueGenericSend+0xe4>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d129      	bne.n	8008e20 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dd2:	f000 fa15 	bl	8009200 <prvCopyDataToQueue>
 8008dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d010      	beq.n	8008e02 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	3324      	adds	r3, #36	; 0x24
 8008de4:	4618      	mov	r0, r3
 8008de6:	f001 f817 	bl	8009e18 <xTaskRemoveFromEventList>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d013      	beq.n	8008e18 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008df0:	4b3f      	ldr	r3, [pc, #252]	; (8008ef0 <xQueueGenericSend+0x208>)
 8008df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	e00a      	b.n	8008e18 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e08:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <xQueueGenericSend+0x208>)
 8008e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e18:	f001 ff4c 	bl	800acb4 <vPortExitCritical>
				return pdPASS;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e063      	b.n	8008ee8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e26:	f001 ff45 	bl	800acb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e05c      	b.n	8008ee8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d106      	bne.n	8008e42 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e34:	f107 0314 	add.w	r3, r7, #20
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 f853 	bl	8009ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e42:	f001 ff37 	bl	800acb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e46:	f000 fdb3 	bl	80099b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e4a:	f001 feff 	bl	800ac4c <vPortEnterCritical>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e54:	b25b      	sxtb	r3, r3
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5a:	d103      	bne.n	8008e64 <xQueueGenericSend+0x17c>
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e6a:	b25b      	sxtb	r3, r3
 8008e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e70:	d103      	bne.n	8008e7a <xQueueGenericSend+0x192>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e7a:	f001 ff1b 	bl	800acb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e7e:	1d3a      	adds	r2, r7, #4
 8008e80:	f107 0314 	add.w	r3, r7, #20
 8008e84:	4611      	mov	r1, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	f001 f842 	bl	8009f10 <xTaskCheckForTimeOut>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d124      	bne.n	8008edc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e94:	f000 faac 	bl	80093f0 <prvIsQueueFull>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d018      	beq.n	8008ed0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 ff62 	bl	8009d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eae:	f000 fa37 	bl	8009320 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008eb2:	f000 fd8b 	bl	80099cc <xTaskResumeAll>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f47f af7c 	bne.w	8008db6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <xQueueGenericSend+0x208>)
 8008ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	e772      	b.n	8008db6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed2:	f000 fa25 	bl	8009320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ed6:	f000 fd79 	bl	80099cc <xTaskResumeAll>
 8008eda:	e76c      	b.n	8008db6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ede:	f000 fa1f 	bl	8009320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ee2:	f000 fd73 	bl	80099cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3738      	adds	r7, #56	; 0x38
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	e000ed04 	.word	0xe000ed04

08008ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08e      	sub	sp, #56	; 0x38
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10c      	bne.n	8008f26 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	b672      	cpsid	i
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	b662      	cpsie	i
 8008f20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSendFromISR+0x40>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <xQueueGenericSendFromISR+0x44>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <xQueueGenericSendFromISR+0x46>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d10c      	bne.n	8008f58 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	b672      	cpsid	i
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	b662      	cpsie	i
 8008f52:	623b      	str	r3, [r7, #32]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d103      	bne.n	8008f66 <xQueueGenericSendFromISR+0x72>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d101      	bne.n	8008f6a <xQueueGenericSendFromISR+0x76>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e000      	b.n	8008f6c <xQueueGenericSendFromISR+0x78>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10c      	bne.n	8008f8a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	b672      	cpsid	i
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	b662      	cpsie	i
 8008f84:	61fb      	str	r3, [r7, #28]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f8a:	f001 ff47 	bl	800ae1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	b672      	cpsid	i
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	b662      	cpsie	i
 8008fa6:	61ba      	str	r2, [r7, #24]
 8008fa8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008faa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <xQueueGenericSendFromISR+0xcc>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d12c      	bne.n	800901a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fd0:	f000 f916 	bl	8009200 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fdc:	d112      	bne.n	8009004 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d016      	beq.n	8009014 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe8:	3324      	adds	r3, #36	; 0x24
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 ff14 	bl	8009e18 <xTaskRemoveFromEventList>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00e      	beq.n	8009014 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	e007      	b.n	8009014 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009008:	3301      	adds	r3, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	b25a      	sxtb	r2, r3
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009018:	e001      	b.n	800901e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
 800901e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009020:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009028:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800902c:	4618      	mov	r0, r3
 800902e:	3738      	adds	r7, #56	; 0x38
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08c      	sub	sp, #48	; 0x30
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009040:	2300      	movs	r3, #0
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10c      	bne.n	8009068 <xQueueReceive+0x34>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	b672      	cpsid	i
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	b662      	cpsie	i
 8009062:	623b      	str	r3, [r7, #32]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <xQueueReceive+0x42>
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	d101      	bne.n	800907a <xQueueReceive+0x46>
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <xQueueReceive+0x48>
 800907a:	2300      	movs	r3, #0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10c      	bne.n	800909a <xQueueReceive+0x66>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	b672      	cpsid	i
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	b662      	cpsie	i
 8009094:	61fb      	str	r3, [r7, #28]
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800909a:	f001 f887 	bl	800a1ac <xTaskGetSchedulerState>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <xQueueReceive+0x76>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <xQueueReceive+0x7a>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e000      	b.n	80090b0 <xQueueReceive+0x7c>
 80090ae:	2300      	movs	r3, #0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10c      	bne.n	80090ce <xQueueReceive+0x9a>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	b672      	cpsid	i
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	b662      	cpsie	i
 80090c8:	61bb      	str	r3, [r7, #24]
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ce:	f001 fdbd 	bl	800ac4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01f      	beq.n	800911e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e2:	f000 f8f7 	bl	80092d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	1e5a      	subs	r2, r3, #1
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00f      	beq.n	8009116 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f8:	3310      	adds	r3, #16
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fe8c 	bl	8009e18 <xTaskRemoveFromEventList>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009106:	4b3d      	ldr	r3, [pc, #244]	; (80091fc <xQueueReceive+0x1c8>)
 8009108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009116:	f001 fdcd 	bl	800acb4 <vPortExitCritical>
				return pdPASS;
 800911a:	2301      	movs	r3, #1
 800911c:	e069      	b.n	80091f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d103      	bne.n	800912c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009124:	f001 fdc6 	bl	800acb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009128:	2300      	movs	r3, #0
 800912a:	e062      	b.n	80091f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fed4 	bl	8009ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009140:	f001 fdb8 	bl	800acb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009144:	f000 fc34 	bl	80099b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009148:	f001 fd80 	bl	800ac4c <vPortEnterCritical>
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009152:	b25b      	sxtb	r3, r3
 8009154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009158:	d103      	bne.n	8009162 <xQueueReceive+0x12e>
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009168:	b25b      	sxtb	r3, r3
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800916e:	d103      	bne.n	8009178 <xQueueReceive+0x144>
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009178:	f001 fd9c 	bl	800acb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800917c:	1d3a      	adds	r2, r7, #4
 800917e:	f107 0310 	add.w	r3, r7, #16
 8009182:	4611      	mov	r1, r2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fec3 	bl	8009f10 <xTaskCheckForTimeOut>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d123      	bne.n	80091d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009192:	f000 f917 	bl	80093c4 <prvIsQueueEmpty>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d017      	beq.n	80091cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	3324      	adds	r3, #36	; 0x24
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fde3 	bl	8009d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ac:	f000 f8b8 	bl	8009320 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091b0:	f000 fc0c 	bl	80099cc <xTaskResumeAll>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d189      	bne.n	80090ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80091ba:	4b10      	ldr	r3, [pc, #64]	; (80091fc <xQueueReceive+0x1c8>)
 80091bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	e780      	b.n	80090ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ce:	f000 f8a7 	bl	8009320 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091d2:	f000 fbfb 	bl	80099cc <xTaskResumeAll>
 80091d6:	e77a      	b.n	80090ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091da:	f000 f8a1 	bl	8009320 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091de:	f000 fbf5 	bl	80099cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e4:	f000 f8ee 	bl	80093c4 <prvIsQueueEmpty>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f43f af6f 	beq.w	80090ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3730      	adds	r7, #48	; 0x30
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	e000ed04 	.word	0xe000ed04

08009200 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10d      	bne.n	800923a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d14d      	bne.n	80092c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 ffdc 	bl	800a1e8 <xTaskPriorityDisinherit>
 8009230:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	609a      	str	r2, [r3, #8]
 8009238:	e043      	b.n	80092c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d119      	bne.n	8009274 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6858      	ldr	r0, [r3, #4]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009248:	461a      	mov	r2, r3
 800924a:	68b9      	ldr	r1, [r7, #8]
 800924c:	f002 fa5d 	bl	800b70a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009258:	441a      	add	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	429a      	cmp	r2, r3
 8009268:	d32b      	bcc.n	80092c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	e026      	b.n	80092c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68d8      	ldr	r0, [r3, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	461a      	mov	r2, r3
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	f002 fa43 	bl	800b70a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928c:	425b      	negs	r3, r3
 800928e:	441a      	add	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d207      	bcs.n	80092b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	425b      	negs	r3, r3
 80092aa:	441a      	add	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d105      	bne.n	80092c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	3b01      	subs	r3, #1
 80092c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80092ca:	697b      	ldr	r3, [r7, #20]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d018      	beq.n	8009318 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	441a      	add	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68da      	ldr	r2, [r3, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d303      	bcc.n	8009308 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68d9      	ldr	r1, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	461a      	mov	r2, r3
 8009312:	6838      	ldr	r0, [r7, #0]
 8009314:	f002 f9f9 	bl	800b70a <memcpy>
	}
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009328:	f001 fc90 	bl	800ac4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009332:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009334:	e011      	b.n	800935a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	2b00      	cmp	r3, #0
 800933c:	d012      	beq.n	8009364 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3324      	adds	r3, #36	; 0x24
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fd68 	bl	8009e18 <xTaskRemoveFromEventList>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800934e:	f000 fe45 	bl	8009fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	3b01      	subs	r3, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800935a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800935e:	2b00      	cmp	r3, #0
 8009360:	dce9      	bgt.n	8009336 <prvUnlockQueue+0x16>
 8009362:	e000      	b.n	8009366 <prvUnlockQueue+0x46>
					break;
 8009364:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	22ff      	movs	r2, #255	; 0xff
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800936e:	f001 fca1 	bl	800acb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009372:	f001 fc6b 	bl	800ac4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800937c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800937e:	e011      	b.n	80093a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d012      	beq.n	80093ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3310      	adds	r3, #16
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fd43 	bl	8009e18 <xTaskRemoveFromEventList>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009398:	f000 fe20 	bl	8009fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	3b01      	subs	r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dce9      	bgt.n	8009380 <prvUnlockQueue+0x60>
 80093ac:	e000      	b.n	80093b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80093b8:	f001 fc7c 	bl	800acb4 <vPortExitCritical>
}
 80093bc:	bf00      	nop
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093cc:	f001 fc3e 	bl	800ac4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e001      	b.n	80093e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80093de:	2300      	movs	r3, #0
 80093e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093e2:	f001 fc67 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 80093e6:	68fb      	ldr	r3, [r7, #12]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80093f8:	f001 fc28 	bl	800ac4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009404:	429a      	cmp	r2, r3
 8009406:	d102      	bne.n	800940e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	e001      	b.n	8009412 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009412:	f001 fc4f 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 8009416:	68fb      	ldr	r3, [r7, #12]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942a:	2300      	movs	r3, #0
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e014      	b.n	800945a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009430:	4a0f      	ldr	r2, [pc, #60]	; (8009470 <vQueueAddToRegistry+0x50>)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10b      	bne.n	8009454 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800943c:	490c      	ldr	r1, [pc, #48]	; (8009470 <vQueueAddToRegistry+0x50>)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009446:	4a0a      	ldr	r2, [pc, #40]	; (8009470 <vQueueAddToRegistry+0x50>)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	4413      	add	r3, r2
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009452:	e006      	b.n	8009462 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b07      	cmp	r3, #7
 800945e:	d9e7      	bls.n	8009430 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000eb0 	.word	0x20000eb0

08009474 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009484:	f001 fbe2 	bl	800ac4c <vPortEnterCritical>
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800948e:	b25b      	sxtb	r3, r3
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009494:	d103      	bne.n	800949e <vQueueWaitForMessageRestricted+0x2a>
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a4:	b25b      	sxtb	r3, r3
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094aa:	d103      	bne.n	80094b4 <vQueueWaitForMessageRestricted+0x40>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094b4:	f001 fbfe 	bl	800acb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d106      	bne.n	80094ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	3324      	adds	r3, #36	; 0x24
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fc77 	bl	8009dbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094ce:	6978      	ldr	r0, [r7, #20]
 80094d0:	f7ff ff26 	bl	8009320 <prvUnlockQueue>
	}
 80094d4:	bf00      	nop
 80094d6:	3718      	adds	r7, #24
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08e      	sub	sp, #56	; 0x38
 80094e0:	af04      	add	r7, sp, #16
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10c      	bne.n	800950a <xTaskCreateStatic+0x2e>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	b672      	cpsid	i
 80094f6:	f383 8811 	msr	BASEPRI, r3
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	f3bf 8f4f 	dsb	sy
 8009502:	b662      	cpsie	i
 8009504:	623b      	str	r3, [r7, #32]
}
 8009506:	bf00      	nop
 8009508:	e7fe      	b.n	8009508 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10c      	bne.n	800952a <xTaskCreateStatic+0x4e>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	b672      	cpsid	i
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	b662      	cpsie	i
 8009524:	61fb      	str	r3, [r7, #28]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800952a:	23a8      	movs	r3, #168	; 0xa8
 800952c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2ba8      	cmp	r3, #168	; 0xa8
 8009532:	d00c      	beq.n	800954e <xTaskCreateStatic+0x72>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	b672      	cpsid	i
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	b662      	cpsie	i
 8009548:	61bb      	str	r3, [r7, #24]
}
 800954a:	bf00      	nop
 800954c:	e7fe      	b.n	800954c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800954e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01e      	beq.n	8009594 <xTaskCreateStatic+0xb8>
 8009556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01b      	beq.n	8009594 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009564:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	2202      	movs	r2, #2
 800956a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800956e:	2300      	movs	r3, #0
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	f107 0314 	add.w	r3, r7, #20
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68b9      	ldr	r1, [r7, #8]
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 f850 	bl	800962c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800958c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800958e:	f000 f8f5 	bl	800977c <prvAddNewTaskToReadyList>
 8009592:	e001      	b.n	8009598 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009598:	697b      	ldr	r3, [r7, #20]
	}
 800959a:	4618      	mov	r0, r3
 800959c:	3728      	adds	r7, #40	; 0x28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b08c      	sub	sp, #48	; 0x30
 80095a6:	af04      	add	r7, sp, #16
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	603b      	str	r3, [r7, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fc74 	bl	800aea4 <pvPortMalloc>
 80095bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095c4:	20a8      	movs	r0, #168	; 0xa8
 80095c6:	f001 fc6d 	bl	800aea4 <pvPortMalloc>
 80095ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
 80095d8:	e005      	b.n	80095e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095da:	6978      	ldr	r0, [r7, #20]
 80095dc:	f001 fd2c 	bl	800b038 <vPortFree>
 80095e0:	e001      	b.n	80095e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d017      	beq.n	800961c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095f4:	88fa      	ldrh	r2, [r7, #6]
 80095f6:	2300      	movs	r3, #0
 80095f8:	9303      	str	r3, [sp, #12]
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	9302      	str	r3, [sp, #8]
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f80e 	bl	800962c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009610:	69f8      	ldr	r0, [r7, #28]
 8009612:	f000 f8b3 	bl	800977c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009616:	2301      	movs	r3, #1
 8009618:	61bb      	str	r3, [r7, #24]
 800961a:	e002      	b.n	8009622 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800961c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009620:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009622:	69bb      	ldr	r3, [r7, #24]
	}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	461a      	mov	r2, r3
 8009644:	21a5      	movs	r1, #165	; 0xa5
 8009646:	f001 ffc5 	bl	800b5d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009654:	440b      	add	r3, r1
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00c      	beq.n	8009688 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	b672      	cpsid	i
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	b662      	cpsie	i
 8009682:	617b      	str	r3, [r7, #20]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01f      	beq.n	80096ce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
 8009692:	e012      	b.n	80096ba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	7819      	ldrb	r1, [r3, #0]
 800969c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	4413      	add	r3, r2
 80096a2:	3334      	adds	r3, #52	; 0x34
 80096a4:	460a      	mov	r2, r1
 80096a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	3301      	adds	r3, #1
 80096b8:	61fb      	str	r3, [r7, #28]
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2b0f      	cmp	r3, #15
 80096be:	d9e9      	bls.n	8009694 <prvInitialiseNewTask+0x68>
 80096c0:	e000      	b.n	80096c4 <prvInitialiseNewTask+0x98>
			{
				break;
 80096c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	2200      	movs	r2, #0
 80096c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096cc:	e003      	b.n	80096d6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	2b37      	cmp	r3, #55	; 0x37
 80096da:	d901      	bls.n	80096e0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096dc:	2337      	movs	r3, #55	; 0x37
 80096de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	2200      	movs	r2, #0
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	3304      	adds	r3, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff f8de 	bl	80088b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	3318      	adds	r3, #24
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff f8d9 	bl	80088b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	3354      	adds	r3, #84	; 0x54
 8009730:	224c      	movs	r2, #76	; 0x4c
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f001 ff4d 	bl	800b5d4 <memset>
 800973a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973c:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <prvInitialiseNewTask+0x144>)
 800973e:	659a      	str	r2, [r3, #88]	; 0x58
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	4a0c      	ldr	r2, [pc, #48]	; (8009774 <prvInitialiseNewTask+0x148>)
 8009744:	65da      	str	r2, [r3, #92]	; 0x5c
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	4a0b      	ldr	r2, [pc, #44]	; (8009778 <prvInitialiseNewTask+0x14c>)
 800974a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	68f9      	ldr	r1, [r7, #12]
 8009750:	69b8      	ldr	r0, [r7, #24]
 8009752:	f001 f96b 	bl	800aa2c <pxPortInitialiseStack>
 8009756:	4602      	mov	r2, r0
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009766:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009768:	bf00      	nop
 800976a:	3720      	adds	r7, #32
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20005144 	.word	0x20005144
 8009774:	200051ac 	.word	0x200051ac
 8009778:	20005214 	.word	0x20005214

0800977c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009784:	f001 fa62 	bl	800ac4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009788:	4b2d      	ldr	r3, [pc, #180]	; (8009840 <prvAddNewTaskToReadyList+0xc4>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	4a2c      	ldr	r2, [pc, #176]	; (8009840 <prvAddNewTaskToReadyList+0xc4>)
 8009790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009792:	4b2c      	ldr	r3, [pc, #176]	; (8009844 <prvAddNewTaskToReadyList+0xc8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800979a:	4a2a      	ldr	r2, [pc, #168]	; (8009844 <prvAddNewTaskToReadyList+0xc8>)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097a0:	4b27      	ldr	r3, [pc, #156]	; (8009840 <prvAddNewTaskToReadyList+0xc4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d110      	bne.n	80097ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097a8:	f000 fc3c 	bl	800a024 <prvInitialiseTaskLists>
 80097ac:	e00d      	b.n	80097ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097ae:	4b26      	ldr	r3, [pc, #152]	; (8009848 <prvAddNewTaskToReadyList+0xcc>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097b6:	4b23      	ldr	r3, [pc, #140]	; (8009844 <prvAddNewTaskToReadyList+0xc8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d802      	bhi.n	80097ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097c4:	4a1f      	ldr	r2, [pc, #124]	; (8009844 <prvAddNewTaskToReadyList+0xc8>)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097ca:	4b20      	ldr	r3, [pc, #128]	; (800984c <prvAddNewTaskToReadyList+0xd0>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3301      	adds	r3, #1
 80097d0:	4a1e      	ldr	r2, [pc, #120]	; (800984c <prvAddNewTaskToReadyList+0xd0>)
 80097d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097d4:	4b1d      	ldr	r3, [pc, #116]	; (800984c <prvAddNewTaskToReadyList+0xd0>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e0:	4b1b      	ldr	r3, [pc, #108]	; (8009850 <prvAddNewTaskToReadyList+0xd4>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d903      	bls.n	80097f0 <prvAddNewTaskToReadyList+0x74>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	4a18      	ldr	r2, [pc, #96]	; (8009850 <prvAddNewTaskToReadyList+0xd4>)
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f4:	4613      	mov	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4a15      	ldr	r2, [pc, #84]	; (8009854 <prvAddNewTaskToReadyList+0xd8>)
 80097fe:	441a      	add	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f7ff f863 	bl	80088d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800980c:	f001 fa52 	bl	800acb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009810:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <prvAddNewTaskToReadyList+0xcc>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00e      	beq.n	8009836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <prvAddNewTaskToReadyList+0xc8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009822:	429a      	cmp	r2, r3
 8009824:	d207      	bcs.n	8009836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <prvAddNewTaskToReadyList+0xdc>)
 8009828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200013c4 	.word	0x200013c4
 8009844:	20000ef0 	.word	0x20000ef0
 8009848:	200013d0 	.word	0x200013d0
 800984c:	200013e0 	.word	0x200013e0
 8009850:	200013cc 	.word	0x200013cc
 8009854:	20000ef4 	.word	0x20000ef4
 8009858:	e000ed04 	.word	0xe000ed04

0800985c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d019      	beq.n	80098a2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800986e:	4b14      	ldr	r3, [pc, #80]	; (80098c0 <vTaskDelay+0x64>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00c      	beq.n	8009890 <vTaskDelay+0x34>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	b672      	cpsid	i
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	b662      	cpsie	i
 800988a:	60bb      	str	r3, [r7, #8]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009890:	f000 f88e 	bl	80099b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009894:	2100      	movs	r1, #0
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fd18 	bl	800a2cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800989c:	f000 f896 	bl	80099cc <xTaskResumeAll>
 80098a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d107      	bne.n	80098b8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <vTaskDelay+0x68>)
 80098aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098b8:	bf00      	nop
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200013ec 	.word	0x200013ec
 80098c4:	e000ed04 	.word	0xe000ed04

080098c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b08a      	sub	sp, #40	; 0x28
 80098cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098d6:	463a      	mov	r2, r7
 80098d8:	1d39      	adds	r1, r7, #4
 80098da:	f107 0308 	add.w	r3, r7, #8
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fe ff96 	bl	8008810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	9202      	str	r2, [sp, #8]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	2300      	movs	r3, #0
 80098f4:	460a      	mov	r2, r1
 80098f6:	4926      	ldr	r1, [pc, #152]	; (8009990 <vTaskStartScheduler+0xc8>)
 80098f8:	4826      	ldr	r0, [pc, #152]	; (8009994 <vTaskStartScheduler+0xcc>)
 80098fa:	f7ff fdef 	bl	80094dc <xTaskCreateStatic>
 80098fe:	4603      	mov	r3, r0
 8009900:	4a25      	ldr	r2, [pc, #148]	; (8009998 <vTaskStartScheduler+0xd0>)
 8009902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <vTaskStartScheduler+0xd0>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	e001      	b.n	8009916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d102      	bne.n	8009922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800991c:	f000 fd2a 	bl	800a374 <xTimerCreateTimerTask>
 8009920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d11d      	bne.n	8009964 <vTaskStartScheduler+0x9c>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	b672      	cpsid	i
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	b662      	cpsie	i
 800993c:	613b      	str	r3, [r7, #16]
}
 800993e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009940:	4b16      	ldr	r3, [pc, #88]	; (800999c <vTaskStartScheduler+0xd4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3354      	adds	r3, #84	; 0x54
 8009946:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <vTaskStartScheduler+0xd8>)
 8009948:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <vTaskStartScheduler+0xdc>)
 800994c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009950:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <vTaskStartScheduler+0xe0>)
 8009954:	2201      	movs	r2, #1
 8009956:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009958:	4b14      	ldr	r3, [pc, #80]	; (80099ac <vTaskStartScheduler+0xe4>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800995e:	f001 f8f7 	bl	800ab50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009962:	e010      	b.n	8009986 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800996a:	d10c      	bne.n	8009986 <vTaskStartScheduler+0xbe>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <vTaskStartScheduler+0xbc>
}
 8009986:	bf00      	nop
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	0800c3a8 	.word	0x0800c3a8
 8009994:	08009ff5 	.word	0x08009ff5
 8009998:	200013e8 	.word	0x200013e8
 800999c:	20000ef0 	.word	0x20000ef0
 80099a0:	20000088 	.word	0x20000088
 80099a4:	200013e4 	.word	0x200013e4
 80099a8:	200013d0 	.word	0x200013d0
 80099ac:	200013c8 	.word	0x200013c8

080099b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80099b4:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <vTaskSuspendAll+0x18>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	4a03      	ldr	r2, [pc, #12]	; (80099c8 <vTaskSuspendAll+0x18>)
 80099bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80099be:	bf00      	nop
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr
 80099c8:	200013ec 	.word	0x200013ec

080099cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099da:	4b43      	ldr	r3, [pc, #268]	; (8009ae8 <xTaskResumeAll+0x11c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10c      	bne.n	80099fc <xTaskResumeAll+0x30>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	b672      	cpsid	i
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	b662      	cpsie	i
 80099f6:	603b      	str	r3, [r7, #0]
}
 80099f8:	bf00      	nop
 80099fa:	e7fe      	b.n	80099fa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099fc:	f001 f926 	bl	800ac4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a00:	4b39      	ldr	r3, [pc, #228]	; (8009ae8 <xTaskResumeAll+0x11c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	4a38      	ldr	r2, [pc, #224]	; (8009ae8 <xTaskResumeAll+0x11c>)
 8009a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a0a:	4b37      	ldr	r3, [pc, #220]	; (8009ae8 <xTaskResumeAll+0x11c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d162      	bne.n	8009ad8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a12:	4b36      	ldr	r3, [pc, #216]	; (8009aec <xTaskResumeAll+0x120>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d05e      	beq.n	8009ad8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a1a:	e02f      	b.n	8009a7c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1c:	4b34      	ldr	r3, [pc, #208]	; (8009af0 <xTaskResumeAll+0x124>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3318      	adds	r3, #24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe ffaf 	bl	800898c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fe ffaa 	bl	800898c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3c:	4b2d      	ldr	r3, [pc, #180]	; (8009af4 <xTaskResumeAll+0x128>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d903      	bls.n	8009a4c <xTaskResumeAll+0x80>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a48:	4a2a      	ldr	r2, [pc, #168]	; (8009af4 <xTaskResumeAll+0x128>)
 8009a4a:	6013      	str	r3, [r2, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4a27      	ldr	r2, [pc, #156]	; (8009af8 <xTaskResumeAll+0x12c>)
 8009a5a:	441a      	add	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f7fe ff35 	bl	80088d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a6c:	4b23      	ldr	r3, [pc, #140]	; (8009afc <xTaskResumeAll+0x130>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d302      	bcc.n	8009a7c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009a76:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <xTaskResumeAll+0x134>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a7c:	4b1c      	ldr	r3, [pc, #112]	; (8009af0 <xTaskResumeAll+0x124>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1cb      	bne.n	8009a1c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a8a:	f000 fb6f 	bl	800a16c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a8e:	4b1d      	ldr	r3, [pc, #116]	; (8009b04 <xTaskResumeAll+0x138>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d010      	beq.n	8009abc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a9a:	f000 f847 	bl	8009b2c <xTaskIncrementTick>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009aa4:	4b16      	ldr	r3, [pc, #88]	; (8009b00 <xTaskResumeAll+0x134>)
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1f1      	bne.n	8009a9a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <xTaskResumeAll+0x138>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009abc:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <xTaskResumeAll+0x134>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d009      	beq.n	8009ad8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ac8:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <xTaskResumeAll+0x13c>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 f8ec 	bl	800acb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009adc:	68bb      	ldr	r3, [r7, #8]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200013ec 	.word	0x200013ec
 8009aec:	200013c4 	.word	0x200013c4
 8009af0:	20001384 	.word	0x20001384
 8009af4:	200013cc 	.word	0x200013cc
 8009af8:	20000ef4 	.word	0x20000ef4
 8009afc:	20000ef0 	.word	0x20000ef0
 8009b00:	200013d8 	.word	0x200013d8
 8009b04:	200013d4 	.word	0x200013d4
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b12:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <xTaskGetTickCount+0x1c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b18:	687b      	ldr	r3, [r7, #4]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	200013c8 	.word	0x200013c8

08009b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b36:	4b50      	ldr	r3, [pc, #320]	; (8009c78 <xTaskIncrementTick+0x14c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f040 808b 	bne.w	8009c56 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b40:	4b4e      	ldr	r3, [pc, #312]	; (8009c7c <xTaskIncrementTick+0x150>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3301      	adds	r3, #1
 8009b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b48:	4a4c      	ldr	r2, [pc, #304]	; (8009c7c <xTaskIncrementTick+0x150>)
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d122      	bne.n	8009b9a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b54:	4b4a      	ldr	r3, [pc, #296]	; (8009c80 <xTaskIncrementTick+0x154>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00c      	beq.n	8009b78 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	b672      	cpsid	i
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	b662      	cpsie	i
 8009b72:	603b      	str	r3, [r7, #0]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <xTaskIncrementTick+0x4a>
 8009b78:	4b41      	ldr	r3, [pc, #260]	; (8009c80 <xTaskIncrementTick+0x154>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	4b41      	ldr	r3, [pc, #260]	; (8009c84 <xTaskIncrementTick+0x158>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a3f      	ldr	r2, [pc, #252]	; (8009c80 <xTaskIncrementTick+0x154>)
 8009b84:	6013      	str	r3, [r2, #0]
 8009b86:	4a3f      	ldr	r2, [pc, #252]	; (8009c84 <xTaskIncrementTick+0x158>)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	4b3e      	ldr	r3, [pc, #248]	; (8009c88 <xTaskIncrementTick+0x15c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	4a3d      	ldr	r2, [pc, #244]	; (8009c88 <xTaskIncrementTick+0x15c>)
 8009b94:	6013      	str	r3, [r2, #0]
 8009b96:	f000 fae9 	bl	800a16c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b9a:	4b3c      	ldr	r3, [pc, #240]	; (8009c8c <xTaskIncrementTick+0x160>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d349      	bcc.n	8009c38 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ba4:	4b36      	ldr	r3, [pc, #216]	; (8009c80 <xTaskIncrementTick+0x154>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d104      	bne.n	8009bb8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bae:	4b37      	ldr	r3, [pc, #220]	; (8009c8c <xTaskIncrementTick+0x160>)
 8009bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bb4:	601a      	str	r2, [r3, #0]
					break;
 8009bb6:	e03f      	b.n	8009c38 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb8:	4b31      	ldr	r3, [pc, #196]	; (8009c80 <xTaskIncrementTick+0x154>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d203      	bcs.n	8009bd8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bd0:	4a2e      	ldr	r2, [pc, #184]	; (8009c8c <xTaskIncrementTick+0x160>)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bd6:	e02f      	b.n	8009c38 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	3304      	adds	r3, #4
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fe fed5 	bl	800898c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	3318      	adds	r3, #24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fecc 	bl	800898c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	4b25      	ldr	r3, [pc, #148]	; (8009c90 <xTaskIncrementTick+0x164>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d903      	bls.n	8009c08 <xTaskIncrementTick+0xdc>
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a22      	ldr	r2, [pc, #136]	; (8009c90 <xTaskIncrementTick+0x164>)
 8009c06:	6013      	str	r3, [r2, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <xTaskIncrementTick+0x168>)
 8009c16:	441a      	add	r2, r3
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f7fe fe57 	bl	80088d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c28:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <xTaskIncrementTick+0x16c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d3b8      	bcc.n	8009ba4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009c32:	2301      	movs	r3, #1
 8009c34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c36:	e7b5      	b.n	8009ba4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c38:	4b17      	ldr	r3, [pc, #92]	; (8009c98 <xTaskIncrementTick+0x16c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3e:	4915      	ldr	r1, [pc, #84]	; (8009c94 <xTaskIncrementTick+0x168>)
 8009c40:	4613      	mov	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d907      	bls.n	8009c60 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009c50:	2301      	movs	r3, #1
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	e004      	b.n	8009c60 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c56:	4b11      	ldr	r3, [pc, #68]	; (8009c9c <xTaskIncrementTick+0x170>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	4a0f      	ldr	r2, [pc, #60]	; (8009c9c <xTaskIncrementTick+0x170>)
 8009c5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c60:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <xTaskIncrementTick+0x174>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c6c:	697b      	ldr	r3, [r7, #20]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200013ec 	.word	0x200013ec
 8009c7c:	200013c8 	.word	0x200013c8
 8009c80:	2000137c 	.word	0x2000137c
 8009c84:	20001380 	.word	0x20001380
 8009c88:	200013dc 	.word	0x200013dc
 8009c8c:	200013e4 	.word	0x200013e4
 8009c90:	200013cc 	.word	0x200013cc
 8009c94:	20000ef4 	.word	0x20000ef4
 8009c98:	20000ef0 	.word	0x20000ef0
 8009c9c:	200013d4 	.word	0x200013d4
 8009ca0:	200013d8 	.word	0x200013d8

08009ca4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009caa:	4b2b      	ldr	r3, [pc, #172]	; (8009d58 <vTaskSwitchContext+0xb4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cb2:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <vTaskSwitchContext+0xb8>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cb8:	e048      	b.n	8009d4c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009cba:	4b28      	ldr	r3, [pc, #160]	; (8009d5c <vTaskSwitchContext+0xb8>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc0:	4b27      	ldr	r3, [pc, #156]	; (8009d60 <vTaskSwitchContext+0xbc>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e012      	b.n	8009cee <vTaskSwitchContext+0x4a>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10c      	bne.n	8009ce8 <vTaskSwitchContext+0x44>
	__asm volatile
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	b672      	cpsid	i
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	b662      	cpsie	i
 8009ce2:	607b      	str	r3, [r7, #4]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <vTaskSwitchContext+0x42>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	491d      	ldr	r1, [pc, #116]	; (8009d64 <vTaskSwitchContext+0xc0>)
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	440b      	add	r3, r1
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0e2      	beq.n	8009cc8 <vTaskSwitchContext+0x24>
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4a15      	ldr	r2, [pc, #84]	; (8009d64 <vTaskSwitchContext+0xc0>)
 8009d0e:	4413      	add	r3, r2
 8009d10:	60bb      	str	r3, [r7, #8]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	605a      	str	r2, [r3, #4]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3308      	adds	r3, #8
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d104      	bne.n	8009d32 <vTaskSwitchContext+0x8e>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	4a0b      	ldr	r2, [pc, #44]	; (8009d68 <vTaskSwitchContext+0xc4>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4a08      	ldr	r2, [pc, #32]	; (8009d60 <vTaskSwitchContext+0xbc>)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <vTaskSwitchContext+0xc4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3354      	adds	r3, #84	; 0x54
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <vTaskSwitchContext+0xc8>)
 8009d4a:	6013      	str	r3, [r2, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	200013ec 	.word	0x200013ec
 8009d5c:	200013d8 	.word	0x200013d8
 8009d60:	200013cc 	.word	0x200013cc
 8009d64:	20000ef4 	.word	0x20000ef4
 8009d68:	20000ef0 	.word	0x20000ef0
 8009d6c:	20000088 	.word	0x20000088

08009d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	60fb      	str	r3, [r7, #12]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d9a:	4b07      	ldr	r3, [pc, #28]	; (8009db8 <vTaskPlaceOnEventList+0x48>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3318      	adds	r3, #24
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7fe fdb9 	bl	800891a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009da8:	2101      	movs	r1, #1
 8009daa:	6838      	ldr	r0, [r7, #0]
 8009dac:	f000 fa8e 	bl	800a2cc <prvAddCurrentTaskToDelayedList>
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000ef0 	.word	0x20000ef0

08009dbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10c      	bne.n	8009de8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	b672      	cpsid	i
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	b662      	cpsie	i
 8009de2:	617b      	str	r3, [r7, #20]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009de8:	4b0a      	ldr	r3, [pc, #40]	; (8009e14 <vTaskPlaceOnEventListRestricted+0x58>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3318      	adds	r3, #24
 8009dee:	4619      	mov	r1, r3
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7fe fd6e 	bl	80088d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f000 fa61 	bl	800a2cc <prvAddCurrentTaskToDelayedList>
	}
 8009e0a:	bf00      	nop
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000ef0 	.word	0x20000ef0

08009e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b086      	sub	sp, #24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10c      	bne.n	8009e48 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	b672      	cpsid	i
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	b662      	cpsie	i
 8009e42:	60fb      	str	r3, [r7, #12]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3318      	adds	r3, #24
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe fd9d 	bl	800898c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e52:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <xTaskRemoveFromEventList+0xb4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d11d      	bne.n	8009e96 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fd94 	bl	800898c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e68:	4b19      	ldr	r3, [pc, #100]	; (8009ed0 <xTaskRemoveFromEventList+0xb8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d903      	bls.n	8009e78 <xTaskRemoveFromEventList+0x60>
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <xTaskRemoveFromEventList+0xb8>)
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4a13      	ldr	r2, [pc, #76]	; (8009ed4 <xTaskRemoveFromEventList+0xbc>)
 8009e86:	441a      	add	r2, r3
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7fe fd1f 	bl	80088d2 <vListInsertEnd>
 8009e94:	e005      	b.n	8009ea2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3318      	adds	r3, #24
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	480e      	ldr	r0, [pc, #56]	; (8009ed8 <xTaskRemoveFromEventList+0xc0>)
 8009e9e:	f7fe fd18 	bl	80088d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <xTaskRemoveFromEventList+0xc4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d905      	bls.n	8009ebc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <xTaskRemoveFromEventList+0xc8>)
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e001      	b.n	8009ec0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ec0:	697b      	ldr	r3, [r7, #20]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200013ec 	.word	0x200013ec
 8009ed0:	200013cc 	.word	0x200013cc
 8009ed4:	20000ef4 	.word	0x20000ef4
 8009ed8:	20001384 	.word	0x20001384
 8009edc:	20000ef0 	.word	0x20000ef0
 8009ee0:	200013d8 	.word	0x200013d8

08009ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <vTaskInternalSetTimeOutState+0x24>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <vTaskInternalSetTimeOutState+0x28>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	605a      	str	r2, [r3, #4]
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	200013dc 	.word	0x200013dc
 8009f0c:	200013c8 	.word	0x200013c8

08009f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10c      	bne.n	8009f3a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	b672      	cpsid	i
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	b662      	cpsie	i
 8009f34:	613b      	str	r3, [r7, #16]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10c      	bne.n	8009f5a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	b672      	cpsid	i
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	b662      	cpsie	i
 8009f54:	60fb      	str	r3, [r7, #12]
}
 8009f56:	bf00      	nop
 8009f58:	e7fe      	b.n	8009f58 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009f5a:	f000 fe77 	bl	800ac4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f5e:	4b1d      	ldr	r3, [pc, #116]	; (8009fd4 <xTaskCheckForTimeOut+0xc4>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f76:	d102      	bne.n	8009f7e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	e023      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <xTaskCheckForTimeOut+0xc8>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d007      	beq.n	8009f9a <xTaskCheckForTimeOut+0x8a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	61fb      	str	r3, [r7, #28]
 8009f98:	e015      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d20b      	bcs.n	8009fbc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1ad2      	subs	r2, r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff97 	bl	8009ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e004      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fc6:	f000 fe75 	bl	800acb4 <vPortExitCritical>

	return xReturn;
 8009fca:	69fb      	ldr	r3, [r7, #28]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	200013c8 	.word	0x200013c8
 8009fd8:	200013dc 	.word	0x200013dc

08009fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <vTaskMissedYield+0x14>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	200013d8 	.word	0x200013d8

08009ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ffc:	f000 f852 	bl	800a0a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <prvIdleTask+0x28>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d9f9      	bls.n	8009ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a008:	4b05      	ldr	r3, [pc, #20]	; (800a020 <prvIdleTask+0x2c>)
 800a00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a018:	e7f0      	b.n	8009ffc <prvIdleTask+0x8>
 800a01a:	bf00      	nop
 800a01c:	20000ef4 	.word	0x20000ef4
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	e00c      	b.n	800a04a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a12      	ldr	r2, [pc, #72]	; (800a084 <prvInitialiseTaskLists+0x60>)
 800a03c:	4413      	add	r3, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fc1a 	bl	8008878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3301      	adds	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b37      	cmp	r3, #55	; 0x37
 800a04e:	d9ef      	bls.n	800a030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a050:	480d      	ldr	r0, [pc, #52]	; (800a088 <prvInitialiseTaskLists+0x64>)
 800a052:	f7fe fc11 	bl	8008878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a056:	480d      	ldr	r0, [pc, #52]	; (800a08c <prvInitialiseTaskLists+0x68>)
 800a058:	f7fe fc0e 	bl	8008878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a05c:	480c      	ldr	r0, [pc, #48]	; (800a090 <prvInitialiseTaskLists+0x6c>)
 800a05e:	f7fe fc0b 	bl	8008878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a062:	480c      	ldr	r0, [pc, #48]	; (800a094 <prvInitialiseTaskLists+0x70>)
 800a064:	f7fe fc08 	bl	8008878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a068:	480b      	ldr	r0, [pc, #44]	; (800a098 <prvInitialiseTaskLists+0x74>)
 800a06a:	f7fe fc05 	bl	8008878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a06e:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <prvInitialiseTaskLists+0x78>)
 800a070:	4a05      	ldr	r2, [pc, #20]	; (800a088 <prvInitialiseTaskLists+0x64>)
 800a072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <prvInitialiseTaskLists+0x7c>)
 800a076:	4a05      	ldr	r2, [pc, #20]	; (800a08c <prvInitialiseTaskLists+0x68>)
 800a078:	601a      	str	r2, [r3, #0]
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000ef4 	.word	0x20000ef4
 800a088:	20001354 	.word	0x20001354
 800a08c:	20001368 	.word	0x20001368
 800a090:	20001384 	.word	0x20001384
 800a094:	20001398 	.word	0x20001398
 800a098:	200013b0 	.word	0x200013b0
 800a09c:	2000137c 	.word	0x2000137c
 800a0a0:	20001380 	.word	0x20001380

0800a0a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0aa:	e019      	b.n	800a0e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0ac:	f000 fdce 	bl	800ac4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <prvCheckTasksWaitingTermination+0x50>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe fc65 	bl	800898c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	; (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4a0b      	ldr	r2, [pc, #44]	; (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0d6:	f000 fded 	bl	800acb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f810 	bl	800a100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e1      	bne.n	800a0ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20001398 	.word	0x20001398
 800a0f8:	200013c4 	.word	0x200013c4
 800a0fc:	200013ac 	.word	0x200013ac

0800a100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3354      	adds	r3, #84	; 0x54
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 fa69 	bl	800b5e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d108      	bne.n	800a12e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a120:	4618      	mov	r0, r3
 800a122:	f000 ff89 	bl	800b038 <vPortFree>
				vPortFree( pxTCB );
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 ff86 	bl	800b038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a12c:	e01a      	b.n	800a164 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a134:	2b01      	cmp	r3, #1
 800a136:	d103      	bne.n	800a140 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 ff7d 	bl	800b038 <vPortFree>
	}
 800a13e:	e011      	b.n	800a164 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a146:	2b02      	cmp	r3, #2
 800a148:	d00c      	beq.n	800a164 <prvDeleteTCB+0x64>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	60fb      	str	r3, [r7, #12]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <prvDeleteTCB+0x62>
	}
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a172:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a184:	e008      	b.n	800a198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a186:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	4a04      	ldr	r2, [pc, #16]	; (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	2000137c 	.word	0x2000137c
 800a1a8:	200013e4 	.word	0x200013e4

0800a1ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <xTaskGetSchedulerState+0x34>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	607b      	str	r3, [r7, #4]
 800a1be:	e008      	b.n	800a1d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1c0:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <xTaskGetSchedulerState+0x38>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d102      	bne.n	800a1ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	607b      	str	r3, [r7, #4]
 800a1cc:	e001      	b.n	800a1d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1d2:	687b      	ldr	r3, [r7, #4]
	}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	200013d0 	.word	0x200013d0
 800a1e4:	200013ec 	.word	0x200013ec

0800a1e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d05a      	beq.n	800a2b4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a1fe:	4b30      	ldr	r3, [pc, #192]	; (800a2c0 <xTaskPriorityDisinherit+0xd8>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	429a      	cmp	r2, r3
 800a206:	d00c      	beq.n	800a222 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	b672      	cpsid	i
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	b662      	cpsie	i
 800a21c:	60fb      	str	r3, [r7, #12]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10c      	bne.n	800a244 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22e:	b672      	cpsid	i
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	b662      	cpsie	i
 800a23e:	60bb      	str	r3, [r7, #8]
}
 800a240:	bf00      	nop
 800a242:	e7fe      	b.n	800a242 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a248:	1e5a      	subs	r2, r3, #1
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	429a      	cmp	r2, r3
 800a258:	d02c      	beq.n	800a2b4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d128      	bne.n	800a2b4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3304      	adds	r3, #4
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe fb90 	bl	800898c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	4b0f      	ldr	r3, [pc, #60]	; (800a2c4 <xTaskPriorityDisinherit+0xdc>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d903      	bls.n	800a294 <xTaskPriorityDisinherit+0xac>
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	4a0c      	ldr	r2, [pc, #48]	; (800a2c4 <xTaskPriorityDisinherit+0xdc>)
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <xTaskPriorityDisinherit+0xe0>)
 800a2a2:	441a      	add	r2, r3
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f7fe fb11 	bl	80088d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2b4:	697b      	ldr	r3, [r7, #20]
	}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20000ef0 	.word	0x20000ef0
 800a2c4:	200013cc 	.word	0x200013cc
 800a2c8:	20000ef4 	.word	0x20000ef4

0800a2cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2d6:	4b21      	ldr	r3, [pc, #132]	; (800a35c <prvAddCurrentTaskToDelayedList+0x90>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2dc:	4b20      	ldr	r3, [pc, #128]	; (800a360 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe fb52 	bl	800898c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2ee:	d10a      	bne.n	800a306 <prvAddCurrentTaskToDelayedList+0x3a>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f6:	4b1a      	ldr	r3, [pc, #104]	; (800a360 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4819      	ldr	r0, [pc, #100]	; (800a364 <prvAddCurrentTaskToDelayedList+0x98>)
 800a300:	f7fe fae7 	bl	80088d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a304:	e026      	b.n	800a354 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4413      	add	r3, r2
 800a30c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a30e:	4b14      	ldr	r3, [pc, #80]	; (800a360 <prvAddCurrentTaskToDelayedList+0x94>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d209      	bcs.n	800a332 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b0f      	ldr	r3, [pc, #60]	; (800a360 <prvAddCurrentTaskToDelayedList+0x94>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3304      	adds	r3, #4
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f7fe faf5 	bl	800891a <vListInsert>
}
 800a330:	e010      	b.n	800a354 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a332:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <prvAddCurrentTaskToDelayedList+0x94>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7fe faeb 	bl	800891a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a344:	4b0a      	ldr	r3, [pc, #40]	; (800a370 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d202      	bcs.n	800a354 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a34e:	4a08      	ldr	r2, [pc, #32]	; (800a370 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	6013      	str	r3, [r2, #0]
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	200013c8 	.word	0x200013c8
 800a360:	20000ef0 	.word	0x20000ef0
 800a364:	200013b0 	.word	0x200013b0
 800a368:	20001380 	.word	0x20001380
 800a36c:	2000137c 	.word	0x2000137c
 800a370:	200013e4 	.word	0x200013e4

0800a374 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08a      	sub	sp, #40	; 0x28
 800a378:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a37e:	f000 fb15 	bl	800a9ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a382:	4b1d      	ldr	r3, [pc, #116]	; (800a3f8 <xTimerCreateTimerTask+0x84>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d021      	beq.n	800a3ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a392:	1d3a      	adds	r2, r7, #4
 800a394:	f107 0108 	add.w	r1, r7, #8
 800a398:	f107 030c 	add.w	r3, r7, #12
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fe fa51 	bl	8008844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	9202      	str	r2, [sp, #8]
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	460a      	mov	r2, r1
 800a3b4:	4911      	ldr	r1, [pc, #68]	; (800a3fc <xTimerCreateTimerTask+0x88>)
 800a3b6:	4812      	ldr	r0, [pc, #72]	; (800a400 <xTimerCreateTimerTask+0x8c>)
 800a3b8:	f7ff f890 	bl	80094dc <xTaskCreateStatic>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	4a11      	ldr	r2, [pc, #68]	; (800a404 <xTimerCreateTimerTask+0x90>)
 800a3c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a3c2:	4b10      	ldr	r3, [pc, #64]	; (800a404 <xTimerCreateTimerTask+0x90>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10c      	bne.n	800a3ee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	b672      	cpsid	i
 800a3da:	f383 8811 	msr	BASEPRI, r3
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	f3bf 8f4f 	dsb	sy
 800a3e6:	b662      	cpsie	i
 800a3e8:	613b      	str	r3, [r7, #16]
}
 800a3ea:	bf00      	nop
 800a3ec:	e7fe      	b.n	800a3ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a3ee:	697b      	ldr	r3, [r7, #20]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20001420 	.word	0x20001420
 800a3fc:	0800c3b0 	.word	0x0800c3b0
 800a400:	0800a545 	.word	0x0800a545
 800a404:	20001424 	.word	0x20001424

0800a408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08a      	sub	sp, #40	; 0x28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10c      	bne.n	800a43a <xTimerGenericCommand+0x32>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	b672      	cpsid	i
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	b662      	cpsie	i
 800a434:	623b      	str	r3, [r7, #32]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a43a:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <xTimerGenericCommand+0x9c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d02a      	beq.n	800a498 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b05      	cmp	r3, #5
 800a452:	dc18      	bgt.n	800a486 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a454:	f7ff feaa 	bl	800a1ac <xTaskGetSchedulerState>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d109      	bne.n	800a472 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <xTimerGenericCommand+0x9c>)
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f107 0110 	add.w	r1, r7, #16
 800a466:	2300      	movs	r3, #0
 800a468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46a:	f7fe fc3d 	bl	8008ce8 <xQueueGenericSend>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24
 800a470:	e012      	b.n	800a498 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a472:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <xTimerGenericCommand+0x9c>)
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	f107 0110 	add.w	r1, r7, #16
 800a47a:	2300      	movs	r3, #0
 800a47c:	2200      	movs	r2, #0
 800a47e:	f7fe fc33 	bl	8008ce8 <xQueueGenericSend>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24
 800a484:	e008      	b.n	800a498 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a486:	4b07      	ldr	r3, [pc, #28]	; (800a4a4 <xTimerGenericCommand+0x9c>)
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	f107 0110 	add.w	r1, r7, #16
 800a48e:	2300      	movs	r3, #0
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	f7fe fd2f 	bl	8008ef4 <xQueueGenericSendFromISR>
 800a496:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3728      	adds	r7, #40	; 0x28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20001420 	.word	0x20001420

0800a4a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af02      	add	r7, sp, #8
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b2:	4b23      	ldr	r3, [pc, #140]	; (800a540 <prvProcessExpiredTimer+0x98>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fe fa63 	bl	800898c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d024      	beq.n	800a51e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	699a      	ldr	r2, [r3, #24]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	18d1      	adds	r1, r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	6978      	ldr	r0, [r7, #20]
 800a4e2:	f000 f8d3 	bl	800a68c <prvInsertTimerInActiveList>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d021      	beq.n	800a530 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	6978      	ldr	r0, [r7, #20]
 800a4f8:	f7ff ff86 	bl	800a408 <xTimerGenericCommand>
 800a4fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d115      	bne.n	800a530 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	b672      	cpsid	i
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	b662      	cpsie	i
 800a518:	60fb      	str	r3, [r7, #12]
}
 800a51a:	bf00      	nop
 800a51c:	e7fe      	b.n	800a51c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	6978      	ldr	r0, [r7, #20]
 800a536:	4798      	blx	r3
}
 800a538:	bf00      	nop
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20001418 	.word	0x20001418

0800a544 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a54c:	f107 0308 	add.w	r3, r7, #8
 800a550:	4618      	mov	r0, r3
 800a552:	f000 f857 	bl	800a604 <prvGetNextExpireTime>
 800a556:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4619      	mov	r1, r3
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 f803 	bl	800a568 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a562:	f000 f8d5 	bl	800a710 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a566:	e7f1      	b.n	800a54c <prvTimerTask+0x8>

0800a568 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a572:	f7ff fa1d 	bl	80099b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a576:	f107 0308 	add.w	r3, r7, #8
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f866 	bl	800a64c <prvSampleTimeNow>
 800a580:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d130      	bne.n	800a5ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <prvProcessTimerOrBlockTask+0x3c>
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	429a      	cmp	r2, r3
 800a594:	d806      	bhi.n	800a5a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a596:	f7ff fa19 	bl	80099cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a59a:	68f9      	ldr	r1, [r7, #12]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f7ff ff83 	bl	800a4a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5a2:	e024      	b.n	800a5ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d008      	beq.n	800a5bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5aa:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <prvProcessTimerOrBlockTask+0x90>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d101      	bne.n	800a5b8 <prvProcessTimerOrBlockTask+0x50>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e000      	b.n	800a5ba <prvProcessTimerOrBlockTask+0x52>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <prvProcessTimerOrBlockTask+0x94>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	1ad3      	subs	r3, r2, r3
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	f7fe ff53 	bl	8009474 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a5ce:	f7ff f9fd 	bl	80099cc <xTaskResumeAll>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a5d8:	4b09      	ldr	r3, [pc, #36]	; (800a600 <prvProcessTimerOrBlockTask+0x98>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
}
 800a5e8:	e001      	b.n	800a5ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a5ea:	f7ff f9ef 	bl	80099cc <xTaskResumeAll>
}
 800a5ee:	bf00      	nop
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	2000141c 	.word	0x2000141c
 800a5fc:	20001420 	.word	0x20001420
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <prvGetNextExpireTime+0x44>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <prvGetNextExpireTime+0x16>
 800a616:	2201      	movs	r2, #1
 800a618:	e000      	b.n	800a61c <prvGetNextExpireTime+0x18>
 800a61a:	2200      	movs	r2, #0
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d105      	bne.n	800a634 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a628:	4b07      	ldr	r3, [pc, #28]	; (800a648 <prvGetNextExpireTime+0x44>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e001      	b.n	800a638 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20001418 	.word	0x20001418

0800a64c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a654:	f7ff fa5a 	bl	8009b0c <xTaskGetTickCount>
 800a658:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a65a:	4b0b      	ldr	r3, [pc, #44]	; (800a688 <prvSampleTimeNow+0x3c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	429a      	cmp	r2, r3
 800a662:	d205      	bcs.n	800a670 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a664:	f000 f93c 	bl	800a8e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	601a      	str	r2, [r3, #0]
 800a66e:	e002      	b.n	800a676 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a676:	4a04      	ldr	r2, [pc, #16]	; (800a688 <prvSampleTimeNow+0x3c>)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20001428 	.word	0x20001428

0800a68c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d812      	bhi.n	800a6d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	1ad2      	subs	r2, r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d302      	bcc.n	800a6c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	e01b      	b.n	800a6fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a6c6:	4b10      	ldr	r3, [pc, #64]	; (800a708 <prvInsertTimerInActiveList+0x7c>)
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fe f922 	bl	800891a <vListInsert>
 800a6d6:	e012      	b.n	800a6fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d206      	bcs.n	800a6ee <prvInsertTimerInActiveList+0x62>
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d302      	bcc.n	800a6ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	e007      	b.n	800a6fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <prvInsertTimerInActiveList+0x80>)
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	f7fe f90e 	bl	800891a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a6fe:	697b      	ldr	r3, [r7, #20]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	2000141c 	.word	0x2000141c
 800a70c:	20001418 	.word	0x20001418

0800a710 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	; 0x38
 800a714:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a716:	e0d0      	b.n	800a8ba <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da1a      	bge.n	800a754 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a71e:	1d3b      	adds	r3, r7, #4
 800a720:	3304      	adds	r3, #4
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10c      	bne.n	800a744 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	b672      	cpsid	i
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	b662      	cpsie	i
 800a73e:	61fb      	str	r3, [r7, #28]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a74a:	6850      	ldr	r0, [r2, #4]
 800a74c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a74e:	6892      	ldr	r2, [r2, #8]
 800a750:	4611      	mov	r1, r2
 800a752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	f2c0 80af 	blt.w	800a8ba <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d004      	beq.n	800a772 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	3304      	adds	r3, #4
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe f90d 	bl	800898c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a772:	463b      	mov	r3, r7
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff ff69 	bl	800a64c <prvSampleTimeNow>
 800a77a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b09      	cmp	r3, #9
 800a780:	f200 809a 	bhi.w	800a8b8 <prvProcessReceivedCommands+0x1a8>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <prvProcessReceivedCommands+0x7c>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a7b5 	.word	0x0800a7b5
 800a790:	0800a7b5 	.word	0x0800a7b5
 800a794:	0800a7b5 	.word	0x0800a7b5
 800a798:	0800a82d 	.word	0x0800a82d
 800a79c:	0800a841 	.word	0x0800a841
 800a7a0:	0800a88f 	.word	0x0800a88f
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a7b5 	.word	0x0800a7b5
 800a7ac:	0800a82d 	.word	0x0800a82d
 800a7b0:	0800a841 	.word	0x0800a841
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ba:	f043 0301 	orr.w	r3, r3, #1
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	18d1      	adds	r1, r2, r3
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d4:	f7ff ff5a 	bl	800a68c <prvInsertTimerInActiveList>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d06d      	beq.n	800a8ba <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d062      	beq.n	800a8ba <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	441a      	add	r2, r3
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	2300      	movs	r3, #0
 800a802:	2100      	movs	r1, #0
 800a804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a806:	f7ff fdff 	bl	800a408 <xTimerGenericCommand>
 800a80a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d153      	bne.n	800a8ba <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	b672      	cpsid	i
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	b662      	cpsie	i
 800a826:	61bb      	str	r3, [r7, #24]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a832:	f023 0301 	bic.w	r3, r3, #1
 800a836:	b2da      	uxtb	r2, r3
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a83e:	e03c      	b.n	800a8ba <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a846:	f043 0301 	orr.w	r3, r3, #1
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a852:	68ba      	ldr	r2, [r7, #8]
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10c      	bne.n	800a87a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	b672      	cpsid	i
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	b662      	cpsie	i
 800a874:	617b      	str	r3, [r7, #20]
}
 800a876:	bf00      	nop
 800a878:	e7fe      	b.n	800a878 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	18d1      	adds	r1, r2, r3
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a888:	f7ff ff00 	bl	800a68c <prvInsertTimerInActiveList>
					break;
 800a88c:	e015      	b.n	800a8ba <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d103      	bne.n	800a8a4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89e:	f000 fbcb 	bl	800b038 <vPortFree>
 800a8a2:	e00a      	b.n	800a8ba <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8aa:	f023 0301 	bic.w	r3, r3, #1
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8b6:	e000      	b.n	800a8ba <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a8b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <prvProcessReceivedCommands+0x1cc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	1d39      	adds	r1, r7, #4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe fbb6 	bl	8009034 <xQueueReceive>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f47f af24 	bne.w	800a718 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	3730      	adds	r7, #48	; 0x30
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20001420 	.word	0x20001420

0800a8e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8e6:	e04a      	b.n	800a97e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8e8:	4b2e      	ldr	r3, [pc, #184]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f2:	4b2c      	ldr	r3, [pc, #176]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe f843 	bl	800898c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d030      	beq.n	800a97e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d90e      	bls.n	800a94c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a93a:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3304      	adds	r3, #4
 800a942:	4619      	mov	r1, r3
 800a944:	4610      	mov	r0, r2
 800a946:	f7fd ffe8 	bl	800891a <vListInsert>
 800a94a:	e018      	b.n	800a97e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a94c:	2300      	movs	r3, #0
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	2300      	movs	r3, #0
 800a952:	693a      	ldr	r2, [r7, #16]
 800a954:	2100      	movs	r1, #0
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7ff fd56 	bl	800a408 <xTimerGenericCommand>
 800a95c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10c      	bne.n	800a97e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	b672      	cpsid	i
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	b662      	cpsie	i
 800a978:	603b      	str	r3, [r7, #0]
}
 800a97a:	bf00      	nop
 800a97c:	e7fe      	b.n	800a97c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a97e:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1af      	bne.n	800a8e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <prvSwitchTimerLists+0xc8>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a04      	ldr	r2, [pc, #16]	; (800a9a4 <prvSwitchTimerLists+0xc4>)
 800a994:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a996:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <prvSwitchTimerLists+0xc8>)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	6013      	str	r3, [r2, #0]
}
 800a99c:	bf00      	nop
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20001418 	.word	0x20001418
 800a9a8:	2000141c 	.word	0x2000141c

0800a9ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9b2:	f000 f94b 	bl	800ac4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9b6:	4b15      	ldr	r3, [pc, #84]	; (800aa0c <prvCheckForValidListAndQueue+0x60>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d120      	bne.n	800aa00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9be:	4814      	ldr	r0, [pc, #80]	; (800aa10 <prvCheckForValidListAndQueue+0x64>)
 800a9c0:	f7fd ff5a 	bl	8008878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9c4:	4813      	ldr	r0, [pc, #76]	; (800aa14 <prvCheckForValidListAndQueue+0x68>)
 800a9c6:	f7fd ff57 	bl	8008878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9ca:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <prvCheckForValidListAndQueue+0x6c>)
 800a9cc:	4a10      	ldr	r2, [pc, #64]	; (800aa10 <prvCheckForValidListAndQueue+0x64>)
 800a9ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9d0:	4b12      	ldr	r3, [pc, #72]	; (800aa1c <prvCheckForValidListAndQueue+0x70>)
 800a9d2:	4a10      	ldr	r2, [pc, #64]	; (800aa14 <prvCheckForValidListAndQueue+0x68>)
 800a9d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <prvCheckForValidListAndQueue+0x74>)
 800a9dc:	4a11      	ldr	r2, [pc, #68]	; (800aa24 <prvCheckForValidListAndQueue+0x78>)
 800a9de:	2110      	movs	r1, #16
 800a9e0:	200a      	movs	r0, #10
 800a9e2:	f7fe f867 	bl	8008ab4 <xQueueGenericCreateStatic>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4a08      	ldr	r2, [pc, #32]	; (800aa0c <prvCheckForValidListAndQueue+0x60>)
 800a9ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a9ec:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <prvCheckForValidListAndQueue+0x60>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d005      	beq.n	800aa00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a9f4:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <prvCheckForValidListAndQueue+0x60>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	490b      	ldr	r1, [pc, #44]	; (800aa28 <prvCheckForValidListAndQueue+0x7c>)
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fe fd10 	bl	8009420 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa00:	f000 f958 	bl	800acb4 <vPortExitCritical>
}
 800aa04:	bf00      	nop
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20001420 	.word	0x20001420
 800aa10:	200013f0 	.word	0x200013f0
 800aa14:	20001404 	.word	0x20001404
 800aa18:	20001418 	.word	0x20001418
 800aa1c:	2000141c 	.word	0x2000141c
 800aa20:	200014cc 	.word	0x200014cc
 800aa24:	2000142c 	.word	0x2000142c
 800aa28:	0800c3b8 	.word	0x0800c3b8

0800aa2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	3b04      	subs	r3, #4
 800aa3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3b04      	subs	r3, #4
 800aa4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f023 0201 	bic.w	r2, r3, #1
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa5c:	4a0c      	ldr	r2, [pc, #48]	; (800aa90 <pxPortInitialiseStack+0x64>)
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3b14      	subs	r3, #20
 800aa66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3b04      	subs	r3, #4
 800aa72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f06f 0202 	mvn.w	r2, #2
 800aa7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3b20      	subs	r3, #32
 800aa80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa82:	68fb      	ldr	r3, [r7, #12]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	0800aa95 	.word	0x0800aa95

0800aa94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa9e:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <prvTaskExitError+0x5c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaa6:	d00c      	beq.n	800aac2 <prvTaskExitError+0x2e>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	b672      	cpsid	i
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	b662      	cpsie	i
 800aabc:	60fb      	str	r3, [r7, #12]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <prvTaskExitError+0x2c>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	b672      	cpsid	i
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	b662      	cpsie	i
 800aad6:	60bb      	str	r3, [r7, #8]
}
 800aad8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aada:	bf00      	nop
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0fc      	beq.n	800aadc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	2000002c 	.word	0x2000002c
	...

0800ab00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab00:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <pxCurrentTCBConst2>)
 800ab02:	6819      	ldr	r1, [r3, #0]
 800ab04:	6808      	ldr	r0, [r1, #0]
 800ab06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0a:	f380 8809 	msr	PSP, r0
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	f04f 0000 	mov.w	r0, #0
 800ab16:	f380 8811 	msr	BASEPRI, r0
 800ab1a:	4770      	bx	lr
 800ab1c:	f3af 8000 	nop.w

0800ab20 <pxCurrentTCBConst2>:
 800ab20:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop

0800ab28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab28:	4808      	ldr	r0, [pc, #32]	; (800ab4c <prvPortStartFirstTask+0x24>)
 800ab2a:	6800      	ldr	r0, [r0, #0]
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	f380 8808 	msr	MSP, r0
 800ab32:	f04f 0000 	mov.w	r0, #0
 800ab36:	f380 8814 	msr	CONTROL, r0
 800ab3a:	b662      	cpsie	i
 800ab3c:	b661      	cpsie	f
 800ab3e:	f3bf 8f4f 	dsb	sy
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	df00      	svc	0
 800ab48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab4a:	bf00      	nop
 800ab4c:	e000ed08 	.word	0xe000ed08

0800ab50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab56:	4b37      	ldr	r3, [pc, #220]	; (800ac34 <xPortStartScheduler+0xe4>)
 800ab58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	22ff      	movs	r2, #255	; 0xff
 800ab66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	4b2f      	ldr	r3, [pc, #188]	; (800ac38 <xPortStartScheduler+0xe8>)
 800ab7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab7e:	4b2f      	ldr	r3, [pc, #188]	; (800ac3c <xPortStartScheduler+0xec>)
 800ab80:	2207      	movs	r2, #7
 800ab82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab84:	e009      	b.n	800ab9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab86:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <xPortStartScheduler+0xec>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	4a2b      	ldr	r2, [pc, #172]	; (800ac3c <xPortStartScheduler+0xec>)
 800ab8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab90:	78fb      	ldrb	r3, [r7, #3]
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b80      	cmp	r3, #128	; 0x80
 800aba4:	d0ef      	beq.n	800ab86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aba6:	4b25      	ldr	r3, [pc, #148]	; (800ac3c <xPortStartScheduler+0xec>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f1c3 0307 	rsb	r3, r3, #7
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d00c      	beq.n	800abcc <xPortStartScheduler+0x7c>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	b672      	cpsid	i
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	b662      	cpsie	i
 800abc6:	60bb      	str	r3, [r7, #8]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800abcc:	4b1b      	ldr	r3, [pc, #108]	; (800ac3c <xPortStartScheduler+0xec>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	021b      	lsls	r3, r3, #8
 800abd2:	4a1a      	ldr	r2, [pc, #104]	; (800ac3c <xPortStartScheduler+0xec>)
 800abd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800abd6:	4b19      	ldr	r3, [pc, #100]	; (800ac3c <xPortStartScheduler+0xec>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abde:	4a17      	ldr	r2, [pc, #92]	; (800ac3c <xPortStartScheduler+0xec>)
 800abe0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abea:	4b15      	ldr	r3, [pc, #84]	; (800ac40 <xPortStartScheduler+0xf0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a14      	ldr	r2, [pc, #80]	; (800ac40 <xPortStartScheduler+0xf0>)
 800abf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abf6:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <xPortStartScheduler+0xf0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a11      	ldr	r2, [pc, #68]	; (800ac40 <xPortStartScheduler+0xf0>)
 800abfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac02:	f000 f8dd 	bl	800adc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <xPortStartScheduler+0xf4>)
 800ac08:	2200      	movs	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac0c:	f000 f8fc 	bl	800ae08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac10:	4b0d      	ldr	r3, [pc, #52]	; (800ac48 <xPortStartScheduler+0xf8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a0c      	ldr	r2, [pc, #48]	; (800ac48 <xPortStartScheduler+0xf8>)
 800ac16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac1c:	f7ff ff84 	bl	800ab28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac20:	f7ff f840 	bl	8009ca4 <vTaskSwitchContext>
	prvTaskExitError();
 800ac24:	f7ff ff36 	bl	800aa94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	e000e400 	.word	0xe000e400
 800ac38:	2000151c 	.word	0x2000151c
 800ac3c:	20001520 	.word	0x20001520
 800ac40:	e000ed20 	.word	0xe000ed20
 800ac44:	2000002c 	.word	0x2000002c
 800ac48:	e000ef34 	.word	0xe000ef34

0800ac4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	b672      	cpsid	i
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	b662      	cpsie	i
 800ac66:	607b      	str	r3, [r7, #4]
}
 800ac68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac6a:	4b10      	ldr	r3, [pc, #64]	; (800acac <vPortEnterCritical+0x60>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	4a0e      	ldr	r2, [pc, #56]	; (800acac <vPortEnterCritical+0x60>)
 800ac72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac74:	4b0d      	ldr	r3, [pc, #52]	; (800acac <vPortEnterCritical+0x60>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d111      	bne.n	800aca0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <vPortEnterCritical+0x64>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00c      	beq.n	800aca0 <vPortEnterCritical+0x54>
	__asm volatile
 800ac86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8a:	b672      	cpsid	i
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	b662      	cpsie	i
 800ac9a:	603b      	str	r3, [r7, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <vPortEnterCritical+0x52>
	}
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	2000002c 	.word	0x2000002c
 800acb0:	e000ed04 	.word	0xe000ed04

0800acb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acba:	4b13      	ldr	r3, [pc, #76]	; (800ad08 <vPortExitCritical+0x54>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d10c      	bne.n	800acdc <vPortExitCritical+0x28>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc6:	b672      	cpsid	i
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	b662      	cpsie	i
 800acd6:	607b      	str	r3, [r7, #4]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <vPortExitCritical+0x54>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3b01      	subs	r3, #1
 800ace2:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <vPortExitCritical+0x54>)
 800ace4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ace6:	4b08      	ldr	r3, [pc, #32]	; (800ad08 <vPortExitCritical+0x54>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d105      	bne.n	800acfa <vPortExitCritical+0x46>
 800acee:	2300      	movs	r3, #0
 800acf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	f383 8811 	msr	BASEPRI, r3
}
 800acf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acfa:	bf00      	nop
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	2000002c 	.word	0x2000002c
 800ad0c:	00000000 	.word	0x00000000

0800ad10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad10:	f3ef 8009 	mrs	r0, PSP
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <pxCurrentTCBConst>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	f01e 0f10 	tst.w	lr, #16
 800ad20:	bf08      	it	eq
 800ad22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	6010      	str	r0, [r2, #0]
 800ad2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad34:	b672      	cpsid	i
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	b662      	cpsie	i
 800ad44:	f7fe ffae 	bl	8009ca4 <vTaskSwitchContext>
 800ad48:	f04f 0000 	mov.w	r0, #0
 800ad4c:	f380 8811 	msr	BASEPRI, r0
 800ad50:	bc09      	pop	{r0, r3}
 800ad52:	6819      	ldr	r1, [r3, #0]
 800ad54:	6808      	ldr	r0, [r1, #0]
 800ad56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5a:	f01e 0f10 	tst.w	lr, #16
 800ad5e:	bf08      	it	eq
 800ad60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad64:	f380 8809 	msr	PSP, r0
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop

0800ad70 <pxCurrentTCBConst>:
 800ad70:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad74:	bf00      	nop
 800ad76:	bf00      	nop

0800ad78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	b672      	cpsid	i
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	b662      	cpsie	i
 800ad92:	607b      	str	r3, [r7, #4]
}
 800ad94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad96:	f7fe fec9 	bl	8009b2c <xTaskIncrementTick>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ada0:	4b06      	ldr	r3, [pc, #24]	; (800adbc <SysTick_Handler+0x44>)
 800ada2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	2300      	movs	r3, #0
 800adaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	f383 8811 	msr	BASEPRI, r3
}
 800adb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	e000ed04 	.word	0xe000ed04

0800adc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <vPortSetupTimerInterrupt+0x34>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800adca:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <vPortSetupTimerInterrupt+0x38>)
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <vPortSetupTimerInterrupt+0x3c>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a0a      	ldr	r2, [pc, #40]	; (800ae00 <vPortSetupTimerInterrupt+0x40>)
 800add6:	fba2 2303 	umull	r2, r3, r2, r3
 800adda:	099b      	lsrs	r3, r3, #6
 800addc:	4a09      	ldr	r2, [pc, #36]	; (800ae04 <vPortSetupTimerInterrupt+0x44>)
 800adde:	3b01      	subs	r3, #1
 800ade0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ade2:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <vPortSetupTimerInterrupt+0x34>)
 800ade4:	2207      	movs	r2, #7
 800ade6:	601a      	str	r2, [r3, #0]
}
 800ade8:	bf00      	nop
 800adea:	46bd      	mov	sp, r7
 800adec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	e000e010 	.word	0xe000e010
 800adf8:	e000e018 	.word	0xe000e018
 800adfc:	20000020 	.word	0x20000020
 800ae00:	10624dd3 	.word	0x10624dd3
 800ae04:	e000e014 	.word	0xe000e014

0800ae08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae18 <vPortEnableVFP+0x10>
 800ae0c:	6801      	ldr	r1, [r0, #0]
 800ae0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae12:	6001      	str	r1, [r0, #0]
 800ae14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae16:	bf00      	nop
 800ae18:	e000ed88 	.word	0xe000ed88

0800ae1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae22:	f3ef 8305 	mrs	r3, IPSR
 800ae26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b0f      	cmp	r3, #15
 800ae2c:	d916      	bls.n	800ae5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae2e:	4a19      	ldr	r2, [pc, #100]	; (800ae94 <vPortValidateInterruptPriority+0x78>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae38:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <vPortValidateInterruptPriority+0x7c>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	7afa      	ldrb	r2, [r7, #11]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d20c      	bcs.n	800ae5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	b672      	cpsid	i
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	b662      	cpsie	i
 800ae56:	607b      	str	r3, [r7, #4]
}
 800ae58:	bf00      	nop
 800ae5a:	e7fe      	b.n	800ae5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <vPortValidateInterruptPriority+0x80>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae64:	4b0e      	ldr	r3, [pc, #56]	; (800aea0 <vPortValidateInterruptPriority+0x84>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d90c      	bls.n	800ae86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	b672      	cpsid	i
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	b662      	cpsie	i
 800ae80:	603b      	str	r3, [r7, #0]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <vPortValidateInterruptPriority+0x68>
	}
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	e000e3f0 	.word	0xe000e3f0
 800ae98:	2000151c 	.word	0x2000151c
 800ae9c:	e000ed0c 	.word	0xe000ed0c
 800aea0:	20001520 	.word	0x20001520

0800aea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	; 0x28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aeb0:	f7fe fd7e 	bl	80099b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aeb4:	4b5b      	ldr	r3, [pc, #364]	; (800b024 <pvPortMalloc+0x180>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aebc:	f000 f91a 	bl	800b0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aec0:	4b59      	ldr	r3, [pc, #356]	; (800b028 <pvPortMalloc+0x184>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4013      	ands	r3, r2
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f040 8092 	bne.w	800aff2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01f      	beq.n	800af14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aed4:	2208      	movs	r2, #8
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4413      	add	r3, r2
 800aeda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f003 0307 	and.w	r3, r3, #7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d016      	beq.n	800af14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f023 0307 	bic.w	r3, r3, #7
 800aeec:	3308      	adds	r3, #8
 800aeee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f003 0307 	and.w	r3, r3, #7
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00c      	beq.n	800af14 <pvPortMalloc+0x70>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	b672      	cpsid	i
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	b662      	cpsie	i
 800af0e:	617b      	str	r3, [r7, #20]
}
 800af10:	bf00      	nop
 800af12:	e7fe      	b.n	800af12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d06b      	beq.n	800aff2 <pvPortMalloc+0x14e>
 800af1a:	4b44      	ldr	r3, [pc, #272]	; (800b02c <pvPortMalloc+0x188>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	429a      	cmp	r2, r3
 800af22:	d866      	bhi.n	800aff2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af24:	4b42      	ldr	r3, [pc, #264]	; (800b030 <pvPortMalloc+0x18c>)
 800af26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af28:	4b41      	ldr	r3, [pc, #260]	; (800b030 <pvPortMalloc+0x18c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af2e:	e004      	b.n	800af3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <pvPortMalloc+0xa8>
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f1      	bne.n	800af30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af4c:	4b35      	ldr	r3, [pc, #212]	; (800b024 <pvPortMalloc+0x180>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af52:	429a      	cmp	r2, r3
 800af54:	d04d      	beq.n	800aff2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2208      	movs	r2, #8
 800af5c:	4413      	add	r3, r2
 800af5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	1ad2      	subs	r2, r2, r3
 800af70:	2308      	movs	r3, #8
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	429a      	cmp	r2, r3
 800af76:	d921      	bls.n	800afbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	f003 0307 	and.w	r3, r3, #7
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <pvPortMalloc+0x100>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	b672      	cpsid	i
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	b662      	cpsie	i
 800af9e:	613b      	str	r3, [r7, #16]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afb6:	69b8      	ldr	r0, [r7, #24]
 800afb8:	f000 f8fe 	bl	800b1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afbc:	4b1b      	ldr	r3, [pc, #108]	; (800b02c <pvPortMalloc+0x188>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	4a19      	ldr	r2, [pc, #100]	; (800b02c <pvPortMalloc+0x188>)
 800afc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afca:	4b18      	ldr	r3, [pc, #96]	; (800b02c <pvPortMalloc+0x188>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	4b19      	ldr	r3, [pc, #100]	; (800b034 <pvPortMalloc+0x190>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d203      	bcs.n	800afde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <pvPortMalloc+0x188>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a16      	ldr	r2, [pc, #88]	; (800b034 <pvPortMalloc+0x190>)
 800afdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	4b11      	ldr	r3, [pc, #68]	; (800b028 <pvPortMalloc+0x184>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	431a      	orrs	r2, r3
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aff2:	f7fe fceb 	bl	80099cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00c      	beq.n	800b01a <pvPortMalloc+0x176>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	b672      	cpsid	i
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	b662      	cpsie	i
 800b014:	60fb      	str	r3, [r7, #12]
}
 800b016:	bf00      	nop
 800b018:	e7fe      	b.n	800b018 <pvPortMalloc+0x174>
	return pvReturn;
 800b01a:	69fb      	ldr	r3, [r7, #28]
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3728      	adds	r7, #40	; 0x28
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}
 800b024:	2000512c 	.word	0x2000512c
 800b028:	20005138 	.word	0x20005138
 800b02c:	20005130 	.word	0x20005130
 800b030:	20005124 	.word	0x20005124
 800b034:	20005134 	.word	0x20005134

0800b038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d04c      	beq.n	800b0e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b04a:	2308      	movs	r3, #8
 800b04c:	425b      	negs	r3, r3
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	4413      	add	r3, r2
 800b052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	4b23      	ldr	r3, [pc, #140]	; (800b0ec <vPortFree+0xb4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4013      	ands	r3, r2
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10c      	bne.n	800b080 <vPortFree+0x48>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	b672      	cpsid	i
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	b662      	cpsie	i
 800b07a:	60fb      	str	r3, [r7, #12]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00c      	beq.n	800b0a2 <vPortFree+0x6a>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	b672      	cpsid	i
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	b662      	cpsie	i
 800b09c:	60bb      	str	r3, [r7, #8]
}
 800b09e:	bf00      	nop
 800b0a0:	e7fe      	b.n	800b0a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <vPortFree+0xb4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d019      	beq.n	800b0e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d115      	bne.n	800b0e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <vPortFree+0xb4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	401a      	ands	r2, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0c8:	f7fe fc72 	bl	80099b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <vPortFree+0xb8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	4a06      	ldr	r2, [pc, #24]	; (800b0f0 <vPortFree+0xb8>)
 800b0d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0da:	6938      	ldr	r0, [r7, #16]
 800b0dc:	f000 f86c 	bl	800b1b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b0e0:	f7fe fc74 	bl	80099cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0e4:	bf00      	nop
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20005138 	.word	0x20005138
 800b0f0:	20005130 	.word	0x20005130

0800b0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b0fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b100:	4b27      	ldr	r3, [pc, #156]	; (800b1a0 <prvHeapInit+0xac>)
 800b102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00c      	beq.n	800b128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3307      	adds	r3, #7
 800b112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0307 	bic.w	r3, r3, #7
 800b11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	4a1f      	ldr	r2, [pc, #124]	; (800b1a0 <prvHeapInit+0xac>)
 800b124:	4413      	add	r3, r2
 800b126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b12c:	4a1d      	ldr	r2, [pc, #116]	; (800b1a4 <prvHeapInit+0xb0>)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b132:	4b1c      	ldr	r3, [pc, #112]	; (800b1a4 <prvHeapInit+0xb0>)
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	4413      	add	r3, r2
 800b13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b140:	2208      	movs	r2, #8
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f023 0307 	bic.w	r3, r3, #7
 800b14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4a15      	ldr	r2, [pc, #84]	; (800b1a8 <prvHeapInit+0xb4>)
 800b154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b156:	4b14      	ldr	r3, [pc, #80]	; (800b1a8 <prvHeapInit+0xb4>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2200      	movs	r2, #0
 800b15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b15e:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <prvHeapInit+0xb4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2200      	movs	r2, #0
 800b164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b174:	4b0c      	ldr	r3, [pc, #48]	; (800b1a8 <prvHeapInit+0xb4>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	4a0a      	ldr	r2, [pc, #40]	; (800b1ac <prvHeapInit+0xb8>)
 800b182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <prvHeapInit+0xbc>)
 800b18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <prvHeapInit+0xc0>)
 800b18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	20001524 	.word	0x20001524
 800b1a4:	20005124 	.word	0x20005124
 800b1a8:	2000512c 	.word	0x2000512c
 800b1ac:	20005134 	.word	0x20005134
 800b1b0:	20005130 	.word	0x20005130
 800b1b4:	20005138 	.word	0x20005138

0800b1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1c0:	4b28      	ldr	r3, [pc, #160]	; (800b264 <prvInsertBlockIntoFreeList+0xac>)
 800b1c2:	60fb      	str	r3, [r7, #12]
 800b1c4:	e002      	b.n	800b1cc <prvInsertBlockIntoFreeList+0x14>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d8f7      	bhi.n	800b1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d108      	bne.n	800b1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	441a      	add	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	441a      	add	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d118      	bne.n	800b240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b15      	ldr	r3, [pc, #84]	; (800b268 <prvInsertBlockIntoFreeList+0xb0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d00d      	beq.n	800b236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	441a      	add	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	e008      	b.n	800b248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b236:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <prvInsertBlockIntoFreeList+0xb0>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	e003      	b.n	800b248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d002      	beq.n	800b256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b256:	bf00      	nop
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20005124 	.word	0x20005124
 800b268:	2000512c 	.word	0x2000512c

0800b26c <malloc>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <malloc+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f000 b823 	b.w	800b2bc <_malloc_r>
 800b276:	bf00      	nop
 800b278:	20000088 	.word	0x20000088

0800b27c <sbrk_aligned>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	4e0e      	ldr	r6, [pc, #56]	; (800b2b8 <sbrk_aligned+0x3c>)
 800b280:	460c      	mov	r4, r1
 800b282:	6831      	ldr	r1, [r6, #0]
 800b284:	4605      	mov	r5, r0
 800b286:	b911      	cbnz	r1, 800b28e <sbrk_aligned+0x12>
 800b288:	f000 fa02 	bl	800b690 <_sbrk_r>
 800b28c:	6030      	str	r0, [r6, #0]
 800b28e:	4621      	mov	r1, r4
 800b290:	4628      	mov	r0, r5
 800b292:	f000 f9fd 	bl	800b690 <_sbrk_r>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d00a      	beq.n	800b2b0 <sbrk_aligned+0x34>
 800b29a:	1cc4      	adds	r4, r0, #3
 800b29c:	f024 0403 	bic.w	r4, r4, #3
 800b2a0:	42a0      	cmp	r0, r4
 800b2a2:	d007      	beq.n	800b2b4 <sbrk_aligned+0x38>
 800b2a4:	1a21      	subs	r1, r4, r0
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	f000 f9f2 	bl	800b690 <_sbrk_r>
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d101      	bne.n	800b2b4 <sbrk_aligned+0x38>
 800b2b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}
 800b2b8:	20005140 	.word	0x20005140

0800b2bc <_malloc_r>:
 800b2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c0:	1ccd      	adds	r5, r1, #3
 800b2c2:	f025 0503 	bic.w	r5, r5, #3
 800b2c6:	3508      	adds	r5, #8
 800b2c8:	2d0c      	cmp	r5, #12
 800b2ca:	bf38      	it	cc
 800b2cc:	250c      	movcc	r5, #12
 800b2ce:	2d00      	cmp	r5, #0
 800b2d0:	4607      	mov	r7, r0
 800b2d2:	db01      	blt.n	800b2d8 <_malloc_r+0x1c>
 800b2d4:	42a9      	cmp	r1, r5
 800b2d6:	d905      	bls.n	800b2e4 <_malloc_r+0x28>
 800b2d8:	230c      	movs	r3, #12
 800b2da:	603b      	str	r3, [r7, #0]
 800b2dc:	2600      	movs	r6, #0
 800b2de:	4630      	mov	r0, r6
 800b2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b3b8 <_malloc_r+0xfc>
 800b2e8:	f000 f868 	bl	800b3bc <__malloc_lock>
 800b2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f0:	461c      	mov	r4, r3
 800b2f2:	bb5c      	cbnz	r4, 800b34c <_malloc_r+0x90>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	f7ff ffc0 	bl	800b27c <sbrk_aligned>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	4604      	mov	r4, r0
 800b300:	d155      	bne.n	800b3ae <_malloc_r+0xf2>
 800b302:	f8d8 4000 	ldr.w	r4, [r8]
 800b306:	4626      	mov	r6, r4
 800b308:	2e00      	cmp	r6, #0
 800b30a:	d145      	bne.n	800b398 <_malloc_r+0xdc>
 800b30c:	2c00      	cmp	r4, #0
 800b30e:	d048      	beq.n	800b3a2 <_malloc_r+0xe6>
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	4631      	mov	r1, r6
 800b314:	4638      	mov	r0, r7
 800b316:	eb04 0903 	add.w	r9, r4, r3
 800b31a:	f000 f9b9 	bl	800b690 <_sbrk_r>
 800b31e:	4581      	cmp	r9, r0
 800b320:	d13f      	bne.n	800b3a2 <_malloc_r+0xe6>
 800b322:	6821      	ldr	r1, [r4, #0]
 800b324:	1a6d      	subs	r5, r5, r1
 800b326:	4629      	mov	r1, r5
 800b328:	4638      	mov	r0, r7
 800b32a:	f7ff ffa7 	bl	800b27c <sbrk_aligned>
 800b32e:	3001      	adds	r0, #1
 800b330:	d037      	beq.n	800b3a2 <_malloc_r+0xe6>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	442b      	add	r3, r5
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	f8d8 3000 	ldr.w	r3, [r8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d038      	beq.n	800b3b2 <_malloc_r+0xf6>
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	42a2      	cmp	r2, r4
 800b344:	d12b      	bne.n	800b39e <_malloc_r+0xe2>
 800b346:	2200      	movs	r2, #0
 800b348:	605a      	str	r2, [r3, #4]
 800b34a:	e00f      	b.n	800b36c <_malloc_r+0xb0>
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	1b52      	subs	r2, r2, r5
 800b350:	d41f      	bmi.n	800b392 <_malloc_r+0xd6>
 800b352:	2a0b      	cmp	r2, #11
 800b354:	d917      	bls.n	800b386 <_malloc_r+0xca>
 800b356:	1961      	adds	r1, r4, r5
 800b358:	42a3      	cmp	r3, r4
 800b35a:	6025      	str	r5, [r4, #0]
 800b35c:	bf18      	it	ne
 800b35e:	6059      	strne	r1, [r3, #4]
 800b360:	6863      	ldr	r3, [r4, #4]
 800b362:	bf08      	it	eq
 800b364:	f8c8 1000 	streq.w	r1, [r8]
 800b368:	5162      	str	r2, [r4, r5]
 800b36a:	604b      	str	r3, [r1, #4]
 800b36c:	4638      	mov	r0, r7
 800b36e:	f104 060b 	add.w	r6, r4, #11
 800b372:	f000 f829 	bl	800b3c8 <__malloc_unlock>
 800b376:	f026 0607 	bic.w	r6, r6, #7
 800b37a:	1d23      	adds	r3, r4, #4
 800b37c:	1af2      	subs	r2, r6, r3
 800b37e:	d0ae      	beq.n	800b2de <_malloc_r+0x22>
 800b380:	1b9b      	subs	r3, r3, r6
 800b382:	50a3      	str	r3, [r4, r2]
 800b384:	e7ab      	b.n	800b2de <_malloc_r+0x22>
 800b386:	42a3      	cmp	r3, r4
 800b388:	6862      	ldr	r2, [r4, #4]
 800b38a:	d1dd      	bne.n	800b348 <_malloc_r+0x8c>
 800b38c:	f8c8 2000 	str.w	r2, [r8]
 800b390:	e7ec      	b.n	800b36c <_malloc_r+0xb0>
 800b392:	4623      	mov	r3, r4
 800b394:	6864      	ldr	r4, [r4, #4]
 800b396:	e7ac      	b.n	800b2f2 <_malloc_r+0x36>
 800b398:	4634      	mov	r4, r6
 800b39a:	6876      	ldr	r6, [r6, #4]
 800b39c:	e7b4      	b.n	800b308 <_malloc_r+0x4c>
 800b39e:	4613      	mov	r3, r2
 800b3a0:	e7cc      	b.n	800b33c <_malloc_r+0x80>
 800b3a2:	230c      	movs	r3, #12
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f000 f80e 	bl	800b3c8 <__malloc_unlock>
 800b3ac:	e797      	b.n	800b2de <_malloc_r+0x22>
 800b3ae:	6025      	str	r5, [r4, #0]
 800b3b0:	e7dc      	b.n	800b36c <_malloc_r+0xb0>
 800b3b2:	605b      	str	r3, [r3, #4]
 800b3b4:	deff      	udf	#255	; 0xff
 800b3b6:	bf00      	nop
 800b3b8:	2000513c 	.word	0x2000513c

0800b3bc <__malloc_lock>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	; (800b3c4 <__malloc_lock+0x8>)
 800b3be:	f000 b9a2 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	20005284 	.word	0x20005284

0800b3c8 <__malloc_unlock>:
 800b3c8:	4801      	ldr	r0, [pc, #4]	; (800b3d0 <__malloc_unlock+0x8>)
 800b3ca:	f000 b99d 	b.w	800b708 <__retarget_lock_release_recursive>
 800b3ce:	bf00      	nop
 800b3d0:	20005284 	.word	0x20005284

0800b3d4 <rand>:
 800b3d4:	4b16      	ldr	r3, [pc, #88]	; (800b430 <rand+0x5c>)
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	681c      	ldr	r4, [r3, #0]
 800b3da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b3dc:	b9b3      	cbnz	r3, 800b40c <rand+0x38>
 800b3de:	2018      	movs	r0, #24
 800b3e0:	f7ff ff44 	bl	800b26c <malloc>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	6320      	str	r0, [r4, #48]	; 0x30
 800b3e8:	b920      	cbnz	r0, 800b3f4 <rand+0x20>
 800b3ea:	4b12      	ldr	r3, [pc, #72]	; (800b434 <rand+0x60>)
 800b3ec:	4812      	ldr	r0, [pc, #72]	; (800b438 <rand+0x64>)
 800b3ee:	2152      	movs	r1, #82	; 0x52
 800b3f0:	f000 f99a 	bl	800b728 <__assert_func>
 800b3f4:	4911      	ldr	r1, [pc, #68]	; (800b43c <rand+0x68>)
 800b3f6:	4b12      	ldr	r3, [pc, #72]	; (800b440 <rand+0x6c>)
 800b3f8:	e9c0 1300 	strd	r1, r3, [r0]
 800b3fc:	4b11      	ldr	r3, [pc, #68]	; (800b444 <rand+0x70>)
 800b3fe:	6083      	str	r3, [r0, #8]
 800b400:	230b      	movs	r3, #11
 800b402:	8183      	strh	r3, [r0, #12]
 800b404:	2100      	movs	r1, #0
 800b406:	2001      	movs	r0, #1
 800b408:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b40c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b40e:	480e      	ldr	r0, [pc, #56]	; (800b448 <rand+0x74>)
 800b410:	690b      	ldr	r3, [r1, #16]
 800b412:	694c      	ldr	r4, [r1, #20]
 800b414:	4a0d      	ldr	r2, [pc, #52]	; (800b44c <rand+0x78>)
 800b416:	4358      	muls	r0, r3
 800b418:	fb02 0004 	mla	r0, r2, r4, r0
 800b41c:	fba3 3202 	umull	r3, r2, r3, r2
 800b420:	3301      	adds	r3, #1
 800b422:	eb40 0002 	adc.w	r0, r0, r2
 800b426:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b42a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	20000088 	.word	0x20000088
 800b434:	0800efa0 	.word	0x0800efa0
 800b438:	0800efb7 	.word	0x0800efb7
 800b43c:	abcd330e 	.word	0xabcd330e
 800b440:	e66d1234 	.word	0xe66d1234
 800b444:	0005deec 	.word	0x0005deec
 800b448:	5851f42d 	.word	0x5851f42d
 800b44c:	4c957f2d 	.word	0x4c957f2d

0800b450 <std>:
 800b450:	2300      	movs	r3, #0
 800b452:	b510      	push	{r4, lr}
 800b454:	4604      	mov	r4, r0
 800b456:	e9c0 3300 	strd	r3, r3, [r0]
 800b45a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b45e:	6083      	str	r3, [r0, #8]
 800b460:	8181      	strh	r1, [r0, #12]
 800b462:	6643      	str	r3, [r0, #100]	; 0x64
 800b464:	81c2      	strh	r2, [r0, #14]
 800b466:	6183      	str	r3, [r0, #24]
 800b468:	4619      	mov	r1, r3
 800b46a:	2208      	movs	r2, #8
 800b46c:	305c      	adds	r0, #92	; 0x5c
 800b46e:	f000 f8b1 	bl	800b5d4 <memset>
 800b472:	4b0d      	ldr	r3, [pc, #52]	; (800b4a8 <std+0x58>)
 800b474:	6263      	str	r3, [r4, #36]	; 0x24
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <std+0x5c>)
 800b478:	62a3      	str	r3, [r4, #40]	; 0x28
 800b47a:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <std+0x60>)
 800b47c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b47e:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <std+0x64>)
 800b480:	6323      	str	r3, [r4, #48]	; 0x30
 800b482:	4b0d      	ldr	r3, [pc, #52]	; (800b4b8 <std+0x68>)
 800b484:	6224      	str	r4, [r4, #32]
 800b486:	429c      	cmp	r4, r3
 800b488:	d006      	beq.n	800b498 <std+0x48>
 800b48a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b48e:	4294      	cmp	r4, r2
 800b490:	d002      	beq.n	800b498 <std+0x48>
 800b492:	33d0      	adds	r3, #208	; 0xd0
 800b494:	429c      	cmp	r4, r3
 800b496:	d105      	bne.n	800b4a4 <std+0x54>
 800b498:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a0:	f000 b930 	b.w	800b704 <__retarget_lock_init_recursive>
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	bf00      	nop
 800b4a8:	0800b959 	.word	0x0800b959
 800b4ac:	0800b97b 	.word	0x0800b97b
 800b4b0:	0800b9b3 	.word	0x0800b9b3
 800b4b4:	0800b9d7 	.word	0x0800b9d7
 800b4b8:	20005144 	.word	0x20005144

0800b4bc <stdio_exit_handler>:
 800b4bc:	4a02      	ldr	r2, [pc, #8]	; (800b4c8 <stdio_exit_handler+0xc>)
 800b4be:	4903      	ldr	r1, [pc, #12]	; (800b4cc <stdio_exit_handler+0x10>)
 800b4c0:	4803      	ldr	r0, [pc, #12]	; (800b4d0 <stdio_exit_handler+0x14>)
 800b4c2:	f000 b869 	b.w	800b598 <_fwalk_sglue>
 800b4c6:	bf00      	nop
 800b4c8:	20000030 	.word	0x20000030
 800b4cc:	0800b909 	.word	0x0800b909
 800b4d0:	2000003c 	.word	0x2000003c

0800b4d4 <cleanup_stdio>:
 800b4d4:	6841      	ldr	r1, [r0, #4]
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <cleanup_stdio+0x34>)
 800b4d8:	4299      	cmp	r1, r3
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	4604      	mov	r4, r0
 800b4de:	d001      	beq.n	800b4e4 <cleanup_stdio+0x10>
 800b4e0:	f000 fa12 	bl	800b908 <_fflush_r>
 800b4e4:	68a1      	ldr	r1, [r4, #8]
 800b4e6:	4b09      	ldr	r3, [pc, #36]	; (800b50c <cleanup_stdio+0x38>)
 800b4e8:	4299      	cmp	r1, r3
 800b4ea:	d002      	beq.n	800b4f2 <cleanup_stdio+0x1e>
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fa0b 	bl	800b908 <_fflush_r>
 800b4f2:	68e1      	ldr	r1, [r4, #12]
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <cleanup_stdio+0x3c>)
 800b4f6:	4299      	cmp	r1, r3
 800b4f8:	d004      	beq.n	800b504 <cleanup_stdio+0x30>
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f000 ba02 	b.w	800b908 <_fflush_r>
 800b504:	bd10      	pop	{r4, pc}
 800b506:	bf00      	nop
 800b508:	20005144 	.word	0x20005144
 800b50c:	200051ac 	.word	0x200051ac
 800b510:	20005214 	.word	0x20005214

0800b514 <global_stdio_init.part.0>:
 800b514:	b510      	push	{r4, lr}
 800b516:	4b0b      	ldr	r3, [pc, #44]	; (800b544 <global_stdio_init.part.0+0x30>)
 800b518:	4c0b      	ldr	r4, [pc, #44]	; (800b548 <global_stdio_init.part.0+0x34>)
 800b51a:	4a0c      	ldr	r2, [pc, #48]	; (800b54c <global_stdio_init.part.0+0x38>)
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	4620      	mov	r0, r4
 800b520:	2200      	movs	r2, #0
 800b522:	2104      	movs	r1, #4
 800b524:	f7ff ff94 	bl	800b450 <std>
 800b528:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b52c:	2201      	movs	r2, #1
 800b52e:	2109      	movs	r1, #9
 800b530:	f7ff ff8e 	bl	800b450 <std>
 800b534:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b538:	2202      	movs	r2, #2
 800b53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b53e:	2112      	movs	r1, #18
 800b540:	f7ff bf86 	b.w	800b450 <std>
 800b544:	2000527c 	.word	0x2000527c
 800b548:	20005144 	.word	0x20005144
 800b54c:	0800b4bd 	.word	0x0800b4bd

0800b550 <__sfp_lock_acquire>:
 800b550:	4801      	ldr	r0, [pc, #4]	; (800b558 <__sfp_lock_acquire+0x8>)
 800b552:	f000 b8d8 	b.w	800b706 <__retarget_lock_acquire_recursive>
 800b556:	bf00      	nop
 800b558:	20005285 	.word	0x20005285

0800b55c <__sfp_lock_release>:
 800b55c:	4801      	ldr	r0, [pc, #4]	; (800b564 <__sfp_lock_release+0x8>)
 800b55e:	f000 b8d3 	b.w	800b708 <__retarget_lock_release_recursive>
 800b562:	bf00      	nop
 800b564:	20005285 	.word	0x20005285

0800b568 <__sinit>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	4604      	mov	r4, r0
 800b56c:	f7ff fff0 	bl	800b550 <__sfp_lock_acquire>
 800b570:	6a23      	ldr	r3, [r4, #32]
 800b572:	b11b      	cbz	r3, 800b57c <__sinit+0x14>
 800b574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b578:	f7ff bff0 	b.w	800b55c <__sfp_lock_release>
 800b57c:	4b04      	ldr	r3, [pc, #16]	; (800b590 <__sinit+0x28>)
 800b57e:	6223      	str	r3, [r4, #32]
 800b580:	4b04      	ldr	r3, [pc, #16]	; (800b594 <__sinit+0x2c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f5      	bne.n	800b574 <__sinit+0xc>
 800b588:	f7ff ffc4 	bl	800b514 <global_stdio_init.part.0>
 800b58c:	e7f2      	b.n	800b574 <__sinit+0xc>
 800b58e:	bf00      	nop
 800b590:	0800b4d5 	.word	0x0800b4d5
 800b594:	2000527c 	.word	0x2000527c

0800b598 <_fwalk_sglue>:
 800b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b59c:	4607      	mov	r7, r0
 800b59e:	4688      	mov	r8, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	2600      	movs	r6, #0
 800b5a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5a8:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ac:	d505      	bpl.n	800b5ba <_fwalk_sglue+0x22>
 800b5ae:	6824      	ldr	r4, [r4, #0]
 800b5b0:	2c00      	cmp	r4, #0
 800b5b2:	d1f7      	bne.n	800b5a4 <_fwalk_sglue+0xc>
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d907      	bls.n	800b5d0 <_fwalk_sglue+0x38>
 800b5c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	d003      	beq.n	800b5d0 <_fwalk_sglue+0x38>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	47c0      	blx	r8
 800b5ce:	4306      	orrs	r6, r0
 800b5d0:	3568      	adds	r5, #104	; 0x68
 800b5d2:	e7e9      	b.n	800b5a8 <_fwalk_sglue+0x10>

0800b5d4 <memset>:
 800b5d4:	4402      	add	r2, r0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d100      	bne.n	800b5de <memset+0xa>
 800b5dc:	4770      	bx	lr
 800b5de:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e2:	e7f9      	b.n	800b5d8 <memset+0x4>

0800b5e4 <_reclaim_reent>:
 800b5e4:	4b29      	ldr	r3, [pc, #164]	; (800b68c <_reclaim_reent+0xa8>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4283      	cmp	r3, r0
 800b5ea:	b570      	push	{r4, r5, r6, lr}
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	d04b      	beq.n	800b688 <_reclaim_reent+0xa4>
 800b5f0:	69c3      	ldr	r3, [r0, #28]
 800b5f2:	b143      	cbz	r3, 800b606 <_reclaim_reent+0x22>
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d144      	bne.n	800b684 <_reclaim_reent+0xa0>
 800b5fa:	69e3      	ldr	r3, [r4, #28]
 800b5fc:	6819      	ldr	r1, [r3, #0]
 800b5fe:	b111      	cbz	r1, 800b606 <_reclaim_reent+0x22>
 800b600:	4620      	mov	r0, r4
 800b602:	f000 f8af 	bl	800b764 <_free_r>
 800b606:	6961      	ldr	r1, [r4, #20]
 800b608:	b111      	cbz	r1, 800b610 <_reclaim_reent+0x2c>
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 f8aa 	bl	800b764 <_free_r>
 800b610:	69e1      	ldr	r1, [r4, #28]
 800b612:	b111      	cbz	r1, 800b61a <_reclaim_reent+0x36>
 800b614:	4620      	mov	r0, r4
 800b616:	f000 f8a5 	bl	800b764 <_free_r>
 800b61a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b61c:	b111      	cbz	r1, 800b624 <_reclaim_reent+0x40>
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 f8a0 	bl	800b764 <_free_r>
 800b624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b626:	b111      	cbz	r1, 800b62e <_reclaim_reent+0x4a>
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f89b 	bl	800b764 <_free_r>
 800b62e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b630:	b111      	cbz	r1, 800b638 <_reclaim_reent+0x54>
 800b632:	4620      	mov	r0, r4
 800b634:	f000 f896 	bl	800b764 <_free_r>
 800b638:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b63a:	b111      	cbz	r1, 800b642 <_reclaim_reent+0x5e>
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 f891 	bl	800b764 <_free_r>
 800b642:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b644:	b111      	cbz	r1, 800b64c <_reclaim_reent+0x68>
 800b646:	4620      	mov	r0, r4
 800b648:	f000 f88c 	bl	800b764 <_free_r>
 800b64c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b64e:	b111      	cbz	r1, 800b656 <_reclaim_reent+0x72>
 800b650:	4620      	mov	r0, r4
 800b652:	f000 f887 	bl	800b764 <_free_r>
 800b656:	6a23      	ldr	r3, [r4, #32]
 800b658:	b1b3      	cbz	r3, 800b688 <_reclaim_reent+0xa4>
 800b65a:	4620      	mov	r0, r4
 800b65c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b660:	4718      	bx	r3
 800b662:	5949      	ldr	r1, [r1, r5]
 800b664:	b941      	cbnz	r1, 800b678 <_reclaim_reent+0x94>
 800b666:	3504      	adds	r5, #4
 800b668:	69e3      	ldr	r3, [r4, #28]
 800b66a:	2d80      	cmp	r5, #128	; 0x80
 800b66c:	68d9      	ldr	r1, [r3, #12]
 800b66e:	d1f8      	bne.n	800b662 <_reclaim_reent+0x7e>
 800b670:	4620      	mov	r0, r4
 800b672:	f000 f877 	bl	800b764 <_free_r>
 800b676:	e7c0      	b.n	800b5fa <_reclaim_reent+0x16>
 800b678:	680e      	ldr	r6, [r1, #0]
 800b67a:	4620      	mov	r0, r4
 800b67c:	f000 f872 	bl	800b764 <_free_r>
 800b680:	4631      	mov	r1, r6
 800b682:	e7ef      	b.n	800b664 <_reclaim_reent+0x80>
 800b684:	2500      	movs	r5, #0
 800b686:	e7ef      	b.n	800b668 <_reclaim_reent+0x84>
 800b688:	bd70      	pop	{r4, r5, r6, pc}
 800b68a:	bf00      	nop
 800b68c:	20000088 	.word	0x20000088

0800b690 <_sbrk_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d06      	ldr	r5, [pc, #24]	; (800b6ac <_sbrk_r+0x1c>)
 800b694:	2300      	movs	r3, #0
 800b696:	4604      	mov	r4, r0
 800b698:	4608      	mov	r0, r1
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f7 ff1e 	bl	80034dc <_sbrk>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d102      	bne.n	800b6aa <_sbrk_r+0x1a>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	b103      	cbz	r3, 800b6aa <_sbrk_r+0x1a>
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	20005280 	.word	0x20005280

0800b6b0 <__errno>:
 800b6b0:	4b01      	ldr	r3, [pc, #4]	; (800b6b8 <__errno+0x8>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000088 	.word	0x20000088

0800b6bc <__libc_init_array>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4d0d      	ldr	r5, [pc, #52]	; (800b6f4 <__libc_init_array+0x38>)
 800b6c0:	4c0d      	ldr	r4, [pc, #52]	; (800b6f8 <__libc_init_array+0x3c>)
 800b6c2:	1b64      	subs	r4, r4, r5
 800b6c4:	10a4      	asrs	r4, r4, #2
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	42a6      	cmp	r6, r4
 800b6ca:	d109      	bne.n	800b6e0 <__libc_init_array+0x24>
 800b6cc:	4d0b      	ldr	r5, [pc, #44]	; (800b6fc <__libc_init_array+0x40>)
 800b6ce:	4c0c      	ldr	r4, [pc, #48]	; (800b700 <__libc_init_array+0x44>)
 800b6d0:	f000 fe16 	bl	800c300 <_init>
 800b6d4:	1b64      	subs	r4, r4, r5
 800b6d6:	10a4      	asrs	r4, r4, #2
 800b6d8:	2600      	movs	r6, #0
 800b6da:	42a6      	cmp	r6, r4
 800b6dc:	d105      	bne.n	800b6ea <__libc_init_array+0x2e>
 800b6de:	bd70      	pop	{r4, r5, r6, pc}
 800b6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e4:	4798      	blx	r3
 800b6e6:	3601      	adds	r6, #1
 800b6e8:	e7ee      	b.n	800b6c8 <__libc_init_array+0xc>
 800b6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ee:	4798      	blx	r3
 800b6f0:	3601      	adds	r6, #1
 800b6f2:	e7f2      	b.n	800b6da <__libc_init_array+0x1e>
 800b6f4:	0800f088 	.word	0x0800f088
 800b6f8:	0800f088 	.word	0x0800f088
 800b6fc:	0800f088 	.word	0x0800f088
 800b700:	0800f08c 	.word	0x0800f08c

0800b704 <__retarget_lock_init_recursive>:
 800b704:	4770      	bx	lr

0800b706 <__retarget_lock_acquire_recursive>:
 800b706:	4770      	bx	lr

0800b708 <__retarget_lock_release_recursive>:
 800b708:	4770      	bx	lr

0800b70a <memcpy>:
 800b70a:	440a      	add	r2, r1
 800b70c:	4291      	cmp	r1, r2
 800b70e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b712:	d100      	bne.n	800b716 <memcpy+0xc>
 800b714:	4770      	bx	lr
 800b716:	b510      	push	{r4, lr}
 800b718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b720:	4291      	cmp	r1, r2
 800b722:	d1f9      	bne.n	800b718 <memcpy+0xe>
 800b724:	bd10      	pop	{r4, pc}
	...

0800b728 <__assert_func>:
 800b728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b72a:	4614      	mov	r4, r2
 800b72c:	461a      	mov	r2, r3
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <__assert_func+0x2c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4605      	mov	r5, r0
 800b734:	68d8      	ldr	r0, [r3, #12]
 800b736:	b14c      	cbz	r4, 800b74c <__assert_func+0x24>
 800b738:	4b07      	ldr	r3, [pc, #28]	; (800b758 <__assert_func+0x30>)
 800b73a:	9100      	str	r1, [sp, #0]
 800b73c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b740:	4906      	ldr	r1, [pc, #24]	; (800b75c <__assert_func+0x34>)
 800b742:	462b      	mov	r3, r5
 800b744:	f000 f94c 	bl	800b9e0 <fiprintf>
 800b748:	f000 f9a2 	bl	800ba90 <abort>
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <__assert_func+0x38>)
 800b74e:	461c      	mov	r4, r3
 800b750:	e7f3      	b.n	800b73a <__assert_func+0x12>
 800b752:	bf00      	nop
 800b754:	20000088 	.word	0x20000088
 800b758:	0800f00f 	.word	0x0800f00f
 800b75c:	0800f01c 	.word	0x0800f01c
 800b760:	0800f04a 	.word	0x0800f04a

0800b764 <_free_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	2900      	cmp	r1, #0
 800b768:	d044      	beq.n	800b7f4 <_free_r+0x90>
 800b76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76e:	9001      	str	r0, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f1a1 0404 	sub.w	r4, r1, #4
 800b776:	bfb8      	it	lt
 800b778:	18e4      	addlt	r4, r4, r3
 800b77a:	f7ff fe1f 	bl	800b3bc <__malloc_lock>
 800b77e:	4a1e      	ldr	r2, [pc, #120]	; (800b7f8 <_free_r+0x94>)
 800b780:	9801      	ldr	r0, [sp, #4]
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	b933      	cbnz	r3, 800b794 <_free_r+0x30>
 800b786:	6063      	str	r3, [r4, #4]
 800b788:	6014      	str	r4, [r2, #0]
 800b78a:	b003      	add	sp, #12
 800b78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b790:	f7ff be1a 	b.w	800b3c8 <__malloc_unlock>
 800b794:	42a3      	cmp	r3, r4
 800b796:	d908      	bls.n	800b7aa <_free_r+0x46>
 800b798:	6825      	ldr	r5, [r4, #0]
 800b79a:	1961      	adds	r1, r4, r5
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1949      	addeq	r1, r1, r5
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	e7ed      	b.n	800b786 <_free_r+0x22>
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	b10b      	cbz	r3, 800b7b4 <_free_r+0x50>
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x46>
 800b7b4:	6811      	ldr	r1, [r2, #0]
 800b7b6:	1855      	adds	r5, r2, r1
 800b7b8:	42a5      	cmp	r5, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x70>
 800b7bc:	6824      	ldr	r4, [r4, #0]
 800b7be:	4421      	add	r1, r4
 800b7c0:	1854      	adds	r4, r2, r1
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	d1e0      	bne.n	800b78a <_free_r+0x26>
 800b7c8:	681c      	ldr	r4, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	6053      	str	r3, [r2, #4]
 800b7ce:	440c      	add	r4, r1
 800b7d0:	6014      	str	r4, [r2, #0]
 800b7d2:	e7da      	b.n	800b78a <_free_r+0x26>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x78>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	e7d6      	b.n	800b78a <_free_r+0x26>
 800b7dc:	6825      	ldr	r5, [r4, #0]
 800b7de:	1961      	adds	r1, r4, r5
 800b7e0:	428b      	cmp	r3, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6819      	ldreq	r1, [r3, #0]
 800b7e6:	685b      	ldreq	r3, [r3, #4]
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1949      	addeq	r1, r1, r5
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	6054      	str	r4, [r2, #4]
 800b7f2:	e7ca      	b.n	800b78a <_free_r+0x26>
 800b7f4:	b003      	add	sp, #12
 800b7f6:	bd30      	pop	{r4, r5, pc}
 800b7f8:	2000513c 	.word	0x2000513c

0800b7fc <__sflush_r>:
 800b7fc:	898a      	ldrh	r2, [r1, #12]
 800b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	4605      	mov	r5, r0
 800b804:	0710      	lsls	r0, r2, #28
 800b806:	460c      	mov	r4, r1
 800b808:	d458      	bmi.n	800b8bc <__sflush_r+0xc0>
 800b80a:	684b      	ldr	r3, [r1, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dc05      	bgt.n	800b81c <__sflush_r+0x20>
 800b810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	dc02      	bgt.n	800b81c <__sflush_r+0x20>
 800b816:	2000      	movs	r0, #0
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b81e:	2e00      	cmp	r6, #0
 800b820:	d0f9      	beq.n	800b816 <__sflush_r+0x1a>
 800b822:	2300      	movs	r3, #0
 800b824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b828:	682f      	ldr	r7, [r5, #0]
 800b82a:	6a21      	ldr	r1, [r4, #32]
 800b82c:	602b      	str	r3, [r5, #0]
 800b82e:	d032      	beq.n	800b896 <__sflush_r+0x9a>
 800b830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	075a      	lsls	r2, r3, #29
 800b836:	d505      	bpl.n	800b844 <__sflush_r+0x48>
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	1ac0      	subs	r0, r0, r3
 800b83c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b83e:	b10b      	cbz	r3, 800b844 <__sflush_r+0x48>
 800b840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b842:	1ac0      	subs	r0, r0, r3
 800b844:	2300      	movs	r3, #0
 800b846:	4602      	mov	r2, r0
 800b848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b84a:	6a21      	ldr	r1, [r4, #32]
 800b84c:	4628      	mov	r0, r5
 800b84e:	47b0      	blx	r6
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	d106      	bne.n	800b864 <__sflush_r+0x68>
 800b856:	6829      	ldr	r1, [r5, #0]
 800b858:	291d      	cmp	r1, #29
 800b85a:	d82b      	bhi.n	800b8b4 <__sflush_r+0xb8>
 800b85c:	4a29      	ldr	r2, [pc, #164]	; (800b904 <__sflush_r+0x108>)
 800b85e:	410a      	asrs	r2, r1
 800b860:	07d6      	lsls	r6, r2, #31
 800b862:	d427      	bmi.n	800b8b4 <__sflush_r+0xb8>
 800b864:	2200      	movs	r2, #0
 800b866:	6062      	str	r2, [r4, #4]
 800b868:	04d9      	lsls	r1, r3, #19
 800b86a:	6922      	ldr	r2, [r4, #16]
 800b86c:	6022      	str	r2, [r4, #0]
 800b86e:	d504      	bpl.n	800b87a <__sflush_r+0x7e>
 800b870:	1c42      	adds	r2, r0, #1
 800b872:	d101      	bne.n	800b878 <__sflush_r+0x7c>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b903      	cbnz	r3, 800b87a <__sflush_r+0x7e>
 800b878:	6560      	str	r0, [r4, #84]	; 0x54
 800b87a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b87c:	602f      	str	r7, [r5, #0]
 800b87e:	2900      	cmp	r1, #0
 800b880:	d0c9      	beq.n	800b816 <__sflush_r+0x1a>
 800b882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b886:	4299      	cmp	r1, r3
 800b888:	d002      	beq.n	800b890 <__sflush_r+0x94>
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7ff ff6a 	bl	800b764 <_free_r>
 800b890:	2000      	movs	r0, #0
 800b892:	6360      	str	r0, [r4, #52]	; 0x34
 800b894:	e7c0      	b.n	800b818 <__sflush_r+0x1c>
 800b896:	2301      	movs	r3, #1
 800b898:	4628      	mov	r0, r5
 800b89a:	47b0      	blx	r6
 800b89c:	1c41      	adds	r1, r0, #1
 800b89e:	d1c8      	bne.n	800b832 <__sflush_r+0x36>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0c5      	beq.n	800b832 <__sflush_r+0x36>
 800b8a6:	2b1d      	cmp	r3, #29
 800b8a8:	d001      	beq.n	800b8ae <__sflush_r+0xb2>
 800b8aa:	2b16      	cmp	r3, #22
 800b8ac:	d101      	bne.n	800b8b2 <__sflush_r+0xb6>
 800b8ae:	602f      	str	r7, [r5, #0]
 800b8b0:	e7b1      	b.n	800b816 <__sflush_r+0x1a>
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	e7ad      	b.n	800b818 <__sflush_r+0x1c>
 800b8bc:	690f      	ldr	r7, [r1, #16]
 800b8be:	2f00      	cmp	r7, #0
 800b8c0:	d0a9      	beq.n	800b816 <__sflush_r+0x1a>
 800b8c2:	0793      	lsls	r3, r2, #30
 800b8c4:	680e      	ldr	r6, [r1, #0]
 800b8c6:	bf08      	it	eq
 800b8c8:	694b      	ldreq	r3, [r1, #20]
 800b8ca:	600f      	str	r7, [r1, #0]
 800b8cc:	bf18      	it	ne
 800b8ce:	2300      	movne	r3, #0
 800b8d0:	eba6 0807 	sub.w	r8, r6, r7
 800b8d4:	608b      	str	r3, [r1, #8]
 800b8d6:	f1b8 0f00 	cmp.w	r8, #0
 800b8da:	dd9c      	ble.n	800b816 <__sflush_r+0x1a>
 800b8dc:	6a21      	ldr	r1, [r4, #32]
 800b8de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8e0:	4643      	mov	r3, r8
 800b8e2:	463a      	mov	r2, r7
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b0      	blx	r6
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	dc06      	bgt.n	800b8fa <__sflush_r+0xfe>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8f8:	e78e      	b.n	800b818 <__sflush_r+0x1c>
 800b8fa:	4407      	add	r7, r0
 800b8fc:	eba8 0800 	sub.w	r8, r8, r0
 800b900:	e7e9      	b.n	800b8d6 <__sflush_r+0xda>
 800b902:	bf00      	nop
 800b904:	dfbffffe 	.word	0xdfbffffe

0800b908 <_fflush_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	690b      	ldr	r3, [r1, #16]
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b913      	cbnz	r3, 800b918 <_fflush_r+0x10>
 800b912:	2500      	movs	r5, #0
 800b914:	4628      	mov	r0, r5
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	b118      	cbz	r0, 800b922 <_fflush_r+0x1a>
 800b91a:	6a03      	ldr	r3, [r0, #32]
 800b91c:	b90b      	cbnz	r3, 800b922 <_fflush_r+0x1a>
 800b91e:	f7ff fe23 	bl	800b568 <__sinit>
 800b922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d0f3      	beq.n	800b912 <_fflush_r+0xa>
 800b92a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b92c:	07d0      	lsls	r0, r2, #31
 800b92e:	d404      	bmi.n	800b93a <_fflush_r+0x32>
 800b930:	0599      	lsls	r1, r3, #22
 800b932:	d402      	bmi.n	800b93a <_fflush_r+0x32>
 800b934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b936:	f7ff fee6 	bl	800b706 <__retarget_lock_acquire_recursive>
 800b93a:	4628      	mov	r0, r5
 800b93c:	4621      	mov	r1, r4
 800b93e:	f7ff ff5d 	bl	800b7fc <__sflush_r>
 800b942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b944:	07da      	lsls	r2, r3, #31
 800b946:	4605      	mov	r5, r0
 800b948:	d4e4      	bmi.n	800b914 <_fflush_r+0xc>
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	059b      	lsls	r3, r3, #22
 800b94e:	d4e1      	bmi.n	800b914 <_fflush_r+0xc>
 800b950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b952:	f7ff fed9 	bl	800b708 <__retarget_lock_release_recursive>
 800b956:	e7dd      	b.n	800b914 <_fflush_r+0xc>

0800b958 <__sread>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	460c      	mov	r4, r1
 800b95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b960:	f000 f872 	bl	800ba48 <_read_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	bfab      	itete	ge
 800b968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b96a:	89a3      	ldrhlt	r3, [r4, #12]
 800b96c:	181b      	addge	r3, r3, r0
 800b96e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b972:	bfac      	ite	ge
 800b974:	6563      	strge	r3, [r4, #84]	; 0x54
 800b976:	81a3      	strhlt	r3, [r4, #12]
 800b978:	bd10      	pop	{r4, pc}

0800b97a <__swrite>:
 800b97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b97e:	461f      	mov	r7, r3
 800b980:	898b      	ldrh	r3, [r1, #12]
 800b982:	05db      	lsls	r3, r3, #23
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	4616      	mov	r6, r2
 800b98a:	d505      	bpl.n	800b998 <__swrite+0x1e>
 800b98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b990:	2302      	movs	r3, #2
 800b992:	2200      	movs	r2, #0
 800b994:	f000 f846 	bl	800ba24 <_lseek_r>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b99e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ae:	f000 b85d 	b.w	800ba6c <_write_r>

0800b9b2 <__sseek>:
 800b9b2:	b510      	push	{r4, lr}
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ba:	f000 f833 	bl	800ba24 <_lseek_r>
 800b9be:	1c43      	adds	r3, r0, #1
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	bf15      	itete	ne
 800b9c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9ce:	81a3      	strheq	r3, [r4, #12]
 800b9d0:	bf18      	it	ne
 800b9d2:	81a3      	strhne	r3, [r4, #12]
 800b9d4:	bd10      	pop	{r4, pc}

0800b9d6 <__sclose>:
 800b9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9da:	f000 b813 	b.w	800ba04 <_close_r>
	...

0800b9e0 <fiprintf>:
 800b9e0:	b40e      	push	{r1, r2, r3}
 800b9e2:	b503      	push	{r0, r1, lr}
 800b9e4:	4601      	mov	r1, r0
 800b9e6:	ab03      	add	r3, sp, #12
 800b9e8:	4805      	ldr	r0, [pc, #20]	; (800ba00 <fiprintf+0x20>)
 800b9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ee:	6800      	ldr	r0, [r0, #0]
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	f000 f87d 	bl	800baf0 <_vfiprintf_r>
 800b9f6:	b002      	add	sp, #8
 800b9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9fc:	b003      	add	sp, #12
 800b9fe:	4770      	bx	lr
 800ba00:	20000088 	.word	0x20000088

0800ba04 <_close_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d06      	ldr	r5, [pc, #24]	; (800ba20 <_close_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	f7f7 fd2f 	bl	8003472 <_close>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_close_r+0x1a>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_close_r+0x1a>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20005280 	.word	0x20005280

0800ba24 <_lseek_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	; (800ba44 <_lseek_r+0x20>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f7 fd44 	bl	80034c0 <_lseek>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_lseek_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_lseek_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20005280 	.word	0x20005280

0800ba48 <_read_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4d07      	ldr	r5, [pc, #28]	; (800ba68 <_read_r+0x20>)
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4611      	mov	r1, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	602a      	str	r2, [r5, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	f7f7 fcd2 	bl	8003400 <_read>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_read_r+0x1e>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_read_r+0x1e>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20005280 	.word	0x20005280

0800ba6c <_write_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_write_r+0x20>)
 800ba70:	4604      	mov	r4, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	602a      	str	r2, [r5, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7f7 fcdd 	bl	800343a <_write>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_write_r+0x1e>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_write_r+0x1e>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20005280 	.word	0x20005280

0800ba90 <abort>:
 800ba90:	b508      	push	{r3, lr}
 800ba92:	2006      	movs	r0, #6
 800ba94:	f000 fc18 	bl	800c2c8 <raise>
 800ba98:	2001      	movs	r0, #1
 800ba9a:	f7f7 fca7 	bl	80033ec <_exit>

0800ba9e <__sfputc_r>:
 800ba9e:	6893      	ldr	r3, [r2, #8]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	b410      	push	{r4}
 800baa6:	6093      	str	r3, [r2, #8]
 800baa8:	da08      	bge.n	800babc <__sfputc_r+0x1e>
 800baaa:	6994      	ldr	r4, [r2, #24]
 800baac:	42a3      	cmp	r3, r4
 800baae:	db01      	blt.n	800bab4 <__sfputc_r+0x16>
 800bab0:	290a      	cmp	r1, #10
 800bab2:	d103      	bne.n	800babc <__sfputc_r+0x1e>
 800bab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab8:	f000 bac4 	b.w	800c044 <__swbuf_r>
 800babc:	6813      	ldr	r3, [r2, #0]
 800babe:	1c58      	adds	r0, r3, #1
 800bac0:	6010      	str	r0, [r2, #0]
 800bac2:	7019      	strb	r1, [r3, #0]
 800bac4:	4608      	mov	r0, r1
 800bac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <__sfputs_r>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	4614      	mov	r4, r2
 800bad4:	18d5      	adds	r5, r2, r3
 800bad6:	42ac      	cmp	r4, r5
 800bad8:	d101      	bne.n	800bade <__sfputs_r+0x12>
 800bada:	2000      	movs	r0, #0
 800badc:	e007      	b.n	800baee <__sfputs_r+0x22>
 800bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae2:	463a      	mov	r2, r7
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7ff ffda 	bl	800ba9e <__sfputc_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d1f3      	bne.n	800bad6 <__sfputs_r+0xa>
 800baee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baf0 <_vfiprintf_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	460d      	mov	r5, r1
 800baf6:	b09d      	sub	sp, #116	; 0x74
 800baf8:	4614      	mov	r4, r2
 800bafa:	4698      	mov	r8, r3
 800bafc:	4606      	mov	r6, r0
 800bafe:	b118      	cbz	r0, 800bb08 <_vfiprintf_r+0x18>
 800bb00:	6a03      	ldr	r3, [r0, #32]
 800bb02:	b90b      	cbnz	r3, 800bb08 <_vfiprintf_r+0x18>
 800bb04:	f7ff fd30 	bl	800b568 <__sinit>
 800bb08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb0a:	07d9      	lsls	r1, r3, #31
 800bb0c:	d405      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	059a      	lsls	r2, r3, #22
 800bb12:	d402      	bmi.n	800bb1a <_vfiprintf_r+0x2a>
 800bb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb16:	f7ff fdf6 	bl	800b706 <__retarget_lock_acquire_recursive>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	071b      	lsls	r3, r3, #28
 800bb1e:	d501      	bpl.n	800bb24 <_vfiprintf_r+0x34>
 800bb20:	692b      	ldr	r3, [r5, #16]
 800bb22:	b99b      	cbnz	r3, 800bb4c <_vfiprintf_r+0x5c>
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f000 faca 	bl	800c0c0 <__swsetup_r>
 800bb2c:	b170      	cbz	r0, 800bb4c <_vfiprintf_r+0x5c>
 800bb2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb30:	07dc      	lsls	r4, r3, #31
 800bb32:	d504      	bpl.n	800bb3e <_vfiprintf_r+0x4e>
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb38:	b01d      	add	sp, #116	; 0x74
 800bb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	0598      	lsls	r0, r3, #22
 800bb42:	d4f7      	bmi.n	800bb34 <_vfiprintf_r+0x44>
 800bb44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb46:	f7ff fddf 	bl	800b708 <__retarget_lock_release_recursive>
 800bb4a:	e7f3      	b.n	800bb34 <_vfiprintf_r+0x44>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb50:	2320      	movs	r3, #32
 800bb52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb56:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb5a:	2330      	movs	r3, #48	; 0x30
 800bb5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd10 <_vfiprintf_r+0x220>
 800bb60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb64:	f04f 0901 	mov.w	r9, #1
 800bb68:	4623      	mov	r3, r4
 800bb6a:	469a      	mov	sl, r3
 800bb6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb70:	b10a      	cbz	r2, 800bb76 <_vfiprintf_r+0x86>
 800bb72:	2a25      	cmp	r2, #37	; 0x25
 800bb74:	d1f9      	bne.n	800bb6a <_vfiprintf_r+0x7a>
 800bb76:	ebba 0b04 	subs.w	fp, sl, r4
 800bb7a:	d00b      	beq.n	800bb94 <_vfiprintf_r+0xa4>
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	4622      	mov	r2, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ffa2 	bl	800bacc <__sfputs_r>
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f000 80a9 	beq.w	800bce0 <_vfiprintf_r+0x1f0>
 800bb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb90:	445a      	add	r2, fp
 800bb92:	9209      	str	r2, [sp, #36]	; 0x24
 800bb94:	f89a 3000 	ldrb.w	r3, [sl]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	f000 80a1 	beq.w	800bce0 <_vfiprintf_r+0x1f0>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bba8:	f10a 0a01 	add.w	sl, sl, #1
 800bbac:	9304      	str	r3, [sp, #16]
 800bbae:	9307      	str	r3, [sp, #28]
 800bbb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbb4:	931a      	str	r3, [sp, #104]	; 0x68
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	2205      	movs	r2, #5
 800bbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbe:	4854      	ldr	r0, [pc, #336]	; (800bd10 <_vfiprintf_r+0x220>)
 800bbc0:	f7f4 fb3e 	bl	8000240 <memchr>
 800bbc4:	9a04      	ldr	r2, [sp, #16]
 800bbc6:	b9d8      	cbnz	r0, 800bc00 <_vfiprintf_r+0x110>
 800bbc8:	06d1      	lsls	r1, r2, #27
 800bbca:	bf44      	itt	mi
 800bbcc:	2320      	movmi	r3, #32
 800bbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbd2:	0713      	lsls	r3, r2, #28
 800bbd4:	bf44      	itt	mi
 800bbd6:	232b      	movmi	r3, #43	; 0x2b
 800bbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe0:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe2:	d015      	beq.n	800bc10 <_vfiprintf_r+0x120>
 800bbe4:	9a07      	ldr	r2, [sp, #28]
 800bbe6:	4654      	mov	r4, sl
 800bbe8:	2000      	movs	r0, #0
 800bbea:	f04f 0c0a 	mov.w	ip, #10
 800bbee:	4621      	mov	r1, r4
 800bbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf4:	3b30      	subs	r3, #48	; 0x30
 800bbf6:	2b09      	cmp	r3, #9
 800bbf8:	d94d      	bls.n	800bc96 <_vfiprintf_r+0x1a6>
 800bbfa:	b1b0      	cbz	r0, 800bc2a <_vfiprintf_r+0x13a>
 800bbfc:	9207      	str	r2, [sp, #28]
 800bbfe:	e014      	b.n	800bc2a <_vfiprintf_r+0x13a>
 800bc00:	eba0 0308 	sub.w	r3, r0, r8
 800bc04:	fa09 f303 	lsl.w	r3, r9, r3
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	46a2      	mov	sl, r4
 800bc0e:	e7d2      	b.n	800bbb6 <_vfiprintf_r+0xc6>
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	1d19      	adds	r1, r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	9103      	str	r1, [sp, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfbb      	ittet	lt
 800bc1c:	425b      	neglt	r3, r3
 800bc1e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc22:	9307      	strge	r3, [sp, #28]
 800bc24:	9307      	strlt	r3, [sp, #28]
 800bc26:	bfb8      	it	lt
 800bc28:	9204      	strlt	r2, [sp, #16]
 800bc2a:	7823      	ldrb	r3, [r4, #0]
 800bc2c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc2e:	d10c      	bne.n	800bc4a <_vfiprintf_r+0x15a>
 800bc30:	7863      	ldrb	r3, [r4, #1]
 800bc32:	2b2a      	cmp	r3, #42	; 0x2a
 800bc34:	d134      	bne.n	800bca0 <_vfiprintf_r+0x1b0>
 800bc36:	9b03      	ldr	r3, [sp, #12]
 800bc38:	1d1a      	adds	r2, r3, #4
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	9203      	str	r2, [sp, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfb8      	it	lt
 800bc42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc46:	3402      	adds	r4, #2
 800bc48:	9305      	str	r3, [sp, #20]
 800bc4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd20 <_vfiprintf_r+0x230>
 800bc4e:	7821      	ldrb	r1, [r4, #0]
 800bc50:	2203      	movs	r2, #3
 800bc52:	4650      	mov	r0, sl
 800bc54:	f7f4 faf4 	bl	8000240 <memchr>
 800bc58:	b138      	cbz	r0, 800bc6a <_vfiprintf_r+0x17a>
 800bc5a:	9b04      	ldr	r3, [sp, #16]
 800bc5c:	eba0 000a 	sub.w	r0, r0, sl
 800bc60:	2240      	movs	r2, #64	; 0x40
 800bc62:	4082      	lsls	r2, r0
 800bc64:	4313      	orrs	r3, r2
 800bc66:	3401      	adds	r4, #1
 800bc68:	9304      	str	r3, [sp, #16]
 800bc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6e:	4829      	ldr	r0, [pc, #164]	; (800bd14 <_vfiprintf_r+0x224>)
 800bc70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc74:	2206      	movs	r2, #6
 800bc76:	f7f4 fae3 	bl	8000240 <memchr>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d03f      	beq.n	800bcfe <_vfiprintf_r+0x20e>
 800bc7e:	4b26      	ldr	r3, [pc, #152]	; (800bd18 <_vfiprintf_r+0x228>)
 800bc80:	bb1b      	cbnz	r3, 800bcca <_vfiprintf_r+0x1da>
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	3307      	adds	r3, #7
 800bc86:	f023 0307 	bic.w	r3, r3, #7
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	9303      	str	r3, [sp, #12]
 800bc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc90:	443b      	add	r3, r7
 800bc92:	9309      	str	r3, [sp, #36]	; 0x24
 800bc94:	e768      	b.n	800bb68 <_vfiprintf_r+0x78>
 800bc96:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	e7a6      	b.n	800bbee <_vfiprintf_r+0xfe>
 800bca0:	2300      	movs	r3, #0
 800bca2:	3401      	adds	r4, #1
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	4619      	mov	r1, r3
 800bca8:	f04f 0c0a 	mov.w	ip, #10
 800bcac:	4620      	mov	r0, r4
 800bcae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb2:	3a30      	subs	r2, #48	; 0x30
 800bcb4:	2a09      	cmp	r2, #9
 800bcb6:	d903      	bls.n	800bcc0 <_vfiprintf_r+0x1d0>
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d0c6      	beq.n	800bc4a <_vfiprintf_r+0x15a>
 800bcbc:	9105      	str	r1, [sp, #20]
 800bcbe:	e7c4      	b.n	800bc4a <_vfiprintf_r+0x15a>
 800bcc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e7f0      	b.n	800bcac <_vfiprintf_r+0x1bc>
 800bcca:	ab03      	add	r3, sp, #12
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	462a      	mov	r2, r5
 800bcd0:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <_vfiprintf_r+0x22c>)
 800bcd2:	a904      	add	r1, sp, #16
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f3af 8000 	nop.w
 800bcda:	4607      	mov	r7, r0
 800bcdc:	1c78      	adds	r0, r7, #1
 800bcde:	d1d6      	bne.n	800bc8e <_vfiprintf_r+0x19e>
 800bce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce2:	07d9      	lsls	r1, r3, #31
 800bce4:	d405      	bmi.n	800bcf2 <_vfiprintf_r+0x202>
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	059a      	lsls	r2, r3, #22
 800bcea:	d402      	bmi.n	800bcf2 <_vfiprintf_r+0x202>
 800bcec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcee:	f7ff fd0b 	bl	800b708 <__retarget_lock_release_recursive>
 800bcf2:	89ab      	ldrh	r3, [r5, #12]
 800bcf4:	065b      	lsls	r3, r3, #25
 800bcf6:	f53f af1d 	bmi.w	800bb34 <_vfiprintf_r+0x44>
 800bcfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcfc:	e71c      	b.n	800bb38 <_vfiprintf_r+0x48>
 800bcfe:	ab03      	add	r3, sp, #12
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	462a      	mov	r2, r5
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <_vfiprintf_r+0x22c>)
 800bd06:	a904      	add	r1, sp, #16
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f000 f879 	bl	800be00 <_printf_i>
 800bd0e:	e7e4      	b.n	800bcda <_vfiprintf_r+0x1ea>
 800bd10:	0800f04b 	.word	0x0800f04b
 800bd14:	0800f055 	.word	0x0800f055
 800bd18:	00000000 	.word	0x00000000
 800bd1c:	0800bacd 	.word	0x0800bacd
 800bd20:	0800f051 	.word	0x0800f051

0800bd24 <_printf_common>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	4616      	mov	r6, r2
 800bd2a:	4699      	mov	r9, r3
 800bd2c:	688a      	ldr	r2, [r1, #8]
 800bd2e:	690b      	ldr	r3, [r1, #16]
 800bd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfb8      	it	lt
 800bd38:	4613      	movlt	r3, r2
 800bd3a:	6033      	str	r3, [r6, #0]
 800bd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd40:	4607      	mov	r7, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	b10a      	cbz	r2, 800bd4a <_printf_common+0x26>
 800bd46:	3301      	adds	r3, #1
 800bd48:	6033      	str	r3, [r6, #0]
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	0699      	lsls	r1, r3, #26
 800bd4e:	bf42      	ittt	mi
 800bd50:	6833      	ldrmi	r3, [r6, #0]
 800bd52:	3302      	addmi	r3, #2
 800bd54:	6033      	strmi	r3, [r6, #0]
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	f015 0506 	ands.w	r5, r5, #6
 800bd5c:	d106      	bne.n	800bd6c <_printf_common+0x48>
 800bd5e:	f104 0a19 	add.w	sl, r4, #25
 800bd62:	68e3      	ldr	r3, [r4, #12]
 800bd64:	6832      	ldr	r2, [r6, #0]
 800bd66:	1a9b      	subs	r3, r3, r2
 800bd68:	42ab      	cmp	r3, r5
 800bd6a:	dc26      	bgt.n	800bdba <_printf_common+0x96>
 800bd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd70:	1e13      	subs	r3, r2, #0
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	bf18      	it	ne
 800bd76:	2301      	movne	r3, #1
 800bd78:	0692      	lsls	r2, r2, #26
 800bd7a:	d42b      	bmi.n	800bdd4 <_printf_common+0xb0>
 800bd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd80:	4649      	mov	r1, r9
 800bd82:	4638      	mov	r0, r7
 800bd84:	47c0      	blx	r8
 800bd86:	3001      	adds	r0, #1
 800bd88:	d01e      	beq.n	800bdc8 <_printf_common+0xa4>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	6922      	ldr	r2, [r4, #16]
 800bd8e:	f003 0306 	and.w	r3, r3, #6
 800bd92:	2b04      	cmp	r3, #4
 800bd94:	bf02      	ittt	eq
 800bd96:	68e5      	ldreq	r5, [r4, #12]
 800bd98:	6833      	ldreq	r3, [r6, #0]
 800bd9a:	1aed      	subeq	r5, r5, r3
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	bf0c      	ite	eq
 800bda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda4:	2500      	movne	r5, #0
 800bda6:	4293      	cmp	r3, r2
 800bda8:	bfc4      	itt	gt
 800bdaa:	1a9b      	subgt	r3, r3, r2
 800bdac:	18ed      	addgt	r5, r5, r3
 800bdae:	2600      	movs	r6, #0
 800bdb0:	341a      	adds	r4, #26
 800bdb2:	42b5      	cmp	r5, r6
 800bdb4:	d11a      	bne.n	800bdec <_printf_common+0xc8>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	e008      	b.n	800bdcc <_printf_common+0xa8>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4652      	mov	r2, sl
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	47c0      	blx	r8
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d103      	bne.n	800bdd0 <_printf_common+0xac>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7c6      	b.n	800bd62 <_printf_common+0x3e>
 800bdd4:	18e1      	adds	r1, r4, r3
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	2030      	movs	r0, #48	; 0x30
 800bdda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdde:	4422      	add	r2, r4
 800bde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bde8:	3302      	adds	r3, #2
 800bdea:	e7c7      	b.n	800bd7c <_printf_common+0x58>
 800bdec:	2301      	movs	r3, #1
 800bdee:	4622      	mov	r2, r4
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	47c0      	blx	r8
 800bdf6:	3001      	adds	r0, #1
 800bdf8:	d0e6      	beq.n	800bdc8 <_printf_common+0xa4>
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7d9      	b.n	800bdb2 <_printf_common+0x8e>
	...

0800be00 <_printf_i>:
 800be00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be04:	7e0f      	ldrb	r7, [r1, #24]
 800be06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be08:	2f78      	cmp	r7, #120	; 0x78
 800be0a:	4691      	mov	r9, r2
 800be0c:	4680      	mov	r8, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	469a      	mov	sl, r3
 800be12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be16:	d807      	bhi.n	800be28 <_printf_i+0x28>
 800be18:	2f62      	cmp	r7, #98	; 0x62
 800be1a:	d80a      	bhi.n	800be32 <_printf_i+0x32>
 800be1c:	2f00      	cmp	r7, #0
 800be1e:	f000 80d4 	beq.w	800bfca <_printf_i+0x1ca>
 800be22:	2f58      	cmp	r7, #88	; 0x58
 800be24:	f000 80c0 	beq.w	800bfa8 <_printf_i+0x1a8>
 800be28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be30:	e03a      	b.n	800bea8 <_printf_i+0xa8>
 800be32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be36:	2b15      	cmp	r3, #21
 800be38:	d8f6      	bhi.n	800be28 <_printf_i+0x28>
 800be3a:	a101      	add	r1, pc, #4	; (adr r1, 800be40 <_printf_i+0x40>)
 800be3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be40:	0800be99 	.word	0x0800be99
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800be29 	.word	0x0800be29
 800be4c:	0800be29 	.word	0x0800be29
 800be50:	0800be29 	.word	0x0800be29
 800be54:	0800be29 	.word	0x0800be29
 800be58:	0800bead 	.word	0x0800bead
 800be5c:	0800be29 	.word	0x0800be29
 800be60:	0800be29 	.word	0x0800be29
 800be64:	0800be29 	.word	0x0800be29
 800be68:	0800be29 	.word	0x0800be29
 800be6c:	0800bfb1 	.word	0x0800bfb1
 800be70:	0800bed9 	.word	0x0800bed9
 800be74:	0800bf6b 	.word	0x0800bf6b
 800be78:	0800be29 	.word	0x0800be29
 800be7c:	0800be29 	.word	0x0800be29
 800be80:	0800bfd3 	.word	0x0800bfd3
 800be84:	0800be29 	.word	0x0800be29
 800be88:	0800bed9 	.word	0x0800bed9
 800be8c:	0800be29 	.word	0x0800be29
 800be90:	0800be29 	.word	0x0800be29
 800be94:	0800bf73 	.word	0x0800bf73
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	1d1a      	adds	r2, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	602a      	str	r2, [r5, #0]
 800bea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bea8:	2301      	movs	r3, #1
 800beaa:	e09f      	b.n	800bfec <_printf_i+0x1ec>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	0607      	lsls	r7, r0, #24
 800beb2:	f103 0104 	add.w	r1, r3, #4
 800beb6:	6029      	str	r1, [r5, #0]
 800beb8:	d501      	bpl.n	800bebe <_printf_i+0xbe>
 800beba:	681e      	ldr	r6, [r3, #0]
 800bebc:	e003      	b.n	800bec6 <_printf_i+0xc6>
 800bebe:	0646      	lsls	r6, r0, #25
 800bec0:	d5fb      	bpl.n	800beba <_printf_i+0xba>
 800bec2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	da03      	bge.n	800bed2 <_printf_i+0xd2>
 800beca:	232d      	movs	r3, #45	; 0x2d
 800becc:	4276      	negs	r6, r6
 800bece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bed2:	485a      	ldr	r0, [pc, #360]	; (800c03c <_printf_i+0x23c>)
 800bed4:	230a      	movs	r3, #10
 800bed6:	e012      	b.n	800befe <_printf_i+0xfe>
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	6820      	ldr	r0, [r4, #0]
 800bedc:	1d19      	adds	r1, r3, #4
 800bede:	6029      	str	r1, [r5, #0]
 800bee0:	0605      	lsls	r5, r0, #24
 800bee2:	d501      	bpl.n	800bee8 <_printf_i+0xe8>
 800bee4:	681e      	ldr	r6, [r3, #0]
 800bee6:	e002      	b.n	800beee <_printf_i+0xee>
 800bee8:	0641      	lsls	r1, r0, #25
 800beea:	d5fb      	bpl.n	800bee4 <_printf_i+0xe4>
 800beec:	881e      	ldrh	r6, [r3, #0]
 800beee:	4853      	ldr	r0, [pc, #332]	; (800c03c <_printf_i+0x23c>)
 800bef0:	2f6f      	cmp	r7, #111	; 0x6f
 800bef2:	bf0c      	ite	eq
 800bef4:	2308      	moveq	r3, #8
 800bef6:	230a      	movne	r3, #10
 800bef8:	2100      	movs	r1, #0
 800befa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800befe:	6865      	ldr	r5, [r4, #4]
 800bf00:	60a5      	str	r5, [r4, #8]
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	bfa2      	ittt	ge
 800bf06:	6821      	ldrge	r1, [r4, #0]
 800bf08:	f021 0104 	bicge.w	r1, r1, #4
 800bf0c:	6021      	strge	r1, [r4, #0]
 800bf0e:	b90e      	cbnz	r6, 800bf14 <_printf_i+0x114>
 800bf10:	2d00      	cmp	r5, #0
 800bf12:	d04b      	beq.n	800bfac <_printf_i+0x1ac>
 800bf14:	4615      	mov	r5, r2
 800bf16:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf1a:	fb03 6711 	mls	r7, r3, r1, r6
 800bf1e:	5dc7      	ldrb	r7, [r0, r7]
 800bf20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf24:	4637      	mov	r7, r6
 800bf26:	42bb      	cmp	r3, r7
 800bf28:	460e      	mov	r6, r1
 800bf2a:	d9f4      	bls.n	800bf16 <_printf_i+0x116>
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d10b      	bne.n	800bf48 <_printf_i+0x148>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	07de      	lsls	r6, r3, #31
 800bf34:	d508      	bpl.n	800bf48 <_printf_i+0x148>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	bfde      	ittt	le
 800bf3e:	2330      	movle	r3, #48	; 0x30
 800bf40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf48:	1b52      	subs	r2, r2, r5
 800bf4a:	6122      	str	r2, [r4, #16]
 800bf4c:	f8cd a000 	str.w	sl, [sp]
 800bf50:	464b      	mov	r3, r9
 800bf52:	aa03      	add	r2, sp, #12
 800bf54:	4621      	mov	r1, r4
 800bf56:	4640      	mov	r0, r8
 800bf58:	f7ff fee4 	bl	800bd24 <_printf_common>
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	d14a      	bne.n	800bff6 <_printf_i+0x1f6>
 800bf60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf64:	b004      	add	sp, #16
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	f043 0320 	orr.w	r3, r3, #32
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	4833      	ldr	r0, [pc, #204]	; (800c040 <_printf_i+0x240>)
 800bf74:	2778      	movs	r7, #120	; 0x78
 800bf76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	6829      	ldr	r1, [r5, #0]
 800bf7e:	061f      	lsls	r7, r3, #24
 800bf80:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf84:	d402      	bmi.n	800bf8c <_printf_i+0x18c>
 800bf86:	065f      	lsls	r7, r3, #25
 800bf88:	bf48      	it	mi
 800bf8a:	b2b6      	uxthmi	r6, r6
 800bf8c:	07df      	lsls	r7, r3, #31
 800bf8e:	bf48      	it	mi
 800bf90:	f043 0320 	orrmi.w	r3, r3, #32
 800bf94:	6029      	str	r1, [r5, #0]
 800bf96:	bf48      	it	mi
 800bf98:	6023      	strmi	r3, [r4, #0]
 800bf9a:	b91e      	cbnz	r6, 800bfa4 <_printf_i+0x1a4>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	f023 0320 	bic.w	r3, r3, #32
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	e7a7      	b.n	800bef8 <_printf_i+0xf8>
 800bfa8:	4824      	ldr	r0, [pc, #144]	; (800c03c <_printf_i+0x23c>)
 800bfaa:	e7e4      	b.n	800bf76 <_printf_i+0x176>
 800bfac:	4615      	mov	r5, r2
 800bfae:	e7bd      	b.n	800bf2c <_printf_i+0x12c>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	6826      	ldr	r6, [r4, #0]
 800bfb4:	6961      	ldr	r1, [r4, #20]
 800bfb6:	1d18      	adds	r0, r3, #4
 800bfb8:	6028      	str	r0, [r5, #0]
 800bfba:	0635      	lsls	r5, r6, #24
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	d501      	bpl.n	800bfc4 <_printf_i+0x1c4>
 800bfc0:	6019      	str	r1, [r3, #0]
 800bfc2:	e002      	b.n	800bfca <_printf_i+0x1ca>
 800bfc4:	0670      	lsls	r0, r6, #25
 800bfc6:	d5fb      	bpl.n	800bfc0 <_printf_i+0x1c0>
 800bfc8:	8019      	strh	r1, [r3, #0]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	4615      	mov	r5, r2
 800bfd0:	e7bc      	b.n	800bf4c <_printf_i+0x14c>
 800bfd2:	682b      	ldr	r3, [r5, #0]
 800bfd4:	1d1a      	adds	r2, r3, #4
 800bfd6:	602a      	str	r2, [r5, #0]
 800bfd8:	681d      	ldr	r5, [r3, #0]
 800bfda:	6862      	ldr	r2, [r4, #4]
 800bfdc:	2100      	movs	r1, #0
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f7f4 f92e 	bl	8000240 <memchr>
 800bfe4:	b108      	cbz	r0, 800bfea <_printf_i+0x1ea>
 800bfe6:	1b40      	subs	r0, r0, r5
 800bfe8:	6060      	str	r0, [r4, #4]
 800bfea:	6863      	ldr	r3, [r4, #4]
 800bfec:	6123      	str	r3, [r4, #16]
 800bfee:	2300      	movs	r3, #0
 800bff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff4:	e7aa      	b.n	800bf4c <_printf_i+0x14c>
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	462a      	mov	r2, r5
 800bffa:	4649      	mov	r1, r9
 800bffc:	4640      	mov	r0, r8
 800bffe:	47d0      	blx	sl
 800c000:	3001      	adds	r0, #1
 800c002:	d0ad      	beq.n	800bf60 <_printf_i+0x160>
 800c004:	6823      	ldr	r3, [r4, #0]
 800c006:	079b      	lsls	r3, r3, #30
 800c008:	d413      	bmi.n	800c032 <_printf_i+0x232>
 800c00a:	68e0      	ldr	r0, [r4, #12]
 800c00c:	9b03      	ldr	r3, [sp, #12]
 800c00e:	4298      	cmp	r0, r3
 800c010:	bfb8      	it	lt
 800c012:	4618      	movlt	r0, r3
 800c014:	e7a6      	b.n	800bf64 <_printf_i+0x164>
 800c016:	2301      	movs	r3, #1
 800c018:	4632      	mov	r2, r6
 800c01a:	4649      	mov	r1, r9
 800c01c:	4640      	mov	r0, r8
 800c01e:	47d0      	blx	sl
 800c020:	3001      	adds	r0, #1
 800c022:	d09d      	beq.n	800bf60 <_printf_i+0x160>
 800c024:	3501      	adds	r5, #1
 800c026:	68e3      	ldr	r3, [r4, #12]
 800c028:	9903      	ldr	r1, [sp, #12]
 800c02a:	1a5b      	subs	r3, r3, r1
 800c02c:	42ab      	cmp	r3, r5
 800c02e:	dcf2      	bgt.n	800c016 <_printf_i+0x216>
 800c030:	e7eb      	b.n	800c00a <_printf_i+0x20a>
 800c032:	2500      	movs	r5, #0
 800c034:	f104 0619 	add.w	r6, r4, #25
 800c038:	e7f5      	b.n	800c026 <_printf_i+0x226>
 800c03a:	bf00      	nop
 800c03c:	0800f05c 	.word	0x0800f05c
 800c040:	0800f06d 	.word	0x0800f06d

0800c044 <__swbuf_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	460e      	mov	r6, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	4605      	mov	r5, r0
 800c04c:	b118      	cbz	r0, 800c056 <__swbuf_r+0x12>
 800c04e:	6a03      	ldr	r3, [r0, #32]
 800c050:	b90b      	cbnz	r3, 800c056 <__swbuf_r+0x12>
 800c052:	f7ff fa89 	bl	800b568 <__sinit>
 800c056:	69a3      	ldr	r3, [r4, #24]
 800c058:	60a3      	str	r3, [r4, #8]
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	071a      	lsls	r2, r3, #28
 800c05e:	d525      	bpl.n	800c0ac <__swbuf_r+0x68>
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	b31b      	cbz	r3, 800c0ac <__swbuf_r+0x68>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	1a98      	subs	r0, r3, r2
 800c06a:	6963      	ldr	r3, [r4, #20]
 800c06c:	b2f6      	uxtb	r6, r6
 800c06e:	4283      	cmp	r3, r0
 800c070:	4637      	mov	r7, r6
 800c072:	dc04      	bgt.n	800c07e <__swbuf_r+0x3a>
 800c074:	4621      	mov	r1, r4
 800c076:	4628      	mov	r0, r5
 800c078:	f7ff fc46 	bl	800b908 <_fflush_r>
 800c07c:	b9e0      	cbnz	r0, 800c0b8 <__swbuf_r+0x74>
 800c07e:	68a3      	ldr	r3, [r4, #8]
 800c080:	3b01      	subs	r3, #1
 800c082:	60a3      	str	r3, [r4, #8]
 800c084:	6823      	ldr	r3, [r4, #0]
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	6022      	str	r2, [r4, #0]
 800c08a:	701e      	strb	r6, [r3, #0]
 800c08c:	6962      	ldr	r2, [r4, #20]
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	429a      	cmp	r2, r3
 800c092:	d004      	beq.n	800c09e <__swbuf_r+0x5a>
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	07db      	lsls	r3, r3, #31
 800c098:	d506      	bpl.n	800c0a8 <__swbuf_r+0x64>
 800c09a:	2e0a      	cmp	r6, #10
 800c09c:	d104      	bne.n	800c0a8 <__swbuf_r+0x64>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f7ff fc31 	bl	800b908 <_fflush_r>
 800c0a6:	b938      	cbnz	r0, 800c0b8 <__swbuf_r+0x74>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 f806 	bl	800c0c0 <__swsetup_r>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d0d5      	beq.n	800c064 <__swbuf_r+0x20>
 800c0b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c0bc:	e7f4      	b.n	800c0a8 <__swbuf_r+0x64>
	...

0800c0c0 <__swsetup_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4b2a      	ldr	r3, [pc, #168]	; (800c16c <__swsetup_r+0xac>)
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	b118      	cbz	r0, 800c0d4 <__swsetup_r+0x14>
 800c0cc:	6a03      	ldr	r3, [r0, #32]
 800c0ce:	b90b      	cbnz	r3, 800c0d4 <__swsetup_r+0x14>
 800c0d0:	f7ff fa4a 	bl	800b568 <__sinit>
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0da:	0718      	lsls	r0, r3, #28
 800c0dc:	d422      	bmi.n	800c124 <__swsetup_r+0x64>
 800c0de:	06d9      	lsls	r1, r3, #27
 800c0e0:	d407      	bmi.n	800c0f2 <__swsetup_r+0x32>
 800c0e2:	2309      	movs	r3, #9
 800c0e4:	602b      	str	r3, [r5, #0]
 800c0e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f0:	e034      	b.n	800c15c <__swsetup_r+0x9c>
 800c0f2:	0758      	lsls	r0, r3, #29
 800c0f4:	d512      	bpl.n	800c11c <__swsetup_r+0x5c>
 800c0f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0f8:	b141      	cbz	r1, 800c10c <__swsetup_r+0x4c>
 800c0fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0fe:	4299      	cmp	r1, r3
 800c100:	d002      	beq.n	800c108 <__swsetup_r+0x48>
 800c102:	4628      	mov	r0, r5
 800c104:	f7ff fb2e 	bl	800b764 <_free_r>
 800c108:	2300      	movs	r3, #0
 800c10a:	6363      	str	r3, [r4, #52]	; 0x34
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	2300      	movs	r3, #0
 800c116:	6063      	str	r3, [r4, #4]
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	6023      	str	r3, [r4, #0]
 800c11c:	89a3      	ldrh	r3, [r4, #12]
 800c11e:	f043 0308 	orr.w	r3, r3, #8
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	b94b      	cbnz	r3, 800c13c <__swsetup_r+0x7c>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c12e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c132:	d003      	beq.n	800c13c <__swsetup_r+0x7c>
 800c134:	4621      	mov	r1, r4
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f840 	bl	800c1bc <__smakebuf_r>
 800c13c:	89a0      	ldrh	r0, [r4, #12]
 800c13e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c142:	f010 0301 	ands.w	r3, r0, #1
 800c146:	d00a      	beq.n	800c15e <__swsetup_r+0x9e>
 800c148:	2300      	movs	r3, #0
 800c14a:	60a3      	str	r3, [r4, #8]
 800c14c:	6963      	ldr	r3, [r4, #20]
 800c14e:	425b      	negs	r3, r3
 800c150:	61a3      	str	r3, [r4, #24]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b943      	cbnz	r3, 800c168 <__swsetup_r+0xa8>
 800c156:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c15a:	d1c4      	bne.n	800c0e6 <__swsetup_r+0x26>
 800c15c:	bd38      	pop	{r3, r4, r5, pc}
 800c15e:	0781      	lsls	r1, r0, #30
 800c160:	bf58      	it	pl
 800c162:	6963      	ldrpl	r3, [r4, #20]
 800c164:	60a3      	str	r3, [r4, #8]
 800c166:	e7f4      	b.n	800c152 <__swsetup_r+0x92>
 800c168:	2000      	movs	r0, #0
 800c16a:	e7f7      	b.n	800c15c <__swsetup_r+0x9c>
 800c16c:	20000088 	.word	0x20000088

0800c170 <__swhatbuf_r>:
 800c170:	b570      	push	{r4, r5, r6, lr}
 800c172:	460c      	mov	r4, r1
 800c174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c178:	2900      	cmp	r1, #0
 800c17a:	b096      	sub	sp, #88	; 0x58
 800c17c:	4615      	mov	r5, r2
 800c17e:	461e      	mov	r6, r3
 800c180:	da0d      	bge.n	800c19e <__swhatbuf_r+0x2e>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c188:	f04f 0100 	mov.w	r1, #0
 800c18c:	bf0c      	ite	eq
 800c18e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c192:	2340      	movne	r3, #64	; 0x40
 800c194:	2000      	movs	r0, #0
 800c196:	6031      	str	r1, [r6, #0]
 800c198:	602b      	str	r3, [r5, #0]
 800c19a:	b016      	add	sp, #88	; 0x58
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
 800c19e:	466a      	mov	r2, sp
 800c1a0:	f000 f848 	bl	800c234 <_fstat_r>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	dbec      	blt.n	800c182 <__swhatbuf_r+0x12>
 800c1a8:	9901      	ldr	r1, [sp, #4]
 800c1aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c1ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c1b2:	4259      	negs	r1, r3
 800c1b4:	4159      	adcs	r1, r3
 800c1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1ba:	e7eb      	b.n	800c194 <__swhatbuf_r+0x24>

0800c1bc <__smakebuf_r>:
 800c1bc:	898b      	ldrh	r3, [r1, #12]
 800c1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c0:	079d      	lsls	r5, r3, #30
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	d507      	bpl.n	800c1d8 <__smakebuf_r+0x1c>
 800c1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	6123      	str	r3, [r4, #16]
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	6163      	str	r3, [r4, #20]
 800c1d4:	b002      	add	sp, #8
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	ab01      	add	r3, sp, #4
 800c1da:	466a      	mov	r2, sp
 800c1dc:	f7ff ffc8 	bl	800c170 <__swhatbuf_r>
 800c1e0:	9900      	ldr	r1, [sp, #0]
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff f869 	bl	800b2bc <_malloc_r>
 800c1ea:	b948      	cbnz	r0, 800c200 <__smakebuf_r+0x44>
 800c1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d4ef      	bmi.n	800c1d4 <__smakebuf_r+0x18>
 800c1f4:	f023 0303 	bic.w	r3, r3, #3
 800c1f8:	f043 0302 	orr.w	r3, r3, #2
 800c1fc:	81a3      	strh	r3, [r4, #12]
 800c1fe:	e7e3      	b.n	800c1c8 <__smakebuf_r+0xc>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	6020      	str	r0, [r4, #0]
 800c204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c208:	81a3      	strh	r3, [r4, #12]
 800c20a:	9b00      	ldr	r3, [sp, #0]
 800c20c:	6163      	str	r3, [r4, #20]
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	6120      	str	r0, [r4, #16]
 800c212:	b15b      	cbz	r3, 800c22c <__smakebuf_r+0x70>
 800c214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c218:	4630      	mov	r0, r6
 800c21a:	f000 f81d 	bl	800c258 <_isatty_r>
 800c21e:	b128      	cbz	r0, 800c22c <__smakebuf_r+0x70>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	f023 0303 	bic.w	r3, r3, #3
 800c226:	f043 0301 	orr.w	r3, r3, #1
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	431d      	orrs	r5, r3
 800c230:	81a5      	strh	r5, [r4, #12]
 800c232:	e7cf      	b.n	800c1d4 <__smakebuf_r+0x18>

0800c234 <_fstat_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	; (800c254 <_fstat_r+0x20>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f7 f922 	bl	800348a <_fstat>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_fstat_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_fstat_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20005280 	.word	0x20005280

0800c258 <_isatty_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_isatty_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f7 f921 	bl	80034aa <_isatty>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_isatty_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_isatty_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	20005280 	.word	0x20005280

0800c278 <_raise_r>:
 800c278:	291f      	cmp	r1, #31
 800c27a:	b538      	push	{r3, r4, r5, lr}
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	d904      	bls.n	800c28c <_raise_r+0x14>
 800c282:	2316      	movs	r3, #22
 800c284:	6003      	str	r3, [r0, #0]
 800c286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c28e:	b112      	cbz	r2, 800c296 <_raise_r+0x1e>
 800c290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c294:	b94b      	cbnz	r3, 800c2aa <_raise_r+0x32>
 800c296:	4620      	mov	r0, r4
 800c298:	f000 f830 	bl	800c2fc <_getpid_r>
 800c29c:	462a      	mov	r2, r5
 800c29e:	4601      	mov	r1, r0
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2a6:	f000 b817 	b.w	800c2d8 <_kill_r>
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d00a      	beq.n	800c2c4 <_raise_r+0x4c>
 800c2ae:	1c59      	adds	r1, r3, #1
 800c2b0:	d103      	bne.n	800c2ba <_raise_r+0x42>
 800c2b2:	2316      	movs	r3, #22
 800c2b4:	6003      	str	r3, [r0, #0]
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	e7e7      	b.n	800c28a <_raise_r+0x12>
 800c2ba:	2400      	movs	r4, #0
 800c2bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	4798      	blx	r3
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	e7e0      	b.n	800c28a <_raise_r+0x12>

0800c2c8 <raise>:
 800c2c8:	4b02      	ldr	r3, [pc, #8]	; (800c2d4 <raise+0xc>)
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	6818      	ldr	r0, [r3, #0]
 800c2ce:	f7ff bfd3 	b.w	800c278 <_raise_r>
 800c2d2:	bf00      	nop
 800c2d4:	20000088 	.word	0x20000088

0800c2d8 <_kill_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d07      	ldr	r5, [pc, #28]	; (800c2f8 <_kill_r+0x20>)
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	4608      	mov	r0, r1
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	602b      	str	r3, [r5, #0]
 800c2e6:	f7f7 f871 	bl	80033cc <_kill>
 800c2ea:	1c43      	adds	r3, r0, #1
 800c2ec:	d102      	bne.n	800c2f4 <_kill_r+0x1c>
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	b103      	cbz	r3, 800c2f4 <_kill_r+0x1c>
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	bd38      	pop	{r3, r4, r5, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20005280 	.word	0x20005280

0800c2fc <_getpid_r>:
 800c2fc:	f7f7 b85e 	b.w	80033bc <_getpid>

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
