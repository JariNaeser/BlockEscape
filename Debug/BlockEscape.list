
BlockEscape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c55c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d74  0800c75c  0800c75c  0001c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4d0  0800f4d0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4d8  0800f4d8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4d8  0800f4d8  0001f4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4dc  0800f4dc  0001f4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800f4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000508c  2000008c  0800f56c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005118  0800f56c  00025118  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029dd7  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000640e  00000000  00000000  00049ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002188  00000000  00000000  000502e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001990  00000000  00000000  00052470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003699a  00000000  00000000  00053e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cb9d  00000000  00000000  0008a79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013531f  00000000  00000000  000b7337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000094b8  00000000  00000000  001ec658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001f5b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c744 	.word	0x0800c744

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	0800c744 	.word	0x0800c744

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80005e0:	2001      	movs	r0, #1
 80005e2:	f000 f803 	bl	80005ec <BSP_LCD_InitEx>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}

080005ec <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80005f6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000604:	f000 f934 	bl	8000870 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000608:	f000 fbf6 	bl	8000df8 <LCD_IO_GetID>
 800060c:	4603      	mov	r3, r0
 800060e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000610:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000612:	2b11      	cmp	r3, #17
 8000614:	d001      	beq.n	800061a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000616:	2301      	movs	r3, #1
 8000618:	e111      	b.n	800083e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800061a:	f000 fbf5 	bl	8000e08 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000620:	4a8a      	ldr	r2, [pc, #552]	; (800084c <BSP_LCD_InitEx+0x260>)
 8000622:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000624:	4888      	ldr	r0, [pc, #544]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000626:	f004 fa13 	bl	8004a50 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800062e:	2305      	movs	r3, #5
 8000630:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800063a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800063e:	2201      	movs	r2, #1
 8000640:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	4a82      	ldr	r2, [pc, #520]	; (8000850 <BSP_LCD_InitEx+0x264>)
 8000648:	fba2 2303 	umull	r2, r3, r2, r3
 800064c:	0a9b      	lsrs	r3, r3, #10
 800064e:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000650:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	487b      	ldr	r0, [pc, #492]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 800065a:	f004 f8dd 	bl	8004818 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8000664:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000666:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800066a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800066c:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800066e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8000676:	4b77      	ldr	r3, [pc, #476]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000678:	f44f 7248 	mov.w	r2, #800	; 0x320
 800067c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800067e:	4b76      	ldr	r3, [pc, #472]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 8000680:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000684:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8000686:	4b73      	ldr	r3, [pc, #460]	; (8000854 <BSP_LCD_InitEx+0x268>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8000692:	2301      	movs	r3, #1
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8000696:	230f      	movs	r3, #15
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800069a:	2310      	movs	r3, #16
 800069c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80006a2:	2322      	movs	r3, #34	; 0x22
 80006a4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80006aa:	4b6c      	ldr	r3, [pc, #432]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80006b0:	4b6a      	ldr	r3, [pc, #424]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80006bc:	4b67      	ldr	r3, [pc, #412]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80006ce:	4b63      	ldr	r3, [pc, #396]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006d4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80006d6:	4b61      	ldr	r3, [pc, #388]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80006dc:	4a5f      	ldr	r2, [pc, #380]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006e6:	fb03 f202 	mul.w	r2, r3, r2
 80006ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a5a      	ldr	r2, [pc, #360]	; (800085c <BSP_LCD_InitEx+0x270>)
 80006f2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006f8:	fb03 f202 	mul.w	r2, r3, r2
 80006fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4a56      	ldr	r2, [pc, #344]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000704:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	441a      	add	r2, r3
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	441a      	add	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000716:	fb03 f202 	mul.w	r2, r3, r2
 800071a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000724:	4a4d      	ldr	r2, [pc, #308]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800072a:	4a4c      	ldr	r2, [pc, #304]	; (800085c <BSP_LCD_InitEx+0x270>)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <BSP_LCD_InitEx+0x270>)
 800073e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8000744:	4b45      	ldr	r3, [pc, #276]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000746:	2210      	movs	r2, #16
 8000748:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <BSP_LCD_InitEx+0x270>)
 800074c:	2200      	movs	r2, #0
 800074e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000756:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8000758:	4b40      	ldr	r3, [pc, #256]	; (800085c <BSP_LCD_InitEx+0x270>)
 800075a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800075e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000766:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <BSP_LCD_InitEx+0x270>)
 800076a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000776:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <BSP_LCD_InitEx+0x270>)
 800077a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8000780:	4936      	ldr	r1, [pc, #216]	; (800085c <BSP_LCD_InitEx+0x270>)
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000784:	f004 fabc 	bl	8004d00 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800078e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8000790:	69fa      	ldr	r2, [r7, #28]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	4413      	add	r3, r2
 8000796:	3b01      	subs	r3, #1
 8000798:	4a31      	ldr	r2, [pc, #196]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800079a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <BSP_LCD_InitEx+0x268>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	441a      	add	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	4413      	add	r3, r2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ac:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	441a      	add	r2, r3
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	441a      	add	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <BSP_LCD_InitEx+0x268>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a25      	ldr	r2, [pc, #148]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007ca:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <BSP_LCD_InitEx+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a23      	ldr	r2, [pc, #140]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007d2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80007e0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <BSP_LCD_InitEx+0x278>)
 80007f0:	f006 fa2c 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <BSP_LCD_InitEx+0x274>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <BSP_LCD_InitEx+0x27c>)
 8000816:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000818:	4910      	ldr	r1, [pc, #64]	; (800085c <BSP_LCD_InitEx+0x270>)
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <BSP_LCD_InitEx+0x274>)
 800081c:	f005 fcb4 	bl	8006188 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <BSP_LCD_InitEx+0x274>)
 8000822:	f005 fa09 	bl	8005c38 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <BSP_LCD_InitEx+0x25c>)
 8000828:	f004 fdc4 	bl	80053b4 <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800082c:	480f      	ldr	r0, [pc, #60]	; (800086c <BSP_LCD_InitEx+0x280>)
 800082e:	f000 f911 	bl	8000a54 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fc66 	bl	8001108 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000214 	.word	0x20000214
 800084c:	40016c00 	.word	0x40016c00
 8000850:	43215e57 	.word	0x43215e57
 8000854:	20000000 	.word	0x20000000
 8000858:	20000004 	.word	0x20000004
 800085c:	200000a8 	.word	0x200000a8
 8000860:	2000016c 	.word	0x2000016c
 8000864:	2000024c 	.word	0x2000024c
 8000868:	40016800 	.word	0x40016800
 800086c:	20000010 	.word	0x20000010

08000870 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <BSP_LCD_Reset+0x68>)
 800087c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <BSP_LCD_Reset+0x68>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800088e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000892:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008a6:	f004 fea9 	bl	80055fc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008b2:	f005 f867 	bl	8005984 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80008b6:	2014      	movs	r0, #20
 80008b8:	f002 ffbe 	bl	8003838 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <BSP_LCD_Reset+0x6c>)
 80008c4:	f005 f85e 	bl	8005984 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f002 ffb5 	bl	8003838 <HAL_Delay>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40022400 	.word	0x40022400

080008e0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <BSP_LCD_GetXSize+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000

080008f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <BSP_LCD_GetYSize+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000004 	.word	0x20000004

08000910 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000920:	f7ff ffde 	bl	80008e0 <BSP_LCD_GetXSize>
 8000924:	4603      	mov	r3, r0
 8000926:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800092c:	f7ff ffe4 	bl	80008f8 <BSP_LCD_GetYSize>
 8000930:	4603      	mov	r3, r0
 8000932:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800093c:	23ff      	movs	r3, #255	; 0xff
 800093e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000956:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800095c:	2307      	movs	r3, #7
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8000960:	f7ff ffbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000964:	4603      	mov	r3, r0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8000968:	f7ff ffc6 	bl	80008f8 <BSP_LCD_GetYSize>
 800096c:	4603      	mov	r3, r0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8000970:	88fa      	ldrh	r2, [r7, #6]
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800097a:	f005 fa2d 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800097e:	88fa      	ldrh	r2, [r7, #6]
 8000980:	4911      	ldr	r1, [pc, #68]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000992:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3308      	adds	r3, #8
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <BSP_LCD_LayerDefaultInit+0xbc>)
 80009a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80009a8:	88fa      	ldrh	r2, [r7, #6]
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	3740      	adds	r7, #64	; 0x40
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	2000016c 	.word	0x2000016c
 80009c8:	20000234 	.word	0x20000234
 80009cc:	20000010 	.word	0x20000010

080009d0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <BSP_LCD_SelectLayer+0x1c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000230 	.word	0x20000230

080009f0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <BSP_LCD_SetTextColor+0x28>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <BSP_LCD_SetTextColor+0x2c>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	440b      	add	r3, r1
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	601a      	str	r2, [r3, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20000230 	.word	0x20000230
 8000a1c:	20000234 	.word	0x20000234

08000a20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <BSP_LCD_SetBackColor+0x2c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <BSP_LCD_SetBackColor+0x30>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3304      	adds	r3, #4
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000230 	.word	0x20000230
 8000a50:	20000234 	.word	0x20000234

08000a54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <BSP_LCD_SetFont+0x2c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4908      	ldr	r1, [pc, #32]	; (8000a84 <BSP_LCD_SetFont+0x30>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3308      	adds	r3, #8
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000230 	.word	0x20000230
 8000a84:	20000234 	.word	0x20000234

08000a88 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <BSP_LCD_Clear+0x48>)
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <BSP_LCD_Clear+0x48>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <BSP_LCD_Clear+0x4c>)
 8000a9a:	2134      	movs	r1, #52	; 0x34
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	335c      	adds	r3, #92	; 0x5c
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	461e      	mov	r6, r3
 8000aa8:	f7ff ff1a 	bl	80008e0 <BSP_LCD_GetXSize>
 8000aac:	4605      	mov	r5, r0
 8000aae:	f7ff ff23 	bl	80008f8 <BSP_LCD_GetYSize>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4613      	mov	r3, r2
 8000abe:	462a      	mov	r2, r5
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f000 fae8 	bl	8001098 <LL_FillBuffer>
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad0:	20000230 	.word	0x20000230
 8000ad4:	2000016c 	.word	0x2000016c

08000ad8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	80bb      	strh	r3, [r7, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	491b      	ldr	r1, [pc, #108]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	3308      	adds	r3, #8
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4c14      	ldr	r4, [pc, #80]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4423      	add	r3, r4
 8000b16:	3308      	adds	r3, #8
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b1c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <BSP_LCD_DisplayChar+0x80>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4c0d      	ldr	r4, [pc, #52]	; (8000b5c <BSP_LCD_DisplayChar+0x84>)
 8000b26:	4613      	mov	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4423      	add	r3, r4
 8000b30:	3308      	adds	r3, #8
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	3307      	adds	r3, #7
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <BSP_LCD_DisplayChar+0x66>
 8000b3c:	3307      	adds	r3, #7
 8000b3e:	10db      	asrs	r3, r3, #3
 8000b40:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8000b44:	18ca      	adds	r2, r1, r3
 8000b46:	88b9      	ldrh	r1, [r7, #4]
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f9ec 	bl	8000f28 <DrawChar>
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	20000230 	.word	0x20000230
 8000b5c:	20000234 	.word	0x20000234

08000b60 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60ba      	str	r2, [r7, #8]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	81fb      	strh	r3, [r7, #14]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	81bb      	strh	r3, [r7, #12]
 8000b72:	4613      	mov	r3, r2
 8000b74:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8000b76:	2301      	movs	r3, #1
 8000b78:	83fb      	strh	r3, [r7, #30]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000b8a:	e002      	b.n	8000b92 <BSP_LCD_DisplayStringAt+0x32>
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	617a      	str	r2, [r7, #20]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f6      	bne.n	8000b8c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8000b9e:	f7ff fe9f 	bl	80008e0 <BSP_LCD_GetXSize>
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	4b50      	ldr	r3, [pc, #320]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4850      	ldr	r0, [pc, #320]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4403      	add	r3, r0
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bbe:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d01c      	beq.n	8000c00 <BSP_LCD_DisplayStringAt+0xa0>
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	dc33      	bgt.n	8000c32 <BSP_LCD_DisplayStringAt+0xd2>
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d002      	beq.n	8000bd4 <BSP_LCD_DisplayStringAt+0x74>
 8000bce:	2b02      	cmp	r3, #2
 8000bd0:	d019      	beq.n	8000c06 <BSP_LCD_DisplayStringAt+0xa6>
 8000bd2:	e02e      	b.n	8000c32 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	1ad1      	subs	r1, r2, r3
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4843      	ldr	r0, [pc, #268]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4403      	add	r3, r0
 8000bea:	3308      	adds	r3, #8
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	fb01 f303 	mul.w	r3, r1, r3
 8000bf4:	085b      	lsrs	r3, r3, #1
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	83fb      	strh	r3, [r7, #30]
      break;
 8000bfe:	e01b      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000c00:	89fb      	ldrh	r3, [r7, #14]
 8000c02:	83fb      	strh	r3, [r7, #30]
      break;
 8000c04:	e018      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	b299      	uxth	r1, r3
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4836      	ldr	r0, [pc, #216]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4403      	add	r3, r0
 8000c1e:	3308      	adds	r3, #8
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	889b      	ldrh	r3, [r3, #4]
 8000c24:	fb11 f303 	smulbb	r3, r1, r3
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	83fb      	strh	r3, [r7, #30]
      break;
 8000c30:	e002      	b.n	8000c38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8000c32:	89fb      	ldrh	r3, [r7, #14]
 8000c34:	83fb      	strh	r3, [r7, #30]
      break;
 8000c36:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8000c38:	8bfb      	ldrh	r3, [r7, #30]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <BSP_LCD_DisplayStringAt+0xe6>
 8000c3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da1d      	bge.n	8000c82 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c4a:	e01a      	b.n	8000c82 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	89b9      	ldrh	r1, [r7, #12]
 8000c52:	8bfb      	ldrh	r3, [r7, #30]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff3f 	bl	8000ad8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4923      	ldr	r1, [pc, #140]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	889a      	ldrh	r2, [r3, #4]
 8000c70:	8bfb      	ldrh	r3, [r7, #30]
 8000c72:	4413      	add	r3, r2
 8000c74:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    i++;
 8000c7c:	8bbb      	ldrh	r3, [r7, #28]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf14      	ite	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	2300      	moveq	r3, #0
 8000c8e:	b2dc      	uxtb	r4, r3
 8000c90:	f7ff fe26 	bl	80008e0 <BSP_LCD_GetXSize>
 8000c94:	8bb9      	ldrh	r1, [r7, #28]
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4d14      	ldr	r5, [pc, #80]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	fb01 f303 	mul.w	r3, r1, r3
 8000cb0:	1ac3      	subs	r3, r0, r3
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <BSP_LCD_DisplayStringAt+0x188>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <BSP_LCD_DisplayStringAt+0x18c>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4403      	add	r3, r0
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	bf2c      	ite	cs
 8000cce:	2301      	movcs	r3, #1
 8000cd0:	2300      	movcc	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4023      	ands	r3, r4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1b7      	bne.n	8000c4c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000230 	.word	0x20000230
 8000cec:	20000234 	.word	0x20000234

08000cf0 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4623      	mov	r3, r4
 8000d02:	80fb      	strh	r3, [r7, #6]
 8000d04:	4603      	mov	r3, r0
 8000d06:	80bb      	strh	r3, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4920      	ldr	r1, [pc, #128]	; (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fe62 	bl	80009f0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <BSP_LCD_FillRect+0xb0>)
 8000d32:	2134      	movs	r1, #52	; 0x34
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	335c      	adds	r3, #92	; 0x5c
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	f7ff fdcf 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d42:	4602      	mov	r2, r0
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	fb03 f202 	mul.w	r2, r3, r2
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4423      	add	r3, r4
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	68fd      	ldr	r5, [r7, #12]
 8000d5a:	887e      	ldrh	r6, [r7, #2]
 8000d5c:	f8b7 8000 	ldrh.w	r8, [r7]
 8000d60:	f7ff fdbe 	bl	80008e0 <BSP_LCD_GetXSize>
 8000d64:	4602      	mov	r2, r0
 8000d66:	887b      	ldrh	r3, [r7, #2]
 8000d68:	1ad1      	subs	r1, r2, r3
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <BSP_LCD_FillRect+0xa8>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <BSP_LCD_FillRect+0xac>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4403      	add	r3, r0
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	9100      	str	r1, [sp, #0]
 8000d80:	4643      	mov	r3, r8
 8000d82:	4632      	mov	r2, r6
 8000d84:	4629      	mov	r1, r5
 8000d86:	4620      	mov	r0, r4
 8000d88:	f000 f986 	bl	8001098 <LL_FillBuffer>
}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d96:	bf00      	nop
 8000d98:	20000230 	.word	0x20000230
 8000d9c:	20000234 	.word	0x20000234
 8000da0:	2000016c 	.word	0x2000016c

08000da4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d80d      	bhi.n	8000dd0 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2215      	movs	r2, #21
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000dca:	f004 fb2f 	bl	800542c <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8000dce:	e00d      	b.n	8000dec <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2239      	movs	r2, #57	; 0x39
 8000de4:	2100      	movs	r1, #0
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <DSI_IO_WriteCmd+0x50>)
 8000de8:	f004 fb42 	bl	8005470 <HAL_DSI_LongWrite>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000214 	.word	0x20000214

08000df8 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8000dfc:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e30:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000e32:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	4a28      	ldr	r2, [pc, #160]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e3c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e60:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e6c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e90:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <BSP_LCD_MspInit+0xd0>)
 8000e98:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000e9c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	2058      	movs	r0, #88	; 0x58
 8000ea4:	f003 f99e 	bl	80041e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ea8:	2058      	movs	r0, #88	; 0x58
 8000eaa:	f003 f9b7 	bl	800421c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	205a      	movs	r0, #90	; 0x5a
 8000eb4:	f003 f996 	bl	80041e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb8:	205a      	movs	r0, #90	; 0x5a
 8000eba:	f003 f9af 	bl	800421c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	2062      	movs	r0, #98	; 0x62
 8000ec4:	f003 f98e 	bl	80041e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000ec8:	2062      	movs	r0, #98	; 0x62
 8000eca:	f003 f9a7 	bl	800421c <HAL_NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	603a      	str	r2, [r7, #0]
 8000ee6:	80fb      	strh	r3, [r7, #6]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <BSP_LCD_DrawPixel+0x44>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <BSP_LCD_DrawPixel+0x48>)
 8000ef2:	2134      	movs	r1, #52	; 0x34
 8000ef4:	fb01 f303 	mul.w	r3, r1, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	335c      	adds	r3, #92	; 0x5c
 8000efc:	681c      	ldr	r4, [r3, #0]
 8000efe:	88bd      	ldrh	r5, [r7, #4]
 8000f00:	f7ff fcee 	bl	80008e0 <BSP_LCD_GetXSize>
 8000f04:	4603      	mov	r3, r0
 8000f06:	fb03 f205 	mul.w	r2, r3, r5
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4423      	add	r3, r4
 8000f12:	461a      	mov	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	20000230 	.word	0x20000230
 8000f24:	2000016c 	.word	0x2000016c

08000f28 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	603a      	str	r2, [r7, #0]
 8000f32:	80fb      	strh	r3, [r7, #6]
 8000f34:	460b      	mov	r3, r1
 8000f36:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8000f40:	4b53      	ldr	r3, [pc, #332]	; (8001090 <DrawChar+0x168>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4953      	ldr	r1, [pc, #332]	; (8001094 <DrawChar+0x16c>)
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3308      	adds	r3, #8
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	88db      	ldrh	r3, [r3, #6]
 8000f56:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <DrawChar+0x168>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	494d      	ldr	r1, [pc, #308]	; (8001094 <DrawChar+0x16c>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8000f70:	8a3b      	ldrh	r3, [r7, #16]
 8000f72:	3307      	adds	r3, #7
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	da00      	bge.n	8000f7a <DrawChar+0x52>
 8000f78:	3307      	adds	r3, #7
 8000f7a:	10db      	asrs	r3, r3, #3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e076      	b.n	800107e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000f90:	8a3b      	ldrh	r3, [r7, #16]
 8000f92:	3307      	adds	r3, #7
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da00      	bge.n	8000f9a <DrawChar+0x72>
 8000f98:	3307      	adds	r3, #7
 8000f9a:	10db      	asrs	r3, r3, #3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8000faa:	8a3b      	ldrh	r3, [r7, #16]
 8000fac:	3307      	adds	r3, #7
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	da00      	bge.n	8000fb4 <DrawChar+0x8c>
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	10db      	asrs	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d002      	beq.n	8000fc0 <DrawChar+0x98>
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d004      	beq.n	8000fc8 <DrawChar+0xa0>
 8000fbe:	e00c      	b.n	8000fda <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	617b      	str	r3, [r7, #20]
      break;
 8000fc6:	e016      	b.n	8000ff6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	3201      	adds	r2, #1
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
      break;
 8000fd8:	e00d      	b.n	8000ff6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041a      	lsls	r2, r3, #16
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	3202      	adds	r2, #2
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
      break;
 8000ff4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	e036      	b.n	800106a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8000ffc:	8a3a      	ldrh	r2, [r7, #16]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad2      	subs	r2, r2, r3
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	4413      	add	r3, r2
 8001006:	3b01      	subs	r3, #1
 8001008:	2201      	movs	r2, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d012      	beq.n	800103e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	b29a      	uxth	r2, r3
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4413      	add	r3, r2
 8001020:	b298      	uxth	r0, r3
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <DrawChar+0x168>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	491b      	ldr	r1, [pc, #108]	; (8001094 <DrawChar+0x16c>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff ff50 	bl	8000edc <BSP_LCD_DrawPixel>
 800103c:	e012      	b.n	8001064 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	b29a      	uxth	r2, r3
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4413      	add	r3, r2
 8001046:	b298      	uxth	r0, r3
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <DrawChar+0x168>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <DrawChar+0x16c>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3304      	adds	r3, #4
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff ff3c 	bl	8000edc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	3301      	adds	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	8a3b      	ldrh	r3, [r7, #16]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3c4      	bcc.n	8000ffc <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001072:	88bb      	ldrh	r3, [r7, #4]
 8001074:	3301      	adds	r3, #1
 8001076:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3301      	adds	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	8a7b      	ldrh	r3, [r7, #18]
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	429a      	cmp	r2, r3
 8001084:	d384      	bcc.n	8000f90 <DrawChar+0x68>
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000230 	.word	0x20000230
 8001094:	20000234 	.word	0x20000234

08001098 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <LL_FillBuffer+0x68>)
 80010a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010ac:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <LL_FillBuffer+0x68>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <LL_FillBuffer+0x68>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <LL_FillBuffer+0x68>)
 80010bc:	4a11      	ldr	r2, [pc, #68]	; (8001104 <LL_FillBuffer+0x6c>)
 80010be:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <LL_FillBuffer+0x68>)
 80010c2:	f003 f8b9 	bl	8004238 <HAL_DMA2D_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d115      	bne.n	80010f8 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	480c      	ldr	r0, [pc, #48]	; (8001100 <LL_FillBuffer+0x68>)
 80010d0:	f003 fa20 	bl	8004514 <HAL_DMA2D_ConfigLayer>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10e      	bne.n	80010f8 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69f9      	ldr	r1, [r7, #28]
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <LL_FillBuffer+0x68>)
 80010e6:	f003 f901 	bl	80042ec <HAL_DMA2D_Start>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80010f0:	210a      	movs	r1, #10
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <LL_FillBuffer+0x68>)
 80010f4:	f003 f925 	bl	8004342 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000114 	.word	0x20000114
 8001104:	4002b000 	.word	0x4002b000

08001108 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001112:	49c1      	ldr	r1, [pc, #772]	; (8001418 <OTM8009A_Init+0x310>)
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff fe45 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800111a:	49c0      	ldr	r1, [pc, #768]	; (800141c <OTM8009A_Init+0x314>)
 800111c:	2003      	movs	r0, #3
 800111e:	f7ff fe41 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001122:	49bf      	ldr	r1, [pc, #764]	; (8001420 <OTM8009A_Init+0x318>)
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fe3d 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800112a:	49be      	ldr	r1, [pc, #760]	; (8001424 <OTM8009A_Init+0x31c>)
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fe39 	bl	8000da4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001132:	49bb      	ldr	r1, [pc, #748]	; (8001420 <OTM8009A_Init+0x318>)
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fe35 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800113a:	49bb      	ldr	r1, [pc, #748]	; (8001428 <OTM8009A_Init+0x320>)
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff fe31 	bl	8000da4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f002 fb78 	bl	8003838 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001148:	49b8      	ldr	r1, [pc, #736]	; (800142c <OTM8009A_Init+0x324>)
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff fe2a 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001150:	49b7      	ldr	r1, [pc, #732]	; (8001430 <OTM8009A_Init+0x328>)
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fe26 	bl	8000da4 <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f002 fb6d 	bl	8003838 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800115e:	49b5      	ldr	r1, [pc, #724]	; (8001434 <OTM8009A_Init+0x32c>)
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fe1f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8001166:	49b4      	ldr	r1, [pc, #720]	; (8001438 <OTM8009A_Init+0x330>)
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fe1b 	bl	8000da4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800116e:	49b3      	ldr	r1, [pc, #716]	; (800143c <OTM8009A_Init+0x334>)
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fe17 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001176:	49b2      	ldr	r1, [pc, #712]	; (8001440 <OTM8009A_Init+0x338>)
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fe13 	bl	8000da4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800117e:	49b1      	ldr	r1, [pc, #708]	; (8001444 <OTM8009A_Init+0x33c>)
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fe0f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8001186:	49b0      	ldr	r1, [pc, #704]	; (8001448 <OTM8009A_Init+0x340>)
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fe0b 	bl	8000da4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800118e:	49a2      	ldr	r1, [pc, #648]	; (8001418 <OTM8009A_Init+0x310>)
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fe07 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8001196:	49ad      	ldr	r1, [pc, #692]	; (800144c <OTM8009A_Init+0x344>)
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fe03 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800119e:	49ac      	ldr	r1, [pc, #688]	; (8001450 <OTM8009A_Init+0x348>)
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fdff 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80011a6:	49ab      	ldr	r1, [pc, #684]	; (8001454 <OTM8009A_Init+0x34c>)
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fdfb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80011ae:	49aa      	ldr	r1, [pc, #680]	; (8001458 <OTM8009A_Init+0x350>)
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fdf7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80011b6:	49a9      	ldr	r1, [pc, #676]	; (800145c <OTM8009A_Init+0x354>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fdf3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80011be:	49a8      	ldr	r1, [pc, #672]	; (8001460 <OTM8009A_Init+0x358>)
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fdef 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80011c6:	49a7      	ldr	r1, [pc, #668]	; (8001464 <OTM8009A_Init+0x35c>)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fdeb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80011ce:	49a6      	ldr	r1, [pc, #664]	; (8001468 <OTM8009A_Init+0x360>)
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fde7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80011d6:	499a      	ldr	r1, [pc, #616]	; (8001440 <OTM8009A_Init+0x338>)
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fde3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80011de:	498e      	ldr	r1, [pc, #568]	; (8001418 <OTM8009A_Init+0x310>)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fddf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80011e6:	49a1      	ldr	r1, [pc, #644]	; (800146c <OTM8009A_Init+0x364>)
 80011e8:	2002      	movs	r0, #2
 80011ea:	f7ff fddb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80011ee:	49a0      	ldr	r1, [pc, #640]	; (8001470 <OTM8009A_Init+0x368>)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fdd7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80011f6:	499f      	ldr	r1, [pc, #636]	; (8001474 <OTM8009A_Init+0x36c>)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fdd3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80011fe:	499e      	ldr	r1, [pc, #632]	; (8001478 <OTM8009A_Init+0x370>)
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fdcf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001206:	499d      	ldr	r1, [pc, #628]	; (800147c <OTM8009A_Init+0x374>)
 8001208:	2000      	movs	r0, #0
 800120a:	f7ff fdcb 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800120e:	499c      	ldr	r1, [pc, #624]	; (8001480 <OTM8009A_Init+0x378>)
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fdc7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001216:	499b      	ldr	r1, [pc, #620]	; (8001484 <OTM8009A_Init+0x37c>)
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fdc3 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800121e:	498c      	ldr	r1, [pc, #560]	; (8001450 <OTM8009A_Init+0x348>)
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fdbf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001226:	4998      	ldr	r1, [pc, #608]	; (8001488 <OTM8009A_Init+0x380>)
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fdbb 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800122e:	498a      	ldr	r1, [pc, #552]	; (8001458 <OTM8009A_Init+0x350>)
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff fdb7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001236:	4995      	ldr	r1, [pc, #596]	; (800148c <OTM8009A_Init+0x384>)
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff fdb3 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800123e:	4994      	ldr	r1, [pc, #592]	; (8001490 <OTM8009A_Init+0x388>)
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fdaf 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8001246:	4993      	ldr	r1, [pc, #588]	; (8001494 <OTM8009A_Init+0x38c>)
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fdab 	bl	8000da4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800124e:	4974      	ldr	r1, [pc, #464]	; (8001420 <OTM8009A_Init+0x318>)
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fda7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8001256:	4990      	ldr	r1, [pc, #576]	; (8001498 <OTM8009A_Init+0x390>)
 8001258:	2006      	movs	r0, #6
 800125a:	f7ff fda3 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800125e:	498f      	ldr	r1, [pc, #572]	; (800149c <OTM8009A_Init+0x394>)
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fd9f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8001266:	498e      	ldr	r1, [pc, #568]	; (80014a0 <OTM8009A_Init+0x398>)
 8001268:	200e      	movs	r0, #14
 800126a:	f7ff fd9b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800126e:	498d      	ldr	r1, [pc, #564]	; (80014a4 <OTM8009A_Init+0x39c>)
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fd97 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8001276:	498c      	ldr	r1, [pc, #560]	; (80014a8 <OTM8009A_Init+0x3a0>)
 8001278:	200e      	movs	r0, #14
 800127a:	f7ff fd93 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800127e:	498b      	ldr	r1, [pc, #556]	; (80014ac <OTM8009A_Init+0x3a4>)
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fd8f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8001286:	498a      	ldr	r1, [pc, #552]	; (80014b0 <OTM8009A_Init+0x3a8>)
 8001288:	200a      	movs	r0, #10
 800128a:	f7ff fd8b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800128e:	4989      	ldr	r1, [pc, #548]	; (80014b4 <OTM8009A_Init+0x3ac>)
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fd87 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8001296:	4988      	ldr	r1, [pc, #544]	; (80014b8 <OTM8009A_Init+0x3b0>)
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fd83 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800129e:	4960      	ldr	r1, [pc, #384]	; (8001420 <OTM8009A_Init+0x318>)
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fd7f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80012a6:	4985      	ldr	r1, [pc, #532]	; (80014bc <OTM8009A_Init+0x3b4>)
 80012a8:	200a      	movs	r0, #10
 80012aa:	f7ff fd7b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80012ae:	4984      	ldr	r1, [pc, #528]	; (80014c0 <OTM8009A_Init+0x3b8>)
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fd77 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80012b6:	4983      	ldr	r1, [pc, #524]	; (80014c4 <OTM8009A_Init+0x3bc>)
 80012b8:	200f      	movs	r0, #15
 80012ba:	f7ff fd73 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80012be:	4977      	ldr	r1, [pc, #476]	; (800149c <OTM8009A_Init+0x394>)
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fd6f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80012c6:	4980      	ldr	r1, [pc, #512]	; (80014c8 <OTM8009A_Init+0x3c0>)
 80012c8:	200f      	movs	r0, #15
 80012ca:	f7ff fd6b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80012ce:	4975      	ldr	r1, [pc, #468]	; (80014a4 <OTM8009A_Init+0x39c>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd67 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80012d6:	497d      	ldr	r1, [pc, #500]	; (80014cc <OTM8009A_Init+0x3c4>)
 80012d8:	200a      	movs	r0, #10
 80012da:	f7ff fd63 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80012de:	4973      	ldr	r1, [pc, #460]	; (80014ac <OTM8009A_Init+0x3a4>)
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fd5f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80012e6:	497a      	ldr	r1, [pc, #488]	; (80014d0 <OTM8009A_Init+0x3c8>)
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff fd5b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80012ee:	4971      	ldr	r1, [pc, #452]	; (80014b4 <OTM8009A_Init+0x3ac>)
 80012f0:	2000      	movs	r0, #0
 80012f2:	f7ff fd57 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80012f6:	4977      	ldr	r1, [pc, #476]	; (80014d4 <OTM8009A_Init+0x3cc>)
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fd53 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80012fe:	4976      	ldr	r1, [pc, #472]	; (80014d8 <OTM8009A_Init+0x3d0>)
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fd4f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001306:	4975      	ldr	r1, [pc, #468]	; (80014dc <OTM8009A_Init+0x3d4>)
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fd4b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800130e:	4974      	ldr	r1, [pc, #464]	; (80014e0 <OTM8009A_Init+0x3d8>)
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fd47 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001316:	4973      	ldr	r1, [pc, #460]	; (80014e4 <OTM8009A_Init+0x3dc>)
 8001318:	200a      	movs	r0, #10
 800131a:	f7ff fd43 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800131e:	4940      	ldr	r1, [pc, #256]	; (8001420 <OTM8009A_Init+0x318>)
 8001320:	2000      	movs	r0, #0
 8001322:	f7ff fd3f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001326:	4970      	ldr	r1, [pc, #448]	; (80014e8 <OTM8009A_Init+0x3e0>)
 8001328:	200a      	movs	r0, #10
 800132a:	f7ff fd3b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800132e:	4964      	ldr	r1, [pc, #400]	; (80014c0 <OTM8009A_Init+0x3b8>)
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fd37 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001336:	496d      	ldr	r1, [pc, #436]	; (80014ec <OTM8009A_Init+0x3e4>)
 8001338:	200f      	movs	r0, #15
 800133a:	f7ff fd33 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800133e:	4957      	ldr	r1, [pc, #348]	; (800149c <OTM8009A_Init+0x394>)
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fd2f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8001346:	496a      	ldr	r1, [pc, #424]	; (80014f0 <OTM8009A_Init+0x3e8>)
 8001348:	200f      	movs	r0, #15
 800134a:	f7ff fd2b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800134e:	4955      	ldr	r1, [pc, #340]	; (80014a4 <OTM8009A_Init+0x39c>)
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fd27 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8001356:	4967      	ldr	r1, [pc, #412]	; (80014f4 <OTM8009A_Init+0x3ec>)
 8001358:	200a      	movs	r0, #10
 800135a:	f7ff fd23 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800135e:	4953      	ldr	r1, [pc, #332]	; (80014ac <OTM8009A_Init+0x3a4>)
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fd1f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8001366:	4964      	ldr	r1, [pc, #400]	; (80014f8 <OTM8009A_Init+0x3f0>)
 8001368:	200f      	movs	r0, #15
 800136a:	f7ff fd1b 	bl	8000da4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800136e:	4951      	ldr	r1, [pc, #324]	; (80014b4 <OTM8009A_Init+0x3ac>)
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fd17 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8001376:	4961      	ldr	r1, [pc, #388]	; (80014fc <OTM8009A_Init+0x3f4>)
 8001378:	200f      	movs	r0, #15
 800137a:	f7ff fd13 	bl	8000da4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800137e:	4934      	ldr	r1, [pc, #208]	; (8001450 <OTM8009A_Init+0x348>)
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fd0f 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8001386:	495e      	ldr	r1, [pc, #376]	; (8001500 <OTM8009A_Init+0x3f8>)
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fd0b 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800138e:	495d      	ldr	r1, [pc, #372]	; (8001504 <OTM8009A_Init+0x3fc>)
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fd07 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8001396:	495c      	ldr	r1, [pc, #368]	; (8001508 <OTM8009A_Init+0x400>)
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fd03 	bl	8000da4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800139e:	495b      	ldr	r1, [pc, #364]	; (800150c <OTM8009A_Init+0x404>)
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fcff 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80013a6:	495a      	ldr	r1, [pc, #360]	; (8001510 <OTM8009A_Init+0x408>)
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fcfb 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013ae:	491a      	ldr	r1, [pc, #104]	; (8001418 <OTM8009A_Init+0x310>)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fcf7 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80013b6:	4957      	ldr	r1, [pc, #348]	; (8001514 <OTM8009A_Init+0x40c>)
 80013b8:	2003      	movs	r0, #3
 80013ba:	f7ff fcf3 	bl	8000da4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013be:	4916      	ldr	r1, [pc, #88]	; (8001418 <OTM8009A_Init+0x310>)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fcef 	bl	8000da4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013c6:	4914      	ldr	r1, [pc, #80]	; (8001418 <OTM8009A_Init+0x310>)
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fceb 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80013ce:	4952      	ldr	r1, [pc, #328]	; (8001518 <OTM8009A_Init+0x410>)
 80013d0:	2010      	movs	r0, #16
 80013d2:	f7ff fce7 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80013d6:	4910      	ldr	r1, [pc, #64]	; (8001418 <OTM8009A_Init+0x310>)
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff fce3 	bl	8000da4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80013de:	494f      	ldr	r1, [pc, #316]	; (800151c <OTM8009A_Init+0x414>)
 80013e0:	2010      	movs	r0, #16
 80013e2:	f7ff fcdf 	bl	8000da4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80013e6:	494e      	ldr	r1, [pc, #312]	; (8001520 <OTM8009A_Init+0x418>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fcdb 	bl	8000da4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 80013ee:	2078      	movs	r0, #120	; 0x78
 80013f0:	f002 fa22 	bl	8003838 <HAL_Delay>

  switch(ColorCoding)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d008      	beq.n	800140c <OTM8009A_Init+0x304>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	f040 8095 	bne.w	800152c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001402:	4948      	ldr	r1, [pc, #288]	; (8001524 <OTM8009A_Init+0x41c>)
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fccd 	bl	8000da4 <DSI_IO_WriteCmd>
    break;
 800140a:	e090      	b.n	800152e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800140c:	4946      	ldr	r1, [pc, #280]	; (8001528 <OTM8009A_Init+0x420>)
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fcc8 	bl	8000da4 <DSI_IO_WriteCmd>
    break;
 8001414:	e08b      	b.n	800152e <OTM8009A_Init+0x426>
 8001416:	bf00      	nop
 8001418:	0800c958 	.word	0x0800c958
 800141c:	0800c810 	.word	0x0800c810
 8001420:	0800c95c 	.word	0x0800c95c
 8001424:	0800c814 	.word	0x0800c814
 8001428:	0800c960 	.word	0x0800c960
 800142c:	0800c964 	.word	0x0800c964
 8001430:	0800c968 	.word	0x0800c968
 8001434:	0800c96c 	.word	0x0800c96c
 8001438:	0800c970 	.word	0x0800c970
 800143c:	0800c974 	.word	0x0800c974
 8001440:	0800c978 	.word	0x0800c978
 8001444:	0800c97c 	.word	0x0800c97c
 8001448:	0800c980 	.word	0x0800c980
 800144c:	0800c984 	.word	0x0800c984
 8001450:	0800c988 	.word	0x0800c988
 8001454:	0800c98c 	.word	0x0800c98c
 8001458:	0800c990 	.word	0x0800c990
 800145c:	0800c994 	.word	0x0800c994
 8001460:	0800c998 	.word	0x0800c998
 8001464:	0800c99c 	.word	0x0800c99c
 8001468:	0800c9a0 	.word	0x0800c9a0
 800146c:	0800c840 	.word	0x0800c840
 8001470:	0800c9a4 	.word	0x0800c9a4
 8001474:	0800c9a8 	.word	0x0800c9a8
 8001478:	0800c9ac 	.word	0x0800c9ac
 800147c:	0800c9b0 	.word	0x0800c9b0
 8001480:	0800c9b4 	.word	0x0800c9b4
 8001484:	0800c9b8 	.word	0x0800c9b8
 8001488:	0800c9bc 	.word	0x0800c9bc
 800148c:	0800c9c0 	.word	0x0800c9c0
 8001490:	0800c9c4 	.word	0x0800c9c4
 8001494:	0800c844 	.word	0x0800c844
 8001498:	0800c848 	.word	0x0800c848
 800149c:	0800c9c8 	.word	0x0800c9c8
 80014a0:	0800c850 	.word	0x0800c850
 80014a4:	0800c9cc 	.word	0x0800c9cc
 80014a8:	0800c860 	.word	0x0800c860
 80014ac:	0800c9d0 	.word	0x0800c9d0
 80014b0:	0800c870 	.word	0x0800c870
 80014b4:	0800c9d4 	.word	0x0800c9d4
 80014b8:	0800ca0c 	.word	0x0800ca0c
 80014bc:	0800c87c 	.word	0x0800c87c
 80014c0:	0800c9d8 	.word	0x0800c9d8
 80014c4:	0800c888 	.word	0x0800c888
 80014c8:	0800c898 	.word	0x0800c898
 80014cc:	0800c8a8 	.word	0x0800c8a8
 80014d0:	0800c8b4 	.word	0x0800c8b4
 80014d4:	0800c8c4 	.word	0x0800c8c4
 80014d8:	0800c9dc 	.word	0x0800c9dc
 80014dc:	0800c8d4 	.word	0x0800c8d4
 80014e0:	0800c9e0 	.word	0x0800c9e0
 80014e4:	0800c8e0 	.word	0x0800c8e0
 80014e8:	0800c8ec 	.word	0x0800c8ec
 80014ec:	0800c8f8 	.word	0x0800c8f8
 80014f0:	0800c908 	.word	0x0800c908
 80014f4:	0800c918 	.word	0x0800c918
 80014f8:	0800c924 	.word	0x0800c924
 80014fc:	0800c934 	.word	0x0800c934
 8001500:	0800ca10 	.word	0x0800ca10
 8001504:	0800ca14 	.word	0x0800ca14
 8001508:	0800ca18 	.word	0x0800ca18
 800150c:	0800ca1c 	.word	0x0800ca1c
 8001510:	0800ca20 	.word	0x0800ca20
 8001514:	0800c944 	.word	0x0800c944
 8001518:	0800c818 	.word	0x0800c818
 800151c:	0800c82c 	.word	0x0800c82c
 8001520:	0800c9e4 	.word	0x0800c9e4
 8001524:	0800c9e8 	.word	0x0800c9e8
 8001528:	0800c9ec 	.word	0x0800c9ec
  default :
    break;
 800152c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d10b      	bne.n	800154c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <OTM8009A_Init+0x488>)
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fc34 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800153c:	4915      	ldr	r1, [pc, #84]	; (8001594 <OTM8009A_Init+0x48c>)
 800153e:	2004      	movs	r0, #4
 8001540:	f7ff fc30 	bl	8000da4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001544:	4914      	ldr	r1, [pc, #80]	; (8001598 <OTM8009A_Init+0x490>)
 8001546:	2004      	movs	r0, #4
 8001548:	f7ff fc2c 	bl	8000da4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800154c:	4913      	ldr	r1, [pc, #76]	; (800159c <OTM8009A_Init+0x494>)
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fc28 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001554:	4912      	ldr	r1, [pc, #72]	; (80015a0 <OTM8009A_Init+0x498>)
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fc24 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800155c:	4911      	ldr	r1, [pc, #68]	; (80015a4 <OTM8009A_Init+0x49c>)
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fc20 	bl	8000da4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001564:	4910      	ldr	r1, [pc, #64]	; (80015a8 <OTM8009A_Init+0x4a0>)
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fc1c 	bl	8000da4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800156c:	490f      	ldr	r1, [pc, #60]	; (80015ac <OTM8009A_Init+0x4a4>)
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fc18 	bl	8000da4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <OTM8009A_Init+0x4a8>)
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fc14 	bl	8000da4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800157c:	490d      	ldr	r1, [pc, #52]	; (80015b4 <OTM8009A_Init+0x4ac>)
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff fc10 	bl	8000da4 <DSI_IO_WriteCmd>

  return 0;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	0800c9f0 	.word	0x0800c9f0
 8001594:	0800c948 	.word	0x0800c948
 8001598:	0800c950 	.word	0x0800c950
 800159c:	0800c9f4 	.word	0x0800c9f4
 80015a0:	0800c9f8 	.word	0x0800c9f8
 80015a4:	0800c9fc 	.word	0x0800c9fc
 80015a8:	0800ca00 	.word	0x0800ca00
 80015ac:	0800ca04 	.word	0x0800ca04
 80015b0:	0800c958 	.word	0x0800c958
 80015b4:	0800ca08 	.word	0x0800ca08

080015b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_ADC1_Init+0x98>)
 80015cc:	4a21      	ldr	r2, [pc, #132]	; (8001654 <MX_ADC1_Init+0x9c>)
 80015ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_ADC1_Init+0x98>)
 80015d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_ADC1_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015de:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <MX_ADC1_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_ADC1_Init+0x98>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_ADC1_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_ADC1_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_ADC1_Init+0x98>)
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <MX_ADC1_Init+0xa0>)
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_ADC1_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC1_Init+0x98>)
 8001606:	2201      	movs	r2, #1
 8001608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_ADC1_Init+0x98>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_ADC1_Init+0x98>)
 8001614:	2201      	movs	r2, #1
 8001616:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_ADC1_Init+0x98>)
 800161a:	f002 f931 	bl	8003880 <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001624:	f001 fa48 	bl	8002ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001628:	2304      	movs	r3, #4
 800162a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162c:	2301      	movs	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_ADC1_Init+0x98>)
 800163a:	f002 facb 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001644:	f001 fa38 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200002dc 	.word	0x200002dc
 8001654:	40012000 	.word	0x40012000
 8001658:	0f000001 	.word	0x0f000001

0800165c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <MX_ADC2_Init+0x9c>)
 8001672:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800167a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_ADC2_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_ADC2_Init+0x98>)
 800168a:	2201      	movs	r2, #1
 800168c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_ADC2_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_ADC2_Init+0x98>)
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <MX_ADC2_Init+0xa0>)
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016be:	f002 f8df 	bl	8003880 <HAL_ADC_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80016c8:	f001 f9f6 	bl	8002ab8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016cc:	2306      	movs	r3, #6
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_ADC2_Init+0x98>)
 80016de:	f002 fa79 	bl	8003bd4 <HAL_ADC_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80016e8:	f001 f9e6 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000324 	.word	0x20000324
 80016f8:	40012100 	.word	0x40012100
 80016fc:	0f000001 	.word	0x0f000001

08001700 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a36      	ldr	r2, [pc, #216]	; (80017f8 <HAL_ADC_MspInit+0xf8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13c      	bne.n	800179c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a35      	ldr	r2, [pc, #212]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 800176a:	2304      	movs	r3, #4
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176e:	2303      	movs	r3, #3
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4820      	ldr	r0, [pc, #128]	; (8001800 <HAL_ADC_MspInit+0x100>)
 800177e:	f003 ff3d 	bl	80055fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|GPIO_PIN_6;
 8001782:	2350      	movs	r3, #80	; 0x50
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001786:	2303      	movs	r3, #3
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	; (8001804 <HAL_ADC_MspInit+0x104>)
 8001796:	f003 ff31 	bl	80055fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800179a:	e028      	b.n	80017ee <HAL_ADC_MspInit+0xee>
  else if(adcHandle->Instance==ADC2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_ADC_MspInit+0x108>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d123      	bne.n	80017ee <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_ADC_MspInit+0xfc>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d6:	2340      	movs	r3, #64	; 0x40
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4806      	ldr	r0, [pc, #24]	; (8001804 <HAL_ADC_MspInit+0x104>)
 80017ea:	f003 ff07 	bl	80055fc <HAL_GPIO_Init>
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40012000 	.word	0x40012000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800
 8001804:	40020000 	.word	0x40020000
 8001808:	40012100 	.word	0x40012100

0800180c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <MX_DMA2D_Init+0x38>)
 8001814:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001818:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800181c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_DMA2D_Init+0x34>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_DMA2D_Init+0x34>)
 800182c:	f002 fd04 	bl	8004238 <HAL_DMA2D_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8001836:	f001 f93f 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000036c 	.word	0x2000036c
 8001844:	4002b000 	.word	0x4002b000

08001848 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_DMA2D_MspInit+0x38>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10b      	bne.n	8001872 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 8001860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_DMA2D_MspInit+0x3c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	4002b000 	.word	0x4002b000
 8001884:	40023800 	.word	0x40023800

08001888 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ae      	sub	sp, #184	; 0xb8
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800188e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800189a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f009 ff0e 	bl	800b6c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80018a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	226c      	movs	r2, #108	; 0x6c
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 feff 	bl	800b6c4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018c8:	4a65      	ldr	r2, [pc, #404]	; (8001a60 <MX_DSIHOST_DSI_Init+0x1d8>)
 80018ca:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80018cc:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018d4:	2204      	movs	r2, #4
 80018d6:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80018d8:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80018de:	2314      	movs	r3, #20
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80018f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018f4:	4619      	mov	r1, r3
 80018f6:	4859      	ldr	r0, [pc, #356]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80018f8:	f002 ff8e 	bl	8004818 <HAL_DSI_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8001902:	f001 f8d9 	bl	8002ab8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800193c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001940:	4619      	mov	r1, r3
 8001942:	4846      	ldr	r0, [pc, #280]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001944:	f003 fc6e 	bl	8005224 <HAL_DSI_ConfigHostTimeouts>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 800194e:	f001 f8b3 	bl	8002ab8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001952:	231c      	movs	r3, #28
 8001954:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001956:	2321      	movs	r3, #33	; 0x21
 8001958:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 800195a:	230f      	movs	r3, #15
 800195c:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 800195e:	2319      	movs	r3, #25
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800196e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001972:	4619      	mov	r1, r3
 8001974:	4839      	ldr	r0, [pc, #228]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001976:	f003 fbeb 	bl	8005150 <HAL_DSI_ConfigPhyTimer>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8001980:	f001 f89a 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001984:	2104      	movs	r1, #4
 8001986:	4835      	ldr	r0, [pc, #212]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001988:	f003 fbba 	bl	8005100 <HAL_DSI_ConfigFlowControl>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8001992:	f001 f891 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001996:	f242 7110 	movw	r1, #10000	; 0x2710
 800199a:	4830      	ldr	r0, [pc, #192]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 800199c:	f003 fe00 	bl	80055a0 <HAL_DSI_SetLowPowerRXFilter>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 80019a6:	f001 f887 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	482b      	ldr	r0, [pc, #172]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 80019ae:	f003 f8c3 	bl	8004b38 <HAL_DSI_ConfigErrorMonitor>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 80019b8:	f001 f87e 	bl	8002ab8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 80019c0:	2305      	movs	r3, #5
 80019c2:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 80019d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019d4:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80019da:	2304      	movs	r3, #4
 80019dc:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 80019e6:	2312      	movs	r3, #18
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 80019ea:	2310      	movs	r3, #16
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 80019ee:	f240 53e2 	movw	r3, #1506	; 0x5e2
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 8001a00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a04:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	480a      	ldr	r0, [pc, #40]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001a34:	f003 f964 	bl	8004d00 <HAL_DSI_ConfigVideoMode>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 8001a3e:	f001 f83b 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_DSIHOST_DSI_Init+0x1d4>)
 8001a46:	f003 f933 	bl	8004cb0 <HAL_DSI_SetGenericVCID>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 8001a50:	f001 f832 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	37b8      	adds	r7, #184	; 0xb8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200003c4 	.word	0x200003c4
 8001a60:	40016c00 	.word	0x40016c00

08001a64 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_DSI_MspInit+0x38>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10b      	bne.n	8001a8e <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_DSI_MspInit+0x3c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40016c00 	.word	0x40016c00
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <HAL_DSI_MspDeInit+0x2c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_DSI_MspDeInit+0x30>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <HAL_DSI_MspDeInit+0x30>)
 8001abc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40016c00 	.word	0x40016c00
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]
 8001aee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_FMC_Init+0x98>)
 8001af2:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <MX_FMC_Init+0x9c>)
 8001af4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_FMC_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_FMC_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b28:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001b40:	2304      	movs	r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001b44:	2307      	movs	r3, #7
 8001b46:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_FMC_Init+0x98>)
 8001b5a:	f005 fc9f 	bl	800749c <HAL_SDRAM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001b64:	f000 ffa8 	bl	8002ab8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b68:	bf00      	nop
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200003e0 	.word	0x200003e0
 8001b74:	a0000140 	.word	0xa0000140

08001b78 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_FMC_MspInit+0x104>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d16f      	bne.n	8001c74 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_FMC_MspInit+0x104>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_FMC_MspInit+0x108>)
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001bb2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001bb6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	482d      	ldr	r0, [pc, #180]	; (8001c84 <HAL_FMC_MspInit+0x10c>)
 8001bce:	f003 fd15 	bl	80055fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8001bd2:	f248 1337 	movw	r3, #33079	; 0x8137
 8001bd6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001be4:	230c      	movs	r3, #12
 8001be6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4826      	ldr	r0, [pc, #152]	; (8001c88 <HAL_FMC_MspInit+0x110>)
 8001bee:	f003 fd05 	bl	80055fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001bf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001bf6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c04:	230c      	movs	r3, #12
 8001c06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481f      	ldr	r0, [pc, #124]	; (8001c8c <HAL_FMC_MspInit+0x114>)
 8001c0e:	f003 fcf5 	bl	80055fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001c12:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001c16:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c24:	230c      	movs	r3, #12
 8001c26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <HAL_FMC_MspInit+0x118>)
 8001c2e:	f003 fce5 	bl	80055fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001c32:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c36:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c44:	230c      	movs	r3, #12
 8001c46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <HAL_FMC_MspInit+0x11c>)
 8001c4e:	f003 fcd5 	bl	80055fc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8001c52:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001c56:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c64:	230c      	movs	r3, #12
 8001c66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <HAL_FMC_MspInit+0x120>)
 8001c6e:	f003 fcc5 	bl	80055fc <HAL_GPIO_Init>
 8001c72:	e000      	b.n	8001c76 <HAL_FMC_MspInit+0xfe>
    return;
 8001c74:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000414 	.word	0x20000414
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40021c00 	.word	0x40021c00

08001c9c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ca4:	f7ff ff68 	bl	8001b78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <MX_FREERTOS_Init+0x18>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_FREERTOS_Init+0x1c>)
 8001cba:	f006 fd29 	bl	8008710 <osThreadNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <MX_FREERTOS_Init+0x20>)
 8001cc2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	0800f3b4 	.word	0x0800f3b4
 8001ccc:	08001cd5 	.word	0x08001cd5
 8001cd0:	20000418 	.word	0x20000418

08001cd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f006 fdbd 	bl	800885c <osDelay>
 8001ce2:	e7fb      	b.n	8001cdc <StartDefaultTask+0x8>

08001ce4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfa:	4bac      	ldr	r3, [pc, #688]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4aab      	ldr	r2, [pc, #684]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d00:	f043 0310 	orr.w	r3, r3, #16
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4ba9      	ldr	r3, [pc, #676]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4aa5      	ldr	r2, [pc, #660]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4ba3      	ldr	r3, [pc, #652]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a9f      	ldr	r2, [pc, #636]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	623b      	str	r3, [r7, #32]
 8001d40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d42:	4b9a      	ldr	r3, [pc, #616]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a99      	ldr	r2, [pc, #612]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b97      	ldr	r3, [pc, #604]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b94      	ldr	r3, [pc, #592]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a93      	ldr	r2, [pc, #588]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b91      	ldr	r3, [pc, #580]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b8e      	ldr	r3, [pc, #568]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a8d      	ldr	r2, [pc, #564]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b85      	ldr	r3, [pc, #532]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001da2:	4b82      	ldr	r3, [pc, #520]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a75      	ldr	r2, [pc, #468]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b73      	ldr	r3, [pc, #460]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b70      	ldr	r3, [pc, #448]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a6f      	ldr	r2, [pc, #444]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <MX_GPIO_Init+0x2c8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8001e02:	2378      	movs	r3, #120	; 0x78
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e12:	2306      	movs	r3, #6
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4864      	ldr	r0, [pc, #400]	; (8001fb0 <MX_GPIO_Init+0x2cc>)
 8001e1e:	f003 fbed 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001e22:	2304      	movs	r3, #4
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e32:	2309      	movs	r3, #9
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <MX_GPIO_Init+0x2cc>)
 8001e3e:	f003 fbdd 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e42:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e54:	230b      	movs	r3, #11
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4855      	ldr	r0, [pc, #340]	; (8001fb4 <MX_GPIO_Init+0x2d0>)
 8001e60:	f003 fbcc 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001e64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	2312      	movs	r3, #18
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	484d      	ldr	r0, [pc, #308]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001e82:	f003 fbbb 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001e86:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e98:	230a      	movs	r3, #10
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4845      	ldr	r0, [pc, #276]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001ea4:	f003 fbaa 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	483d      	ldr	r0, [pc, #244]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001ec4:	f003 fb9a 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4836      	ldr	r0, [pc, #216]	; (8001fbc <MX_GPIO_Init+0x2d8>)
 8001ee4:	f003 fb8a 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001efa:	2308      	movs	r3, #8
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f02:	4619      	mov	r1, r3
 8001f04:	482e      	ldr	r0, [pc, #184]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f06:	f003 fb79 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f0a:	2340      	movs	r3, #64	; 0x40
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f22:	4619      	mov	r1, r3
 8001f24:	4824      	ldr	r0, [pc, #144]	; (8001fb8 <MX_GPIO_Init+0x2d4>)
 8001f26:	f003 fb69 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8001f2a:	f247 033b 	movw	r3, #28731	; 0x703b
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <MX_GPIO_Init+0x2e0>)
 8001f40:	f003 fb5c 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001f44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001f56:	2303      	movs	r3, #3
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4817      	ldr	r0, [pc, #92]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f62:	f003 fb4b 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f78:	2309      	movs	r3, #9
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x2dc>)
 8001f84:	f003 fb3a 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <MX_GPIO_Init+0x2e4>)
 8001fa6:	f003 fb29 	bl	80055fc <HAL_GPIO_Init>
 8001faa:	e00f      	b.n	8001fcc <MX_GPIO_Init+0x2e8>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40022400 	.word	0x40022400
 8001fc8:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001fcc:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	48bb      	ldr	r0, [pc, #748]	; (80022d0 <MX_GPIO_Init+0x5ec>)
 8001fe2:	f003 fb0b 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001fe6:	23f8      	movs	r3, #248	; 0xf8
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	48b6      	ldr	r0, [pc, #728]	; (80022d4 <MX_GPIO_Init+0x5f0>)
 8001ffa:	f003 faff 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002010:	2307      	movs	r3, #7
 8002012:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	4619      	mov	r1, r3
 800201a:	48af      	ldr	r0, [pc, #700]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800201c:	f003 faee 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8002020:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002032:	230b      	movs	r3, #11
 8002034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	48a6      	ldr	r0, [pc, #664]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800203e:	f003 fadd 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8002042:	2330      	movs	r3, #48	; 0x30
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002052:	4619      	mov	r1, r3
 8002054:	48a1      	ldr	r0, [pc, #644]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002056:	f003 fad1 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800205a:	2308      	movs	r3, #8
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800206a:	2303      	movs	r3, #3
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	4619      	mov	r1, r3
 8002074:	4899      	ldr	r0, [pc, #612]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002076:	f003 fac1 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800207a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208c:	2305      	movs	r3, #5
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002094:	4619      	mov	r1, r3
 8002096:	4892      	ldr	r0, [pc, #584]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 8002098:	f003 fab0 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 800209c:	2304      	movs	r3, #4
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ac:	2308      	movs	r3, #8
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 80020b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b4:	4619      	mov	r1, r3
 80020b6:	4889      	ldr	r0, [pc, #548]	; (80022dc <MX_GPIO_Init+0x5f8>)
 80020b8:	f003 faa0 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020ce:	2307      	movs	r3, #7
 80020d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d6:	4619      	mov	r1, r3
 80020d8:	4881      	ldr	r0, [pc, #516]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80020da:	f003 fa8f 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f0:	2307      	movs	r3, #7
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020f8:	4619      	mov	r1, r3
 80020fa:	4879      	ldr	r0, [pc, #484]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80020fc:	f003 fa7e 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002100:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002112:	230a      	movs	r3, #10
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211a:	4619      	mov	r1, r3
 800211c:	486c      	ldr	r0, [pc, #432]	; (80022d0 <MX_GPIO_Init+0x5ec>)
 800211e:	f003 fa6d 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002132:	2308      	movs	r3, #8
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213a:	4619      	mov	r1, r3
 800213c:	4869      	ldr	r0, [pc, #420]	; (80022e4 <MX_GPIO_Init+0x600>)
 800213e:	f003 fa5d 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002142:	2310      	movs	r3, #16
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002152:	230a      	movs	r3, #10
 8002154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4862      	ldr	r0, [pc, #392]	; (80022e8 <MX_GPIO_Init+0x604>)
 800215e:	f003 fa4d 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002172:	2306      	movs	r3, #6
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4856      	ldr	r0, [pc, #344]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 800217e:	f003 fa3d 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8002182:	2348      	movs	r3, #72	; 0x48
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002186:	2300      	movs	r3, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	4850      	ldr	r0, [pc, #320]	; (80022d8 <MX_GPIO_Init+0x5f4>)
 8002196:	f003 fa31 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80021aa:	2303      	movs	r3, #3
 80021ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	4619      	mov	r1, r3
 80021b4:	484d      	ldr	r0, [pc, #308]	; (80022ec <MX_GPIO_Init+0x608>)
 80021b6:	f003 fa21 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 80021ba:	2340      	movs	r3, #64	; 0x40
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021ca:	2303      	movs	r3, #3
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4845      	ldr	r0, [pc, #276]	; (80022ec <MX_GPIO_Init+0x608>)
 80021d6:	f003 fa11 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80021da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e0:	2303      	movs	r3, #3
 80021e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ec:	4619      	mov	r1, r3
 80021ee:	483f      	ldr	r0, [pc, #252]	; (80022ec <MX_GPIO_Init+0x608>)
 80021f0:	f003 fa04 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80021f4:	2301      	movs	r3, #1
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002204:	230a      	movs	r3, #10
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220c:	4619      	mov	r1, r3
 800220e:	4835      	ldr	r0, [pc, #212]	; (80022e4 <MX_GPIO_Init+0x600>)
 8002210:	f003 f9f4 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002214:	2332      	movs	r3, #50	; 0x32
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002224:	230b      	movs	r3, #11
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222c:	4619      	mov	r1, r3
 800222e:	482d      	ldr	r0, [pc, #180]	; (80022e4 <MX_GPIO_Init+0x600>)
 8002230:	f003 f9e4 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8002234:	2304      	movs	r3, #4
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002244:	2309      	movs	r3, #9
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800224c:	4619      	mov	r1, r3
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <MX_GPIO_Init+0x60c>)
 8002250:	f003 f9d4 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002266:	2309      	movs	r3, #9
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800226e:	4619      	mov	r1, r3
 8002270:	481a      	ldr	r0, [pc, #104]	; (80022dc <MX_GPIO_Init+0x5f8>)
 8002272:	f003 f9c3 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002276:	2386      	movs	r3, #134	; 0x86
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002282:	2303      	movs	r3, #3
 8002284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002286:	230b      	movs	r3, #11
 8002288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 8002292:	f003 f9b3 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002296:	2301      	movs	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800229a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a8:	4619      	mov	r1, r3
 80022aa:	480d      	ldr	r0, [pc, #52]	; (80022e0 <MX_GPIO_Init+0x5fc>)
 80022ac:	f003 f9a6 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 80022b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80022c2:	230a      	movs	r3, #10
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	e012      	b.n	80022f4 <MX_GPIO_Init+0x610>
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40022800 	.word	0x40022800
 80022d8:	40021800 	.word	0x40021800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40020400 	.word	0x40020400
 80022f4:	4825      	ldr	r0, [pc, #148]	; (800238c <MX_GPIO_Init+0x6a8>)
 80022f6:	f003 f981 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800230a:	4619      	mov	r1, r3
 800230c:	4820      	ldr	r0, [pc, #128]	; (8002390 <MX_GPIO_Init+0x6ac>)
 800230e:	f003 f975 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002312:	2328      	movs	r3, #40	; 0x28
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002322:	230a      	movs	r3, #10
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232a:	4619      	mov	r1, r3
 800232c:	4819      	ldr	r0, [pc, #100]	; (8002394 <MX_GPIO_Init+0x6b0>)
 800232e:	f003 f965 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002332:	2340      	movs	r3, #64	; 0x40
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002342:	2309      	movs	r3, #9
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4810      	ldr	r0, [pc, #64]	; (8002390 <MX_GPIO_Init+0x6ac>)
 800234e:	f003 f955 	bl	80055fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002352:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002364:	2305      	movs	r3, #5
 8002366:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <MX_GPIO_Init+0x6b4>)
 8002370:	f003 f944 	bl	80055fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2105      	movs	r1, #5
 8002378:	2006      	movs	r0, #6
 800237a:	f001 ff33 	bl	80041e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800237e:	2006      	movs	r0, #6
 8002380:	f001 ff4c 	bl	800421c <HAL_NVIC_EnableIRQ>

}
 8002384:	bf00      	nop
 8002386:	3740      	adds	r7, #64	; 0x40
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021c00 	.word	0x40021c00
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400

0800239c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_I2C4_Init+0x74>)
 80023a2:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <MX_I2C4_Init+0x78>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_I2C4_Init+0x74>)
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <MX_I2C4_Init+0x7c>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_I2C4_Init+0x74>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_I2C4_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_I2C4_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_I2C4_Init+0x74>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_I2C4_Init+0x74>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80023d6:	480e      	ldr	r0, [pc, #56]	; (8002410 <MX_I2C4_Init+0x74>)
 80023d8:	f003 fb06 	bl	80059e8 <HAL_I2C_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80023e2:	f000 fb69 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <MX_I2C4_Init+0x74>)
 80023ea:	f003 fb8d 	bl	8005b08 <HAL_I2CEx_ConfigAnalogFilter>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80023f4:	f000 fb60 	bl	8002ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80023f8:	2100      	movs	r1, #0
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_I2C4_Init+0x74>)
 80023fc:	f003 fbcf 	bl	8005b9e <HAL_I2CEx_ConfigDigitalFilter>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002406:	f000 fb57 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000041c 	.word	0x2000041c
 8002414:	40006000 	.word	0x40006000
 8002418:	00c0eaff 	.word	0x00c0eaff

0800241c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ae      	sub	sp, #184	; 0xb8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2290      	movs	r2, #144	; 0x90
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f009 f941 	bl	800b6c4 <memset>
  if(i2cHandle->Instance==I2C4)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <HAL_I2C_MspInit+0xf8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d15e      	bne.n	800250a <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fbf5 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002468:	f000 fb26 	bl	8002ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a2:	2312      	movs	r3, #18
 80024a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80024b4:	230b      	movs	r3, #11
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024be:	4619      	mov	r1, r3
 80024c0:	4816      	ldr	r0, [pc, #88]	; (800251c <HAL_I2C_MspInit+0x100>)
 80024c2:	f003 f89b 	bl	80055fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ce:	2312      	movs	r3, #18
 80024d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80024e0:	2304      	movs	r3, #4
 80024e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 80024e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024ea:	4619      	mov	r1, r3
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <HAL_I2C_MspInit+0x104>)
 80024ee:	f003 f885 	bl	80055fc <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 80024f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_I2C_MspInit+0xfc>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	37b8      	adds	r7, #184	; 0xb8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40006000 	.word	0x40006000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400
 8002520:	40020c00 	.word	0x40020c00

08002524 <readJoystick>:
uint16_t readValueY = 0;

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;

enum Direction readJoystick(){
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

	// A0 BLU -> VRx
	// A1 BIANCO -> VRy

	// Enable ADC for joystick
	HAL_ADC_Start(&hadc1);
 8002528:	481e      	ldr	r0, [pc, #120]	; (80025a4 <readJoystick+0x80>)
 800252a:	f001 f9ed 	bl	8003908 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <readJoystick+0x84>)
 8002530:	f001 f9ea 	bl	8003908 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1,1000);
 8002534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002538:	481a      	ldr	r0, [pc, #104]	; (80025a4 <readJoystick+0x80>)
 800253a:	f001 fab3 	bl	8003aa4 <HAL_ADC_PollForConversion>
	readValueX = HAL_ADC_GetValue(&hadc1);
 800253e:	4819      	ldr	r0, [pc, #100]	; (80025a4 <readJoystick+0x80>)
 8002540:	f001 fb3b 	bl	8003bba <HAL_ADC_GetValue>
 8002544:	4603      	mov	r3, r0
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <readJoystick+0x88>)
 800254a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc2,1000);
 800254c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002550:	4815      	ldr	r0, [pc, #84]	; (80025a8 <readJoystick+0x84>)
 8002552:	f001 faa7 	bl	8003aa4 <HAL_ADC_PollForConversion>
    readValueY = HAL_ADC_GetValue(&hadc2);
 8002556:	4814      	ldr	r0, [pc, #80]	; (80025a8 <readJoystick+0x84>)
 8002558:	f001 fb2f 	bl	8003bba <HAL_ADC_GetValue>
 800255c:	4603      	mov	r3, r0
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <readJoystick+0x8c>)
 8002562:	801a      	strh	r2, [r3, #0]

    // Check direction
    if(readValueX <= MARGIN)
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <readJoystick+0x88>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800256c:	d801      	bhi.n	8002572 <readJoystick+0x4e>
    	return LEFT;
 800256e:	2302      	movs	r3, #2
 8002570:	e015      	b.n	800259e <readJoystick+0x7a>
    else if(readValueX >= maxValue - MARGIN)
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <readJoystick+0x88>)
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f5b3 6f4e 	cmp.w	r3, #3296	; 0xce0
 800257a:	d301      	bcc.n	8002580 <readJoystick+0x5c>
    	return RIGHT;
 800257c:	2303      	movs	r3, #3
 800257e:	e00e      	b.n	800259e <readJoystick+0x7a>
    else if(readValueY <= MARGIN)
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <readJoystick+0x8c>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002588:	d801      	bhi.n	800258e <readJoystick+0x6a>
    	return UP;
 800258a:	2300      	movs	r3, #0
 800258c:	e007      	b.n	800259e <readJoystick+0x7a>
    else if(readValueY >= maxValue - MARGIN)
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <readJoystick+0x8c>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	f5b3 6f4e 	cmp.w	r3, #3296	; 0xce0
 8002596:	d301      	bcc.n	800259c <readJoystick+0x78>
    	return DOWN;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <readJoystick+0x7a>

    return IDLE;
 800259c:	2304      	movs	r3, #4
}
 800259e:	4618      	mov	r0, r3
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002dc 	.word	0x200002dc
 80025a8:	20000324 	.word	0x20000324
 80025ac:	20000470 	.word	0x20000470
 80025b0:	20000472 	.word	0x20000472

080025b4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b09a      	sub	sp, #104	; 0x68
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80025ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025be:	2234      	movs	r2, #52	; 0x34
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f009 f87e 	bl	800b6c4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80025c8:	463b      	mov	r3, r7
 80025ca:	2234      	movs	r2, #52	; 0x34
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f009 f878 	bl	800b6c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <MX_LTDC_Init+0x160>)
 80025d8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80025da:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80025e6:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80025ec:	4b48      	ldr	r3, [pc, #288]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025f4:	2207      	movs	r2, #7
 80025f6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80025f8:	4b45      	ldr	r3, [pc, #276]	; (8002710 <MX_LTDC_Init+0x15c>)
 80025fa:	2203      	movs	r2, #3
 80025fc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80025fe:	4b44      	ldr	r3, [pc, #272]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002600:	220e      	movs	r2, #14
 8002602:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002606:	2205      	movs	r2, #5
 8002608:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <MX_LTDC_Init+0x15c>)
 800260c:	f240 228e 	movw	r2, #654	; 0x28e
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002614:	f240 12e5 	movw	r2, #485	; 0x1e5
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <MX_LTDC_Init+0x15c>)
 800261c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002624:	f240 12e7 	movw	r2, #487	; 0x1e7
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <MX_LTDC_Init+0x15c>)
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002632:	4b37      	ldr	r3, [pc, #220]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <MX_LTDC_Init+0x15c>)
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002642:	4833      	ldr	r0, [pc, #204]	; (8002710 <MX_LTDC_Init+0x15c>)
 8002644:	f003 faf8 	bl	8005c38 <HAL_LTDC_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800264e:	f000 fa33 	bl	8002ab8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800266e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002674:	2305      	movs	r3, #5
 8002676:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002696:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800269a:	2200      	movs	r2, #0
 800269c:	4619      	mov	r1, r3
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <MX_LTDC_Init+0x15c>)
 80026a0:	f003 fb9a 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80026aa:	f000 fa05 	bl	8002ab8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80026ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80026d0:	2305      	movs	r3, #5
 80026d2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_LTDC_Init+0x15c>)
 80026fa:	f003 fb6d 	bl	8005dd8 <HAL_LTDC_ConfigLayer>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002704:	f000 f9d8 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002708:	bf00      	nop
 800270a:	3768      	adds	r7, #104	; 0x68
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000474 	.word	0x20000474
 8002714:	40016800 	.word	0x40016800

08002718 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b0a8      	sub	sp, #160	; 0xa0
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2290      	movs	r2, #144	; 0x90
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f008 ffcb 	bl	800b6c4 <memset>
  if(ltdcHandle->Instance==LTDC)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a16      	ldr	r2, [pc, #88]	; (800278c <HAL_LTDC_MspInit+0x74>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d124      	bne.n	8002782 <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002738:	2308      	movs	r3, #8
 800273a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800273c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002742:	2307      	movs	r3, #7
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800274a:	2300      	movs	r3, #0
 800274c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0310 	add.w	r3, r7, #16
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fa76 	bl	8006c4c <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 8002766:	f000 f9a7 	bl	8002ab8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 8002770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_LTDC_MspInit+0x78>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	37a0      	adds	r7, #160	; 0xa0
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40016800 	.word	0x40016800
 8002790:	40023800 	.word	0x40023800

08002794 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002798:	f3bf 8f4f 	dsb	sy
}
 800279c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800279e:	f3bf 8f6f 	isb	sy
}
 80027a2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <SCB_EnableICache+0x48>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80027ac:	f3bf 8f4f 	dsb	sy
}
 80027b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027b2:	f3bf 8f6f 	isb	sy
}
 80027b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SCB_EnableICache+0x48>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	4a07      	ldr	r2, [pc, #28]	; (80027dc <SCB_EnableICache+0x48>)
 80027be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80027c4:	f3bf 8f4f 	dsb	sy
}
 80027c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ca:	f3bf 8f6f 	isb	sy
}
 80027ce:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <SCB_EnableDCache+0x84>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80027ee:	f3bf 8f4f 	dsb	sy
}
 80027f2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <SCB_EnableDCache+0x84>)
 80027f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027fa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002804:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	08db      	lsrs	r3, r3, #3
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002818:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800281e:	4911      	ldr	r1, [pc, #68]	; (8002864 <SCB_EnableDCache+0x84>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60ba      	str	r2, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	60fa      	str	r2, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800283a:	f3bf 8f4f 	dsb	sy
}
 800283e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <SCB_EnableDCache+0x84>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4a07      	ldr	r2, [pc, #28]	; (8002864 <SCB_EnableDCache+0x84>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
}
 8002850:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002852:	f3bf 8f6f 	isb	sy
}
 8002856:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800286c:	f7ff ff92 	bl	8002794 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002870:	f7ff ffb6 	bl	80027e0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002874:	f000 ffaa 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002878:	f000 f83a 	bl	80028f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800287c:	f7ff fa32 	bl	8001ce4 <MX_GPIO_Init>
  MX_FMC_Init();
 8002880:	f7ff f92a 	bl	8001ad8 <MX_FMC_Init>
  MX_I2C4_Init();
 8002884:	f7ff fd8a 	bl	800239c <MX_I2C4_Init>
  MX_TIM3_Init();
 8002888:	f000 fec4 	bl	8003614 <MX_TIM3_Init>
  MX_DMA2D_Init();
 800288c:	f7fe ffbe 	bl	800180c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8002890:	f7fe fffa 	bl	8001888 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 8002894:	f7ff fe8e 	bl	80025b4 <MX_LTDC_Init>
  MX_ADC1_Init();
 8002898:	f7fe fe8e 	bl	80015b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800289c:	f7fe fede 	bl	800165c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 80028a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028a4:	f000 f896 	bl	80029d4 <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 80028a8:	f7fd fe98 	bl	80005dc <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 80028ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7fe f82d 	bl	8000910 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7fe f88a 	bl	80009d0 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028bc:	480b      	ldr	r0, [pc, #44]	; (80028ec <main+0x84>)
 80028be:	f7fe f8c9 	bl	8000a54 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_BLACK);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 80028c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028c6:	f7fe f8df 	bl	8000a88 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80028ca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80028ce:	f7fe f8a7 	bl	8000a20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80028d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d6:	f7fe f88b 	bl	80009f0 <BSP_LCD_SetTextColor>

  freeRTOS_user_init();
 80028da:	f000 f8f3 	bl	8002ac4 <freeRTOS_user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80028de:	f005 fead 	bl	800863c <osKernelInitialize>
  MX_FREERTOS_Init();
 80028e2:	f7ff f9e5 	bl	8001cb0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80028e6:	f005 fedd 	bl	80086a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <main+0x82>
 80028ec:	20000010 	.word	0x20000010

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b094      	sub	sp, #80	; 0x50
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	2234      	movs	r2, #52	; 0x34
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f008 fee0 	bl	800b6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002914:	f003 fc88 	bl	8006228 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <SystemClock_Config+0xdc>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <SystemClock_Config+0xdc>)
 800291e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <SystemClock_Config+0xdc>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <SystemClock_Config+0xe0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <SystemClock_Config+0xe0>)
 8002936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <SystemClock_Config+0xe0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800294c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002950:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002952:	2302      	movs	r3, #2
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800295c:	2319      	movs	r3, #25
 800295e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002960:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002966:	2302      	movs	r3, #2
 8002968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800296a:	2304      	movs	r3, #4
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 800296e:	2307      	movs	r3, #7
 8002970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002972:	f107 031c 	add.w	r3, r7, #28
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fcb6 	bl	80062e8 <HAL_RCC_OscConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002982:	f000 f899 	bl	8002ab8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002986:	f003 fc5f 	bl	8006248 <HAL_PWREx_EnableOverDrive>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002990:	f000 f892 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002994:	230f      	movs	r3, #15
 8002996:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002998:	2302      	movs	r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	2106      	movs	r1, #6
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 ff46 	bl	8006844 <HAL_RCC_ClockConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80029be:	f000 f87b 	bl	8002ab8 <Error_Handler>
  }
}
 80029c2:	bf00      	nop
 80029c4:	3750      	adds	r7, #80	; 0x50
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000

080029d4 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e8:	2210      	movs	r2, #16
 80029ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80029f2:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80029f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fc:	4923      	ldr	r1, [pc, #140]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fe:	4824      	ldr	r0, [pc, #144]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a00:	f004 fd80 	bl	8007504 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 ff17 	bl	8003838 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a10:	4b1e      	ldr	r3, [pc, #120]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a12:	2210      	movs	r2, #16
 8002a14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a26:	4919      	ldr	r1, [pc, #100]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a28:	4819      	ldr	r0, [pc, #100]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a2a:	f004 fd6b 	bl	8007504 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a30:	2203      	movs	r2, #3
 8002a32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a36:	2210      	movs	r2, #16
 8002a38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4910      	ldr	r1, [pc, #64]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4c:	4810      	ldr	r0, [pc, #64]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a4e:	f004 fd59 	bl	8007504 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002a52:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002a56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a60:	2210      	movs	r2, #16
 8002a62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a74:	4905      	ldr	r1, [pc, #20]	; (8002a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a76:	4806      	ldr	r0, [pc, #24]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a78:	f004 fd44 	bl	8007504 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a80:	f004 fd75 	bl	800756e <HAL_SDRAM_ProgramRefreshRate>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	2000051c 	.word	0x2000051c
 8002a90:	200003e0 	.word	0x200003e0

08002a94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002aa6:	f000 fea7 	bl	80037f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40001000 	.word	0x40001000

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <freeRTOS_user_init>:
/* Functions definition ------------------------------------------------------*/
/**
  * @brief Create the FreeRTOS objects and tasks.
  * @return true if the tasks are created, false otherwise.
  */
void freeRTOS_user_init(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af02      	add	r7, sp, #8
	bool retval = true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	71fb      	strb	r3, [r7, #7]

	// Setup list
	currentDirection = UP;
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <freeRTOS_user_init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
	startGame = 0;
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <freeRTOS_user_init+0x98>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
	queue = initQueue();
 8002ada:	f000 fb7b 	bl	80031d4 <initQueue>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <freeRTOS_user_init+0x9c>)
 8002ae2:	6013      	str	r3, [r2, #0]

	lcd_mut = xSemaphoreCreateMutex();			//Create mutex (LCD access)
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f006 f93a 	bl	8008d5e <xQueueCreateMutex>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <freeRTOS_user_init+0xa0>)
 8002aee:	6013      	str	r3, [r2, #0]
	if(lcd_mut == NULL)
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <freeRTOS_user_init+0xa0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <freeRTOS_user_init+0x38>
		retval = false;
 8002af8:	2300      	movs	r3, #0
 8002afa:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate(task_draw_fct, "Task draw", 256, NULL, 2, &task_draw_handle); // Lower priority
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <freeRTOS_user_init+0xa4>)
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	2302      	movs	r3, #2
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b0a:	4918      	ldr	r1, [pc, #96]	; (8002b6c <freeRTOS_user_init+0xa8>)
 8002b0c:	4818      	ldr	r0, [pc, #96]	; (8002b70 <freeRTOS_user_init+0xac>)
 8002b0e:	f006 fd9c 	bl	800964a <xTaskCreate>
 8002b12:	4602      	mov	r2, r0
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	71fb      	strb	r3, [r7, #7]
	retval &= xTaskCreate(task_readJoystick_fct, "Task read joystick", 256, NULL, 1, &task_readJoystick_handle); // Higher priority
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <freeRTOS_user_init+0xb0>)
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b30:	4911      	ldr	r1, [pc, #68]	; (8002b78 <freeRTOS_user_init+0xb4>)
 8002b32:	4812      	ldr	r0, [pc, #72]	; (8002b7c <freeRTOS_user_init+0xb8>)
 8002b34:	f006 fd89 	bl	800964a <xTaskCreate>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	71fb      	strb	r3, [r7, #7]

	// Fill initial grid
	computeInitialGrid();
 8002b48:	f000 f95e 	bl	8002e08 <computeInitialGrid>

	// Print welcome message
	displayWelcomeMessage();
 8002b4c:	f000 fa98 	bl	8003080 <displayWelcomeMessage>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	2000052c 	.word	0x2000052c
 8002b5c:	20000538 	.word	0x20000538
 8002b60:	20000534 	.word	0x20000534
 8002b64:	20000548 	.word	0x20000548
 8002b68:	20000540 	.word	0x20000540
 8002b6c:	0800c768 	.word	0x0800c768
 8002b70:	08002eb9 	.word	0x08002eb9
 8002b74:	20000544 	.word	0x20000544
 8002b78:	0800c774 	.word	0x0800c774
 8002b7c:	08002b81 	.word	0x08002b81

08002b80 <task_readJoystick_fct>:

void task_readJoystick_fct( void *pvParameters ){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

	while(1){
		// Wait until game gets started
		while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002b88:	e002      	b.n	8002b90 <task_readJoystick_fct+0x10>
 8002b8a:	2032      	movs	r0, #50	; 0x32
 8002b8c:	f006 feba 	bl	8009904 <vTaskDelay>
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <task_readJoystick_fct+0x68>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f8      	beq.n	8002b8a <task_readJoystick_fct+0xa>

		// Wait until initial delay is over
		while(showInitialDelay) vTaskDelay(pdMS_TO_TICKS(10));
 8002b98:	e002      	b.n	8002ba0 <task_readJoystick_fct+0x20>
 8002b9a:	200a      	movs	r0, #10
 8002b9c:	f006 feb2 	bl	8009904 <vTaskDelay>
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <task_readJoystick_fct+0x6c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f8      	bne.n	8002b9a <task_readJoystick_fct+0x1a>

		while(!gameFinished){
 8002ba8:	e012      	b.n	8002bd0 <task_readJoystick_fct+0x50>
			enum Direction newDirection = readJoystick();
 8002baa:	f7ff fcbb 	bl	8002524 <readJoystick>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	73fb      	strb	r3, [r7, #15]

			if(newDirection != IDLE) currentDirection = newDirection;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d002      	beq.n	8002bbe <task_readJoystick_fct+0x3e>
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <task_readJoystick_fct+0x70>)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	7013      	strb	r3, [r2, #0]

			move_and_compute_new_grid(currentDirection);
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <task_readJoystick_fct+0x70>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f818 	bl	8002bf8 <move_and_compute_new_grid>

			vTaskDelay(pdMS_TO_TICKS(MOVE_INTERVAL));
 8002bc8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002bcc:	f006 fe9a 	bl	8009904 <vTaskDelay>
		while(!gameFinished){
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <task_readJoystick_fct+0x74>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1e5      	bne.n	8002baa <task_readJoystick_fct+0x2a>
		}

		vTaskDelay(pdMS_TO_TICKS(200));
 8002bde:	20c8      	movs	r0, #200	; 0xc8
 8002be0:	f006 fe90 	bl	8009904 <vTaskDelay>
		while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002be4:	e7d4      	b.n	8002b90 <task_readJoystick_fct+0x10>
 8002be6:	bf00      	nop
 8002be8:	20000538 	.word	0x20000538
 8002bec:	2000001d 	.word	0x2000001d
 8002bf0:	2000052c 	.word	0x2000052c
 8002bf4:	2000053c 	.word	0x2000053c

08002bf8 <move_and_compute_new_grid>:
	}

}

void move_and_compute_new_grid(enum Direction newDirection){
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]

	Node* tmp = queue->next;
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <move_and_compute_new_grid+0x208>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	61fb      	str	r3, [r7, #28]

	while(tmp != NULL){
 8002c0a:	e077      	b.n	8002cfc <move_and_compute_new_grid+0x104>
		Node* next = tmp->next;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	60bb      	str	r3, [r7, #8]

		if(newDirection == DOWN){
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d119      	bne.n	8002c4c <move_and_compute_new_grid+0x54>
			// Remove blocks
			if(tmp->x == X_AXIS_CENTER && tmp->y == Y_AXIS_CENTER + 1){
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d107      	bne.n	8002c30 <move_and_compute_new_grid+0x38>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d103      	bne.n	8002c30 <move_and_compute_new_grid+0x38>
				gameFinished = true;
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <move_and_compute_new_grid+0x20c>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
				return;
 8002c2e:	e0e3      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}else if(tmp->y == 0){
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <move_and_compute_new_grid+0x48>
				removeNode(tmp);
 8002c38:	69f8      	ldr	r0, [r7, #28]
 8002c3a:	f000 fb15 	bl	8003268 <removeNode>
 8002c3e:	e05b      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}else{
				// Move blocks
				tmp->y -= 1;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	e055      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}
		}else if(newDirection == UP){
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <move_and_compute_new_grid+0x8e>
			// Remove blocks
			if(tmp->x == X_AXIS_CENTER && tmp->y == Y_AXIS_CENTER - 1){
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d107      	bne.n	8002c6a <move_and_compute_new_grid+0x72>
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d103      	bne.n	8002c6a <move_and_compute_new_grid+0x72>
				gameFinished = true;
 8002c62:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <move_and_compute_new_grid+0x20c>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
				return;
 8002c68:	e0c6      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}else if(tmp->y == X_AXIS_ELEMENTS - 1){
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b18      	cmp	r3, #24
 8002c70:	d103      	bne.n	8002c7a <move_and_compute_new_grid+0x82>
				removeNode(tmp);
 8002c72:	69f8      	ldr	r0, [r7, #28]
 8002c74:	f000 faf8 	bl	8003268 <removeNode>
 8002c78:	e03e      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}else{
				// Move blocks
				tmp->y += 1;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	e038      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}
		}else if(newDirection == LEFT){
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d119      	bne.n	8002cc0 <move_and_compute_new_grid+0xc8>
			// Remove blocks
			if(tmp->x == X_AXIS_CENTER - 1 && tmp->y == Y_AXIS_CENTER){
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b0b      	cmp	r3, #11
 8002c92:	d107      	bne.n	8002ca4 <move_and_compute_new_grid+0xac>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b07      	cmp	r3, #7
 8002c9a:	d103      	bne.n	8002ca4 <move_and_compute_new_grid+0xac>
				gameFinished = true;
 8002c9c:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <move_and_compute_new_grid+0x20c>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
				return;
 8002ca2:	e0a9      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}else if(tmp->x == X_AXIS_ELEMENTS - 1){
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b18      	cmp	r3, #24
 8002caa:	d103      	bne.n	8002cb4 <move_and_compute_new_grid+0xbc>
				removeNode(tmp);
 8002cac:	69f8      	ldr	r0, [r7, #28]
 8002cae:	f000 fadb 	bl	8003268 <removeNode>
 8002cb2:	e021      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}else{
				// Move blocks
				tmp->x += 1;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	e01b      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}
		}else if(newDirection == RIGHT){
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d118      	bne.n	8002cf8 <move_and_compute_new_grid+0x100>
			// Remove blocks
			if(tmp->x == X_AXIS_CENTER + 1 && tmp->y == Y_AXIS_CENTER){
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b0d      	cmp	r3, #13
 8002ccc:	d107      	bne.n	8002cde <move_and_compute_new_grid+0xe6>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b07      	cmp	r3, #7
 8002cd4:	d103      	bne.n	8002cde <move_and_compute_new_grid+0xe6>
				gameFinished = true;
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <move_and_compute_new_grid+0x20c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
				return;
 8002cdc:	e08c      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}else if(tmp->x == 0){
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <move_and_compute_new_grid+0xf6>
				removeNode(tmp);
 8002ce6:	69f8      	ldr	r0, [r7, #28]
 8002ce8:	f000 fabe 	bl	8003268 <removeNode>
 8002cec:	e004      	b.n	8002cf8 <move_and_compute_new_grid+0x100>
			}else{
				// Move blocks
				tmp->x -= 1;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	605a      	str	r2, [r3, #4]
			}
		}

		tmp = next;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61fb      	str	r3, [r7, #28]
	while(tmp != NULL){
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d184      	bne.n	8002c0c <move_and_compute_new_grid+0x14>
	}

	// Generate new blocks
	if(newDirection == DOWN){
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d11b      	bne.n	8002d40 <move_and_compute_new_grid+0x148>
		for(int x = 0; x < X_AXIS_ELEMENTS; x++){
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	e014      	b.n	8002d38 <move_and_compute_new_grid+0x140>
			if(getRandomInt(100) <= SPAWN_PERCENTAGE){
 8002d0e:	2064      	movs	r0, #100	; 0x64
 8002d10:	f000 f8be 	bl	8002e90 <getRandomInt>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	dc0b      	bgt.n	8002d32 <move_and_compute_new_grid+0x13a>
				addNode(queue, createNode(true, x, Y_AXIS_ELEMENTS - 1));
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <move_and_compute_new_grid+0x208>)
 8002d1c:	681c      	ldr	r4, [r3, #0]
 8002d1e:	220e      	movs	r2, #14
 8002d20:	69b9      	ldr	r1, [r7, #24]
 8002d22:	2001      	movs	r0, #1
 8002d24:	f000 fa80 	bl	8003228 <createNode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	f000 fa5d 	bl	80031ec <addNode>
		for(int x = 0; x < X_AXIS_ELEMENTS; x++){
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3301      	adds	r3, #1
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b18      	cmp	r3, #24
 8002d3c:	dde7      	ble.n	8002d0e <move_and_compute_new_grid+0x116>
 8002d3e:	e05b      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}
		}
	}else if(newDirection == UP){
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11b      	bne.n	8002d7e <move_and_compute_new_grid+0x186>
		for(int x = 0; x < X_AXIS_ELEMENTS; x++){
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	e014      	b.n	8002d76 <move_and_compute_new_grid+0x17e>
			if(getRandomInt(100) <= SPAWN_PERCENTAGE){
 8002d4c:	2064      	movs	r0, #100	; 0x64
 8002d4e:	f000 f89f 	bl	8002e90 <getRandomInt>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	dc0b      	bgt.n	8002d70 <move_and_compute_new_grid+0x178>
				addNode(queue, createNode(true, x, 0));
 8002d58:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <move_and_compute_new_grid+0x208>)
 8002d5a:	681c      	ldr	r4, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	6979      	ldr	r1, [r7, #20]
 8002d60:	2001      	movs	r0, #1
 8002d62:	f000 fa61 	bl	8003228 <createNode>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 fa3e 	bl	80031ec <addNode>
		for(int x = 0; x < X_AXIS_ELEMENTS; x++){
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2b18      	cmp	r3, #24
 8002d7a:	dde7      	ble.n	8002d4c <move_and_compute_new_grid+0x154>
 8002d7c:	e03c      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}
		}
	}else if(newDirection == LEFT){
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d11b      	bne.n	8002dbc <move_and_compute_new_grid+0x1c4>
		for(int y = 0; y < X_AXIS_ELEMENTS; y++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	e014      	b.n	8002db4 <move_and_compute_new_grid+0x1bc>
			if(getRandomInt(100) <= SPAWN_PERCENTAGE){
 8002d8a:	2064      	movs	r0, #100	; 0x64
 8002d8c:	f000 f880 	bl	8002e90 <getRandomInt>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	dc0b      	bgt.n	8002dae <move_and_compute_new_grid+0x1b6>
				addNode(queue, createNode(true, 0, y));
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <move_and_compute_new_grid+0x208>)
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f000 fa42 	bl	8003228 <createNode>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 fa1f 	bl	80031ec <addNode>
		for(int y = 0; y < X_AXIS_ELEMENTS; y++){
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	3301      	adds	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	dde7      	ble.n	8002d8a <move_and_compute_new_grid+0x192>
 8002dba:	e01d      	b.n	8002df8 <move_and_compute_new_grid+0x200>
			}
		}
	}else if(newDirection == RIGHT){
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d11a      	bne.n	8002df8 <move_and_compute_new_grid+0x200>
		for(int y = 0; y < X_AXIS_ELEMENTS; y++){
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e014      	b.n	8002df2 <move_and_compute_new_grid+0x1fa>
			if(getRandomInt(100) <= SPAWN_PERCENTAGE){
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	f000 f861 	bl	8002e90 <getRandomInt>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	dc0b      	bgt.n	8002dec <move_and_compute_new_grid+0x1f4>
				addNode(queue, createNode(true, X_AXIS_ELEMENTS - 1, y));
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <move_and_compute_new_grid+0x208>)
 8002dd6:	681c      	ldr	r4, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	2118      	movs	r1, #24
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f000 fa23 	bl	8003228 <createNode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fa00 	bl	80031ec <addNode>
		for(int y = 0; y < X_AXIS_ELEMENTS; y++){
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b18      	cmp	r3, #24
 8002df6:	dde7      	ble.n	8002dc8 <move_and_compute_new_grid+0x1d0>
			}
		}
	}
}
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000534 	.word	0x20000534
 8002e04:	2000053c 	.word	0x2000053c

08002e08 <computeInitialGrid>:

void computeInitialGrid(){
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
	for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e01d      	b.n	8002e50 <computeInitialGrid+0x48>
		for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	e014      	b.n	8002e44 <computeInitialGrid+0x3c>
			if(getRandomInt(100) <= SPAWN_PERCENTAGE){
 8002e1a:	2064      	movs	r0, #100	; 0x64
 8002e1c:	f000 f838 	bl	8002e90 <getRandomInt>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	dc0b      	bgt.n	8002e3e <computeInitialGrid+0x36>
				// Add new node
				addNode(queue, createNode(true, j, i));
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <computeInitialGrid+0x84>)
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 f9fa 	bl	8003228 <createNode>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4619      	mov	r1, r3
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f000 f9d7 	bl	80031ec <addNode>
		for(int j = 0; j < X_AXIS_ELEMENTS; j++){
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b18      	cmp	r3, #24
 8002e48:	dde7      	ble.n	8002e1a <computeInitialGrid+0x12>
	for(int i = 0; i < Y_AXIS_ELEMENTS; i++){
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b0e      	cmp	r3, #14
 8002e54:	ddde      	ble.n	8002e14 <computeInitialGrid+0xc>
			}
		}
	}

	// Free central block
	Node* tmp = queue->next;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <computeInitialGrid+0x84>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	607b      	str	r3, [r7, #4]

	while(tmp != NULL){
 8002e5e:	e00d      	b.n	8002e7c <computeInitialGrid+0x74>
		if(tmp->x == X_AXIS_ELEMENTS && tmp->y == Y_AXIS_ELEMENTS){
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b19      	cmp	r3, #25
 8002e66:	d106      	bne.n	8002e76 <computeInitialGrid+0x6e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d102      	bne.n	8002e76 <computeInitialGrid+0x6e>
			// Remove node
			removeNode(tmp);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f9f9 	bl	8003268 <removeNode>
		}
		tmp = tmp->next;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	607b      	str	r3, [r7, #4]
	while(tmp != NULL){
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ee      	bne.n	8002e60 <computeInitialGrid+0x58>
	}
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	20000534 	.word	0x20000534

08002e90 <getRandomInt>:

int getRandomInt(int max){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	// returns from 1 to max
	return (rand() % max) + 1;
 8002e98:	f008 fb14 	bl	800b4c4 <rand>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	fb93 f2f2 	sdiv	r2, r3, r2
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	fb01 f202 	mul.w	r2, r1, r2
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	3301      	adds	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <task_draw_fct>:

void task_draw_fct( void *pvParameters ){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	6078      	str	r0, [r7, #4]

	// Wait until game gets started
	while(!startGame) vTaskDelay(pdMS_TO_TICKS(50));
 8002ec0:	e002      	b.n	8002ec8 <task_draw_fct+0x10>
 8002ec2:	2032      	movs	r0, #50	; 0x32
 8002ec4:	f006 fd1e 	bl	8009904 <vTaskDelay>
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <task_draw_fct+0x160>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f8      	beq.n	8002ec2 <task_draw_fct+0xa>

	while(1){
		if(gameFinished){
 8002ed0:	4b52      	ldr	r3, [pc, #328]	; (800301c <task_draw_fct+0x164>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <task_draw_fct+0x26>
			displayGameEndMessage();
 8002ed8:	f000 f8fe 	bl	80030d8 <displayGameEndMessage>
 8002edc:	e7f8      	b.n	8002ed0 <task_draw_fct+0x18>
		}else{

			BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002ede:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002ee2:	f7fd fdd1 	bl	8000a88 <BSP_LCD_Clear>

			// Draw bricks
			Node* tmp = queue->next;
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <task_draw_fct+0x168>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	61fb      	str	r3, [r7, #28]

			while(tmp != NULL){
 8002eee:	e017      	b.n	8002f20 <task_draw_fct+0x68>

				if(tmp->isPixel){
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <task_draw_fct+0x62>
					draw_filled_square(tmp->x * CUBE_SIDE_LEN, tmp->y * CUBE_SIDE_LEN, CUBE_SIDE_LEN, CUBE_SIDE_LEN, LCD_COLOR_WHITE);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	015b      	lsls	r3, r3, #5
 8002f00:	b298      	uxth	r0, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	015b      	lsls	r3, r3, #5
 8002f0a:	b299      	uxth	r1, r3
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	2320      	movs	r3, #32
 8002f14:	2220      	movs	r2, #32
 8002f16:	f000 f897 	bl	8003048 <draw_filled_square>
				}

				tmp = tmp->next;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	61fb      	str	r3, [r7, #28]
			while(tmp != NULL){
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e4      	bne.n	8002ef0 <task_draw_fct+0x38>
			}

			// Draw player
			draw_filled_square(X_AXIS_CENTER * CUBE_SIDE_LEN, Y_AXIS_CENTER * CUBE_SIDE_LEN, CUBE_SIDE_LEN, CUBE_SIDE_LEN, LCD_COLOR_ORANGE);
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <task_draw_fct+0x16c>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	21e0      	movs	r1, #224	; 0xe0
 8002f30:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8002f34:	f000 f888 	bl	8003048 <draw_filled_square>

			if(showInitialDelay){
 8002f38:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <task_draw_fct+0x170>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <task_draw_fct+0x96>
				// Wait for 3 seconds
				vTaskDelay(pdMS_TO_TICKS(2000));
 8002f40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f44:	f006 fcde 	bl	8009904 <vTaskDelay>
				showInitialDelay = false;
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <task_draw_fct+0x170>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
			}

			score++;
 8002f4e:	4b37      	ldr	r3, [pc, #220]	; (800302c <task_draw_fct+0x174>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <task_draw_fct+0x174>)
 8002f56:	6013      	str	r3, [r2, #0]

			char buffer[14];
			sprintf(buffer, "Score: %d", score);
 8002f58:	4b34      	ldr	r3, [pc, #208]	; (800302c <task_draw_fct+0x174>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	4933      	ldr	r1, [pc, #204]	; (8003030 <task_draw_fct+0x178>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f008 fa8e 	bl	800b484 <siprintf>

			// Draw score
			BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8002f68:	482e      	ldr	r0, [pc, #184]	; (8003024 <task_draw_fct+0x16c>)
 8002f6a:	f7fd fd41 	bl	80009f0 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font20);
 8002f6e:	4831      	ldr	r0, [pc, #196]	; (8003034 <task_draw_fct+0x17c>)
 8002f70:	f7fd fd70 	bl	8000a54 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE - 20, buffer, LEFT_MODE);
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	2303      	movs	r3, #3
 8002f7a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fdee 	bl	8000b60 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f88:	f7fd fd32 	bl	80009f0 <BSP_LCD_SetTextColor>

			// Delay
			vTaskDelay(pdMS_TO_TICKS(MOVE_INTERVAL/speed));
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <task_draw_fct+0x180>)
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800303c <task_draw_fct+0x184>
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9e:	ee17 2a90 	vmov	r2, s15
 8002fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <task_draw_fct+0x188>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 fca6 	bl	8009904 <vTaskDelay>

			// Enhance speed
			if(difficultyLevel == MEDIUM){
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <task_draw_fct+0x18c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10e      	bne.n	8002fde <task_draw_fct+0x126>
				speed += 0.03;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <task_draw_fct+0x180>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fca:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8003008 <task_draw_fct+0x150>
 8002fce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <task_draw_fct+0x180>)
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
 8002fdc:	e778      	b.n	8002ed0 <task_draw_fct+0x18>
			}else if(difficultyLevel == HIGH){
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <task_draw_fct+0x18c>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	f47f af74 	bne.w	8002ed0 <task_draw_fct+0x18>
				speed += 0.045;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <task_draw_fct+0x180>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff2:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8003010 <task_draw_fct+0x158>
 8002ff6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ffa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <task_draw_fct+0x180>)
 8003000:	edc3 7a00 	vstr	s15, [r3]
		if(gameFinished){
 8003004:	e764      	b.n	8002ed0 <task_draw_fct+0x18>
 8003006:	bf00      	nop
 8003008:	eb851eb8 	.word	0xeb851eb8
 800300c:	3f9eb851 	.word	0x3f9eb851
 8003010:	70a3d70a 	.word	0x70a3d70a
 8003014:	3fa70a3d 	.word	0x3fa70a3d
 8003018:	20000538 	.word	0x20000538
 800301c:	2000053c 	.word	0x2000053c
 8003020:	20000534 	.word	0x20000534
 8003024:	ffffa500 	.word	0xffffa500
 8003028:	2000001d 	.word	0x2000001d
 800302c:	20000530 	.word	0x20000530
 8003030:	0800c788 	.word	0x0800c788
 8003034:	20000008 	.word	0x20000008
 8003038:	20000018 	.word	0x20000018
 800303c:	442f0000 	.word	0x442f0000
 8003040:	10624dd3 	.word	0x10624dd3
 8003044:	2000001c 	.word	0x2000001c

08003048 <draw_filled_square>:
			}
		}
	}
}

void draw_filled_square(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint32_t color){
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4604      	mov	r4, r0
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4623      	mov	r3, r4
 8003058:	80fb      	strh	r3, [r7, #6]
 800305a:	4603      	mov	r3, r0
 800305c:	80bb      	strh	r3, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]
 8003062:	4613      	mov	r3, r2
 8003064:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(color);
 8003066:	69b8      	ldr	r0, [r7, #24]
 8003068:	f7fd fcc2 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, width, height);
 800306c:	883b      	ldrh	r3, [r7, #0]
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	88b9      	ldrh	r1, [r7, #4]
 8003072:	88f8      	ldrh	r0, [r7, #6]
 8003074:	f7fd fe3c 	bl	8000cf0 <BSP_LCD_FillRect>
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <displayWelcomeMessage>:

void displayWelcomeMessage(){
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <displayWelcomeMessage+0x44>)
 8003086:	f7fd fcb3 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800308a:	480f      	ldr	r0, [pc, #60]	; (80030c8 <displayWelcomeMessage+0x48>)
 800308c:	f7fd fce2 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 - 20, "Welcome to BlockEscape", CENTER_MODE);
 8003090:	2301      	movs	r3, #1
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <displayWelcomeMessage+0x4c>)
 8003094:	21dc      	movs	r1, #220	; 0xdc
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fd62 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800309c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030a0:	f7fd fca6 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <displayWelcomeMessage+0x50>)
 80030a6:	f7fd fcd5 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 + 20, "To start a new game press the [user] button", CENTER_MODE);
 80030aa:	2301      	movs	r3, #1
 80030ac:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <displayWelcomeMessage+0x54>)
 80030ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fd fd54 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <displayWelcomeMessage+0x48>)
 80030ba:	f7fd fccb 	bl	8000a54 <BSP_LCD_SetFont>
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	ffffa500 	.word	0xffffa500
 80030c8:	20000010 	.word	0x20000010
 80030cc:	0800c794 	.word	0x0800c794
 80030d0:	20000008 	.word	0x20000008
 80030d4:	0800c7ac 	.word	0x0800c7ac

080030d8 <displayGameEndMessage>:

void displayGameEndMessage(){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0

	vTaskDelay(pdMS_TO_TICKS(500));
 80030de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030e2:	f006 fc0f 	bl	8009904 <vTaskDelay>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80030e6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80030ea:	f7fd fccd 	bl	8000a88 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80030ee:	482d      	ldr	r0, [pc, #180]	; (80031a4 <displayGameEndMessage+0xcc>)
 80030f0:	f7fd fc7e 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80030f4:	482c      	ldr	r0, [pc, #176]	; (80031a8 <displayGameEndMessage+0xd0>)
 80030f6:	f7fd fcad 	bl	8000a54 <BSP_LCD_SetFont>

	char buffer[32];
	sprintf(buffer, "You lost! Your score was: %d", score);
 80030fa:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <displayGameEndMessage+0xd4>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	463b      	mov	r3, r7
 8003100:	492b      	ldr	r1, [pc, #172]	; (80031b0 <displayGameEndMessage+0xd8>)
 8003102:	4618      	mov	r0, r3
 8003104:	f008 f9be 	bl	800b484 <siprintf>

	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 - 20, buffer, CENTER_MODE);
 8003108:	463a      	mov	r2, r7
 800310a:	2301      	movs	r3, #1
 800310c:	21dc      	movs	r1, #220	; 0xdc
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd26 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003118:	f7fd fc6a 	bl	80009f0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font20);
 800311c:	4825      	ldr	r0, [pc, #148]	; (80031b4 <displayGameEndMessage+0xdc>)
 800311e:	f7fd fc99 	bl	8000a54 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(0, DISP_Y_SIZE / 2 + 20, "To start a new game press the [user] button", CENTER_MODE);
 8003122:	2301      	movs	r3, #1
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <displayGameEndMessage+0xe0>)
 8003126:	f44f 7182 	mov.w	r1, #260	; 0x104
 800312a:	2000      	movs	r0, #0
 800312c:	f7fd fd18 	bl	8000b60 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font24);
 8003130:	481d      	ldr	r0, [pc, #116]	; (80031a8 <displayGameEndMessage+0xd0>)
 8003132:	f7fd fc8f 	bl	8000a54 <BSP_LCD_SetFont>

	// Reset variables
	speed = 1;
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <displayGameEndMessage+0xe4>)
 8003138:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800313c:	601a      	str	r2, [r3, #0]
	startGame = 0;
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <displayGameEndMessage+0xe8>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
	currentDirection = UP;
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <displayGameEndMessage+0xec>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
	showInitialDelay = true;
 800314a:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <displayGameEndMessage+0xf0>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
	gameFinished = false;
 8003150:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <displayGameEndMessage+0xf4>)
 8003152:	2200      	movs	r2, #0
 8003154:	701a      	strb	r2, [r3, #0]
	score = 0;
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <displayGameEndMessage+0xd4>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

	// Empty queue
	Node* tmp = queue->next;
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <displayGameEndMessage+0xf8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	627b      	str	r3, [r7, #36]	; 0x24

	while(tmp != NULL){
 8003164:	e007      	b.n	8003176 <displayGameEndMessage+0x9e>
		Node* next = tmp->next;
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	623b      	str	r3, [r7, #32]
		removeNode(tmp);
 800316c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800316e:	f000 f87b 	bl	8003268 <removeNode>
		tmp = next;
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
	while(tmp != NULL){
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f4      	bne.n	8003166 <displayGameEndMessage+0x8e>
	}

	queue->next = NULL;
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <displayGameEndMessage+0xf8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]

	// Fill initial grid
	computeInitialGrid();
 8003184:	f7ff fe40 	bl	8002e08 <computeInitialGrid>

	// Wait until new game gets started
	while(!startGame) vTaskDelay(pdMS_TO_TICKS(200));
 8003188:	e002      	b.n	8003190 <displayGameEndMessage+0xb8>
 800318a:	20c8      	movs	r0, #200	; 0xc8
 800318c:	f006 fbba 	bl	8009904 <vTaskDelay>
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <displayGameEndMessage+0xe8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f8      	beq.n	800318a <displayGameEndMessage+0xb2>

}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	ffffa500 	.word	0xffffa500
 80031a8:	20000010 	.word	0x20000010
 80031ac:	20000530 	.word	0x20000530
 80031b0:	0800c7d8 	.word	0x0800c7d8
 80031b4:	20000008 	.word	0x20000008
 80031b8:	0800c7ac 	.word	0x0800c7ac
 80031bc:	20000018 	.word	0x20000018
 80031c0:	20000538 	.word	0x20000538
 80031c4:	2000052c 	.word	0x2000052c
 80031c8:	2000001d 	.word	0x2000001d
 80031cc:	2000053c 	.word	0x2000053c
 80031d0:	20000534 	.word	0x20000534

080031d4 <initQueue>:
 */

#include <stdlib.h>
#include "node.h"

Node* initQueue(){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	return createNode(false, -1, -1);
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e0:	2000      	movs	r0, #0
 80031e2:	f000 f821 	bl	8003228 <createNode>
 80031e6:	4603      	mov	r3, r0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}

080031ec <addNode>:

void addNode(Node* queueRoot, Node* newNode){
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]

	Node* tmp = queueRoot;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	60fb      	str	r3, [r7, #12]
	while(tmp->next != NULL){
 80031fa:	e002      	b.n	8003202 <addNode+0x16>
		tmp = tmp->next;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	60fb      	str	r3, [r7, #12]
	while(tmp->next != NULL){
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f8      	bne.n	80031fc <addNode+0x10>
	}

	newNode->previous = tmp;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	60da      	str	r2, [r3, #12]
	newNode->next = NULL;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
	tmp->next = newNode;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	611a      	str	r2, [r3, #16]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <createNode>:

Node* createNode(bool isPixel, int x, int y){
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	73fb      	strb	r3, [r7, #15]
	Node* tmp = (Node*) malloc(sizeof(Node));
 8003236:	2014      	movs	r0, #20
 8003238:	f008 f868 	bl	800b30c <malloc>
 800323c:	4603      	mov	r3, r0
 800323e:	617b      	str	r3, [r7, #20]
	tmp->isPixel = isPixel;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	701a      	strb	r2, [r3, #0]
	tmp->x = x;
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	605a      	str	r2, [r3, #4]
	tmp->y = y;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	609a      	str	r2, [r3, #8]
	tmp->previous = NULL;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
	tmp->next = NULL;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]

	return tmp;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <removeNode>:

void removeNode(Node* nodeToRemove){
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	nodeToRemove->previous->next = nodeToRemove->next;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6912      	ldr	r2, [r2, #16]
 8003278:	611a      	str	r2, [r3, #16]
	nodeToRemove->next->previous = nodeToRemove->previous;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	60da      	str	r2, [r3, #12]
	// Delete object
	free(nodeToRemove);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f008 f849 	bl	800b31c <free>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_MspInit+0x4c>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_MspInit+0x4c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_MspInit+0x4c>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	210f      	movs	r1, #15
 80032ce:	f06f 0001 	mvn.w	r0, #1
 80032d2:	f000 ff87 	bl	80041e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_InitTick+0xe0>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a32      	ldr	r2, [pc, #200]	; (80033c4 <HAL_InitTick+0xe0>)
 80032fa:	f043 0310 	orr.w	r3, r3, #16
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_InitTick+0xe0>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800330c:	f107 0210 	add.w	r2, r7, #16
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f003 fc66 	bl	8006be8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003326:	f003 fc4b 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 800332a:	6378      	str	r0, [r7, #52]	; 0x34
 800332c:	e004      	b.n	8003338 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800332e:	f003 fc47 	bl	8006bc0 <HAL_RCC_GetPCLK1Freq>
 8003332:	4603      	mov	r3, r0
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333a:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <HAL_InitTick+0xe4>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9b      	lsrs	r3, r3, #18
 8003342:	3b01      	subs	r3, #1
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <HAL_InitTick+0xe8>)
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <HAL_InitTick+0xec>)
 800334a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <HAL_InitTick+0xe8>)
 800334e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003352:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003354:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_InitTick+0xe8>)
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800335a:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_InitTick+0xe8>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003360:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_InitTick+0xe8>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_InitTick+0xe8>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800336c:	4817      	ldr	r0, [pc, #92]	; (80033cc <HAL_InitTick+0xe8>)
 800336e:	f004 f926 	bl	80075be <HAL_TIM_Base_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003378:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11b      	bne.n	80033b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003380:	4812      	ldr	r0, [pc, #72]	; (80033cc <HAL_InitTick+0xe8>)
 8003382:	f004 f97d 	bl	8007680 <HAL_TIM_Base_Start_IT>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800338c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003390:	2b00      	cmp	r3, #0
 8003392:	d111      	bne.n	80033b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003394:	2036      	movs	r0, #54	; 0x36
 8003396:	f000 ff41 	bl	800421c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	d808      	bhi.n	80033b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80033a0:	2200      	movs	r2, #0
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	2036      	movs	r0, #54	; 0x36
 80033a6:	f000 ff1d 	bl	80041e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_InitTick+0xf0>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	e002      	b.n	80033b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3738      	adds	r7, #56	; 0x38
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	431bde83 	.word	0x431bde83
 80033cc:	2000054c 	.word	0x2000054c
 80033d0:	40001000 	.word	0x40001000
 80033d4:	20000024 	.word	0x20000024

080033d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <NMI_Handler+0x4>

080033de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e2:	e7fe      	b.n	80033e2 <HardFault_Handler+0x4>

080033e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <MemManage_Handler+0x4>

080033ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <BusFault_Handler+0x4>

080033f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <UsageFault_Handler+0x4>

080033f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8003408:	2001      	movs	r0, #1
 800340a:	f002 fad5 	bl	80059b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM6_DAC_IRQHandler+0x10>)
 800341a:	f004 fa00 	bl	800781e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	2000054c 	.word	0x2000054c

08003428 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_Pin){
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10b      	bne.n	8003450 <HAL_GPIO_EXTI_Callback+0x28>
		if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, GPIO_Pin) == 1){
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	4619      	mov	r1, r3
 800343c:	4807      	ldr	r0, [pc, #28]	; (800345c <HAL_GPIO_EXTI_Callback+0x34>)
 800343e:	f002 fa89 	bl	8005954 <HAL_GPIO_ReadPin>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d104      	bne.n	8003452 <HAL_GPIO_EXTI_Callback+0x2a>
			// Button is pressed
			startGame = 1;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_GPIO_EXTI_Callback+0x38>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
			// Button is released
		}
	}else{
	      __NOP();
	}
}
 800344e:	e000      	b.n	8003452 <HAL_GPIO_EXTI_Callback+0x2a>
	      __NOP();
 8003450:	bf00      	nop
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40020000 	.word	0x40020000
 8003460:	20000538 	.word	0x20000538

08003464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return 1;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <_kill>:

int _kill(int pid, int sig)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800347e:	f008 f98f 	bl	800b7a0 <__errno>
 8003482:	4603      	mov	r3, r0
 8003484:	2216      	movs	r2, #22
 8003486:	601a      	str	r2, [r3, #0]
  return -1;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_exit>:

void _exit (int status)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800349c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ffe7 	bl	8003474 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034a6:	e7fe      	b.n	80034a6 <_exit+0x12>

080034a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e00a      	b.n	80034d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034ba:	f3af 8000 	nop.w
 80034be:	4601      	mov	r1, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	60ba      	str	r2, [r7, #8]
 80034c6:	b2ca      	uxtb	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dbf0      	blt.n	80034ba <_read+0x12>
  }

  return len;
 80034d8:	687b      	ldr	r3, [r7, #4]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e009      	b.n	8003508 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	60ba      	str	r2, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	dbf1      	blt.n	80034f4 <_write+0x12>
  }
  return len;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_close>:

int _close(int file)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003542:	605a      	str	r2, [r3, #4]
  return 0;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_isatty>:

int _isatty(int file)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <_sbrk+0x5c>)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <_sbrk+0x60>)
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <_sbrk+0x64>)
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <_sbrk+0x68>)
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <_sbrk+0x64>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4413      	add	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d207      	bcs.n	80035c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b4:	f008 f8f4 	bl	800b7a0 <__errno>
 80035b8:	4603      	mov	r3, r0
 80035ba:	220c      	movs	r2, #12
 80035bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c2:	e009      	b.n	80035d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <_sbrk+0x64>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <_sbrk+0x64>)
 80035d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035d6:	68fb      	ldr	r3, [r7, #12]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20080000 	.word	0x20080000
 80035e4:	00000400 	.word	0x00000400
 80035e8:	20000598 	.word	0x20000598
 80035ec:	20005118 	.word	0x20005118

080035f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <SystemInit+0x20>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <SystemInit+0x20>)
 80035fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800361a:	f107 031c 	add.w	r3, r7, #28
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003626:	463b      	mov	r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	615a      	str	r2, [r3, #20]
 8003636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <MX_TIM3_Init+0xac>)
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <MX_TIM3_Init+0xb0>)
 800363c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800363e:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <MX_TIM3_Init+0xac>)
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003644:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <MX_TIM3_Init+0xac>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <MX_TIM3_Init+0xac>)
 800364c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <MX_TIM3_Init+0xac>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <MX_TIM3_Init+0xac>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800365e:	4818      	ldr	r0, [pc, #96]	; (80036c0 <MX_TIM3_Init+0xac>)
 8003660:	f004 f886 	bl	8007770 <HAL_TIM_PWM_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800366a:	f7ff fa25 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	4810      	ldr	r0, [pc, #64]	; (80036c0 <MX_TIM3_Init+0xac>)
 800367e:	f004 fe27 	bl	80082d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003688:	f7ff fa16 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800368c:	2360      	movs	r3, #96	; 0x60
 800368e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800369c:	463b      	mov	r3, r7
 800369e:	2208      	movs	r2, #8
 80036a0:	4619      	mov	r1, r3
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <MX_TIM3_Init+0xac>)
 80036a4:	f004 f9da 	bl	8007a5c <HAL_TIM_PWM_ConfigChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80036ae:	f7ff fa03 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <MX_TIM3_Init+0xac>)
 80036b4:	f000 f828 	bl	8003708 <HAL_TIM_MspPostInit>

}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000059c 	.word	0x2000059c
 80036c4:	40000400 	.word	0x40000400

080036c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_TIM_PWM_MspInit+0x38>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10b      	bne.n	80036f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_TIM_PWM_MspInit+0x3c>)
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_TIM_PWM_MspInit+0x3c>)
 80036e0:	f043 0302 	orr.w	r3, r3, #2
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_TIM_PWM_MspInit+0x3c>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40000400 	.word	0x40000400
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <HAL_TIM_MspPostInit+0x64>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d11c      	bne.n	8003764 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_TIM_MspPostInit+0x68>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_TIM_MspPostInit+0x68>)
 8003730:	f043 0304 	orr.w	r3, r3, #4
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_TIM_MspPostInit+0x68>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8003742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003754:	2302      	movs	r3, #2
 8003756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4619      	mov	r1, r3
 800375e:	4805      	ldr	r0, [pc, #20]	; (8003774 <HAL_TIM_MspPostInit+0x6c>)
 8003760:	f001 ff4c 	bl	80055fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003764:	bf00      	nop
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40000400 	.word	0x40000400
 8003770:	40023800 	.word	0x40023800
 8003774:	40020800 	.word	0x40020800

08003778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800377e:	490e      	ldr	r1, [pc, #56]	; (80037b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003780:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800378c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003792:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003794:	4c0b      	ldr	r4, [pc, #44]	; (80037c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037a2:	f7ff ff25 	bl	80035f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037a6:	f008 f801 	bl	800b7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037aa:	f7ff f85d 	bl	8002868 <main>
  bx  lr    
 80037ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80037b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80037bc:	0800f4e0 	.word	0x0800f4e0
  ldr r2, =_sbss
 80037c0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80037c4:	20005118 	.word	0x20005118

080037c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c8:	e7fe      	b.n	80037c8 <ADC_IRQHandler>
	...

080037cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_Init+0x28>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <HAL_Init+0x28>)
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 fcf6 	bl	80041ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e2:	200f      	movs	r0, #15
 80037e4:	f7ff fd7e 	bl	80032e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e8:	f7ff fd54 	bl	8003294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00

080037f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_IncTick+0x20>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_IncTick+0x24>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4413      	add	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <HAL_IncTick+0x24>)
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000028 	.word	0x20000028
 800381c:	200005e8 	.word	0x200005e8

08003820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_GetTick+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	200005e8 	.word	0x200005e8

08003838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7ff ffee 	bl	8003820 <HAL_GetTick>
 8003844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003850:	d005      	beq.n	800385e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_Delay+0x44>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800385e:	bf00      	nop
 8003860:	f7ff ffde 	bl	8003820 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d8f7      	bhi.n	8003860 <HAL_Delay+0x28>
  {
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000028 	.word	0x20000028

08003880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e031      	b.n	80038fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd ff2e 	bl	8001700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_ADC_Init+0x84>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fad6 	bl	8003e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
 80038ea:	e001      	b.n	80038f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	ffffeefd 	.word	0xffffeefd

08003908 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Start+0x1a>
 800391e:	2302      	movs	r3, #2
 8003920:	e0ad      	b.n	8003a7e <HAL_ADC_Start+0x176>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d018      	beq.n	800396a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003948:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <HAL_ADC_Start+0x184>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a50      	ldr	r2, [pc, #320]	; (8003a90 <HAL_ADC_Start+0x188>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0c9a      	lsrs	r2, r3, #18
 8003954:	4613      	mov	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4413      	add	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800395c:	e002      	b.n	8003964 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b01      	subs	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d175      	bne.n	8003a64 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397c:	4b45      	ldr	r3, [pc, #276]	; (8003a94 <HAL_ADC_Start+0x18c>)
 800397e:	4013      	ands	r3, r2
 8003980:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800399e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d106      	bne.n	80039c2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f023 0206 	bic.w	r2, r3, #6
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
 80039c0:	e002      	b.n	80039c8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_ADC_Start+0x190>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10f      	bne.n	8003a06 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d143      	bne.n	8003a7c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	e03a      	b.n	8003a7c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a24      	ldr	r2, [pc, #144]	; (8003a9c <HAL_ADC_Start+0x194>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10e      	bne.n	8003a2e <HAL_ADC_Start+0x126>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a2c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_ADC_Start+0x190>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d120      	bne.n	8003a7c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_ADC_Start+0x198>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d11b      	bne.n	8003a7c <HAL_ADC_Start+0x174>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d114      	bne.n	8003a7c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	e00b      	b.n	8003a7c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	f043 0210 	orr.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000020 	.word	0x20000020
 8003a90:	431bde83 	.word	0x431bde83
 8003a94:	fffff8fe 	.word	0xfffff8fe
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	40012000 	.word	0x40012000
 8003aa0:	40012200 	.word	0x40012200

08003aa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d113      	bne.n	8003aea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad0:	d10b      	bne.n	8003aea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e063      	b.n	8003bb2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003aea:	f7ff fe99 	bl	8003820 <HAL_GetTick>
 8003aee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003af0:	e021      	b.n	8003b36 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af8:	d01d      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_ADC_PollForConversion+0x6c>
 8003b00:	f7ff fe8e 	bl	8003820 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d212      	bcs.n	8003b36 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d00b      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e03d      	b.n	8003bb2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d1d6      	bne.n	8003af2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0212 	mvn.w	r2, #18
 8003b4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d123      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11f      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d111      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e136      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x28a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d93a      	bls.n	8003c76 <HAL_ADC_ConfigChannel+0xa2>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c08:	d035      	beq.n	8003c76 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	4613      	mov	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3b1e      	subs	r3, #30
 8003c20:	2207      	movs	r2, #7
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a8d      	ldr	r2, [pc, #564]	; (8003e6c <HAL_ADC_ConfigChannel+0x298>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10a      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	061a      	lsls	r2, r3, #24
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c4e:	e035      	b.n	8003cbc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d9      	ldr	r1, [r3, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4618      	mov	r0, r3
 8003c62:	4603      	mov	r3, r0
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4403      	add	r3, r0
 8003c68:	3b1e      	subs	r3, #30
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c74:	e022      	b.n	8003cbc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6919      	ldr	r1, [r3, #16]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43da      	mvns	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	400a      	ands	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6919      	ldr	r1, [r3, #16]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4403      	add	r3, r0
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d824      	bhi.n	8003d0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b05      	subs	r3, #5
 8003cd6:	221f      	movs	r2, #31
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b05      	subs	r3, #5
 8003d00:	fa00 f203 	lsl.w	r2, r0, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003d0c:	e04c      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d824      	bhi.n	8003d60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	3b23      	subs	r3, #35	; 0x23
 8003d28:	221f      	movs	r2, #31
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4618      	mov	r0, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b23      	subs	r3, #35	; 0x23
 8003d52:	fa00 f203 	lsl.w	r2, r0, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5e:	e023      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	3b41      	subs	r3, #65	; 0x41
 8003d72:	221f      	movs	r2, #31
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43da      	mvns	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	400a      	ands	r2, r1
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	3b41      	subs	r3, #65	; 0x41
 8003d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_ADC_ConfigChannel+0x29c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10a      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1f4>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dba:	d105      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003dbc:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003dc2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003dc6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_ADC_ConfigChannel+0x29c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10f      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x21e>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b12      	cmp	r3, #18
 8003dd8:	d10b      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003dda:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003de0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003de4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003de6:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003df0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <HAL_ADC_ConfigChannel+0x29c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d12b      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x280>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_ADC_ConfigChannel+0x298>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <HAL_ADC_ConfigChannel+0x23a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b11      	cmp	r3, #17
 8003e0c:	d122      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4a18      	ldr	r2, [pc, #96]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e18:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003e20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_ADC_ConfigChannel+0x298>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_ADC_ConfigChannel+0x2a4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <HAL_ADC_ConfigChannel+0x2a8>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9a      	lsrs	r2, r3, #18
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e46:	e002      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f9      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	10000012 	.word	0x10000012
 8003e70:	40012000 	.word	0x40012000
 8003e74:	40012300 	.word	0x40012300
 8003e78:	20000020 	.word	0x20000020
 8003e7c:	431bde83 	.word	0x431bde83

08003e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003e88:	4b78      	ldr	r3, [pc, #480]	; (800406c <ADC_Init+0x1ec>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <ADC_Init+0x1ec>)
 8003e8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003e92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003e94:	4b75      	ldr	r3, [pc, #468]	; (800406c <ADC_Init+0x1ec>)
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4973      	ldr	r1, [pc, #460]	; (800406c <ADC_Init+0x1ec>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	021a      	lsls	r2, r3, #8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	4a58      	ldr	r2, [pc, #352]	; (8004070 <ADC_Init+0x1f0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6899      	ldr	r1, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	e00f      	b.n	8003f7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0202 	bic.w	r2, r2, #2
 8003f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	005a      	lsls	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	035a      	lsls	r2, r3, #13
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	e007      	b.n	8003ff0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	3b01      	subs	r3, #1
 800400c:	051a      	lsls	r2, r3, #20
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004032:	025a      	lsls	r2, r3, #9
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	029a      	lsls	r2, r3, #10
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40012300 	.word	0x40012300
 8004070:	0f000001 	.word	0x0f000001

08004074 <__NVIC_SetPriorityGrouping>:
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a2:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <__NVIC_SetPriorityGrouping+0x40>)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	60d3      	str	r3, [r2, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00
 80040b8:	05fa0000 	.word	0x05fa0000

080040bc <__NVIC_GetPriorityGrouping>:
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <__NVIC_GetPriorityGrouping+0x18>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 0307 	and.w	r3, r3, #7
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_EnableIRQ>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	db0b      	blt.n	8004102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <__NVIC_EnableIRQ+0x38>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2001      	movs	r0, #1
 80040fa:	fa00 f202 	lsl.w	r2, r0, r2
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e100 	.word	0xe000e100

08004114 <__NVIC_SetPriority>:
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	2b00      	cmp	r3, #0
 8004126:	db0a      	blt.n	800413e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	490c      	ldr	r1, [pc, #48]	; (8004160 <__NVIC_SetPriority+0x4c>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	0112      	lsls	r2, r2, #4
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	440b      	add	r3, r1
 8004138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800413c:	e00a      	b.n	8004154 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4908      	ldr	r1, [pc, #32]	; (8004164 <__NVIC_SetPriority+0x50>)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	3b04      	subs	r3, #4
 800414c:	0112      	lsls	r2, r2, #4
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	440b      	add	r3, r1
 8004152:	761a      	strb	r2, [r3, #24]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000e100 	.word	0xe000e100
 8004164:	e000ed00 	.word	0xe000ed00

08004168 <NVIC_EncodePriority>:
{
 8004168:	b480      	push	{r7}
 800416a:	b089      	sub	sp, #36	; 0x24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	bf28      	it	cs
 8004186:	2304      	movcs	r3, #4
 8004188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3304      	adds	r3, #4
 800418e:	2b06      	cmp	r3, #6
 8004190:	d902      	bls.n	8004198 <NVIC_EncodePriority+0x30>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3b03      	subs	r3, #3
 8004196:	e000      	b.n	800419a <NVIC_EncodePriority+0x32>
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	401a      	ands	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	43d9      	mvns	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c0:	4313      	orrs	r3, r2
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b082      	sub	sp, #8
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff4c 	bl	8004074 <__NVIC_SetPriorityGrouping>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041f6:	f7ff ff61 	bl	80040bc <__NVIC_GetPriorityGrouping>
 80041fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	6978      	ldr	r0, [r7, #20]
 8004202:	f7ff ffb1 	bl	8004168 <NVIC_EncodePriority>
 8004206:	4602      	mov	r2, r0
 8004208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff80 	bl	8004114 <__NVIC_SetPriority>
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ff54 	bl	80040d8 <__NVIC_EnableIRQ>
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e049      	b.n	80042de <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd faf2 	bl	8001848 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	f023 0107 	bic.w	r1, r3, #7
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_DMA2D_Init+0xb0>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68d1      	ldr	r1, [r2, #12]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	051a      	lsls	r2, r3, #20
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	055b      	lsls	r3, r3, #21
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	ffffc000 	.word	0xffffc000

080042ec <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_DMA2D_Start+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e018      	b.n	800433a <HAL_DMA2D_Start+0x4e>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f994 	bl	8004650 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d056      	beq.n	800440c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800435e:	f7ff fa5f 	bl	8003820 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004364:	e04b      	b.n	80043fe <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004374:	2b00      	cmp	r3, #0
 8004376:	d023      	beq.n	80043c0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2221      	movs	r2, #33	; 0x21
 80043aa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2204      	movs	r2, #4
 80043b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0a5      	b.n	800450c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c6:	d01a      	beq.n	80043fe <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7ff fa2a 	bl	8003820 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <HAL_DMA2D_PollForTransfer+0x9c>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2203      	movs	r2, #3
 80043ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e086      	b.n	800450c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ac      	beq.n	8004366 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d061      	beq.n	80044f2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800442e:	f7ff f9f7 	bl	8003820 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004434:	e056      	b.n	80044e4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02e      	beq.n	80044a6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	f043 0204 	orr.w	r2, r3, #4
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f043 0202 	orr.w	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2229      	movs	r2, #41	; 0x29
 8004490:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2204      	movs	r2, #4
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e032      	b.n	800450c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ac:	d01a      	beq.n	80044e4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044ae:	f7ff f9b7 	bl	8003820 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <HAL_DMA2D_PollForTransfer+0x182>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10f      	bne.n	80044e4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2203      	movs	r2, #3
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e013      	b.n	800450c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0a1      	beq.n	8004436 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2212      	movs	r2, #18
 80044f8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_DMA2D_ConfigLayer+0x20>
 8004530:	2302      	movs	r3, #2
 8004532:	e084      	b.n	800463e <HAL_DMA2D_ConfigLayer+0x12a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	3320      	adds	r3, #32
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004568:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004574:	4b35      	ldr	r3, [pc, #212]	; (800464c <HAL_DMA2D_ConfigLayer+0x138>)
 8004576:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b0a      	cmp	r3, #10
 800457e:	d003      	beq.n	8004588 <HAL_DMA2D_ConfigLayer+0x74>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b09      	cmp	r3, #9
 8004586:	d107      	bne.n	8004598 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	e005      	b.n	80045a4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d120      	bne.n	80045ec <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	ea02 0103 	and.w	r1, r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	430a      	orrs	r2, r1
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b0a      	cmp	r3, #10
 80045d2:	d003      	beq.n	80045dc <HAL_DMA2D_ConfigLayer+0xc8>
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b09      	cmp	r3, #9
 80045da:	d127      	bne.n	800462c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80045e8:	629a      	str	r2, [r3, #40]	; 0x28
 80045ea:	e01f      	b.n	800462c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	ea02 0103 	and.w	r1, r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	430a      	orrs	r2, r1
 8004602:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b0a      	cmp	r3, #10
 8004614:	d003      	beq.n	800461e <HAL_DMA2D_ConfigLayer+0x10a>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b09      	cmp	r3, #9
 800461c:	d106      	bne.n	800462c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800462a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	ff33000f 	.word	0xff33000f

08004650 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004650:	b480      	push	{r7}
 8004652:	b08b      	sub	sp, #44	; 0x2c
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	041a      	lsls	r2, r3, #16
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004688:	d174      	bne.n	8004774 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004690:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004698:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
 80046c0:	e053      	b.n	800476a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d106      	bne.n	80046d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	e048      	b.n	800476a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d111      	bne.n	8004704 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	0cdb      	lsrs	r3, r3, #19
 80046e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	0a9b      	lsrs	r3, r3, #10
 80046ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	02db      	lsls	r3, r3, #11
 80046fa:	4313      	orrs	r3, r2
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	e032      	b.n	800476a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d117      	bne.n	800473c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	0fdb      	lsrs	r3, r3, #31
 8004710:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	0cdb      	lsrs	r3, r3, #19
 8004716:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	0adb      	lsrs	r3, r3, #11
 800471c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	029b      	lsls	r3, r3, #10
 800472c:	431a      	orrs	r2, r3
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	03db      	lsls	r3, r3, #15
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	e016      	b.n	800476a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	0f1b      	lsrs	r3, r3, #28
 8004740:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	0d1b      	lsrs	r3, r3, #20
 8004746:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	0b1b      	lsrs	r3, r3, #12
 800474c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	011a      	lsls	r2, r3, #4
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	431a      	orrs	r2, r3
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	031b      	lsls	r3, r3, #12
 8004762:	4313      	orrs	r3, r2
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004772:	e003      	b.n	800477c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	60da      	str	r2, [r3, #12]
}
 800477c:	bf00      	nop
 800477e:	372c      	adds	r7, #44	; 0x2c
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	019a      	lsls	r2, r3, #6
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	431a      	orrs	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	431a      	orrs	r2, r3
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b086      	sub	sp, #24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c8:	f7ff f82a 	bl	8003820 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80047ce:	e009      	b.n	80047e4 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80047d0:	f7ff f826 	bl	8003820 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047de:	d901      	bls.n	80047e4 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e015      	b.n	8004810 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ee      	beq.n	80047d0 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	019a      	lsls	r2, r3, #6
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	ea42 0103 	orr.w	r1, r2, r3
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	041a      	lsls	r2, r3, #16
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e109      	b.n	8004a40 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	7c5b      	ldrb	r3, [r3, #17]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f914 	bl	8001a64 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2203      	movs	r2, #3
 8004840:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004856:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800486a:	f7fe ffd9 	bl	8003820 <HAL_GetTick>
 800486e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004870:	e009      	b.n	8004886 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004872:	f7fe ffd5 	bl	8003820 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0dc      	b.n	8004a40 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800488e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0ed      	beq.n	8004872 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b69      	ldr	r3, [pc, #420]	; (8004a48 <HAL_DSI_Init+0x230>)
 80048a4:	400b      	ands	r3, r1
 80048a6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80048be:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80048c6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80048fa:	2001      	movs	r0, #1
 80048fc:	f7fe ff9c 	bl	8003838 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004900:	f7fe ff8e 	bl	8003820 <HAL_GetTick>
 8004904:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004906:	e009      	b.n	800491c <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004908:	f7fe ff8a 	bl	8003820 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004916:	d901      	bls.n	800491c <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e091      	b.n	8004a40 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ed      	beq.n	8004908 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0206 	orr.w	r2, r2, #6
 800493c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0203 	bic.w	r2, r2, #3
 8004950:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0203 	bic.w	r2, r2, #3
 800497e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049a6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_DSI_Init+0x1b0>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	e000      	b.n	80049ca <HAL_DSI_Init+0x1b2>
 80049c8:	2301      	movs	r3, #1
 80049ca:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_DSI_Init+0x234>)
 80049d0:	fb03 f202 	mul.w	r2, r3, r2
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	409a      	lsls	r2, r3
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004a00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	fffc8603 	.word	0xfffc8603
 8004a4c:	003d0900 	.word	0x003d0900

08004a50 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e066      	b.n	8004b30 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0208 	bic.w	r2, r2, #8
 8004a7c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0206 	bic.w	r2, r2, #6
 8004ac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b02:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc ffc4 	bl	8001aa4 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	7c1b      	ldrb	r3, [r3, #16]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_DSI_ConfigErrorMonitor+0x16>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0aa      	b.n	8004ca4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004ba8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0202 	orr.w	r2, r2, #2
 8004be4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 020c 	orr.w	r2, r2, #12
 8004c02:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0210 	orr.w	r2, r2, #16
 8004c20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0220 	orr.w	r2, r2, #32
 8004c3e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c5c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c7a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004c98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7c1b      	ldrb	r3, [r3, #16]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DSI_SetGenericVCID+0x16>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e016      	b.n	8004cf4 <HAL_DSI_SetGenericVCID+0x44>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0203 	bic.w	r2, r2, #3
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	7c1b      	ldrb	r3, [r3, #16]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_DSI_ConfigVideoMode+0x16>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e1ee      	b.n	80050f4 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0203 	bic.w	r2, r2, #3
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4b8b      	ldr	r3, [pc, #556]	; (8004f9c <HAL_DSI_ConfigVideoMode+0x29c>)
 8004d6e:	400b      	ands	r3, r1
 8004d70:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4b84      	ldr	r3, [pc, #528]	; (8004fa0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004d90:	400b      	ands	r3, r1
 8004d92:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b7b      	ldr	r3, [pc, #492]	; (8004fa0 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0203 	bic.w	r2, r2, #3
 8004dd6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68d9      	ldr	r1, [r3, #12]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0207 	bic.w	r2, r2, #7
 8004df8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6959      	ldr	r1, [r3, #20]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 020f 	bic.w	r2, r2, #15
 8004e26:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 020e 	bic.w	r2, r2, #14
 8004e4a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	005a      	lsls	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d110      	bne.n	8004e90 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e7c:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6919      	ldr	r1, [r3, #16]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004ee0:	400b      	ands	r3, r1
 8004ee2:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	4b2a      	ldr	r3, [pc, #168]	; (8004fac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004f02:	400b      	ands	r3, r1
 8004f04:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b22      	ldr	r3, [pc, #136]	; (8004fac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004f24:	400b      	ands	r3, r1
 8004f26:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004f46:	400b      	ands	r3, r1
 8004f48:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_DSI_ConfigVideoMode+0x29c>)
 8004f68:	400b      	ands	r3, r1
 8004f6a:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f98:	e00a      	b.n	8004fb0 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004f9a:	bf00      	nop
 8004f9c:	ffffc000 	.word	0xffffc000
 8004fa0:	ffffe000 	.word	0xffffe000
 8004fa4:	fffff000 	.word	0xfffff000
 8004fa8:	ffff8000 	.word	0xffff8000
 8004fac:	fffffc00 	.word	0xfffffc00
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004fc6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6999      	ldr	r1, [r3, #24]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd2:	041a      	lsls	r2, r3, #16
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fea:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005094:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	7c1b      	ldrb	r3, [r3, #16]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_DSI_ConfigFlowControl+0x16>
 8005112:	2302      	movs	r3, #2
 8005114:	e016      	b.n	8005144 <HAL_DSI_ConfigFlowControl+0x44>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 021f 	bic.w	r2, r2, #31
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7c1b      	ldrb	r3, [r3, #16]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_DSI_ConfigPhyTimer+0x16>
 8005162:	2302      	movs	r3, #2
 8005164:	e058      	b.n	8005218 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	4293      	cmp	r3, r2
 8005176:	bf38      	it	cc
 8005178:	4613      	movcc	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800518c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	041a      	lsls	r2, r3, #16
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80051ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80051f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	021a      	lsls	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7c1b      	ldrb	r3, [r3, #16]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_DSI_ConfigHostTimeouts+0x16>
 8005236:	2302      	movs	r3, #2
 8005238:	e0b4      	b.n	80053a4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800524e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b292      	uxth	r2, r2
 8005270:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	041a      	lsls	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005292:	400b      	ands	r3, r1
 8005294:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b3f      	ldr	r3, [pc, #252]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80052b4:	400b      	ands	r3, r1
 80052b6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80052d8:	400b      	ands	r3, r1
 80052da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005302:	400b      	ands	r3, r1
 8005304:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800532e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b16      	ldr	r3, [pc, #88]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005356:	400b      	ands	r3, r1
 8005358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005380:	400b      	ands	r3, r1
 8005382:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	ffff0000 	.word	0xffff0000

080053b4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	7c1b      	ldrb	r3, [r3, #16]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_DSI_Start+0x14>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e02b      	b.n	8005420 <HAL_DSI_Start+0x6c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80053f0:	2300      	movs	r3, #0
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0208 	orr.w	r2, r2, #8
 8005404:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	7c1b      	ldrb	r3, [r3, #16]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_DSI_ShortWrite+0x1a>
 8005442:	2302      	movs	r3, #2
 8005444:	e010      	b.n	8005468 <HAL_DSI_ShortWrite+0x3c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff f9af 	bl	80047ba <DSI_ShortWrite>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	741a      	strb	r2, [r3, #16]

  return status;
 8005466:	7dfb      	ldrb	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08c      	sub	sp, #48	; 0x30
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	7c1b      	ldrb	r3, [r3, #16]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_DSI_LongWrite+0x1e>
 800548a:	2302      	movs	r3, #2
 800548c:	e084      	b.n	8005598 <HAL_DSI_LongWrite+0x128>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005494:	f7fe f9c4 	bl	8003820 <HAL_GetTick>
 8005498:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800549a:	e00c      	b.n	80054b6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800549c:	f7fe f9c0 	bl	8003820 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054aa:	d904      	bls.n	80054b6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e070      	b.n	8005598 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0eb      	beq.n	800549c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	bf28      	it	cs
 80054ce:	2303      	movcs	r3, #3
 80054d0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80054d2:	2300      	movs	r3, #0
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	e00f      	b.n	80054f8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	4413      	add	r3, r2
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	3301      	adds	r3, #1
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	3301      	adds	r3, #1
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3eb      	bcc.n	80054d8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005518:	e028      	b.n	800556c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b04      	cmp	r3, #4
 800551e:	bf28      	it	cs
 8005520:	2304      	movcs	r3, #4
 8005522:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005528:	2300      	movs	r3, #0
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	e00e      	b.n	800554c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	4413      	add	r3, r2
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	4313      	orrs	r3, r2
 8005544:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	3301      	adds	r3, #1
 800554a:	623b      	str	r3, [r7, #32]
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	429a      	cmp	r2, r3
 8005552:	d3ec      	bcc.n	800552e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800555c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4413      	add	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d3      	bne.n	800551a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800557a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005582:	b2db      	uxtb	r3, r3
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	4613      	mov	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	f7ff f8fc 	bl	8004788 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7c1b      	ldrb	r3, [r3, #16]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e01b      	b.n	80055ee <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80055cc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	065a      	lsls	r2, r3, #25
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005612:	2300      	movs	r3, #0
 8005614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	e175      	b.n	8005908 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800561c:	2201      	movs	r2, #1
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	429a      	cmp	r2, r3
 8005636:	f040 8164 	bne.w	8005902 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d005      	beq.n	8005652 <HAL_GPIO_Init+0x56>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d130      	bne.n	80056b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4013      	ands	r3, r2
 8005668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4313      	orrs	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005688:	2201      	movs	r2, #1
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 0201 	and.w	r2, r3, #1
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d017      	beq.n	80056f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	2203      	movs	r2, #3
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43db      	mvns	r3, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	4013      	ands	r3, r2
 80056d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d123      	bne.n	8005744 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	08da      	lsrs	r2, r3, #3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3208      	adds	r2, #8
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	220f      	movs	r2, #15
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4313      	orrs	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	08da      	lsrs	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	69b9      	ldr	r1, [r7, #24]
 8005740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	2203      	movs	r2, #3
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4013      	ands	r3, r2
 800575a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 0203 	and.w	r2, r3, #3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4313      	orrs	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80be 	beq.w	8005902 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005786:	4b66      	ldr	r3, [pc, #408]	; (8005920 <HAL_GPIO_Init+0x324>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	4a65      	ldr	r2, [pc, #404]	; (8005920 <HAL_GPIO_Init+0x324>)
 800578c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005790:	6453      	str	r3, [r2, #68]	; 0x44
 8005792:	4b63      	ldr	r3, [pc, #396]	; (8005920 <HAL_GPIO_Init+0x324>)
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800579e:	4a61      	ldr	r2, [pc, #388]	; (8005924 <HAL_GPIO_Init+0x328>)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	3302      	adds	r3, #2
 80057a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	220f      	movs	r2, #15
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4013      	ands	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a58      	ldr	r2, [pc, #352]	; (8005928 <HAL_GPIO_Init+0x32c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d037      	beq.n	800583a <HAL_GPIO_Init+0x23e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_GPIO_Init+0x330>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d031      	beq.n	8005836 <HAL_GPIO_Init+0x23a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a56      	ldr	r2, [pc, #344]	; (8005930 <HAL_GPIO_Init+0x334>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d02b      	beq.n	8005832 <HAL_GPIO_Init+0x236>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a55      	ldr	r2, [pc, #340]	; (8005934 <HAL_GPIO_Init+0x338>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d025      	beq.n	800582e <HAL_GPIO_Init+0x232>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a54      	ldr	r2, [pc, #336]	; (8005938 <HAL_GPIO_Init+0x33c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <HAL_GPIO_Init+0x22e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a53      	ldr	r2, [pc, #332]	; (800593c <HAL_GPIO_Init+0x340>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d019      	beq.n	8005826 <HAL_GPIO_Init+0x22a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a52      	ldr	r2, [pc, #328]	; (8005940 <HAL_GPIO_Init+0x344>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_GPIO_Init+0x226>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a51      	ldr	r2, [pc, #324]	; (8005944 <HAL_GPIO_Init+0x348>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00d      	beq.n	800581e <HAL_GPIO_Init+0x222>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a50      	ldr	r2, [pc, #320]	; (8005948 <HAL_GPIO_Init+0x34c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <HAL_GPIO_Init+0x21e>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a4f      	ldr	r2, [pc, #316]	; (800594c <HAL_GPIO_Init+0x350>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <HAL_GPIO_Init+0x21a>
 8005812:	2309      	movs	r3, #9
 8005814:	e012      	b.n	800583c <HAL_GPIO_Init+0x240>
 8005816:	230a      	movs	r3, #10
 8005818:	e010      	b.n	800583c <HAL_GPIO_Init+0x240>
 800581a:	2308      	movs	r3, #8
 800581c:	e00e      	b.n	800583c <HAL_GPIO_Init+0x240>
 800581e:	2307      	movs	r3, #7
 8005820:	e00c      	b.n	800583c <HAL_GPIO_Init+0x240>
 8005822:	2306      	movs	r3, #6
 8005824:	e00a      	b.n	800583c <HAL_GPIO_Init+0x240>
 8005826:	2305      	movs	r3, #5
 8005828:	e008      	b.n	800583c <HAL_GPIO_Init+0x240>
 800582a:	2304      	movs	r3, #4
 800582c:	e006      	b.n	800583c <HAL_GPIO_Init+0x240>
 800582e:	2303      	movs	r3, #3
 8005830:	e004      	b.n	800583c <HAL_GPIO_Init+0x240>
 8005832:	2302      	movs	r3, #2
 8005834:	e002      	b.n	800583c <HAL_GPIO_Init+0x240>
 8005836:	2301      	movs	r3, #1
 8005838:	e000      	b.n	800583c <HAL_GPIO_Init+0x240>
 800583a:	2300      	movs	r3, #0
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	f002 0203 	and.w	r2, r2, #3
 8005842:	0092      	lsls	r2, r2, #2
 8005844:	4093      	lsls	r3, r2
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800584c:	4935      	ldr	r1, [pc, #212]	; (8005924 <HAL_GPIO_Init+0x328>)
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	089b      	lsrs	r3, r3, #2
 8005852:	3302      	adds	r3, #2
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800585a:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <HAL_GPIO_Init+0x354>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	43db      	mvns	r3, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800587e:	4a34      	ldr	r2, [pc, #208]	; (8005950 <HAL_GPIO_Init+0x354>)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <HAL_GPIO_Init+0x354>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058a8:	4a29      	ldr	r2, [pc, #164]	; (8005950 <HAL_GPIO_Init+0x354>)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ae:	4b28      	ldr	r3, [pc, #160]	; (8005950 <HAL_GPIO_Init+0x354>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	4013      	ands	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058d2:	4a1f      	ldr	r2, [pc, #124]	; (8005950 <HAL_GPIO_Init+0x354>)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_GPIO_Init+0x354>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <HAL_GPIO_Init+0x354>)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3301      	adds	r3, #1
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	f67f ae86 	bls.w	800561c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3724      	adds	r7, #36	; 0x24
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	40013800 	.word	0x40013800
 8005928:	40020000 	.word	0x40020000
 800592c:	40020400 	.word	0x40020400
 8005930:	40020800 	.word	0x40020800
 8005934:	40020c00 	.word	0x40020c00
 8005938:	40021000 	.word	0x40021000
 800593c:	40021400 	.word	0x40021400
 8005940:	40021800 	.word	0x40021800
 8005944:	40021c00 	.word	0x40021c00
 8005948:	40022000 	.word	0x40022000
 800594c:	40022400 	.word	0x40022400
 8005950:	40013c00 	.word	0x40013c00

08005954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	887b      	ldrh	r3, [r7, #2]
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
 8005970:	e001      	b.n	8005976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005994:	787b      	ldrb	r3, [r7, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80059a0:	e003      	b.n	80059aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	041a      	lsls	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	619a      	str	r2, [r3, #24]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fd26 	bl	8003428 <HAL_GPIO_EXTI_Callback>
  }
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40013c00 	.word	0x40013c00

080059e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07f      	b.n	8005afa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fd04 	bl	800241c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e006      	b.n	8005a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d104      	bne.n	8005a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6859      	ldr	r1, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_I2C_Init+0x11c>)
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	02008000 	.word	0x02008000

08005b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d138      	bne.n	8005b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e032      	b.n	8005b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6819      	ldr	r1, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e000      	b.n	8005b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b90:	2302      	movs	r3, #2
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d139      	bne.n	8005c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e033      	b.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2224      	movs	r2, #36	; 0x24
 8005bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0201 	bic.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e0bf      	b.n	8005dca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fc fd5a 	bl	8002718 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005c7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005cac:	400b      	ands	r3, r1
 8005cae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6899      	ldr	r1, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68d9      	ldr	r1, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b3e      	ldr	r3, [pc, #248]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005cda:	400b      	ands	r3, r1
 8005cdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b33      	ldr	r3, [pc, #204]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005d08:	400b      	ands	r3, r1
 8005d0a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6919      	ldr	r1, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6959      	ldr	r1, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <HAL_LTDC_Init+0x19c>)
 8005d36:	400b      	ands	r3, r1
 8005d38:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6959      	ldr	r1, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0206 	orr.w	r2, r2, #6
 8005da6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	f000f800 	.word	0xf000f800

08005dd8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005dd8:	b5b0      	push	{r4, r5, r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_LTDC_ConfigLayer+0x1a>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e02c      	b.n	8005e4c <HAL_LTDC_ConfigLayer+0x74>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2134      	movs	r1, #52	; 0x34
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4614      	mov	r4, r2
 8005e16:	461d      	mov	r5, r3
 8005e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f811 	bl	8005e54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2201      	movs	r2, #1
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bdb0      	pop	{r4, r5, r7, pc}

08005e54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	; 0x24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e70:	4413      	add	r3, r2
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	01d2      	lsls	r2, r2, #7
 8005e90:	440a      	add	r2, r1
 8005e92:	3284      	adds	r2, #132	; 0x84
 8005e94:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005e98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005eaa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005eac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	01db      	lsls	r3, r3, #7
 8005eb8:	440b      	add	r3, r1
 8005eba:	3384      	adds	r3, #132	; 0x84
 8005ebc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005ec2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed2:	4413      	add	r3, r2
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	01db      	lsls	r3, r3, #7
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3384      	adds	r3, #132	; 0x84
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	4611      	mov	r1, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	01d2      	lsls	r2, r2, #7
 8005ef2:	440a      	add	r2, r1
 8005ef4:	3284      	adds	r2, #132	; 0x84
 8005ef6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005efa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0a:	4413      	add	r3, r2
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	440b      	add	r3, r1
 8005f1a:	3384      	adds	r3, #132	; 0x84
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	01db      	lsls	r3, r3, #7
 8005f2e:	4413      	add	r3, r2
 8005f30:	3384      	adds	r3, #132	; 0x84
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	01d2      	lsls	r2, r2, #7
 8005f3e:	440a      	add	r2, r1
 8005f40:	3284      	adds	r2, #132	; 0x84
 8005f42:	f023 0307 	bic.w	r3, r3, #7
 8005f46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	01db      	lsls	r3, r3, #7
 8005f52:	4413      	add	r3, r2
 8005f54:	3384      	adds	r3, #132	; 0x84
 8005f56:	461a      	mov	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	061b      	lsls	r3, r3, #24
 8005f78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	01db      	lsls	r3, r3, #7
 8005f84:	4413      	add	r3, r2
 8005f86:	3384      	adds	r3, #132	; 0x84
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	01db      	lsls	r3, r3, #7
 8005f94:	4413      	add	r3, r2
 8005f96:	3384      	adds	r3, #132	; 0x84
 8005f98:	461a      	mov	r2, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	01db      	lsls	r3, r3, #7
 8005fb8:	440b      	add	r3, r1
 8005fba:	3384      	adds	r3, #132	; 0x84
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	01db      	lsls	r3, r3, #7
 8005fce:	4413      	add	r3, r2
 8005fd0:	3384      	adds	r3, #132	; 0x84
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	01d2      	lsls	r2, r2, #7
 8005fde:	440a      	add	r2, r1
 8005fe0:	3284      	adds	r2, #132	; 0x84
 8005fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fe6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	01db      	lsls	r3, r3, #7
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3384      	adds	r3, #132	; 0x84
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	01db      	lsls	r3, r3, #7
 8006008:	4413      	add	r3, r2
 800600a:	3384      	adds	r3, #132	; 0x84
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	01db      	lsls	r3, r3, #7
 8006018:	440b      	add	r3, r1
 800601a:	3384      	adds	r3, #132	; 0x84
 800601c:	4619      	mov	r1, r3
 800601e:	4b58      	ldr	r3, [pc, #352]	; (8006180 <LTDC_SetConfig+0x32c>)
 8006020:	4013      	ands	r3, r2
 8006022:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	6809      	ldr	r1, [r1, #0]
 8006030:	4608      	mov	r0, r1
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	01c9      	lsls	r1, r1, #7
 8006036:	4401      	add	r1, r0
 8006038:	3184      	adds	r1, #132	; 0x84
 800603a:	4313      	orrs	r3, r2
 800603c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	4413      	add	r3, r2
 800604a:	3384      	adds	r3, #132	; 0x84
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	4413      	add	r3, r2
 800605a:	3384      	adds	r3, #132	; 0x84
 800605c:	461a      	mov	r2, r3
 800605e:	2300      	movs	r3, #0
 8006060:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	01db      	lsls	r3, r3, #7
 800606c:	4413      	add	r3, r2
 800606e:	3384      	adds	r3, #132	; 0x84
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006080:	2304      	movs	r3, #4
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	e01b      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800608e:	2303      	movs	r3, #3
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	e014      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d00b      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d007      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d003      	beq.n	80060b4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	d102      	bne.n	80060ba <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80060b4:	2302      	movs	r3, #2
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	e001      	b.n	80060be <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4413      	add	r3, r2
 80060ca:	3384      	adds	r3, #132	; 0x84
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	4611      	mov	r1, r2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	01d2      	lsls	r2, r2, #7
 80060d8:	440a      	add	r2, r1
 80060da:	3284      	adds	r2, #132	; 0x84
 80060dc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80060e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	1acb      	subs	r3, r1, r3
 80060f8:	69f9      	ldr	r1, [r7, #28]
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	6809      	ldr	r1, [r1, #0]
 8006104:	4608      	mov	r0, r1
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	01c9      	lsls	r1, r1, #7
 800610a:	4401      	add	r1, r0
 800610c:	3184      	adds	r1, #132	; 0x84
 800610e:	4313      	orrs	r3, r2
 8006110:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	4413      	add	r3, r2
 800611e:	3384      	adds	r3, #132	; 0x84
 8006120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4619      	mov	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	01db      	lsls	r3, r3, #7
 800612c:	440b      	add	r3, r1
 800612e:	3384      	adds	r3, #132	; 0x84
 8006130:	4619      	mov	r1, r3
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <LTDC_SetConfig+0x330>)
 8006134:	4013      	ands	r3, r2
 8006136:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	01db      	lsls	r3, r3, #7
 8006142:	4413      	add	r3, r2
 8006144:	3384      	adds	r3, #132	; 0x84
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	4413      	add	r3, r2
 800615a:	3384      	adds	r3, #132	; 0x84
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	6812      	ldr	r2, [r2, #0]
 8006162:	4611      	mov	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	01d2      	lsls	r2, r2, #7
 8006168:	440a      	add	r2, r1
 800616a:	3284      	adds	r2, #132	; 0x84
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	fffff8f8 	.word	0xfffff8f8
 8006184:	fffff800 	.word	0xfffff800

08006188 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800619a:	2200      	movs	r2, #0
 800619c:	e001      	b.n	80061a2 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800619e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80061ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061b2:	e000      	b.n	80061b6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80061b4:	2200      	movs	r2, #0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80061c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061c6:	e000      	b.n	80061ca <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80061c8:	2200      	movs	r2, #0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	4413      	add	r3, r2
 80061e2:	1e5a      	subs	r2, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80061f6:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 80061f8:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800620c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	4413      	add	r3, r2
 8006214:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a04      	ldr	r2, [pc, #16]	; (8006244 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006236:	6013      	str	r3, [r2, #0]
}
 8006238:	bf00      	nop
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40007000 	.word	0x40007000

08006248 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006252:	4b23      	ldr	r3, [pc, #140]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625c:	6413      	str	r3, [r2, #64]	; 0x40
 800625e:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800626a:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006274:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006276:	f7fd fad3 	bl	8003820 <HAL_GetTick>
 800627a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800627c:	e009      	b.n	8006292 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800627e:	f7fd facf 	bl	8003820 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800628c:	d901      	bls.n	8006292 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e022      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629e:	d1ee      	bne.n	800627e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062a0:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ac:	f7fd fab8 	bl	8003820 <HAL_GetTick>
 80062b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062b2:	e009      	b.n	80062c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062b4:	f7fd fab4 	bl	8003820 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c2:	d901      	bls.n	80062c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e007      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d4:	d1ee      	bne.n	80062b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3708      	adds	r7, #8
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40007000 	.word	0x40007000

080062e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e29b      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8087 	beq.w	800641a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800630c:	4b96      	ldr	r3, [pc, #600]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 030c 	and.w	r3, r3, #12
 8006314:	2b04      	cmp	r3, #4
 8006316:	d00c      	beq.n	8006332 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006318:	4b93      	ldr	r3, [pc, #588]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 030c 	and.w	r3, r3, #12
 8006320:	2b08      	cmp	r3, #8
 8006322:	d112      	bne.n	800634a <HAL_RCC_OscConfig+0x62>
 8006324:	4b90      	ldr	r3, [pc, #576]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006330:	d10b      	bne.n	800634a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006332:	4b8d      	ldr	r3, [pc, #564]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d06c      	beq.n	8006418 <HAL_RCC_OscConfig+0x130>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d168      	bne.n	8006418 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e275      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006352:	d106      	bne.n	8006362 <HAL_RCC_OscConfig+0x7a>
 8006354:	4b84      	ldr	r3, [pc, #528]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a83      	ldr	r2, [pc, #524]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800635a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	e02e      	b.n	80063c0 <HAL_RCC_OscConfig+0xd8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10c      	bne.n	8006384 <HAL_RCC_OscConfig+0x9c>
 800636a:	4b7f      	ldr	r3, [pc, #508]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7e      	ldr	r2, [pc, #504]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4b7c      	ldr	r3, [pc, #496]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a7b      	ldr	r2, [pc, #492]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800637c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e01d      	b.n	80063c0 <HAL_RCC_OscConfig+0xd8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0xc0>
 800638e:	4b76      	ldr	r3, [pc, #472]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a75      	ldr	r2, [pc, #468]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b73      	ldr	r3, [pc, #460]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a72      	ldr	r2, [pc, #456]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e00b      	b.n	80063c0 <HAL_RCC_OscConfig+0xd8>
 80063a8:	4b6f      	ldr	r3, [pc, #444]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a6e      	ldr	r2, [pc, #440]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b6c      	ldr	r3, [pc, #432]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6b      	ldr	r2, [pc, #428]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c8:	f7fd fa2a 	bl	8003820 <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d0:	f7fd fa26 	bl	8003820 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e229      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	4b61      	ldr	r3, [pc, #388]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0xe8>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fd fa16 	bl	8003820 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f8:	f7fd fa12 	bl	8003820 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e215      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	4b57      	ldr	r3, [pc, #348]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x110>
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d069      	beq.n	80064fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006426:	4b50      	ldr	r3, [pc, #320]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b4d      	ldr	r3, [pc, #308]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b08      	cmp	r3, #8
 800643c:	d11c      	bne.n	8006478 <HAL_RCC_OscConfig+0x190>
 800643e:	4b4a      	ldr	r3, [pc, #296]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	4b47      	ldr	r3, [pc, #284]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x17a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e1e9      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b41      	ldr	r3, [pc, #260]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	493d      	ldr	r1, [pc, #244]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	e040      	b.n	80064fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d023      	beq.n	80064c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006480:	4b39      	ldr	r3, [pc, #228]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a38      	ldr	r2, [pc, #224]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648c:	f7fd f9c8 	bl	8003820 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006494:	f7fd f9c4 	bl	8003820 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e1c7      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a6:	4b30      	ldr	r3, [pc, #192]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b2:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4929      	ldr	r1, [pc, #164]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	e018      	b.n	80064fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a26      	ldr	r2, [pc, #152]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064ce:	f023 0301 	bic.w	r3, r3, #1
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd f9a4 	bl	8003820 <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064dc:	f7fd f9a0 	bl	8003820 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e1a3      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ee:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d038      	beq.n	8006578 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d019      	beq.n	8006542 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006512:	4a15      	ldr	r2, [pc, #84]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fd f981 	bl	8003820 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7fd f97d 	bl	8003820 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e180      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x23a>
 8006540:	e01a      	b.n	8006578 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	4a08      	ldr	r2, [pc, #32]	; (8006568 <HAL_RCC_OscConfig+0x280>)
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fd f967 	bl	8003820 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006554:	e00a      	b.n	800656c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006556:	f7fd f963 	bl	8003820 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d903      	bls.n	800656c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e166      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
 8006568:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656c:	4b92      	ldr	r3, [pc, #584]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ee      	bne.n	8006556 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80a4 	beq.w	80066ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006586:	4b8c      	ldr	r3, [pc, #560]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10d      	bne.n	80065ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	4b89      	ldr	r3, [pc, #548]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	4a88      	ldr	r2, [pc, #544]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6413      	str	r3, [r2, #64]	; 0x40
 800659e:	4b86      	ldr	r3, [pc, #536]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ae:	4b83      	ldr	r3, [pc, #524]	; (80067bc <HAL_RCC_OscConfig+0x4d4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d118      	bne.n	80065ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80065ba:	4b80      	ldr	r3, [pc, #512]	; (80067bc <HAL_RCC_OscConfig+0x4d4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a7f      	ldr	r2, [pc, #508]	; (80067bc <HAL_RCC_OscConfig+0x4d4>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065c6:	f7fd f92b 	bl	8003820 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ce:	f7fd f927 	bl	8003820 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b64      	cmp	r3, #100	; 0x64
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e12a      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065e0:	4b76      	ldr	r3, [pc, #472]	; (80067bc <HAL_RCC_OscConfig+0x4d4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x31a>
 80065f4:	4b70      	ldr	r3, [pc, #448]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f8:	4a6f      	ldr	r2, [pc, #444]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006600:	e02d      	b.n	800665e <HAL_RCC_OscConfig+0x376>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x33c>
 800660a:	4b6b      	ldr	r3, [pc, #428]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	4a6a      	ldr	r2, [pc, #424]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6713      	str	r3, [r2, #112]	; 0x70
 8006616:	4b68      	ldr	r3, [pc, #416]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a67      	ldr	r2, [pc, #412]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
 8006622:	e01c      	b.n	800665e <HAL_RCC_OscConfig+0x376>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b05      	cmp	r3, #5
 800662a:	d10c      	bne.n	8006646 <HAL_RCC_OscConfig+0x35e>
 800662c:	4b62      	ldr	r3, [pc, #392]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	4a61      	ldr	r2, [pc, #388]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006632:	f043 0304 	orr.w	r3, r3, #4
 8006636:	6713      	str	r3, [r2, #112]	; 0x70
 8006638:	4b5f      	ldr	r3, [pc, #380]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	4a5e      	ldr	r2, [pc, #376]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	6713      	str	r3, [r2, #112]	; 0x70
 8006644:	e00b      	b.n	800665e <HAL_RCC_OscConfig+0x376>
 8006646:	4b5c      	ldr	r3, [pc, #368]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	4a5b      	ldr	r2, [pc, #364]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	6713      	str	r3, [r2, #112]	; 0x70
 8006652:	4b59      	ldr	r3, [pc, #356]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	4a58      	ldr	r2, [pc, #352]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006658:	f023 0304 	bic.w	r3, r3, #4
 800665c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d015      	beq.n	8006692 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006666:	f7fd f8db 	bl	8003820 <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666c:	e00a      	b.n	8006684 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800666e:	f7fd f8d7 	bl	8003820 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	f241 3288 	movw	r2, #5000	; 0x1388
 800667c:	4293      	cmp	r3, r2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e0d8      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006684:	4b4c      	ldr	r3, [pc, #304]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0ee      	beq.n	800666e <HAL_RCC_OscConfig+0x386>
 8006690:	e014      	b.n	80066bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006692:	f7fd f8c5 	bl	8003820 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006698:	e00a      	b.n	80066b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669a:	f7fd f8c1 	bl	8003820 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e0c2      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b0:	4b41      	ldr	r3, [pc, #260]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1ee      	bne.n	800669a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d105      	bne.n	80066ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c2:	4b3d      	ldr	r3, [pc, #244]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80ae 	beq.w	8006834 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066d8:	4b37      	ldr	r3, [pc, #220]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 030c 	and.w	r3, r3, #12
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d06d      	beq.n	80067c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d14b      	bne.n	8006784 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ec:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80066f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fd f892 	bl	8003820 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fd f88e 	bl	8003820 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e091      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006712:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69da      	ldr	r2, [r3, #28]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	019b      	lsls	r3, r3, #6
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	3b01      	subs	r3, #1
 8006738:	041b      	lsls	r3, r3, #16
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	061b      	lsls	r3, r3, #24
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	071b      	lsls	r3, r3, #28
 800674a:	491b      	ldr	r1, [pc, #108]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006750:	4b19      	ldr	r3, [pc, #100]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800675a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fd f860 	bl	8003820 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006764:	f7fd f85c 	bl	8003820 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e05f      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006776:	4b10      	ldr	r3, [pc, #64]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0x47c>
 8006782:	e057      	b.n	8006834 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a0b      	ldr	r2, [pc, #44]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 800678a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800678e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006790:	f7fd f846 	bl	8003820 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006798:	f7fd f842 	bl	8003820 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e045      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <HAL_RCC_OscConfig+0x4d0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <HAL_RCC_OscConfig+0x4b0>
 80067b6:	e03d      	b.n	8006834 <HAL_RCC_OscConfig+0x54c>
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCC_OscConfig+0x558>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d030      	beq.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d8:	429a      	cmp	r2, r3
 80067da:	d129      	bne.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d122      	bne.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d119      	bne.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	085b      	lsrs	r3, r3, #1
 8006808:	3b01      	subs	r3, #1
 800680a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d10f      	bne.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0d0      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d910      	bls.n	800688c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 020f 	bic.w	r2, r3, #15
 8006872:	4965      	ldr	r1, [pc, #404]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b63      	ldr	r3, [pc, #396]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0b8      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a58      	ldr	r2, [pc, #352]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068bc:	4b53      	ldr	r3, [pc, #332]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	4a52      	ldr	r2, [pc, #328]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c8:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	494d      	ldr	r1, [pc, #308]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d040      	beq.n	8006968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e07f      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006906:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e073      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06b      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4936      	ldr	r1, [pc, #216]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006938:	f7fc ff72 	bl	8003820 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fc ff6e 	bl	8003820 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e053      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d210      	bcs.n	8006998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 020f 	bic.w	r2, r3, #15
 800697e:	4922      	ldr	r1, [pc, #136]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <HAL_RCC_ClockConfig+0x1c4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e032      	b.n	80069fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4916      	ldr	r1, [pc, #88]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	490e      	ldr	r1, [pc, #56]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069d6:	f000 f821 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 80069da:	4602      	mov	r2, r0
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_RCC_ClockConfig+0x1c8>)
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	490a      	ldr	r1, [pc, #40]	; (8006a10 <HAL_RCC_ClockConfig+0x1cc>)
 80069e8:	5ccb      	ldrb	r3, [r1, r3]
 80069ea:	fa22 f303 	lsr.w	r3, r2, r3
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <HAL_RCC_ClockConfig+0x1d0>)
 80069f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_RCC_ClockConfig+0x1d4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fc fc74 	bl	80032e4 <HAL_InitTick>

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40023c00 	.word	0x40023c00
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800f3d8 	.word	0x0800f3d8
 8006a14:	20000020 	.word	0x20000020
 8006a18:	20000024 	.word	0x20000024

08006a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a20:	b090      	sub	sp, #64	; 0x40
 8006a22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a34:	4b59      	ldr	r3, [pc, #356]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 030c 	and.w	r3, r3, #12
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d00d      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x40>
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	f200 80a1 	bhi.w	8006b88 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0x34>
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a4e:	e09b      	b.n	8006b88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a50:	4b53      	ldr	r3, [pc, #332]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a54:	e09b      	b.n	8006b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a56:	4b53      	ldr	r3, [pc, #332]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a5a:	e098      	b.n	8006b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a5c:	4b4f      	ldr	r3, [pc, #316]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a66:	4b4d      	ldr	r3, [pc, #308]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d028      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a72:	4b4a      	ldr	r3, [pc, #296]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	2200      	movs	r2, #0
 8006a7a:	623b      	str	r3, [r7, #32]
 8006a7c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a84:	2100      	movs	r1, #0
 8006a86:	4b47      	ldr	r3, [pc, #284]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a88:	fb03 f201 	mul.w	r2, r3, r1
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	fb00 f303 	mul.w	r3, r0, r3
 8006a92:	4413      	add	r3, r2
 8006a94:	4a43      	ldr	r2, [pc, #268]	; (8006ba4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a96:	fba0 1202 	umull	r1, r2, r0, r2
 8006a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa2:	4413      	add	r3, r2
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	61bb      	str	r3, [r7, #24]
 8006aac:	61fa      	str	r2, [r7, #28]
 8006aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ab2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ab6:	f7f9 fc13 	bl	80002e0 <__aeabi_uldivmod>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4613      	mov	r3, r2
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac2:	e053      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac4:	4b35      	ldr	r3, [pc, #212]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	099b      	lsrs	r3, r3, #6
 8006aca:	2200      	movs	r2, #0
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	617a      	str	r2, [r7, #20]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ad6:	f04f 0b00 	mov.w	fp, #0
 8006ada:	4652      	mov	r2, sl
 8006adc:	465b      	mov	r3, fp
 8006ade:	f04f 0000 	mov.w	r0, #0
 8006ae2:	f04f 0100 	mov.w	r1, #0
 8006ae6:	0159      	lsls	r1, r3, #5
 8006ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aec:	0150      	lsls	r0, r2, #5
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	ebb2 080a 	subs.w	r8, r2, sl
 8006af6:	eb63 090b 	sbc.w	r9, r3, fp
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b0e:	ebb2 0408 	subs.w	r4, r2, r8
 8006b12:	eb63 0509 	sbc.w	r5, r3, r9
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	00eb      	lsls	r3, r5, #3
 8006b20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b24:	00e2      	lsls	r2, r4, #3
 8006b26:	4614      	mov	r4, r2
 8006b28:	461d      	mov	r5, r3
 8006b2a:	eb14 030a 	adds.w	r3, r4, sl
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	eb45 030b 	adc.w	r3, r5, fp
 8006b34:	607b      	str	r3, [r7, #4]
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b42:	4629      	mov	r1, r5
 8006b44:	028b      	lsls	r3, r1, #10
 8006b46:	4621      	mov	r1, r4
 8006b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	028a      	lsls	r2, r1, #10
 8006b50:	4610      	mov	r0, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b56:	2200      	movs	r2, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	60fa      	str	r2, [r7, #12]
 8006b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b60:	f7f9 fbbe 	bl	80002e0 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4613      	mov	r3, r2
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	0c1b      	lsrs	r3, r3, #16
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	3301      	adds	r3, #1
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b86:	e002      	b.n	8006b8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3740      	adds	r7, #64	; 0x40
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	00f42400 	.word	0x00f42400
 8006ba4:	017d7840 	.word	0x017d7840

08006ba8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bac:	4b03      	ldr	r3, [pc, #12]	; (8006bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000020 	.word	0x20000020

08006bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bc4:	f7ff fff0 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	0a9b      	lsrs	r3, r3, #10
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	4903      	ldr	r1, [pc, #12]	; (8006be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bd6:	5ccb      	ldrb	r3, [r1, r3]
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40023800 	.word	0x40023800
 8006be4:	0800f3e8 	.word	0x0800f3e8

08006be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	220f      	movs	r2, #15
 8006bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bf8:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0203 	and.w	r2, r3, #3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c04:	4b0f      	ldr	r3, [pc, #60]	; (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c10:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006c1c:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <HAL_RCC_GetClockConfig+0x5c>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	08db      	lsrs	r3, r3, #3
 8006c22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <HAL_RCC_GetClockConfig+0x60>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 020f 	and.w	r2, r3, #15
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	40023800 	.word	0x40023800
 8006c48:	40023c00 	.word	0x40023c00

08006c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d012      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c74:	4b69      	ldr	r3, [pc, #420]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	4a68      	ldr	r2, [pc, #416]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c7e:	6093      	str	r3, [r2, #8]
 8006c80:	4b66      	ldr	r3, [pc, #408]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c88:	4964      	ldr	r1, [pc, #400]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c96:	2301      	movs	r3, #1
 8006c98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ca6:	4b5d      	ldr	r3, [pc, #372]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	4959      	ldr	r1, [pc, #356]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc4:	d101      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d017      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ce2:	4b4e      	ldr	r3, [pc, #312]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	494a      	ldr	r1, [pc, #296]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d00:	d101      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 808b 	beq.w	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d30:	4b3a      	ldr	r3, [pc, #232]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	4a39      	ldr	r2, [pc, #228]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d3c:	4b37      	ldr	r3, [pc, #220]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d48:	4b35      	ldr	r3, [pc, #212]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a34      	ldr	r2, [pc, #208]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d54:	f7fc fd64 	bl	8003820 <HAL_GetTick>
 8006d58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5c:	f7fc fd60 	bl	8003820 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b64      	cmp	r3, #100	; 0x64
 8006d68:	d901      	bls.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e38f      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d6e:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f0      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d7a:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d035      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d02e      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d98:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006da2:	4b1e      	ldr	r3, [pc, #120]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	4a1d      	ldr	r2, [pc, #116]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dae:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dba:	4a18      	ldr	r2, [pc, #96]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d114      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fc fd28 	bl	8003820 <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd2:	e00a      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd4:	f7fc fd24 	bl	8003820 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e351      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dea:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ee      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e02:	d111      	bne.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e12:	400b      	ands	r3, r1
 8006e14:	4901      	ldr	r1, [pc, #4]	; (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
 8006e1a:	e00b      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40007000 	.word	0x40007000
 8006e24:	0ffffcff 	.word	0x0ffffcff
 8006e28:	4bac      	ldr	r3, [pc, #688]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4aab      	ldr	r2, [pc, #684]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e32:	6093      	str	r3, [r2, #8]
 8006e34:	4ba9      	ldr	r3, [pc, #676]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e40:	49a6      	ldr	r1, [pc, #664]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0310 	and.w	r3, r3, #16
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d010      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e52:	4ba2      	ldr	r3, [pc, #648]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e58:	4aa0      	ldr	r2, [pc, #640]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e62:	4b9e      	ldr	r3, [pc, #632]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	499b      	ldr	r1, [pc, #620]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e80:	4b96      	ldr	r3, [pc, #600]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e8e:	4993      	ldr	r1, [pc, #588]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ea2:	4b8e      	ldr	r3, [pc, #568]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eb0:	498a      	ldr	r1, [pc, #552]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ec4:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed2:	4982      	ldr	r1, [pc, #520]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ee6:	4b7d      	ldr	r3, [pc, #500]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	4979      	ldr	r1, [pc, #484]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f08:	4b74      	ldr	r3, [pc, #464]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	f023 0203 	bic.w	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	4971      	ldr	r1, [pc, #452]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f2a:	4b6c      	ldr	r3, [pc, #432]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f30:	f023 020c 	bic.w	r2, r3, #12
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f38:	4968      	ldr	r1, [pc, #416]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f4c:	4b63      	ldr	r3, [pc, #396]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5a:	4960      	ldr	r1, [pc, #384]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	4957      	ldr	r1, [pc, #348]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f90:	4b52      	ldr	r3, [pc, #328]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	494f      	ldr	r1, [pc, #316]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc0:	4946      	ldr	r1, [pc, #280]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fd4:	4b41      	ldr	r3, [pc, #260]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	493e      	ldr	r1, [pc, #248]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ff6:	4b39      	ldr	r3, [pc, #228]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	4935      	ldr	r1, [pc, #212]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007018:	4b30      	ldr	r3, [pc, #192]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007026:	492d      	ldr	r1, [pc, #180]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007028:	4313      	orrs	r3, r2
 800702a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d011      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800703a:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007040:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007048:	4924      	ldr	r1, [pc, #144]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800704a:	4313      	orrs	r3, r2
 800704c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007058:	d101      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800705a:	2301      	movs	r3, #1
 800705c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800706a:	2301      	movs	r3, #1
 800706c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800707a:	4b18      	ldr	r3, [pc, #96]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007080:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007088:	4914      	ldr	r1, [pc, #80]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ac:	490b      	ldr	r1, [pc, #44]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00f      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80070c0:	4b06      	ldr	r3, [pc, #24]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d0:	4902      	ldr	r1, [pc, #8]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070ec:	4b8a      	ldr	r3, [pc, #552]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fc:	4986      	ldr	r1, [pc, #536]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007110:	4b81      	ldr	r3, [pc, #516]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007116:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007120:	497d      	ldr	r1, [pc, #500]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d006      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80d6 	beq.w	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800713c:	4b76      	ldr	r3, [pc, #472]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a75      	ldr	r2, [pc, #468]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007148:	f7fc fb6a 	bl	8003820 <HAL_GetTick>
 800714c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007150:	f7fc fb66 	bl	8003820 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b64      	cmp	r3, #100	; 0x64
 800715c:	d901      	bls.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e195      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d021      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11d      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007182:	4b65      	ldr	r3, [pc, #404]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007190:	4b61      	ldr	r3, [pc, #388]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007196:	0e1b      	lsrs	r3, r3, #24
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	019a      	lsls	r2, r3, #6
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	431a      	orrs	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	071b      	lsls	r3, r3, #28
 80071b6:	4958      	ldr	r1, [pc, #352]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d004      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d2:	d00a      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02e      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e8:	d129      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071ea:	4b4b      	ldr	r3, [pc, #300]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071f8:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80071fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071fe:	0f1b      	lsrs	r3, r3, #28
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	019a      	lsls	r2, r3, #6
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	061b      	lsls	r3, r3, #24
 8007218:	431a      	orrs	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	071b      	lsls	r3, r3, #28
 800721e:	493e      	ldr	r1, [pc, #248]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007226:	4b3c      	ldr	r3, [pc, #240]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	f023 021f 	bic.w	r2, r3, #31
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	3b01      	subs	r3, #1
 8007236:	4938      	ldr	r1, [pc, #224]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01d      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800724a:	4b33      	ldr	r3, [pc, #204]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007250:	0e1b      	lsrs	r3, r3, #24
 8007252:	f003 030f 	and.w	r3, r3, #15
 8007256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007258:	4b2f      	ldr	r3, [pc, #188]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800725a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725e:	0f1b      	lsrs	r3, r3, #28
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	019a      	lsls	r2, r3, #6
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	431a      	orrs	r2, r3
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	431a      	orrs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	071b      	lsls	r3, r3, #28
 800727e:	4926      	ldr	r1, [pc, #152]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d011      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	019a      	lsls	r2, r3, #6
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	071b      	lsls	r3, r3, #28
 80072ae:	491a      	ldr	r1, [pc, #104]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072b6:	4b18      	ldr	r3, [pc, #96]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a17      	ldr	r2, [pc, #92]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c2:	f7fc faad 	bl	8003820 <HAL_GetTick>
 80072c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072c8:	e008      	b.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072ca:	f7fc faa9 	bl	8003820 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b64      	cmp	r3, #100	; 0x64
 80072d6:	d901      	bls.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e0d8      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072dc:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	f040 80ce 	bne.w	800748c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80072f0:	4b09      	ldr	r3, [pc, #36]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a08      	ldr	r2, [pc, #32]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80072f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072fc:	f7fc fa90 	bl	8003820 <HAL_GetTick>
 8007300:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007302:	e00b      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007304:	f7fc fa8c 	bl	8003820 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	; 0x64
 8007310:	d904      	bls.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e0bb      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800731c:	4b5e      	ldr	r3, [pc, #376]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d0ec      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007346:	2b00      	cmp	r3, #0
 8007348:	d02e      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2b00      	cmp	r3, #0
 8007350:	d12a      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007352:	4b51      	ldr	r3, [pc, #324]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	0c1b      	lsrs	r3, r3, #16
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007360:	4b4d      	ldr	r3, [pc, #308]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007366:	0f1b      	lsrs	r3, r3, #28
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	019a      	lsls	r2, r3, #6
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	431a      	orrs	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	071b      	lsls	r3, r3, #28
 8007386:	4944      	ldr	r1, [pc, #272]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800738e:	4b42      	ldr	r3, [pc, #264]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	3b01      	subs	r3, #1
 800739e:	021b      	lsls	r3, r3, #8
 80073a0:	493d      	ldr	r1, [pc, #244]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d022      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073bc:	d11d      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073be:	4b36      	ldr	r3, [pc, #216]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80073cc:	4b32      	ldr	r3, [pc, #200]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d2:	0f1b      	lsrs	r3, r3, #28
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	019a      	lsls	r2, r3, #6
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	431a      	orrs	r2, r3
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	061b      	lsls	r3, r3, #24
 80073ec:	431a      	orrs	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	071b      	lsls	r3, r3, #28
 80073f2:	4929      	ldr	r1, [pc, #164]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d028      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	0e1b      	lsrs	r3, r3, #24
 800740e:	f003 030f 	and.w	r3, r3, #15
 8007412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	019a      	lsls	r2, r3, #6
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	041b      	lsls	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	061b      	lsls	r3, r3, #24
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	4917      	ldr	r1, [pc, #92]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	4911      	ldr	r1, [pc, #68]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a0e      	ldr	r2, [pc, #56]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800745e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007464:	f7fc f9dc 	bl	8003820 <HAL_GetTick>
 8007468:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800746a:	e008      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800746c:	f7fc f9d8 	bl	8003820 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e007      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d1ef      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40023800 	.word	0x40023800

0800749c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e025      	b.n	80074fc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fa fbe9 	bl	8001c9c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 ffa3 	bl	8008428 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	461a      	mov	r2, r3
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	f000 fff7 	bl	80084e0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007516:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d101      	bne.n	8007522 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800751e:	2302      	movs	r3, #2
 8007520:	e021      	b.n	8007566 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d002      	beq.n	800752e <HAL_SDRAM_SendCommand+0x2a>
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b05      	cmp	r3, #5
 800752c:	d118      	bne.n	8007560 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	4618      	mov	r0, r3
 8007540:	f001 f838 	bl	80085b4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d104      	bne.n	8007556 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2205      	movs	r2, #5
 8007550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007554:	e006      	b.n	8007564 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800755e:	e001      	b.n	8007564 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b082      	sub	sp, #8
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d101      	bne.n	8007588 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007584:	2302      	movs	r3, #2
 8007586:	e016      	b.n	80075b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10f      	bne.n	80075b4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f82a 	bl	80085fc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e049      	b.n	8007664 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f841 	bl	800766c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4619      	mov	r1, r3
 80075fc:	4610      	mov	r0, r2
 80075fe:	f000 fb69 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e054      	b.n	8007742 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a26      	ldr	r2, [pc, #152]	; (8007750 <HAL_TIM_Base_Start_IT+0xd0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c2:	d01d      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a22      	ldr	r2, [pc, #136]	; (8007754 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a21      	ldr	r2, [pc, #132]	; (8007758 <HAL_TIM_Base_Start_IT+0xd8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	; (800775c <HAL_TIM_Base_Start_IT+0xdc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <HAL_TIM_Base_Start_IT+0xe0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <HAL_TIM_Base_Start_IT+0xe4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIM_Base_Start_IT+0x80>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1b      	ldr	r2, [pc, #108]	; (8007768 <HAL_TIM_Base_Start_IT+0xe8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d115      	bne.n	800772c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	4b19      	ldr	r3, [pc, #100]	; (800776c <HAL_TIM_Base_Start_IT+0xec>)
 8007708:	4013      	ands	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b06      	cmp	r3, #6
 8007710:	d015      	beq.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007718:	d011      	beq.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772a:	e008      	b.n	800773e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0201 	orr.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e000      	b.n	8007740 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	40010000 	.word	0x40010000
 8007754:	40000400 	.word	0x40000400
 8007758:	40000800 	.word	0x40000800
 800775c:	40000c00 	.word	0x40000c00
 8007760:	40010400 	.word	0x40010400
 8007764:	40014000 	.word	0x40014000
 8007768:	40001800 	.word	0x40001800
 800776c:	00010007 	.word	0x00010007

08007770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e049      	b.n	8007816 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fb ff96 	bl	80036c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2202      	movs	r2, #2
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f000 fa90 	bl	8007cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b02      	cmp	r3, #2
 8007832:	d122      	bne.n	800787a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d11b      	bne.n	800787a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0202 	mvn.w	r2, #2
 800784a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fa19 	bl	8007c98 <HAL_TIM_IC_CaptureCallback>
 8007866:	e005      	b.n	8007874 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa0b 	bl	8007c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fa1c 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b04      	cmp	r3, #4
 8007886:	d122      	bne.n	80078ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b04      	cmp	r3, #4
 8007894:	d11b      	bne.n	80078ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f06f 0204 	mvn.w	r2, #4
 800789e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f9ef 	bl	8007c98 <HAL_TIM_IC_CaptureCallback>
 80078ba:	e005      	b.n	80078c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f9e1 	bl	8007c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9f2 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d122      	bne.n	8007922 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	d11b      	bne.n	8007922 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0208 	mvn.w	r2, #8
 80078f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2204      	movs	r2, #4
 80078f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9c5 	bl	8007c98 <HAL_TIM_IC_CaptureCallback>
 800790e:	e005      	b.n	800791c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9b7 	bl	8007c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f9c8 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b10      	cmp	r3, #16
 800792e:	d122      	bne.n	8007976 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b10      	cmp	r3, #16
 800793c:	d11b      	bne.n	8007976 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f06f 0210 	mvn.w	r2, #16
 8007946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2208      	movs	r2, #8
 800794c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f99b 	bl	8007c98 <HAL_TIM_IC_CaptureCallback>
 8007962:	e005      	b.n	8007970 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f98d 	bl	8007c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f99e 	bl	8007cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10e      	bne.n	80079a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d107      	bne.n	80079a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f06f 0201 	mvn.w	r2, #1
 800799a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7fb f879 	bl	8002a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d10e      	bne.n	80079ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d107      	bne.n	80079ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fd19 	bl	8008400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079dc:	d10e      	bne.n	80079fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e8:	2b80      	cmp	r3, #128	; 0x80
 80079ea:	d107      	bne.n	80079fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fd0c 	bl	8008414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a06:	2b40      	cmp	r3, #64	; 0x40
 8007a08:	d10e      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d107      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f94c 	bl	8007cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d10e      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d107      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0220 	mvn.w	r2, #32
 8007a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fccc 	bl	80083ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d101      	bne.n	8007a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e0ff      	b.n	8007c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b14      	cmp	r3, #20
 8007a86:	f200 80f0 	bhi.w	8007c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007c6b 	.word	0x08007c6b
 8007a98:	08007c6b 	.word	0x08007c6b
 8007a9c:	08007c6b 	.word	0x08007c6b
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007c6b 	.word	0x08007c6b
 8007aa8:	08007c6b 	.word	0x08007c6b
 8007aac:	08007c6b 	.word	0x08007c6b
 8007ab0:	08007b67 	.word	0x08007b67
 8007ab4:	08007c6b 	.word	0x08007c6b
 8007ab8:	08007c6b 	.word	0x08007c6b
 8007abc:	08007c6b 	.word	0x08007c6b
 8007ac0:	08007ba7 	.word	0x08007ba7
 8007ac4:	08007c6b 	.word	0x08007c6b
 8007ac8:	08007c6b 	.word	0x08007c6b
 8007acc:	08007c6b 	.word	0x08007c6b
 8007ad0:	08007be9 	.word	0x08007be9
 8007ad4:	08007c6b 	.word	0x08007c6b
 8007ad8:	08007c6b 	.word	0x08007c6b
 8007adc:	08007c6b 	.word	0x08007c6b
 8007ae0:	08007c29 	.word	0x08007c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f992 	bl	8007e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0204 	bic.w	r2, r2, #4
 8007b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6999      	ldr	r1, [r3, #24]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	619a      	str	r2, [r3, #24]
      break;
 8007b22:	e0a5      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f9e4 	bl	8007ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6999      	ldr	r1, [r3, #24]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	021a      	lsls	r2, r3, #8
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	619a      	str	r2, [r3, #24]
      break;
 8007b64:	e084      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fa3b 	bl	8007fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0208 	orr.w	r2, r2, #8
 8007b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0204 	bic.w	r2, r2, #4
 8007b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69d9      	ldr	r1, [r3, #28]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	61da      	str	r2, [r3, #28]
      break;
 8007ba4:	e064      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fa91 	bl	80080d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69d9      	ldr	r1, [r3, #28]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	021a      	lsls	r2, r3, #8
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	61da      	str	r2, [r3, #28]
      break;
 8007be6:	e043      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fac8 	bl	8008184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0208 	orr.w	r2, r2, #8
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0204 	bic.w	r2, r2, #4
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691a      	ldr	r2, [r3, #16]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c26:	e023      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fafa 	bl	8008228 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	021a      	lsls	r2, r3, #8
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	430a      	orrs	r2, r1
 8007c66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c68:	e002      	b.n	8007c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop

08007c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a40      	ldr	r2, [pc, #256]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d013      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf2:	d00f      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a3d      	ldr	r2, [pc, #244]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a3b      	ldr	r2, [pc, #236]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_Base_SetConfig+0x40>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a3a      	ldr	r2, [pc, #232]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d108      	bne.n	8007d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2f      	ldr	r2, [pc, #188]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d02b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d027      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <TIM_Base_SetConfig+0x118>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d023      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <TIM_Base_SetConfig+0x11c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d01f      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <TIM_Base_SetConfig+0x120>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d017      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <TIM_Base_SetConfig+0x128>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d013      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <TIM_Base_SetConfig+0x12c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00f      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <TIM_Base_SetConfig+0x130>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00b      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a25      	ldr	r2, [pc, #148]	; (8007e08 <TIM_Base_SetConfig+0x134>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d007      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <TIM_Base_SetConfig+0x138>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d003      	beq.n	8007d86 <TIM_Base_SetConfig+0xb2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <TIM_Base_SetConfig+0x13c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d108      	bne.n	8007d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <TIM_Base_SetConfig+0x114>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_Base_SetConfig+0xf8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a0c      	ldr	r2, [pc, #48]	; (8007df8 <TIM_Base_SetConfig+0x124>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d103      	bne.n	8007dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	615a      	str	r2, [r3, #20]
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40010000 	.word	0x40010000
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40010400 	.word	0x40010400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40014400 	.word	0x40014400
 8007e04:	40014800 	.word	0x40014800
 8007e08:	40001800 	.word	0x40001800
 8007e0c:	40001c00 	.word	0x40001c00
 8007e10:	40002000 	.word	0x40002000

08007e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	f023 0201 	bic.w	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <TIM_OC1_SetConfig+0xd8>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0303 	bic.w	r3, r3, #3
 8007e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f023 0302 	bic.w	r3, r3, #2
 8007e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <TIM_OC1_SetConfig+0xdc>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC1_SetConfig+0x64>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a20      	ldr	r2, [pc, #128]	; (8007ef4 <TIM_OC1_SetConfig+0xe0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10c      	bne.n	8007e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0308 	bic.w	r3, r3, #8
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
 8007e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <TIM_OC1_SetConfig+0xdc>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_OC1_SetConfig+0x8e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <TIM_OC1_SetConfig+0xe0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d111      	bne.n	8007ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	621a      	str	r2, [r3, #32]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	fffeff8f 	.word	0xfffeff8f
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40010400 	.word	0x40010400

08007ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	f023 0210 	bic.w	r2, r3, #16
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4b2e      	ldr	r3, [pc, #184]	; (8007fdc <TIM_OC2_SetConfig+0xe4>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f023 0320 	bic.w	r3, r3, #32
 8007f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a23      	ldr	r2, [pc, #140]	; (8007fe0 <TIM_OC2_SetConfig+0xe8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_OC2_SetConfig+0x68>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <TIM_OC2_SetConfig+0xec>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10d      	bne.n	8007f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <TIM_OC2_SetConfig+0xe8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_OC2_SetConfig+0x94>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <TIM_OC2_SetConfig+0xec>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d113      	bne.n	8007fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	621a      	str	r2, [r3, #32]
}
 8007fce:	bf00      	nop
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	feff8fff 	.word	0xfeff8fff
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40010400 	.word	0x40010400

08007fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4b2d      	ldr	r3, [pc, #180]	; (80080c8 <TIM_OC3_SetConfig+0xe0>)
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a22      	ldr	r2, [pc, #136]	; (80080cc <TIM_OC3_SetConfig+0xe4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d003      	beq.n	800804e <TIM_OC3_SetConfig+0x66>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a21      	ldr	r2, [pc, #132]	; (80080d0 <TIM_OC3_SetConfig+0xe8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d10d      	bne.n	800806a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a17      	ldr	r2, [pc, #92]	; (80080cc <TIM_OC3_SetConfig+0xe4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_OC3_SetConfig+0x92>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a16      	ldr	r2, [pc, #88]	; (80080d0 <TIM_OC3_SetConfig+0xe8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d113      	bne.n	80080a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	011b      	lsls	r3, r3, #4
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	621a      	str	r2, [r3, #32]
}
 80080bc:	bf00      	nop
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	fffeff8f 	.word	0xfffeff8f
 80080cc:	40010000 	.word	0x40010000
 80080d0:	40010400 	.word	0x40010400

080080d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <TIM_OC4_SetConfig+0xa4>)
 8008100:	4013      	ands	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800811e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	031b      	lsls	r3, r3, #12
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a13      	ldr	r2, [pc, #76]	; (800817c <TIM_OC4_SetConfig+0xa8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_OC4_SetConfig+0x68>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a12      	ldr	r2, [pc, #72]	; (8008180 <TIM_OC4_SetConfig+0xac>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d109      	bne.n	8008150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	019b      	lsls	r3, r3, #6
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	feff8fff 	.word	0xfeff8fff
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4b1b      	ldr	r3, [pc, #108]	; (800821c <TIM_OC5_SetConfig+0x98>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a12      	ldr	r2, [pc, #72]	; (8008220 <TIM_OC5_SetConfig+0x9c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d003      	beq.n	80081e2 <TIM_OC5_SetConfig+0x5e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a11      	ldr	r2, [pc, #68]	; (8008224 <TIM_OC5_SetConfig+0xa0>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d109      	bne.n	80081f6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	621a      	str	r2, [r3, #32]
}
 8008210:	bf00      	nop
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	fffeff8f 	.word	0xfffeff8f
 8008220:	40010000 	.word	0x40010000
 8008224:	40010400 	.word	0x40010400

08008228 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4b1c      	ldr	r3, [pc, #112]	; (80082c4 <TIM_OC6_SetConfig+0x9c>)
 8008254:	4013      	ands	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800826a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	051b      	lsls	r3, r3, #20
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <TIM_OC6_SetConfig+0xa0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d003      	beq.n	8008288 <TIM_OC6_SetConfig+0x60>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <TIM_OC6_SetConfig+0xa4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d109      	bne.n	800829c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800828e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	029b      	lsls	r3, r3, #10
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	feff8fff 	.word	0xfeff8fff
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e06d      	b.n	80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a30      	ldr	r2, [pc, #192]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a2f      	ldr	r2, [pc, #188]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d108      	bne.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008322:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008334:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a20      	ldr	r2, [pc, #128]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d022      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d01d      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d018      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1a      	ldr	r2, [pc, #104]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00e      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a15      	ldr	r2, [pc, #84]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d009      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a16      	ldr	r2, [pc, #88]	; (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d004      	beq.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d10c      	bne.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800839e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	40010000 	.word	0x40010000
 80083d4:	40010400 	.word	0x40010400
 80083d8:	40000400 	.word	0x40000400
 80083dc:	40000800 	.word	0x40000800
 80083e0:	40000c00 	.word	0x40000c00
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40001800 	.word	0x40001800

080083ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d121      	bne.n	800847e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b27      	ldr	r3, [pc, #156]	; (80084dc <FMC_SDRAM_Init+0xb4>)
 8008440:	4013      	ands	r3, r2
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	6851      	ldr	r1, [r2, #4]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	6892      	ldr	r2, [r2, #8]
 800844a:	4311      	orrs	r1, r2
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68d2      	ldr	r2, [r2, #12]
 8008450:	4311      	orrs	r1, r2
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	6912      	ldr	r2, [r2, #16]
 8008456:	4311      	orrs	r1, r2
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	6952      	ldr	r2, [r2, #20]
 800845c:	4311      	orrs	r1, r2
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	6992      	ldr	r2, [r2, #24]
 8008462:	4311      	orrs	r1, r2
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	69d2      	ldr	r2, [r2, #28]
 8008468:	4311      	orrs	r1, r2
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	6a12      	ldr	r2, [r2, #32]
 800846e:	4311      	orrs	r1, r2
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008474:	430a      	orrs	r2, r1
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e026      	b.n	80084cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	69d9      	ldr	r1, [r3, #28]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	4319      	orrs	r1, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	430b      	orrs	r3, r1
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <FMC_SDRAM_Init+0xb4>)
 80084a2:	4013      	ands	r3, r2
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	6851      	ldr	r1, [r2, #4]
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	6892      	ldr	r2, [r2, #8]
 80084ac:	4311      	orrs	r1, r2
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	68d2      	ldr	r2, [r2, #12]
 80084b2:	4311      	orrs	r1, r2
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	6912      	ldr	r2, [r2, #16]
 80084b8:	4311      	orrs	r1, r2
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	6952      	ldr	r2, [r2, #20]
 80084be:	4311      	orrs	r1, r2
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	6992      	ldr	r2, [r2, #24]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	ffff8000 	.word	0xffff8000

080084e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d128      	bne.n	8008544 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	1e59      	subs	r1, r3, #1
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	3b01      	subs	r3, #1
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	4319      	orrs	r1, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	3b01      	subs	r3, #1
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	4319      	orrs	r1, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	3b01      	subs	r3, #1
 800851a:	031b      	lsls	r3, r3, #12
 800851c:	4319      	orrs	r1, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	3b01      	subs	r3, #1
 8008524:	041b      	lsls	r3, r3, #16
 8008526:	4319      	orrs	r1, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	3b01      	subs	r3, #1
 800852e:	051b      	lsls	r3, r3, #20
 8008530:	4319      	orrs	r1, r3
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	3b01      	subs	r3, #1
 8008538:	061b      	lsls	r3, r3, #24
 800853a:	430b      	orrs	r3, r1
 800853c:	431a      	orrs	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	609a      	str	r2, [r3, #8]
 8008542:	e02d      	b.n	80085a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800854a:	4013      	ands	r3, r2
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	68d2      	ldr	r2, [r2, #12]
 8008550:	3a01      	subs	r2, #1
 8008552:	0311      	lsls	r1, r2, #12
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	6952      	ldr	r2, [r2, #20]
 8008558:	3a01      	subs	r2, #1
 800855a:	0512      	lsls	r2, r2, #20
 800855c:	430a      	orrs	r2, r1
 800855e:	431a      	orrs	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	1e59      	subs	r1, r3, #1
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	3b01      	subs	r3, #1
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	4319      	orrs	r1, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	3b01      	subs	r3, #1
 8008582:	021b      	lsls	r3, r3, #8
 8008584:	4319      	orrs	r1, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	041b      	lsls	r3, r3, #16
 800858e:	4319      	orrs	r1, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	3b01      	subs	r3, #1
 8008596:	061b      	lsls	r3, r3, #24
 8008598:	430b      	orrs	r3, r1
 800859a:	431a      	orrs	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	ff0f0fff 	.word	0xff0f0fff

080085b4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <FMC_SDRAM_SendCommand+0x44>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	6811      	ldr	r1, [r2, #0]
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	6852      	ldr	r2, [r2, #4]
 80085d0:	4311      	orrs	r1, r2
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	6892      	ldr	r2, [r2, #8]
 80085d6:	3a01      	subs	r2, #1
 80085d8:	0152      	lsls	r2, r2, #5
 80085da:	4311      	orrs	r1, r2
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	68d2      	ldr	r2, [r2, #12]
 80085e0:	0252      	lsls	r2, r2, #9
 80085e2:	430a      	orrs	r2, r1
 80085e4:	431a      	orrs	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	ffc00000 	.word	0xffc00000

080085fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	4b07      	ldr	r3, [pc, #28]	; (8008628 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800860c:	4013      	ands	r3, r2
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	0052      	lsls	r2, r2, #1
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	ffffc001 	.word	0xffffc001

0800862c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008630:	bf00      	nop
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
	...

0800863c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008642:	f3ef 8305 	mrs	r3, IPSR
 8008646:	60bb      	str	r3, [r7, #8]
  return(result);
 8008648:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10f      	bne.n	800866e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864e:	f3ef 8310 	mrs	r3, PRIMASK
 8008652:	607b      	str	r3, [r7, #4]
  return(result);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800865a:	f3ef 8311 	mrs	r3, BASEPRI
 800865e:	603b      	str	r3, [r7, #0]
  return(result);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <osKernelInitialize+0x3a>
 8008666:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <osKernelInitialize+0x64>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d103      	bne.n	8008676 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800866e:	f06f 0305 	mvn.w	r3, #5
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e00c      	b.n	8008690 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <osKernelInitialize+0x64>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d105      	bne.n	800868a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <osKernelInitialize+0x64>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e002      	b.n	8008690 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800868a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800868e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008690:	68fb      	ldr	r3, [r7, #12]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	200005ec 	.word	0x200005ec

080086a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086aa:	f3ef 8305 	mrs	r3, IPSR
 80086ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80086b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10f      	bne.n	80086d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b6:	f3ef 8310 	mrs	r3, PRIMASK
 80086ba:	607b      	str	r3, [r7, #4]
  return(result);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d105      	bne.n	80086ce <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086c2:	f3ef 8311 	mrs	r3, BASEPRI
 80086c6:	603b      	str	r3, [r7, #0]
  return(result);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <osKernelStart+0x3a>
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <osKernelStart+0x68>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d103      	bne.n	80086de <osKernelStart+0x3a>
    stat = osErrorISR;
 80086d6:	f06f 0305 	mvn.w	r3, #5
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e010      	b.n	8008700 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086de:	4b0b      	ldr	r3, [pc, #44]	; (800870c <osKernelStart+0x68>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d109      	bne.n	80086fa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086e6:	f7ff ffa1 	bl	800862c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086ea:	4b08      	ldr	r3, [pc, #32]	; (800870c <osKernelStart+0x68>)
 80086ec:	2202      	movs	r2, #2
 80086ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086f0:	f001 f93e 	bl	8009970 <vTaskStartScheduler>
      stat = osOK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	e002      	b.n	8008700 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80086fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	200005ec 	.word	0x200005ec

08008710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008710:	b580      	push	{r7, lr}
 8008712:	b090      	sub	sp, #64	; 0x40
 8008714:	af04      	add	r7, sp, #16
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800871c:	2300      	movs	r3, #0
 800871e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008720:	f3ef 8305 	mrs	r3, IPSR
 8008724:	61fb      	str	r3, [r7, #28]
  return(result);
 8008726:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008728:	2b00      	cmp	r3, #0
 800872a:	f040 808f 	bne.w	800884c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872e:	f3ef 8310 	mrs	r3, PRIMASK
 8008732:	61bb      	str	r3, [r7, #24]
  return(result);
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800873a:	f3ef 8311 	mrs	r3, BASEPRI
 800873e:	617b      	str	r3, [r7, #20]
  return(result);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <osThreadNew+0x3e>
 8008746:	4b44      	ldr	r3, [pc, #272]	; (8008858 <osThreadNew+0x148>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d07e      	beq.n	800884c <osThreadNew+0x13c>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d07b      	beq.n	800884c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008754:	2380      	movs	r3, #128	; 0x80
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008758:	2318      	movs	r3, #24
 800875a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800875c:	2300      	movs	r3, #0
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008764:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d045      	beq.n	80087f8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <osThreadNew+0x6a>
        name = attr->name;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <osThreadNew+0x90>
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	2b38      	cmp	r3, #56	; 0x38
 8008792:	d805      	bhi.n	80087a0 <osThreadNew+0x90>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <osThreadNew+0x94>
        return (NULL);
 80087a0:	2300      	movs	r3, #0
 80087a2:	e054      	b.n	800884e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	695b      	ldr	r3, [r3, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	089b      	lsrs	r3, r3, #2
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00e      	beq.n	80087da <osThreadNew+0xca>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	2ba7      	cmp	r3, #167	; 0xa7
 80087c2:	d90a      	bls.n	80087da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d006      	beq.n	80087da <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <osThreadNew+0xca>
        mem = 1;
 80087d4:	2301      	movs	r3, #1
 80087d6:	623b      	str	r3, [r7, #32]
 80087d8:	e010      	b.n	80087fc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10c      	bne.n	80087fc <osThreadNew+0xec>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d108      	bne.n	80087fc <osThreadNew+0xec>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <osThreadNew+0xec>
          mem = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	623b      	str	r3, [r7, #32]
 80087f6:	e001      	b.n	80087fc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d110      	bne.n	8008824 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800880a:	9202      	str	r2, [sp, #8]
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 feb3 	bl	8009584 <xTaskCreateStatic>
 800881e:	4603      	mov	r3, r0
 8008820:	613b      	str	r3, [r7, #16]
 8008822:	e013      	b.n	800884c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d110      	bne.n	800884c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	b29a      	uxth	r2, r3
 800882e:	f107 0310 	add.w	r3, r7, #16
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 ff04 	bl	800964a <xTaskCreate>
 8008842:	4603      	mov	r3, r0
 8008844:	2b01      	cmp	r3, #1
 8008846:	d001      	beq.n	800884c <osThreadNew+0x13c>
          hTask = NULL;
 8008848:	2300      	movs	r3, #0
 800884a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800884c:	693b      	ldr	r3, [r7, #16]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3730      	adds	r7, #48	; 0x30
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200005ec 	.word	0x200005ec

0800885c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008864:	f3ef 8305 	mrs	r3, IPSR
 8008868:	613b      	str	r3, [r7, #16]
  return(result);
 800886a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	60fb      	str	r3, [r7, #12]
  return(result);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d105      	bne.n	8008888 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800887c:	f3ef 8311 	mrs	r3, BASEPRI
 8008880:	60bb      	str	r3, [r7, #8]
  return(result);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <osDelay+0x3c>
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <osDelay+0x58>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d103      	bne.n	8008898 <osDelay+0x3c>
    stat = osErrorISR;
 8008890:	f06f 0305 	mvn.w	r3, #5
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	e007      	b.n	80088a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d002      	beq.n	80088a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f82e 	bl	8009904 <vTaskDelay>
    }
  }

  return (stat);
 80088a8:	697b      	ldr	r3, [r7, #20]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	200005ec 	.word	0x200005ec

080088b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80088c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4a06      	ldr	r2, [pc, #24]	; (80088e8 <vApplicationGetIdleTaskMemory+0x30>)
 80088ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2280      	movs	r2, #128	; 0x80
 80088d4:	601a      	str	r2, [r3, #0]
}
 80088d6:	bf00      	nop
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	200005f0 	.word	0x200005f0
 80088e8:	20000698 	.word	0x20000698

080088ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a07      	ldr	r2, [pc, #28]	; (8008918 <vApplicationGetTimerTaskMemory+0x2c>)
 80088fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	4a06      	ldr	r2, [pc, #24]	; (800891c <vApplicationGetTimerTaskMemory+0x30>)
 8008902:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800890a:	601a      	str	r2, [r3, #0]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	20000898 	.word	0x20000898
 800891c:	20000940 	.word	0x20000940

08008920 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f103 0208 	add.w	r2, r3, #8
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008938:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f103 0208 	add.w	r2, r3, #8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f103 0208 	add.w	r2, r3, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800897a:	b480      	push	{r7}
 800897c:	b085      	sub	sp, #20
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689a      	ldr	r2, [r3, #8]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	601a      	str	r2, [r3, #0]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089c2:	b480      	push	{r7}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d8:	d103      	bne.n	80089e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	e00c      	b.n	80089fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3308      	adds	r3, #8
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e002      	b.n	80089f0 <vListInsert+0x2e>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d2f6      	bcs.n	80089ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6892      	ldr	r2, [r2, #8]
 8008a4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	6852      	ldr	r2, [r2, #4]
 8008a54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d103      	bne.n	8008a68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	1e5a      	subs	r2, r3, #1
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10c      	bne.n	8008ab6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	b672      	cpsid	i
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	b662      	cpsie	i
 8008ab0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008ab6:	f002 f919 	bl	800acec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ac6:	fb01 f303 	mul.w	r3, r1, r3
 8008aca:	441a      	add	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	68f9      	ldr	r1, [r7, #12]
 8008aea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008aec:	fb01 f303 	mul.w	r3, r1, r3
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	22ff      	movs	r2, #255	; 0xff
 8008afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	22ff      	movs	r2, #255	; 0xff
 8008b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d114      	bne.n	8008b36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01a      	beq.n	8008b4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3310      	adds	r3, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 f9d1 	bl	8009ec0 <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d012      	beq.n	8008b4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b24:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <xQueueGenericReset+0xd0>)
 8008b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	e009      	b.n	8008b4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3310      	adds	r3, #16
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fef0 	bl	8008920 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	3324      	adds	r3, #36	; 0x24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff feeb 	bl	8008920 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b4a:	f002 f903 	bl	800ad54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b4e:	2301      	movs	r3, #1
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	; 0x38
 8008b60:	af02      	add	r7, sp, #8
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10c      	bne.n	8008b8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	b672      	cpsid	i
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	b662      	cpsie	i
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b86:	bf00      	nop
 8008b88:	e7fe      	b.n	8008b88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	b672      	cpsid	i
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	b662      	cpsie	i
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ba6:	bf00      	nop
 8008ba8:	e7fe      	b.n	8008ba8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <xQueueGenericCreateStatic+0x5a>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <xQueueGenericCreateStatic+0x5e>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e000      	b.n	8008bbc <xQueueGenericCreateStatic+0x60>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10c      	bne.n	8008bda <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	b672      	cpsid	i
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	b662      	cpsie	i
 8008bd4:	623b      	str	r3, [r7, #32]
}
 8008bd6:	bf00      	nop
 8008bd8:	e7fe      	b.n	8008bd8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <xQueueGenericCreateStatic+0x8a>
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <xQueueGenericCreateStatic+0x8e>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xQueueGenericCreateStatic+0x90>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10c      	bne.n	8008c0a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	b672      	cpsid	i
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	b662      	cpsie	i
 8008c04:	61fb      	str	r3, [r7, #28]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c0a:	2350      	movs	r3, #80	; 0x50
 8008c0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b50      	cmp	r3, #80	; 0x50
 8008c12:	d00c      	beq.n	8008c2e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	b672      	cpsid	i
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	b662      	cpsie	i
 8008c28:	61bb      	str	r3, [r7, #24]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68b9      	ldr	r1, [r7, #8]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 f847 	bl	8008ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3730      	adds	r7, #48	; 0x30
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af02      	add	r7, sp, #8
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10c      	bne.n	8008c8e <xQueueGenericCreate+0x2e>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	b672      	cpsid	i
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	b662      	cpsie	i
 8008c88:	613b      	str	r3, [r7, #16]
}
 8008c8a:	bf00      	nop
 8008c8c:	e7fe      	b.n	8008c8c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e004      	b.n	8008ca4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	3350      	adds	r3, #80	; 0x50
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f002 f94b 	bl	800af44 <pvPortMalloc>
 8008cae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d011      	beq.n	8008cda <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	3350      	adds	r3, #80	; 0x50
 8008cbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cc8:	79fa      	ldrb	r2, [r7, #7]
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	68b9      	ldr	r1, [r7, #8]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 f805 	bl	8008ce4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008cda:	69bb      	ldr	r3, [r7, #24]
	}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e002      	b.n	8008d06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d12:	2101      	movs	r1, #1
 8008d14:	69b8      	ldr	r0, [r7, #24]
 8008d16:	f7ff feb7 	bl	8008a88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	78fa      	ldrb	r2, [r7, #3]
 8008d1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00e      	beq.n	8008d56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f81d 	bl	8008d90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	4603      	mov	r3, r0
 8008d66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6939      	ldr	r1, [r7, #16]
 8008d76:	6978      	ldr	r0, [r7, #20]
 8008d78:	f7ff ff72 	bl	8008c60 <xQueueGenericCreate>
 8008d7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f7ff ffd3 	bl	8008d2a <prvInitialiseMutex>

		return xNewQueue;
 8008d84:	68fb      	ldr	r3, [r7, #12]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10c      	bne.n	8008dc6 <xQueueGenericSend+0x36>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	b672      	cpsid	i
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	b662      	cpsie	i
 8008dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <xQueueGenericSend+0x44>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <xQueueGenericSend+0x48>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <xQueueGenericSend+0x4a>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10c      	bne.n	8008df8 <xQueueGenericSend+0x68>
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	b672      	cpsid	i
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	b662      	cpsie	i
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df4:	bf00      	nop
 8008df6:	e7fe      	b.n	8008df6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d103      	bne.n	8008e06 <xQueueGenericSend+0x76>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d101      	bne.n	8008e0a <xQueueGenericSend+0x7a>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <xQueueGenericSend+0x7c>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10c      	bne.n	8008e2a <xQueueGenericSend+0x9a>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	b672      	cpsid	i
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	b662      	cpsie	i
 8008e24:	623b      	str	r3, [r7, #32]
}
 8008e26:	bf00      	nop
 8008e28:	e7fe      	b.n	8008e28 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e2a:	f001 fa13 	bl	800a254 <xTaskGetSchedulerState>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <xQueueGenericSend+0xaa>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <xQueueGenericSend+0xae>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <xQueueGenericSend+0xb0>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10c      	bne.n	8008e5e <xQueueGenericSend+0xce>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	b672      	cpsid	i
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	b662      	cpsie	i
 8008e58:	61fb      	str	r3, [r7, #28]
}
 8008e5a:	bf00      	nop
 8008e5c:	e7fe      	b.n	8008e5c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e5e:	f001 ff45 	bl	800acec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d302      	bcc.n	8008e74 <xQueueGenericSend+0xe4>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d129      	bne.n	8008ec8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	68b9      	ldr	r1, [r7, #8]
 8008e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7a:	f000 fa15 	bl	80092a8 <prvCopyDataToQueue>
 8008e7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d010      	beq.n	8008eaa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	3324      	adds	r3, #36	; 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f817 	bl	8009ec0 <xTaskRemoveFromEventList>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d013      	beq.n	8008ec0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e98:	4b3f      	ldr	r3, [pc, #252]	; (8008f98 <xQueueGenericSend+0x208>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	e00a      	b.n	8008ec0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <xQueueGenericSend+0x208>)
 8008eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ec0:	f001 ff48 	bl	800ad54 <vPortExitCritical>
				return pdPASS;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e063      	b.n	8008f90 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d103      	bne.n	8008ed6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ece:	f001 ff41 	bl	800ad54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e05c      	b.n	8008f90 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f001 f853 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008eea:	f001 ff33 	bl	800ad54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008eee:	f000 fdb3 	bl	8009a58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ef2:	f001 fefb 	bl	800acec <vPortEnterCritical>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008efc:	b25b      	sxtb	r3, r3
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f02:	d103      	bne.n	8008f0c <xQueueGenericSend+0x17c>
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f12:	b25b      	sxtb	r3, r3
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f18:	d103      	bne.n	8008f22 <xQueueGenericSend+0x192>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f22:	f001 ff17 	bl	800ad54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f26:	1d3a      	adds	r2, r7, #4
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 f842 	bl	8009fb8 <xTaskCheckForTimeOut>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d124      	bne.n	8008f84 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f3c:	f000 faac 	bl	8009498 <prvIsQueueFull>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d018      	beq.n	8008f78 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	3310      	adds	r3, #16
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 ff62 	bl	8009e18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f56:	f000 fa37 	bl	80093c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f5a:	f000 fd8b 	bl	8009a74 <xTaskResumeAll>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f47f af7c 	bne.w	8008e5e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008f66:	4b0c      	ldr	r3, [pc, #48]	; (8008f98 <xQueueGenericSend+0x208>)
 8008f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	e772      	b.n	8008e5e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7a:	f000 fa25 	bl	80093c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f7e:	f000 fd79 	bl	8009a74 <xTaskResumeAll>
 8008f82:	e76c      	b.n	8008e5e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f86:	f000 fa1f 	bl	80093c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f8a:	f000 fd73 	bl	8009a74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3738      	adds	r7, #56	; 0x38
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	e000ed04 	.word	0xe000ed04

08008f9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10c      	bne.n	8008fce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	b672      	cpsid	i
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	b662      	cpsie	i
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <xQueueGenericSendFromISR+0x40>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <xQueueGenericSendFromISR+0x44>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e000      	b.n	8008fe2 <xQueueGenericSendFromISR+0x46>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10c      	bne.n	8009000 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	b672      	cpsid	i
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	b662      	cpsie	i
 8008ffa:	623b      	str	r3, [r7, #32]
}
 8008ffc:	bf00      	nop
 8008ffe:	e7fe      	b.n	8008ffe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d103      	bne.n	800900e <xQueueGenericSendFromISR+0x72>
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <xQueueGenericSendFromISR+0x76>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <xQueueGenericSendFromISR+0x78>
 8009012:	2300      	movs	r3, #0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10c      	bne.n	8009032 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901c:	b672      	cpsid	i
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	b662      	cpsie	i
 800902c:	61fb      	str	r3, [r7, #28]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009032:	f001 ff43 	bl	800aebc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009036:	f3ef 8211 	mrs	r2, BASEPRI
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	b672      	cpsid	i
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	b662      	cpsie	i
 800904e:	61ba      	str	r2, [r7, #24]
 8009050:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009052:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905e:	429a      	cmp	r2, r3
 8009060:	d302      	bcc.n	8009068 <xQueueGenericSendFromISR+0xcc>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d12c      	bne.n	80090c2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800906e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	68b9      	ldr	r1, [r7, #8]
 8009076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009078:	f000 f916 	bl	80092a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800907c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009084:	d112      	bne.n	80090ac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b00      	cmp	r3, #0
 800908c:	d016      	beq.n	80090bc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	3324      	adds	r3, #36	; 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f000 ff14 	bl	8009ec0 <xTaskRemoveFromEventList>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e007      	b.n	80090bc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090b0:	3301      	adds	r3, #1
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	b25a      	sxtb	r2, r3
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090bc:	2301      	movs	r3, #1
 80090be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80090c0:	e001      	b.n	80090c6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3738      	adds	r7, #56	; 0x38
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b08c      	sub	sp, #48	; 0x30
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10c      	bne.n	8009110 <xQueueReceive+0x34>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	b672      	cpsid	i
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	b662      	cpsie	i
 800910a:	623b      	str	r3, [r7, #32]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <xQueueReceive+0x42>
 8009116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <xQueueReceive+0x46>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <xQueueReceive+0x48>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10c      	bne.n	8009142 <xQueueReceive+0x66>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	b672      	cpsid	i
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	b662      	cpsie	i
 800913c:	61fb      	str	r3, [r7, #28]
}
 800913e:	bf00      	nop
 8009140:	e7fe      	b.n	8009140 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009142:	f001 f887 	bl	800a254 <xTaskGetSchedulerState>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <xQueueReceive+0x76>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <xQueueReceive+0x7a>
 8009152:	2301      	movs	r3, #1
 8009154:	e000      	b.n	8009158 <xQueueReceive+0x7c>
 8009156:	2300      	movs	r3, #0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10c      	bne.n	8009176 <xQueueReceive+0x9a>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	b672      	cpsid	i
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	b662      	cpsie	i
 8009170:	61bb      	str	r3, [r7, #24]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009176:	f001 fdb9 	bl	800acec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01f      	beq.n	80091c6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009186:	68b9      	ldr	r1, [r7, #8]
 8009188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800918a:	f000 f8f7 	bl	800937c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	1e5a      	subs	r2, r3, #1
 8009192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009194:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00f      	beq.n	80091be <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	3310      	adds	r3, #16
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fe8c 	bl	8009ec0 <xTaskRemoveFromEventList>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d007      	beq.n	80091be <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091ae:	4b3d      	ldr	r3, [pc, #244]	; (80092a4 <xQueueReceive+0x1c8>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091be:	f001 fdc9 	bl	800ad54 <vPortExitCritical>
				return pdPASS;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e069      	b.n	800929a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091cc:	f001 fdc2 	bl	800ad54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e062      	b.n	800929a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091da:	f107 0310 	add.w	r3, r7, #16
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fed4 	bl	8009f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091e4:	2301      	movs	r3, #1
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091e8:	f001 fdb4 	bl	800ad54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091ec:	f000 fc34 	bl	8009a58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091f0:	f001 fd7c 	bl	800acec <vPortEnterCritical>
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009200:	d103      	bne.n	800920a <xQueueReceive+0x12e>
 8009202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009210:	b25b      	sxtb	r3, r3
 8009212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009216:	d103      	bne.n	8009220 <xQueueReceive+0x144>
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009220:	f001 fd98 	bl	800ad54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009224:	1d3a      	adds	r2, r7, #4
 8009226:	f107 0310 	add.w	r3, r7, #16
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fec3 	bl	8009fb8 <xTaskCheckForTimeOut>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d123      	bne.n	8009280 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923a:	f000 f917 	bl	800946c <prvIsQueueEmpty>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009246:	3324      	adds	r3, #36	; 0x24
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fde3 	bl	8009e18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009254:	f000 f8b8 	bl	80093c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009258:	f000 fc0c 	bl	8009a74 <xTaskResumeAll>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d189      	bne.n	8009176 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009262:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <xQueueReceive+0x1c8>)
 8009264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	e780      	b.n	8009176 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009276:	f000 f8a7 	bl	80093c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800927a:	f000 fbfb 	bl	8009a74 <xTaskResumeAll>
 800927e:	e77a      	b.n	8009176 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009282:	f000 f8a1 	bl	80093c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009286:	f000 fbf5 	bl	8009a74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800928a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800928c:	f000 f8ee 	bl	800946c <prvIsQueueEmpty>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	f43f af6f 	beq.w	8009176 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009298:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800929a:	4618      	mov	r0, r3
 800929c:	3730      	adds	r7, #48	; 0x30
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10d      	bne.n	80092e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d14d      	bne.n	800936a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 ffdc 	bl	800a290 <xTaskPriorityDisinherit>
 80092d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	e043      	b.n	800936a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d119      	bne.n	800931c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6858      	ldr	r0, [r3, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	461a      	mov	r2, r3
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	f002 fa81 	bl	800b7fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d32b      	bcc.n	800936a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	605a      	str	r2, [r3, #4]
 800931a:	e026      	b.n	800936a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68d8      	ldr	r0, [r3, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	461a      	mov	r2, r3
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	f002 fa67 	bl	800b7fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	425b      	negs	r3, r3
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d207      	bcs.n	8009358 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	425b      	negs	r3, r3
 8009352:	441a      	add	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d105      	bne.n	800936a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3b01      	subs	r3, #1
 8009368:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009372:	697b      	ldr	r3, [r7, #20]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	d018      	beq.n	80093c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	441a      	add	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d303      	bcc.n	80093b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68d9      	ldr	r1, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	461a      	mov	r2, r3
 80093ba:	6838      	ldr	r0, [r7, #0]
 80093bc:	f002 fa1d 	bl	800b7fa <memcpy>
	}
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093d0:	f001 fc8c 	bl	800acec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093dc:	e011      	b.n	8009402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d012      	beq.n	800940c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3324      	adds	r3, #36	; 0x24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fd68 	bl	8009ec0 <xTaskRemoveFromEventList>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093f6:	f000 fe45 	bl	800a084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dce9      	bgt.n	80093de <prvUnlockQueue+0x16>
 800940a:	e000      	b.n	800940e <prvUnlockQueue+0x46>
					break;
 800940c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	22ff      	movs	r2, #255	; 0xff
 8009412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009416:	f001 fc9d 	bl	800ad54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800941a:	f001 fc67 	bl	800acec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009426:	e011      	b.n	800944c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d012      	beq.n	8009456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fd43 	bl	8009ec0 <xTaskRemoveFromEventList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009440:	f000 fe20 	bl	800a084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	3b01      	subs	r3, #1
 8009448:	b2db      	uxtb	r3, r3
 800944a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dce9      	bgt.n	8009428 <prvUnlockQueue+0x60>
 8009454:	e000      	b.n	8009458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	22ff      	movs	r2, #255	; 0xff
 800945c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009460:	f001 fc78 	bl	800ad54 <vPortExitCritical>
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009474:	f001 fc3a 	bl	800acec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e001      	b.n	800948a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948a:	f001 fc63 	bl	800ad54 <vPortExitCritical>

	return xReturn;
 800948e:	68fb      	ldr	r3, [r7, #12]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a0:	f001 fc24 	bl	800acec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d102      	bne.n	80094b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e001      	b.n	80094ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ba:	f001 fc4b 	bl	800ad54 <vPortExitCritical>

	return xReturn;
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
 80094d6:	e014      	b.n	8009502 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094d8:	4a0f      	ldr	r2, [pc, #60]	; (8009518 <vQueueAddToRegistry+0x50>)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10b      	bne.n	80094fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094e4:	490c      	ldr	r1, [pc, #48]	; (8009518 <vQueueAddToRegistry+0x50>)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094ee:	4a0a      	ldr	r2, [pc, #40]	; (8009518 <vQueueAddToRegistry+0x50>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	4413      	add	r3, r2
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094fa:	e006      	b.n	800950a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3301      	adds	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b07      	cmp	r3, #7
 8009506:	d9e7      	bls.n	80094d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009508:	bf00      	nop
 800950a:	bf00      	nop
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000d40 	.word	0x20000d40

0800951c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800952c:	f001 fbde 	bl	800acec <vPortEnterCritical>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009536:	b25b      	sxtb	r3, r3
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800953c:	d103      	bne.n	8009546 <vQueueWaitForMessageRestricted+0x2a>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800954c:	b25b      	sxtb	r3, r3
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009552:	d103      	bne.n	800955c <vQueueWaitForMessageRestricted+0x40>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800955c:	f001 fbfa 	bl	800ad54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fc77 	bl	8009e64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f7ff ff26 	bl	80093c8 <prvUnlockQueue>
	}
 800957c:	bf00      	nop
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08e      	sub	sp, #56	; 0x38
 8009588:	af04      	add	r7, sp, #16
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10c      	bne.n	80095b2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	623b      	str	r3, [r7, #32]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10c      	bne.n	80095d2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	b672      	cpsid	i
 80095be:	f383 8811 	msr	BASEPRI, r3
 80095c2:	f3bf 8f6f 	isb	sy
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	b662      	cpsie	i
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095d2:	23a8      	movs	r3, #168	; 0xa8
 80095d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	2ba8      	cmp	r3, #168	; 0xa8
 80095da:	d00c      	beq.n	80095f6 <xTaskCreateStatic+0x72>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	b672      	cpsid	i
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	b662      	cpsie	i
 80095f0:	61bb      	str	r3, [r7, #24]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01e      	beq.n	800963c <xTaskCreateStatic+0xb8>
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	2b00      	cmp	r3, #0
 8009602:	d01b      	beq.n	800963c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800960c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	2202      	movs	r2, #2
 8009612:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009616:	2300      	movs	r3, #0
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	f107 0314 	add.w	r3, r7, #20
 8009622:	9301      	str	r3, [sp, #4]
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f850 	bl	80096d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009636:	f000 f8f5 	bl	8009824 <prvAddNewTaskToReadyList>
 800963a:	e001      	b.n	8009640 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800963c:	2300      	movs	r3, #0
 800963e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009640:	697b      	ldr	r3, [r7, #20]
	}
 8009642:	4618      	mov	r0, r3
 8009644:	3728      	adds	r7, #40	; 0x28
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800964a:	b580      	push	{r7, lr}
 800964c:	b08c      	sub	sp, #48	; 0x30
 800964e:	af04      	add	r7, sp, #16
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	4613      	mov	r3, r2
 8009658:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fc70 	bl	800af44 <pvPortMalloc>
 8009664:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00e      	beq.n	800968a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800966c:	20a8      	movs	r0, #168	; 0xa8
 800966e:	f001 fc69 	bl	800af44 <pvPortMalloc>
 8009672:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
 8009680:	e005      	b.n	800968e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009682:	6978      	ldr	r0, [r7, #20]
 8009684:	f001 fd28 	bl	800b0d8 <vPortFree>
 8009688:	e001      	b.n	800968e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d017      	beq.n	80096c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800969c:	88fa      	ldrh	r2, [r7, #6]
 800969e:	2300      	movs	r3, #0
 80096a0:	9303      	str	r3, [sp, #12]
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	9302      	str	r3, [sp, #8]
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f000 f80e 	bl	80096d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096b8:	69f8      	ldr	r0, [r7, #28]
 80096ba:	f000 f8b3 	bl	8009824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096be:	2301      	movs	r3, #1
 80096c0:	61bb      	str	r3, [r7, #24]
 80096c2:	e002      	b.n	80096ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096ca:	69bb      	ldr	r3, [r7, #24]
	}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3720      	adds	r7, #32
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
 80096e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	461a      	mov	r2, r3
 80096ec:	21a5      	movs	r1, #165	; 0xa5
 80096ee:	f001 ffe9 	bl	800b6c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80096fc:	440b      	add	r3, r1
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f023 0307 	bic.w	r3, r3, #7
 800970a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f003 0307 	and.w	r3, r3, #7
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00c      	beq.n	8009730 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	b672      	cpsid	i
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	b662      	cpsie	i
 800972a:	617b      	str	r3, [r7, #20]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01f      	beq.n	8009776 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009736:	2300      	movs	r3, #0
 8009738:	61fb      	str	r3, [r7, #28]
 800973a:	e012      	b.n	8009762 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	7819      	ldrb	r1, [r3, #0]
 8009744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	3334      	adds	r3, #52	; 0x34
 800974c:	460a      	mov	r2, r1
 800974e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d006      	beq.n	800976a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	3301      	adds	r3, #1
 8009760:	61fb      	str	r3, [r7, #28]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	2b0f      	cmp	r3, #15
 8009766:	d9e9      	bls.n	800973c <prvInitialiseNewTask+0x68>
 8009768:	e000      	b.n	800976c <prvInitialiseNewTask+0x98>
			{
				break;
 800976a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800976c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009774:	e003      	b.n	800977e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	2b37      	cmp	r3, #55	; 0x37
 8009782:	d901      	bls.n	8009788 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009784:	2337      	movs	r3, #55	; 0x37
 8009786:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800978c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	2200      	movs	r2, #0
 8009798:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	3304      	adds	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff f8de 	bl	8008960 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	3318      	adds	r3, #24
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff f8d9 	bl	8008960 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	3354      	adds	r3, #84	; 0x54
 80097d8:	224c      	movs	r2, #76	; 0x4c
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 ff71 	bl	800b6c4 <memset>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	4a0c      	ldr	r2, [pc, #48]	; (8009818 <prvInitialiseNewTask+0x144>)
 80097e6:	659a      	str	r2, [r3, #88]	; 0x58
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	4a0c      	ldr	r2, [pc, #48]	; (800981c <prvInitialiseNewTask+0x148>)
 80097ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <prvInitialiseNewTask+0x14c>)
 80097f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	69b8      	ldr	r0, [r7, #24]
 80097fa:	f001 f96b 	bl	800aad4 <pxPortInitialiseStack>
 80097fe:	4602      	mov	r2, r0
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800980a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009810:	bf00      	nop
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20004fd4 	.word	0x20004fd4
 800981c:	2000503c 	.word	0x2000503c
 8009820:	200050a4 	.word	0x200050a4

08009824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800982c:	f001 fa5e 	bl	800acec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009830:	4b2d      	ldr	r3, [pc, #180]	; (80098e8 <prvAddNewTaskToReadyList+0xc4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	4a2c      	ldr	r2, [pc, #176]	; (80098e8 <prvAddNewTaskToReadyList+0xc4>)
 8009838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800983a:	4b2c      	ldr	r3, [pc, #176]	; (80098ec <prvAddNewTaskToReadyList+0xc8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009842:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <prvAddNewTaskToReadyList+0xc8>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009848:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <prvAddNewTaskToReadyList+0xc4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d110      	bne.n	8009872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009850:	f000 fc3c 	bl	800a0cc <prvInitialiseTaskLists>
 8009854:	e00d      	b.n	8009872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009856:	4b26      	ldr	r3, [pc, #152]	; (80098f0 <prvAddNewTaskToReadyList+0xcc>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800985e:	4b23      	ldr	r3, [pc, #140]	; (80098ec <prvAddNewTaskToReadyList+0xc8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	429a      	cmp	r2, r3
 800986a:	d802      	bhi.n	8009872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800986c:	4a1f      	ldr	r2, [pc, #124]	; (80098ec <prvAddNewTaskToReadyList+0xc8>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009872:	4b20      	ldr	r3, [pc, #128]	; (80098f4 <prvAddNewTaskToReadyList+0xd0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3301      	adds	r3, #1
 8009878:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <prvAddNewTaskToReadyList+0xd0>)
 800987a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800987c:	4b1d      	ldr	r3, [pc, #116]	; (80098f4 <prvAddNewTaskToReadyList+0xd0>)
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009888:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <prvAddNewTaskToReadyList+0xd4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d903      	bls.n	8009898 <prvAddNewTaskToReadyList+0x74>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <prvAddNewTaskToReadyList+0xd4>)
 8009896:	6013      	str	r3, [r2, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4a15      	ldr	r2, [pc, #84]	; (80098fc <prvAddNewTaskToReadyList+0xd8>)
 80098a6:	441a      	add	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4619      	mov	r1, r3
 80098ae:	4610      	mov	r0, r2
 80098b0:	f7ff f863 	bl	800897a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098b4:	f001 fa4e 	bl	800ad54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <prvAddNewTaskToReadyList+0xcc>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00e      	beq.n	80098de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098c0:	4b0a      	ldr	r3, [pc, #40]	; (80098ec <prvAddNewTaskToReadyList+0xc8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d207      	bcs.n	80098de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098ce:	4b0c      	ldr	r3, [pc, #48]	; (8009900 <prvAddNewTaskToReadyList+0xdc>)
 80098d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098de:	bf00      	nop
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20001254 	.word	0x20001254
 80098ec:	20000d80 	.word	0x20000d80
 80098f0:	20001260 	.word	0x20001260
 80098f4:	20001270 	.word	0x20001270
 80098f8:	2000125c 	.word	0x2000125c
 80098fc:	20000d84 	.word	0x20000d84
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800990c:	2300      	movs	r3, #0
 800990e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d019      	beq.n	800994a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <vTaskDelay+0x64>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00c      	beq.n	8009938 <vTaskDelay+0x34>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	b672      	cpsid	i
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	b662      	cpsie	i
 8009932:	60bb      	str	r3, [r7, #8]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009938:	f000 f88e 	bl	8009a58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800993c:	2100      	movs	r1, #0
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fd18 	bl	800a374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009944:	f000 f896 	bl	8009a74 <xTaskResumeAll>
 8009948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <vTaskDelay+0x68>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	2000127c 	.word	0x2000127c
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	; 0x28
 8009974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800997e:	463a      	mov	r2, r7
 8009980:	1d39      	adds	r1, r7, #4
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe ff96 	bl	80088b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	9202      	str	r2, [sp, #8]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	2300      	movs	r3, #0
 800999c:	460a      	mov	r2, r1
 800999e:	4926      	ldr	r1, [pc, #152]	; (8009a38 <vTaskStartScheduler+0xc8>)
 80099a0:	4826      	ldr	r0, [pc, #152]	; (8009a3c <vTaskStartScheduler+0xcc>)
 80099a2:	f7ff fdef 	bl	8009584 <xTaskCreateStatic>
 80099a6:	4603      	mov	r3, r0
 80099a8:	4a25      	ldr	r2, [pc, #148]	; (8009a40 <vTaskStartScheduler+0xd0>)
 80099aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099ac:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <vTaskStartScheduler+0xd0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	e001      	b.n	80099be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d102      	bne.n	80099ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099c4:	f000 fd2a 	bl	800a41c <xTimerCreateTimerTask>
 80099c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d11d      	bne.n	8009a0c <vTaskStartScheduler+0x9c>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	613b      	str	r3, [r7, #16]
}
 80099e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099e8:	4b16      	ldr	r3, [pc, #88]	; (8009a44 <vTaskStartScheduler+0xd4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3354      	adds	r3, #84	; 0x54
 80099ee:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <vTaskStartScheduler+0xd8>)
 80099f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099f2:	4b16      	ldr	r3, [pc, #88]	; (8009a4c <vTaskStartScheduler+0xdc>)
 80099f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <vTaskStartScheduler+0xe0>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a00:	4b14      	ldr	r3, [pc, #80]	; (8009a54 <vTaskStartScheduler+0xe4>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a06:	f001 f8f3 	bl	800abf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a0a:	e010      	b.n	8009a2e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a12:	d10c      	bne.n	8009a2e <vTaskStartScheduler+0xbe>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	b672      	cpsid	i
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	b662      	cpsie	i
 8009a28:	60fb      	str	r3, [r7, #12]
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <vTaskStartScheduler+0xbc>
}
 8009a2e:	bf00      	nop
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	0800c7f8 	.word	0x0800c7f8
 8009a3c:	0800a09d 	.word	0x0800a09d
 8009a40:	20001278 	.word	0x20001278
 8009a44:	20000d80 	.word	0x20000d80
 8009a48:	20000088 	.word	0x20000088
 8009a4c:	20001274 	.word	0x20001274
 8009a50:	20001260 	.word	0x20001260
 8009a54:	20001258 	.word	0x20001258

08009a58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <vTaskSuspendAll+0x18>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3301      	adds	r3, #1
 8009a62:	4a03      	ldr	r2, [pc, #12]	; (8009a70 <vTaskSuspendAll+0x18>)
 8009a64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a66:	bf00      	nop
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	2000127c 	.word	0x2000127c

08009a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a82:	4b43      	ldr	r3, [pc, #268]	; (8009b90 <xTaskResumeAll+0x11c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10c      	bne.n	8009aa4 <xTaskResumeAll+0x30>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	b672      	cpsid	i
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	b662      	cpsie	i
 8009a9e:	603b      	str	r3, [r7, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009aa4:	f001 f922 	bl	800acec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009aa8:	4b39      	ldr	r3, [pc, #228]	; (8009b90 <xTaskResumeAll+0x11c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	4a38      	ldr	r2, [pc, #224]	; (8009b90 <xTaskResumeAll+0x11c>)
 8009ab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab2:	4b37      	ldr	r3, [pc, #220]	; (8009b90 <xTaskResumeAll+0x11c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d162      	bne.n	8009b80 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aba:	4b36      	ldr	r3, [pc, #216]	; (8009b94 <xTaskResumeAll+0x120>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05e      	beq.n	8009b80 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ac2:	e02f      	b.n	8009b24 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac4:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <xTaskResumeAll+0x124>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3318      	adds	r3, #24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe ffaf 	bl	8008a34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe ffaa 	bl	8008a34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	4b2d      	ldr	r3, [pc, #180]	; (8009b9c <xTaskResumeAll+0x128>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d903      	bls.n	8009af4 <xTaskResumeAll+0x80>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <xTaskResumeAll+0x128>)
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a27      	ldr	r2, [pc, #156]	; (8009ba0 <xTaskResumeAll+0x12c>)
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7fe ff35 	bl	800897a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4b23      	ldr	r3, [pc, #140]	; (8009ba4 <xTaskResumeAll+0x130>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009b1e:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <xTaskResumeAll+0x134>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b24:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <xTaskResumeAll+0x124>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1cb      	bne.n	8009ac4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b32:	f000 fb6f 	bl	800a214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b36:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <xTaskResumeAll+0x138>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d010      	beq.n	8009b64 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f000 f847 	bl	8009bd4 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <xTaskResumeAll+0x134>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f1      	bne.n	8009b42 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <xTaskResumeAll+0x138>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b64:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <xTaskResumeAll+0x134>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <xTaskResumeAll+0x13c>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b80:	f001 f8e8 	bl	800ad54 <vPortExitCritical>

	return xAlreadyYielded;
 8009b84:	68bb      	ldr	r3, [r7, #8]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	2000127c 	.word	0x2000127c
 8009b94:	20001254 	.word	0x20001254
 8009b98:	20001214 	.word	0x20001214
 8009b9c:	2000125c 	.word	0x2000125c
 8009ba0:	20000d84 	.word	0x20000d84
 8009ba4:	20000d80 	.word	0x20000d80
 8009ba8:	20001268 	.word	0x20001268
 8009bac:	20001264 	.word	0x20001264
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <xTaskGetTickCount+0x1c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bc0:	687b      	ldr	r3, [r7, #4]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	20001258 	.word	0x20001258

08009bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bde:	4b50      	ldr	r3, [pc, #320]	; (8009d20 <xTaskIncrementTick+0x14c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f040 808b 	bne.w	8009cfe <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009be8:	4b4e      	ldr	r3, [pc, #312]	; (8009d24 <xTaskIncrementTick+0x150>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3301      	adds	r3, #1
 8009bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bf0:	4a4c      	ldr	r2, [pc, #304]	; (8009d24 <xTaskIncrementTick+0x150>)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d122      	bne.n	8009c42 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bfc:	4b4a      	ldr	r3, [pc, #296]	; (8009d28 <xTaskIncrementTick+0x154>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	b672      	cpsid	i
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	b662      	cpsie	i
 8009c1a:	603b      	str	r3, [r7, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xTaskIncrementTick+0x4a>
 8009c20:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <xTaskIncrementTick+0x154>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	4b41      	ldr	r3, [pc, #260]	; (8009d2c <xTaskIncrementTick+0x158>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a3f      	ldr	r2, [pc, #252]	; (8009d28 <xTaskIncrementTick+0x154>)
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	4a3f      	ldr	r2, [pc, #252]	; (8009d2c <xTaskIncrementTick+0x158>)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <xTaskIncrementTick+0x15c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	4a3d      	ldr	r2, [pc, #244]	; (8009d30 <xTaskIncrementTick+0x15c>)
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	f000 fae9 	bl	800a214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c42:	4b3c      	ldr	r3, [pc, #240]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d349      	bcc.n	8009ce0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c4c:	4b36      	ldr	r3, [pc, #216]	; (8009d28 <xTaskIncrementTick+0x154>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d104      	bne.n	8009c60 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c56:	4b37      	ldr	r3, [pc, #220]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c5c:	601a      	str	r2, [r3, #0]
					break;
 8009c5e:	e03f      	b.n	8009ce0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c60:	4b31      	ldr	r3, [pc, #196]	; (8009d28 <xTaskIncrementTick+0x154>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d203      	bcs.n	8009c80 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c78:	4a2e      	ldr	r2, [pc, #184]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c7e:	e02f      	b.n	8009ce0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe fed5 	bl	8008a34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	3318      	adds	r3, #24
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fecc 	bl	8008a34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca0:	4b25      	ldr	r3, [pc, #148]	; (8009d38 <xTaskIncrementTick+0x164>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d903      	bls.n	8009cb0 <xTaskIncrementTick+0xdc>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	4a22      	ldr	r2, [pc, #136]	; (8009d38 <xTaskIncrementTick+0x164>)
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4a1f      	ldr	r2, [pc, #124]	; (8009d3c <xTaskIncrementTick+0x168>)
 8009cbe:	441a      	add	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7fe fe57 	bl	800897a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <xTaskIncrementTick+0x16c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d3b8      	bcc.n	8009c4c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cde:	e7b5      	b.n	8009c4c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ce0:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <xTaskIncrementTick+0x16c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	4915      	ldr	r1, [pc, #84]	; (8009d3c <xTaskIncrementTick+0x168>)
 8009ce8:	4613      	mov	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	440b      	add	r3, r1
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d907      	bls.n	8009d08 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	e004      	b.n	8009d08 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009cfe:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <xTaskIncrementTick+0x170>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	4a0f      	ldr	r2, [pc, #60]	; (8009d44 <xTaskIncrementTick+0x170>)
 8009d06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009d08:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <xTaskIncrementTick+0x174>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009d14:	697b      	ldr	r3, [r7, #20]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	2000127c 	.word	0x2000127c
 8009d24:	20001258 	.word	0x20001258
 8009d28:	2000120c 	.word	0x2000120c
 8009d2c:	20001210 	.word	0x20001210
 8009d30:	2000126c 	.word	0x2000126c
 8009d34:	20001274 	.word	0x20001274
 8009d38:	2000125c 	.word	0x2000125c
 8009d3c:	20000d84 	.word	0x20000d84
 8009d40:	20000d80 	.word	0x20000d80
 8009d44:	20001264 	.word	0x20001264
 8009d48:	20001268 	.word	0x20001268

08009d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <vTaskSwitchContext+0xb4>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d5a:	4b2a      	ldr	r3, [pc, #168]	; (8009e04 <vTaskSwitchContext+0xb8>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d60:	e048      	b.n	8009df4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009d62:	4b28      	ldr	r3, [pc, #160]	; (8009e04 <vTaskSwitchContext+0xb8>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d68:	4b27      	ldr	r3, [pc, #156]	; (8009e08 <vTaskSwitchContext+0xbc>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	60fb      	str	r3, [r7, #12]
 8009d6e:	e012      	b.n	8009d96 <vTaskSwitchContext+0x4a>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10c      	bne.n	8009d90 <vTaskSwitchContext+0x44>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	b672      	cpsid	i
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	b662      	cpsie	i
 8009d8a:	607b      	str	r3, [r7, #4]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <vTaskSwitchContext+0x42>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	491d      	ldr	r1, [pc, #116]	; (8009e0c <vTaskSwitchContext+0xc0>)
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0e2      	beq.n	8009d70 <vTaskSwitchContext+0x24>
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4613      	mov	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4a15      	ldr	r2, [pc, #84]	; (8009e0c <vTaskSwitchContext+0xc0>)
 8009db6:	4413      	add	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	3308      	adds	r3, #8
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d104      	bne.n	8009dda <vTaskSwitchContext+0x8e>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	605a      	str	r2, [r3, #4]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	4a0b      	ldr	r2, [pc, #44]	; (8009e10 <vTaskSwitchContext+0xc4>)
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4a08      	ldr	r2, [pc, #32]	; (8009e08 <vTaskSwitchContext+0xbc>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009dea:	4b09      	ldr	r3, [pc, #36]	; (8009e10 <vTaskSwitchContext+0xc4>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	3354      	adds	r3, #84	; 0x54
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <vTaskSwitchContext+0xc8>)
 8009df2:	6013      	str	r3, [r2, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	2000127c 	.word	0x2000127c
 8009e04:	20001268 	.word	0x20001268
 8009e08:	2000125c 	.word	0x2000125c
 8009e0c:	20000d84 	.word	0x20000d84
 8009e10:	20000d80 	.word	0x20000d80
 8009e14:	20000088 	.word	0x20000088

08009e18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10c      	bne.n	8009e42 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	b672      	cpsid	i
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	b662      	cpsie	i
 8009e3c:	60fb      	str	r3, [r7, #12]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e42:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <vTaskPlaceOnEventList+0x48>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3318      	adds	r3, #24
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7fe fdb9 	bl	80089c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e50:	2101      	movs	r1, #1
 8009e52:	6838      	ldr	r0, [r7, #0]
 8009e54:	f000 fa8e 	bl	800a374 <prvAddCurrentTaskToDelayedList>
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20000d80 	.word	0x20000d80

08009e64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10c      	bne.n	8009e90 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	b672      	cpsid	i
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	b662      	cpsie	i
 8009e8a:	617b      	str	r3, [r7, #20]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <vTaskPlaceOnEventListRestricted+0x58>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3318      	adds	r3, #24
 8009e96:	4619      	mov	r1, r3
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7fe fd6e 	bl	800897a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	68b8      	ldr	r0, [r7, #8]
 8009eae:	f000 fa61 	bl	800a374 <prvAddCurrentTaskToDelayedList>
	}
 8009eb2:	bf00      	nop
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000d80 	.word	0x20000d80

08009ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10c      	bne.n	8009ef0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	b672      	cpsid	i
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	b662      	cpsie	i
 8009eea:	60fb      	str	r3, [r7, #12]
}
 8009eec:	bf00      	nop
 8009eee:	e7fe      	b.n	8009eee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	3318      	adds	r3, #24
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fe fd9d 	bl	8008a34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009efa:	4b1e      	ldr	r3, [pc, #120]	; (8009f74 <xTaskRemoveFromEventList+0xb4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d11d      	bne.n	8009f3e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	3304      	adds	r3, #4
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe fd94 	bl	8008a34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f10:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <xTaskRemoveFromEventList+0xb8>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d903      	bls.n	8009f20 <xTaskRemoveFromEventList+0x60>
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1c:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <xTaskRemoveFromEventList+0xb8>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <xTaskRemoveFromEventList+0xbc>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fe fd1f 	bl	800897a <vListInsertEnd>
 8009f3c:	e005      	b.n	8009f4a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	3318      	adds	r3, #24
 8009f42:	4619      	mov	r1, r3
 8009f44:	480e      	ldr	r0, [pc, #56]	; (8009f80 <xTaskRemoveFromEventList+0xc0>)
 8009f46:	f7fe fd18 	bl	800897a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	4b0d      	ldr	r3, [pc, #52]	; (8009f84 <xTaskRemoveFromEventList+0xc4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d905      	bls.n	8009f64 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <xTaskRemoveFromEventList+0xc8>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	e001      	b.n	8009f68 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f68:	697b      	ldr	r3, [r7, #20]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2000127c 	.word	0x2000127c
 8009f78:	2000125c 	.word	0x2000125c
 8009f7c:	20000d84 	.word	0x20000d84
 8009f80:	20001214 	.word	0x20001214
 8009f84:	20000d80 	.word	0x20000d80
 8009f88:	20001268 	.word	0x20001268

08009f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <vTaskInternalSetTimeOutState+0x24>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <vTaskInternalSetTimeOutState+0x28>)
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	605a      	str	r2, [r3, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	2000126c 	.word	0x2000126c
 8009fb4:	20001258 	.word	0x20001258

08009fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10c      	bne.n	8009fe2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	b672      	cpsid	i
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	b662      	cpsie	i
 8009fdc:	613b      	str	r3, [r7, #16]
}
 8009fde:	bf00      	nop
 8009fe0:	e7fe      	b.n	8009fe0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10c      	bne.n	800a002 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	b672      	cpsid	i
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	b662      	cpsie	i
 8009ffc:	60fb      	str	r3, [r7, #12]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a002:	f000 fe73 	bl	800acec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a006:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <xTaskCheckForTimeOut+0xc4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	69ba      	ldr	r2, [r7, #24]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a01e:	d102      	bne.n	800a026 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]
 800a024:	e023      	b.n	800a06e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4b15      	ldr	r3, [pc, #84]	; (800a080 <xTaskCheckForTimeOut+0xc8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d007      	beq.n	800a042 <xTaskCheckForTimeOut+0x8a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d302      	bcc.n	800a042 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	e015      	b.n	800a06e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d20b      	bcs.n	800a064 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1ad2      	subs	r2, r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff ff97 	bl	8009f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	e004      	b.n	800a06e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a06a:	2301      	movs	r3, #1
 800a06c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a06e:	f000 fe71 	bl	800ad54 <vPortExitCritical>

	return xReturn;
 800a072:	69fb      	ldr	r3, [r7, #28]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3720      	adds	r7, #32
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20001258 	.word	0x20001258
 800a080:	2000126c 	.word	0x2000126c

0800a084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a088:	4b03      	ldr	r3, [pc, #12]	; (800a098 <vTaskMissedYield+0x14>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]
}
 800a08e:	bf00      	nop
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20001268 	.word	0x20001268

0800a09c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0a4:	f000 f852 	bl	800a14c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <prvIdleTask+0x28>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d9f9      	bls.n	800a0a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0b0:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <prvIdleTask+0x2c>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0c0:	e7f0      	b.n	800a0a4 <prvIdleTask+0x8>
 800a0c2:	bf00      	nop
 800a0c4:	20000d84 	.word	0x20000d84
 800a0c8:	e000ed04 	.word	0xe000ed04

0800a0cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	e00c      	b.n	800a0f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4a12      	ldr	r2, [pc, #72]	; (800a12c <prvInitialiseTaskLists+0x60>)
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fc1a 	bl	8008920 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b37      	cmp	r3, #55	; 0x37
 800a0f6:	d9ef      	bls.n	800a0d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0f8:	480d      	ldr	r0, [pc, #52]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a0fa:	f7fe fc11 	bl	8008920 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0fe:	480d      	ldr	r0, [pc, #52]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a100:	f7fe fc0e 	bl	8008920 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a104:	480c      	ldr	r0, [pc, #48]	; (800a138 <prvInitialiseTaskLists+0x6c>)
 800a106:	f7fe fc0b 	bl	8008920 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a10a:	480c      	ldr	r0, [pc, #48]	; (800a13c <prvInitialiseTaskLists+0x70>)
 800a10c:	f7fe fc08 	bl	8008920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a110:	480b      	ldr	r0, [pc, #44]	; (800a140 <prvInitialiseTaskLists+0x74>)
 800a112:	f7fe fc05 	bl	8008920 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <prvInitialiseTaskLists+0x78>)
 800a118:	4a05      	ldr	r2, [pc, #20]	; (800a130 <prvInitialiseTaskLists+0x64>)
 800a11a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <prvInitialiseTaskLists+0x7c>)
 800a11e:	4a05      	ldr	r2, [pc, #20]	; (800a134 <prvInitialiseTaskLists+0x68>)
 800a120:	601a      	str	r2, [r3, #0]
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000d84 	.word	0x20000d84
 800a130:	200011e4 	.word	0x200011e4
 800a134:	200011f8 	.word	0x200011f8
 800a138:	20001214 	.word	0x20001214
 800a13c:	20001228 	.word	0x20001228
 800a140:	20001240 	.word	0x20001240
 800a144:	2000120c 	.word	0x2000120c
 800a148:	20001210 	.word	0x20001210

0800a14c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a152:	e019      	b.n	800a188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a154:	f000 fdca 	bl	800acec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a158:	4b10      	ldr	r3, [pc, #64]	; (800a19c <prvCheckTasksWaitingTermination+0x50>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4618      	mov	r0, r3
 800a166:	f7fe fc65 	bl	8008a34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3b01      	subs	r3, #1
 800a170:	4a0b      	ldr	r2, [pc, #44]	; (800a1a0 <prvCheckTasksWaitingTermination+0x54>)
 800a172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a174:	4b0b      	ldr	r3, [pc, #44]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3b01      	subs	r3, #1
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a17c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a17e:	f000 fde9 	bl	800ad54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f810 	bl	800a1a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <prvCheckTasksWaitingTermination+0x58>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1e1      	bne.n	800a154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20001228 	.word	0x20001228
 800a1a0:	20001254 	.word	0x20001254
 800a1a4:	2000123c 	.word	0x2000123c

0800a1a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3354      	adds	r3, #84	; 0x54
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f001 fa8d 	bl	800b6d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 ff85 	bl	800b0d8 <vPortFree>
				vPortFree( pxTCB );
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 ff82 	bl	800b0d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1d4:	e01a      	b.n	800a20c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d103      	bne.n	800a1e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 ff79 	bl	800b0d8 <vPortFree>
	}
 800a1e6:	e011      	b.n	800a20c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d00c      	beq.n	800a20c <prvDeleteTCB+0x64>
	__asm volatile
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	b672      	cpsid	i
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	b662      	cpsie	i
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <prvDeleteTCB+0x62>
	}
 800a20c:	bf00      	nop
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a21a:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <prvResetNextTaskUnblockTime+0x38>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d104      	bne.n	800a22e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a224:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <prvResetNextTaskUnblockTime+0x3c>)
 800a226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a22a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a22c:	e008      	b.n	800a240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22e:	4b07      	ldr	r3, [pc, #28]	; (800a24c <prvResetNextTaskUnblockTime+0x38>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	4a04      	ldr	r2, [pc, #16]	; (800a250 <prvResetNextTaskUnblockTime+0x3c>)
 800a23e:	6013      	str	r3, [r2, #0]
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	2000120c 	.word	0x2000120c
 800a250:	20001274 	.word	0x20001274

0800a254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <xTaskGetSchedulerState+0x34>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a262:	2301      	movs	r3, #1
 800a264:	607b      	str	r3, [r7, #4]
 800a266:	e008      	b.n	800a27a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a268:	4b08      	ldr	r3, [pc, #32]	; (800a28c <xTaskGetSchedulerState+0x38>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d102      	bne.n	800a276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a270:	2302      	movs	r3, #2
 800a272:	607b      	str	r3, [r7, #4]
 800a274:	e001      	b.n	800a27a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a276:	2300      	movs	r3, #0
 800a278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a27a:	687b      	ldr	r3, [r7, #4]
	}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	20001260 	.word	0x20001260
 800a28c:	2000127c 	.word	0x2000127c

0800a290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d05a      	beq.n	800a35c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2a6:	4b30      	ldr	r3, [pc, #192]	; (800a368 <xTaskPriorityDisinherit+0xd8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d00c      	beq.n	800a2ca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	b672      	cpsid	i
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	b662      	cpsie	i
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	e7fe      	b.n	800a2c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10c      	bne.n	800a2ec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	b672      	cpsid	i
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	b662      	cpsie	i
 800a2e6:	60bb      	str	r3, [r7, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	e7fe      	b.n	800a2ea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f0:	1e5a      	subs	r2, r3, #1
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d02c      	beq.n	800a35c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a306:	2b00      	cmp	r3, #0
 800a308:	d128      	bne.n	800a35c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fb90 	bl	8008a34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <xTaskPriorityDisinherit+0xdc>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d903      	bls.n	800a33c <xTaskPriorityDisinherit+0xac>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a338:	4a0c      	ldr	r2, [pc, #48]	; (800a36c <xTaskPriorityDisinherit+0xdc>)
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4a09      	ldr	r2, [pc, #36]	; (800a370 <xTaskPriorityDisinherit+0xe0>)
 800a34a:	441a      	add	r2, r3
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	3304      	adds	r3, #4
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fe fb11 	bl	800897a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a358:	2301      	movs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a35c:	697b      	ldr	r3, [r7, #20]
	}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000d80 	.word	0x20000d80
 800a36c:	2000125c 	.word	0x2000125c
 800a370:	20000d84 	.word	0x20000d84

0800a374 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a37e:	4b21      	ldr	r3, [pc, #132]	; (800a404 <prvAddCurrentTaskToDelayedList+0x90>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a384:	4b20      	ldr	r3, [pc, #128]	; (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fb52 	bl	8008a34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a396:	d10a      	bne.n	800a3ae <prvAddCurrentTaskToDelayedList+0x3a>
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d007      	beq.n	800a3ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39e:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4819      	ldr	r0, [pc, #100]	; (800a40c <prvAddCurrentTaskToDelayedList+0x98>)
 800a3a8:	f7fe fae7 	bl	800897a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3ac:	e026      	b.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3b6:	4b14      	ldr	r3, [pc, #80]	; (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d209      	bcs.n	800a3da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c6:	4b12      	ldr	r3, [pc, #72]	; (800a410 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	; (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7fe faf5 	bl	80089c2 <vListInsert>
}
 800a3d8:	e010      	b.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3da:	4b0e      	ldr	r3, [pc, #56]	; (800a414 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f7fe faeb 	bl	80089c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d202      	bcs.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3f6:	4a08      	ldr	r2, [pc, #32]	; (800a418 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6013      	str	r3, [r2, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20001258 	.word	0x20001258
 800a408:	20000d80 	.word	0x20000d80
 800a40c:	20001240 	.word	0x20001240
 800a410:	20001210 	.word	0x20001210
 800a414:	2000120c 	.word	0x2000120c
 800a418:	20001274 	.word	0x20001274

0800a41c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	; 0x28
 800a420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a422:	2300      	movs	r3, #0
 800a424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a426:	f000 fb15 	bl	800aa54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a42a:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <xTimerCreateTimerTask+0x84>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d021      	beq.n	800a476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a43a:	1d3a      	adds	r2, r7, #4
 800a43c:	f107 0108 	add.w	r1, r7, #8
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fa51 	bl	80088ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	9202      	str	r2, [sp, #8]
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	2302      	movs	r3, #2
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	460a      	mov	r2, r1
 800a45c:	4911      	ldr	r1, [pc, #68]	; (800a4a4 <xTimerCreateTimerTask+0x88>)
 800a45e:	4812      	ldr	r0, [pc, #72]	; (800a4a8 <xTimerCreateTimerTask+0x8c>)
 800a460:	f7ff f890 	bl	8009584 <xTaskCreateStatic>
 800a464:	4603      	mov	r3, r0
 800a466:	4a11      	ldr	r2, [pc, #68]	; (800a4ac <xTimerCreateTimerTask+0x90>)
 800a468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a46a:	4b10      	ldr	r3, [pc, #64]	; (800a4ac <xTimerCreateTimerTask+0x90>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a472:	2301      	movs	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10c      	bne.n	800a496 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	b672      	cpsid	i
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	b662      	cpsie	i
 800a490:	613b      	str	r3, [r7, #16]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a496:	697b      	ldr	r3, [r7, #20]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	200012b0 	.word	0x200012b0
 800a4a4:	0800c800 	.word	0x0800c800
 800a4a8:	0800a5ed 	.word	0x0800a5ed
 800a4ac:	200012b4 	.word	0x200012b4

0800a4b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	; 0x28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10c      	bne.n	800a4e2 <xTimerGenericCommand+0x32>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	b672      	cpsid	i
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	b662      	cpsie	i
 800a4dc:	623b      	str	r3, [r7, #32]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <xTimerGenericCommand+0x9c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d02a      	beq.n	800a540 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b05      	cmp	r3, #5
 800a4fa:	dc18      	bgt.n	800a52e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4fc:	f7ff feaa 	bl	800a254 <xTaskGetSchedulerState>
 800a500:	4603      	mov	r3, r0
 800a502:	2b02      	cmp	r3, #2
 800a504:	d109      	bne.n	800a51a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a506:	4b11      	ldr	r3, [pc, #68]	; (800a54c <xTimerGenericCommand+0x9c>)
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	f107 0110 	add.w	r1, r7, #16
 800a50e:	2300      	movs	r3, #0
 800a510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a512:	f7fe fc3d 	bl	8008d90 <xQueueGenericSend>
 800a516:	6278      	str	r0, [r7, #36]	; 0x24
 800a518:	e012      	b.n	800a540 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a51a:	4b0c      	ldr	r3, [pc, #48]	; (800a54c <xTimerGenericCommand+0x9c>)
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f107 0110 	add.w	r1, r7, #16
 800a522:	2300      	movs	r3, #0
 800a524:	2200      	movs	r2, #0
 800a526:	f7fe fc33 	bl	8008d90 <xQueueGenericSend>
 800a52a:	6278      	str	r0, [r7, #36]	; 0x24
 800a52c:	e008      	b.n	800a540 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <xTimerGenericCommand+0x9c>)
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	f107 0110 	add.w	r1, r7, #16
 800a536:	2300      	movs	r3, #0
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	f7fe fd2f 	bl	8008f9c <xQueueGenericSendFromISR>
 800a53e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a542:	4618      	mov	r0, r3
 800a544:	3728      	adds	r7, #40	; 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	200012b0 	.word	0x200012b0

0800a550 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55a:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <prvProcessExpiredTimer+0x98>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	3304      	adds	r3, #4
 800a568:	4618      	mov	r0, r3
 800a56a:	f7fe fa63 	bl	8008a34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d024      	beq.n	800a5c6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	699a      	ldr	r2, [r3, #24]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	18d1      	adds	r1, r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	6978      	ldr	r0, [r7, #20]
 800a58a:	f000 f8d3 	bl	800a734 <prvInsertTimerInActiveList>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d021      	beq.n	800a5d8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a594:	2300      	movs	r3, #0
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	2100      	movs	r1, #0
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f7ff ff86 	bl	800a4b0 <xTimerGenericCommand>
 800a5a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d115      	bne.n	800a5d8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	b672      	cpsid	i
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	b662      	cpsie	i
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5cc:	f023 0301 	bic.w	r3, r3, #1
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	6978      	ldr	r0, [r7, #20]
 800a5de:	4798      	blx	r3
}
 800a5e0:	bf00      	nop
 800a5e2:	3718      	adds	r7, #24
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200012a8 	.word	0x200012a8

0800a5ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5f4:	f107 0308 	add.w	r3, r7, #8
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 f857 	bl	800a6ac <prvGetNextExpireTime>
 800a5fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4619      	mov	r1, r3
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f803 	bl	800a610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a60a:	f000 f8d5 	bl	800a7b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a60e:	e7f1      	b.n	800a5f4 <prvTimerTask+0x8>

0800a610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a61a:	f7ff fa1d 	bl	8009a58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f866 	bl	800a6f4 <prvSampleTimeNow>
 800a628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d130      	bne.n	800a692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <prvProcessTimerOrBlockTask+0x3c>
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d806      	bhi.n	800a64c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a63e:	f7ff fa19 	bl	8009a74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff83 	bl	800a550 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a64a:	e024      	b.n	800a696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a652:	4b13      	ldr	r3, [pc, #76]	; (800a6a0 <prvProcessTimerOrBlockTask+0x90>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <prvProcessTimerOrBlockTask+0x50>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <prvProcessTimerOrBlockTask+0x52>
 800a660:	2300      	movs	r3, #0
 800a662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a664:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <prvProcessTimerOrBlockTask+0x94>)
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	f7fe ff53 	bl	800951c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a676:	f7ff f9fd 	bl	8009a74 <xTaskResumeAll>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <prvProcessTimerOrBlockTask+0x98>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
}
 800a690:	e001      	b.n	800a696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a692:	f7ff f9ef 	bl	8009a74 <xTaskResumeAll>
}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200012ac 	.word	0x200012ac
 800a6a4:	200012b0 	.word	0x200012b0
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <prvGetNextExpireTime+0x44>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <prvGetNextExpireTime+0x16>
 800a6be:	2201      	movs	r2, #1
 800a6c0:	e000      	b.n	800a6c4 <prvGetNextExpireTime+0x18>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d105      	bne.n	800a6dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d0:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <prvGetNextExpireTime+0x44>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	e001      	b.n	800a6e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	200012a8 	.word	0x200012a8

0800a6f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6fc:	f7ff fa5a 	bl	8009bb4 <xTaskGetTickCount>
 800a700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a702:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <prvSampleTimeNow+0x3c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d205      	bcs.n	800a718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a70c:	f000 f93c 	bl	800a988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e002      	b.n	800a71e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a71e:	4a04      	ldr	r2, [pc, #16]	; (800a730 <prvSampleTimeNow+0x3c>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	200012b8 	.word	0x200012b8

0800a734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d812      	bhi.n	800a780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	429a      	cmp	r2, r3
 800a766:	d302      	bcc.n	800a76e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	e01b      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a76e:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <prvInsertTimerInActiveList+0x7c>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3304      	adds	r3, #4
 800a776:	4619      	mov	r1, r3
 800a778:	4610      	mov	r0, r2
 800a77a:	f7fe f922 	bl	80089c2 <vListInsert>
 800a77e:	e012      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d206      	bcs.n	800a796 <prvInsertTimerInActiveList+0x62>
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	e007      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <prvInsertTimerInActiveList+0x80>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe f90e 	bl	80089c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7a6:	697b      	ldr	r3, [r7, #20]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200012ac 	.word	0x200012ac
 800a7b4:	200012a8 	.word	0x200012a8

0800a7b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08e      	sub	sp, #56	; 0x38
 800a7bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7be:	e0d0      	b.n	800a962 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	da1a      	bge.n	800a7fc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10c      	bne.n	800a7ec <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	b672      	cpsid	i
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	b662      	cpsie	i
 800a7e6:	61fb      	str	r3, [r7, #28]
}
 800a7e8:	bf00      	nop
 800a7ea:	e7fe      	b.n	800a7ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f2:	6850      	ldr	r0, [r2, #4]
 800a7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7f6:	6892      	ldr	r2, [r2, #8]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f2c0 80af 	blt.w	800a962 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d004      	beq.n	800a81a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f7fe f90d 	bl	8008a34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a81a:	463b      	mov	r3, r7
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff ff69 	bl	800a6f4 <prvSampleTimeNow>
 800a822:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b09      	cmp	r3, #9
 800a828:	f200 809a 	bhi.w	800a960 <prvProcessReceivedCommands+0x1a8>
 800a82c:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <prvProcessReceivedCommands+0x7c>)
 800a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a832:	bf00      	nop
 800a834:	0800a85d 	.word	0x0800a85d
 800a838:	0800a85d 	.word	0x0800a85d
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a8d5 	.word	0x0800a8d5
 800a844:	0800a8e9 	.word	0x0800a8e9
 800a848:	0800a937 	.word	0x0800a937
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a85d 	.word	0x0800a85d
 800a854:	0800a8d5 	.word	0x0800a8d5
 800a858:	0800a8e9 	.word	0x0800a8e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	b2da      	uxtb	r2, r3
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	18d1      	adds	r1, r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87c:	f7ff ff5a 	bl	800a734 <prvInsertTimerInActiveList>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d06d      	beq.n	800a962 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d062      	beq.n	800a962 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	441a      	add	r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ae:	f7ff fdff 	bl	800a4b0 <xTimerGenericCommand>
 800a8b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d153      	bne.n	800a962 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	b672      	cpsid	i
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	b662      	cpsie	i
 800a8ce:	61bb      	str	r3, [r7, #24]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8da:	f023 0301 	bic.w	r3, r3, #1
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a8e6:	e03c      	b.n	800a962 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10c      	bne.n	800a922 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	b672      	cpsid	i
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	b662      	cpsie	i
 800a91c:	617b      	str	r3, [r7, #20]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	18d1      	adds	r1, r2, r3
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a930:	f7ff ff00 	bl	800a734 <prvInsertTimerInActiveList>
					break;
 800a934:	e015      	b.n	800a962 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a93c:	f003 0302 	and.w	r3, r3, #2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d103      	bne.n	800a94c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a946:	f000 fbc7 	bl	800b0d8 <vPortFree>
 800a94a:	e00a      	b.n	800a962 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a952:	f023 0301 	bic.w	r3, r3, #1
 800a956:	b2da      	uxtb	r2, r3
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a95e:	e000      	b.n	800a962 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a962:	4b08      	ldr	r3, [pc, #32]	; (800a984 <prvProcessReceivedCommands+0x1cc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	1d39      	adds	r1, r7, #4
 800a968:	2200      	movs	r2, #0
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fbb6 	bl	80090dc <xQueueReceive>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	f47f af24 	bne.w	800a7c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	3730      	adds	r7, #48	; 0x30
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	200012b0 	.word	0x200012b0

0800a988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a98e:	e04a      	b.n	800aa26 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a990:	4b2e      	ldr	r3, [pc, #184]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a99a:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe f843 	bl	8008a34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d030      	beq.n	800aa26 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d90e      	bls.n	800a9f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9e2:	4b1a      	ldr	r3, [pc, #104]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fd ffe8 	bl	80089c2 <vListInsert>
 800a9f2:	e018      	b.n	800aa26 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7ff fd56 	bl	800a4b0 <xTimerGenericCommand>
 800aa04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10c      	bne.n	800aa26 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	b672      	cpsid	i
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	b662      	cpsie	i
 800aa20:	603b      	str	r3, [r7, #0]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa26:	4b09      	ldr	r3, [pc, #36]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1af      	bne.n	800a990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa36:	4b06      	ldr	r3, [pc, #24]	; (800aa50 <prvSwitchTimerLists+0xc8>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a04      	ldr	r2, [pc, #16]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800aa3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa3e:	4a04      	ldr	r2, [pc, #16]	; (800aa50 <prvSwitchTimerLists+0xc8>)
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	6013      	str	r3, [r2, #0]
}
 800aa44:	bf00      	nop
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	200012a8 	.word	0x200012a8
 800aa50:	200012ac 	.word	0x200012ac

0800aa54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa5a:	f000 f947 	bl	800acec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa5e:	4b15      	ldr	r3, [pc, #84]	; (800aab4 <prvCheckForValidListAndQueue+0x60>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d120      	bne.n	800aaa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa66:	4814      	ldr	r0, [pc, #80]	; (800aab8 <prvCheckForValidListAndQueue+0x64>)
 800aa68:	f7fd ff5a 	bl	8008920 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa6c:	4813      	ldr	r0, [pc, #76]	; (800aabc <prvCheckForValidListAndQueue+0x68>)
 800aa6e:	f7fd ff57 	bl	8008920 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa72:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <prvCheckForValidListAndQueue+0x6c>)
 800aa74:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <prvCheckForValidListAndQueue+0x64>)
 800aa76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa78:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <prvCheckForValidListAndQueue+0x70>)
 800aa7a:	4a10      	ldr	r2, [pc, #64]	; (800aabc <prvCheckForValidListAndQueue+0x68>)
 800aa7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa7e:	2300      	movs	r3, #0
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <prvCheckForValidListAndQueue+0x74>)
 800aa84:	4a11      	ldr	r2, [pc, #68]	; (800aacc <prvCheckForValidListAndQueue+0x78>)
 800aa86:	2110      	movs	r1, #16
 800aa88:	200a      	movs	r0, #10
 800aa8a:	f7fe f867 	bl	8008b5c <xQueueGenericCreateStatic>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	4a08      	ldr	r2, [pc, #32]	; (800aab4 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa94:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <prvCheckForValidListAndQueue+0x60>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d005      	beq.n	800aaa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <prvCheckForValidListAndQueue+0x60>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	490b      	ldr	r1, [pc, #44]	; (800aad0 <prvCheckForValidListAndQueue+0x7c>)
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fd10 	bl	80094c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaa8:	f000 f954 	bl	800ad54 <vPortExitCritical>
}
 800aaac:	bf00      	nop
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	200012b0 	.word	0x200012b0
 800aab8:	20001280 	.word	0x20001280
 800aabc:	20001294 	.word	0x20001294
 800aac0:	200012a8 	.word	0x200012a8
 800aac4:	200012ac 	.word	0x200012ac
 800aac8:	2000135c 	.word	0x2000135c
 800aacc:	200012bc 	.word	0x200012bc
 800aad0:	0800c808 	.word	0x0800c808

0800aad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aad4:	b480      	push	{r7}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3b04      	subs	r3, #4
 800aae4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aaec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3b04      	subs	r3, #4
 800aaf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f023 0201 	bic.w	r2, r3, #1
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3b04      	subs	r3, #4
 800ab02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab04:	4a0c      	ldr	r2, [pc, #48]	; (800ab38 <pxPortInitialiseStack+0x64>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3b14      	subs	r3, #20
 800ab0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3b04      	subs	r3, #4
 800ab1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f06f 0202 	mvn.w	r2, #2
 800ab22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3b20      	subs	r3, #32
 800ab28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	0800ab3d 	.word	0x0800ab3d

0800ab3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab46:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <prvTaskExitError+0x5c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab4e:	d00c      	beq.n	800ab6a <prvTaskExitError+0x2e>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	b672      	cpsid	i
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	b662      	cpsie	i
 800ab64:	60fb      	str	r3, [r7, #12]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <prvTaskExitError+0x2c>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	b672      	cpsid	i
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	b662      	cpsie	i
 800ab7e:	60bb      	str	r3, [r7, #8]
}
 800ab80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab82:	bf00      	nop
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d0fc      	beq.n	800ab84 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab8a:	bf00      	nop
 800ab8c:	bf00      	nop
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	2000002c 	.word	0x2000002c
 800ab9c:	00000000 	.word	0x00000000

0800aba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <pxCurrentTCBConst2>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	6808      	ldr	r0, [r1, #0]
 800aba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	f380 8809 	msr	PSP, r0
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8811 	msr	BASEPRI, r0
 800abba:	4770      	bx	lr
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst2>:
 800abc0:	20000d80 	.word	0x20000d80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abc8:	4808      	ldr	r0, [pc, #32]	; (800abec <prvPortStartFirstTask+0x24>)
 800abca:	6800      	ldr	r0, [r0, #0]
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f380 8808 	msr	MSP, r0
 800abd2:	f04f 0000 	mov.w	r0, #0
 800abd6:	f380 8814 	msr	CONTROL, r0
 800abda:	b662      	cpsie	i
 800abdc:	b661      	cpsie	f
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	df00      	svc	0
 800abe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abea:	bf00      	nop
 800abec:	e000ed08 	.word	0xe000ed08

0800abf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abf6:	4b37      	ldr	r3, [pc, #220]	; (800acd4 <xPortStartScheduler+0xe4>)
 800abf8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	22ff      	movs	r2, #255	; 0xff
 800ac06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4b2f      	ldr	r3, [pc, #188]	; (800acd8 <xPortStartScheduler+0xe8>)
 800ac1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac1e:	4b2f      	ldr	r3, [pc, #188]	; (800acdc <xPortStartScheduler+0xec>)
 800ac20:	2207      	movs	r2, #7
 800ac22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac24:	e009      	b.n	800ac3a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ac26:	4b2d      	ldr	r3, [pc, #180]	; (800acdc <xPortStartScheduler+0xec>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	4a2b      	ldr	r2, [pc, #172]	; (800acdc <xPortStartScheduler+0xec>)
 800ac2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac42:	2b80      	cmp	r3, #128	; 0x80
 800ac44:	d0ef      	beq.n	800ac26 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac46:	4b25      	ldr	r3, [pc, #148]	; (800acdc <xPortStartScheduler+0xec>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f1c3 0307 	rsb	r3, r3, #7
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d00c      	beq.n	800ac6c <xPortStartScheduler+0x7c>
	__asm volatile
 800ac52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac56:	b672      	cpsid	i
 800ac58:	f383 8811 	msr	BASEPRI, r3
 800ac5c:	f3bf 8f6f 	isb	sy
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	b662      	cpsie	i
 800ac66:	60bb      	str	r3, [r7, #8]
}
 800ac68:	bf00      	nop
 800ac6a:	e7fe      	b.n	800ac6a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac6c:	4b1b      	ldr	r3, [pc, #108]	; (800acdc <xPortStartScheduler+0xec>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	4a1a      	ldr	r2, [pc, #104]	; (800acdc <xPortStartScheduler+0xec>)
 800ac74:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac76:	4b19      	ldr	r3, [pc, #100]	; (800acdc <xPortStartScheduler+0xec>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac7e:	4a17      	ldr	r2, [pc, #92]	; (800acdc <xPortStartScheduler+0xec>)
 800ac80:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac8a:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <xPortStartScheduler+0xf0>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a14      	ldr	r2, [pc, #80]	; (800ace0 <xPortStartScheduler+0xf0>)
 800ac90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac96:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <xPortStartScheduler+0xf0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a11      	ldr	r2, [pc, #68]	; (800ace0 <xPortStartScheduler+0xf0>)
 800ac9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aca0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aca2:	f000 f8dd 	bl	800ae60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aca6:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <xPortStartScheduler+0xf4>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acac:	f000 f8fc 	bl	800aea8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <xPortStartScheduler+0xf8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <xPortStartScheduler+0xf8>)
 800acb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800acba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acbc:	f7ff ff84 	bl	800abc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acc0:	f7ff f844 	bl	8009d4c <vTaskSwitchContext>
	prvTaskExitError();
 800acc4:	f7ff ff3a 	bl	800ab3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	e000e400 	.word	0xe000e400
 800acd8:	200013ac 	.word	0x200013ac
 800acdc:	200013b0 	.word	0x200013b0
 800ace0:	e000ed20 	.word	0xe000ed20
 800ace4:	2000002c 	.word	0x2000002c
 800ace8:	e000ef34 	.word	0xe000ef34

0800acec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
	__asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	b672      	cpsid	i
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	b662      	cpsie	i
 800ad06:	607b      	str	r3, [r7, #4]
}
 800ad08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad0a:	4b10      	ldr	r3, [pc, #64]	; (800ad4c <vPortEnterCritical+0x60>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	4a0e      	ldr	r2, [pc, #56]	; (800ad4c <vPortEnterCritical+0x60>)
 800ad12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad14:	4b0d      	ldr	r3, [pc, #52]	; (800ad4c <vPortEnterCritical+0x60>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d111      	bne.n	800ad40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <vPortEnterCritical+0x64>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00c      	beq.n	800ad40 <vPortEnterCritical+0x54>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	b672      	cpsid	i
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	b662      	cpsie	i
 800ad3a:	603b      	str	r3, [r7, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	e7fe      	b.n	800ad3e <vPortEnterCritical+0x52>
	}
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	2000002c 	.word	0x2000002c
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad5a:	4b13      	ldr	r3, [pc, #76]	; (800ada8 <vPortExitCritical+0x54>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10c      	bne.n	800ad7c <vPortExitCritical+0x28>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	b672      	cpsid	i
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	b662      	cpsie	i
 800ad76:	607b      	str	r3, [r7, #4]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <vPortExitCritical+0x54>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <vPortExitCritical+0x54>)
 800ad84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad86:	4b08      	ldr	r3, [pc, #32]	; (800ada8 <vPortExitCritical+0x54>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d105      	bne.n	800ad9a <vPortExitCritical+0x46>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	f383 8811 	msr	BASEPRI, r3
}
 800ad98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	2000002c 	.word	0x2000002c
 800adac:	00000000 	.word	0x00000000

0800adb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adb0:	f3ef 8009 	mrs	r0, PSP
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	4b15      	ldr	r3, [pc, #84]	; (800ae10 <pxCurrentTCBConst>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	f01e 0f10 	tst.w	lr, #16
 800adc0:	bf08      	it	eq
 800adc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800add0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800add4:	b672      	cpsid	i
 800add6:	f380 8811 	msr	BASEPRI, r0
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	b662      	cpsie	i
 800ade4:	f7fe ffb2 	bl	8009d4c <vTaskSwitchContext>
 800ade8:	f04f 0000 	mov.w	r0, #0
 800adec:	f380 8811 	msr	BASEPRI, r0
 800adf0:	bc09      	pop	{r0, r3}
 800adf2:	6819      	ldr	r1, [r3, #0]
 800adf4:	6808      	ldr	r0, [r1, #0]
 800adf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	f01e 0f10 	tst.w	lr, #16
 800adfe:	bf08      	it	eq
 800ae00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae04:	f380 8809 	msr	PSP, r0
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop

0800ae10 <pxCurrentTCBConst>:
 800ae10:	20000d80 	.word	0x20000d80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop

0800ae18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	b672      	cpsid	i
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	b662      	cpsie	i
 800ae32:	607b      	str	r3, [r7, #4]
}
 800ae34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae36:	f7fe fecd 	bl	8009bd4 <xTaskIncrementTick>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae40:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <SysTick_Handler+0x44>)
 800ae42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	2300      	movs	r3, #0
 800ae4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	f383 8811 	msr	BASEPRI, r3
}
 800ae52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	e000ed04 	.word	0xe000ed04

0800ae60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae64:	4b0b      	ldr	r3, [pc, #44]	; (800ae94 <vPortSetupTimerInterrupt+0x34>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae6a:	4b0b      	ldr	r3, [pc, #44]	; (800ae98 <vPortSetupTimerInterrupt+0x38>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae70:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <vPortSetupTimerInterrupt+0x3c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a0a      	ldr	r2, [pc, #40]	; (800aea0 <vPortSetupTimerInterrupt+0x40>)
 800ae76:	fba2 2303 	umull	r2, r3, r2, r3
 800ae7a:	099b      	lsrs	r3, r3, #6
 800ae7c:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <vPortSetupTimerInterrupt+0x44>)
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae82:	4b04      	ldr	r3, [pc, #16]	; (800ae94 <vPortSetupTimerInterrupt+0x34>)
 800ae84:	2207      	movs	r2, #7
 800ae86:	601a      	str	r2, [r3, #0]
}
 800ae88:	bf00      	nop
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	e000e010 	.word	0xe000e010
 800ae98:	e000e018 	.word	0xe000e018
 800ae9c:	20000020 	.word	0x20000020
 800aea0:	10624dd3 	.word	0x10624dd3
 800aea4:	e000e014 	.word	0xe000e014

0800aea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aeb8 <vPortEnableVFP+0x10>
 800aeac:	6801      	ldr	r1, [r0, #0]
 800aeae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeb2:	6001      	str	r1, [r0, #0]
 800aeb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aeb6:	bf00      	nop
 800aeb8:	e000ed88 	.word	0xe000ed88

0800aebc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aec2:	f3ef 8305 	mrs	r3, IPSR
 800aec6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b0f      	cmp	r3, #15
 800aecc:	d916      	bls.n	800aefc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aece:	4a19      	ldr	r2, [pc, #100]	; (800af34 <vPortValidateInterruptPriority+0x78>)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4413      	add	r3, r2
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <vPortValidateInterruptPriority+0x7c>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	7afa      	ldrb	r2, [r7, #11]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d20c      	bcs.n	800aefc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	b672      	cpsid	i
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	b662      	cpsie	i
 800aef6:	607b      	str	r3, [r7, #4]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <vPortValidateInterruptPriority+0x80>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af04:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <vPortValidateInterruptPriority+0x84>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d90c      	bls.n	800af26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800af0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af10:	b672      	cpsid	i
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	b662      	cpsie	i
 800af20:	603b      	str	r3, [r7, #0]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <vPortValidateInterruptPriority+0x68>
	}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	e000e3f0 	.word	0xe000e3f0
 800af38:	200013ac 	.word	0x200013ac
 800af3c:	e000ed0c 	.word	0xe000ed0c
 800af40:	200013b0 	.word	0x200013b0

0800af44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08a      	sub	sp, #40	; 0x28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af50:	f7fe fd82 	bl	8009a58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af54:	4b5b      	ldr	r3, [pc, #364]	; (800b0c4 <pvPortMalloc+0x180>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af5c:	f000 f91a 	bl	800b194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af60:	4b59      	ldr	r3, [pc, #356]	; (800b0c8 <pvPortMalloc+0x184>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4013      	ands	r3, r2
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f040 8092 	bne.w	800b092 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01f      	beq.n	800afb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800af74:	2208      	movs	r2, #8
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4413      	add	r3, r2
 800af7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f003 0307 	and.w	r3, r3, #7
 800af82:	2b00      	cmp	r3, #0
 800af84:	d016      	beq.n	800afb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f023 0307 	bic.w	r3, r3, #7
 800af8c:	3308      	adds	r3, #8
 800af8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00c      	beq.n	800afb4 <pvPortMalloc+0x70>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	b672      	cpsid	i
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	b662      	cpsie	i
 800afae:	617b      	str	r3, [r7, #20]
}
 800afb0:	bf00      	nop
 800afb2:	e7fe      	b.n	800afb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d06b      	beq.n	800b092 <pvPortMalloc+0x14e>
 800afba:	4b44      	ldr	r3, [pc, #272]	; (800b0cc <pvPortMalloc+0x188>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d866      	bhi.n	800b092 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afc4:	4b42      	ldr	r3, [pc, #264]	; (800b0d0 <pvPortMalloc+0x18c>)
 800afc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afc8:	4b41      	ldr	r3, [pc, #260]	; (800b0d0 <pvPortMalloc+0x18c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afce:	e004      	b.n	800afda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d903      	bls.n	800afec <pvPortMalloc+0xa8>
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1f1      	bne.n	800afd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afec:	4b35      	ldr	r3, [pc, #212]	; (800b0c4 <pvPortMalloc+0x180>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d04d      	beq.n	800b092 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2208      	movs	r2, #8
 800affc:	4413      	add	r3, r2
 800affe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	685a      	ldr	r2, [r3, #4]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	1ad2      	subs	r2, r2, r3
 800b010:	2308      	movs	r3, #8
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	429a      	cmp	r2, r3
 800b016:	d921      	bls.n	800b05c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00c      	beq.n	800b044 <pvPortMalloc+0x100>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	b672      	cpsid	i
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	b662      	cpsie	i
 800b03e:	613b      	str	r3, [r7, #16]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b056:	69b8      	ldr	r0, [r7, #24]
 800b058:	f000 f8fe 	bl	800b258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b05c:	4b1b      	ldr	r3, [pc, #108]	; (800b0cc <pvPortMalloc+0x188>)
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	4a19      	ldr	r2, [pc, #100]	; (800b0cc <pvPortMalloc+0x188>)
 800b068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b06a:	4b18      	ldr	r3, [pc, #96]	; (800b0cc <pvPortMalloc+0x188>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b19      	ldr	r3, [pc, #100]	; (800b0d4 <pvPortMalloc+0x190>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d203      	bcs.n	800b07e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b076:	4b15      	ldr	r3, [pc, #84]	; (800b0cc <pvPortMalloc+0x188>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a16      	ldr	r2, [pc, #88]	; (800b0d4 <pvPortMalloc+0x190>)
 800b07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <pvPortMalloc+0x184>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	431a      	orrs	r2, r3
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b092:	f7fe fcef 	bl	8009a74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	f003 0307 	and.w	r3, r3, #7
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <pvPortMalloc+0x176>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	b672      	cpsid	i
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	b662      	cpsie	i
 800b0b4:	60fb      	str	r3, [r7, #12]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <pvPortMalloc+0x174>
	return pvReturn;
 800b0ba:	69fb      	ldr	r3, [r7, #28]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3728      	adds	r7, #40	; 0x28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20004fbc 	.word	0x20004fbc
 800b0c8:	20004fc8 	.word	0x20004fc8
 800b0cc:	20004fc0 	.word	0x20004fc0
 800b0d0:	20004fb4 	.word	0x20004fb4
 800b0d4:	20004fc4 	.word	0x20004fc4

0800b0d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d04c      	beq.n	800b184 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	425b      	negs	r3, r3
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	4b23      	ldr	r3, [pc, #140]	; (800b18c <vPortFree+0xb4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4013      	ands	r3, r2
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10c      	bne.n	800b120 <vPortFree+0x48>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10a:	b672      	cpsid	i
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	b662      	cpsie	i
 800b11a:	60fb      	str	r3, [r7, #12]
}
 800b11c:	bf00      	nop
 800b11e:	e7fe      	b.n	800b11e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00c      	beq.n	800b142 <vPortFree+0x6a>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	b672      	cpsid	i
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	b662      	cpsie	i
 800b13c:	60bb      	str	r3, [r7, #8]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <vPortFree+0xb4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4013      	ands	r3, r2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d019      	beq.n	800b184 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d115      	bne.n	800b184 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <vPortFree+0xb4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	43db      	mvns	r3, r3
 800b162:	401a      	ands	r2, r3
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b168:	f7fe fc76 	bl	8009a58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	685a      	ldr	r2, [r3, #4]
 800b170:	4b07      	ldr	r3, [pc, #28]	; (800b190 <vPortFree+0xb8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4413      	add	r3, r2
 800b176:	4a06      	ldr	r2, [pc, #24]	; (800b190 <vPortFree+0xb8>)
 800b178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b17a:	6938      	ldr	r0, [r7, #16]
 800b17c:	f000 f86c 	bl	800b258 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b180:	f7fe fc78 	bl	8009a74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b184:	bf00      	nop
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20004fc8 	.word	0x20004fc8
 800b190:	20004fc0 	.word	0x20004fc0

0800b194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b19a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b19e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1a0:	4b27      	ldr	r3, [pc, #156]	; (800b240 <prvHeapInit+0xac>)
 800b1a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d00c      	beq.n	800b1c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3307      	adds	r3, #7
 800b1b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	4a1f      	ldr	r2, [pc, #124]	; (800b240 <prvHeapInit+0xac>)
 800b1c4:	4413      	add	r3, r2
 800b1c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1cc:	4a1d      	ldr	r2, [pc, #116]	; (800b244 <prvHeapInit+0xb0>)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1d2:	4b1c      	ldr	r3, [pc, #112]	; (800b244 <prvHeapInit+0xb0>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	4413      	add	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	1a9b      	subs	r3, r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f023 0307 	bic.w	r3, r3, #7
 800b1ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4a15      	ldr	r2, [pc, #84]	; (800b248 <prvHeapInit+0xb4>)
 800b1f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1f6:	4b14      	ldr	r3, [pc, #80]	; (800b248 <prvHeapInit+0xb4>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1fe:	4b12      	ldr	r3, [pc, #72]	; (800b248 <prvHeapInit+0xb4>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <prvHeapInit+0xb4>)
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	4a0a      	ldr	r2, [pc, #40]	; (800b24c <prvHeapInit+0xb8>)
 800b222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	4a09      	ldr	r2, [pc, #36]	; (800b250 <prvHeapInit+0xbc>)
 800b22a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b22c:	4b09      	ldr	r3, [pc, #36]	; (800b254 <prvHeapInit+0xc0>)
 800b22e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b232:	601a      	str	r2, [r3, #0]
}
 800b234:	bf00      	nop
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	200013b4 	.word	0x200013b4
 800b244:	20004fb4 	.word	0x20004fb4
 800b248:	20004fbc 	.word	0x20004fbc
 800b24c:	20004fc4 	.word	0x20004fc4
 800b250:	20004fc0 	.word	0x20004fc0
 800b254:	20004fc8 	.word	0x20004fc8

0800b258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b260:	4b28      	ldr	r3, [pc, #160]	; (800b304 <prvInsertBlockIntoFreeList+0xac>)
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	e002      	b.n	800b26c <prvInsertBlockIntoFreeList+0x14>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	429a      	cmp	r2, r3
 800b274:	d8f7      	bhi.n	800b266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	4413      	add	r3, r2
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	429a      	cmp	r2, r3
 800b286:	d108      	bne.n	800b29a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	441a      	add	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	441a      	add	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d118      	bne.n	800b2e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	4b15      	ldr	r3, [pc, #84]	; (800b308 <prvInsertBlockIntoFreeList+0xb0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d00d      	beq.n	800b2d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	441a      	add	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e008      	b.n	800b2e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <prvInsertBlockIntoFreeList+0xb0>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	e003      	b.n	800b2e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d002      	beq.n	800b2f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2f6:	bf00      	nop
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20004fb4 	.word	0x20004fb4
 800b308:	20004fbc 	.word	0x20004fbc

0800b30c <malloc>:
 800b30c:	4b02      	ldr	r3, [pc, #8]	; (800b318 <malloc+0xc>)
 800b30e:	4601      	mov	r1, r0
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	f000 b82b 	b.w	800b36c <_malloc_r>
 800b316:	bf00      	nop
 800b318:	20000088 	.word	0x20000088

0800b31c <free>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <free+0xc>)
 800b31e:	4601      	mov	r1, r0
 800b320:	6818      	ldr	r0, [r3, #0]
 800b322:	f000 ba97 	b.w	800b854 <_free_r>
 800b326:	bf00      	nop
 800b328:	20000088 	.word	0x20000088

0800b32c <sbrk_aligned>:
 800b32c:	b570      	push	{r4, r5, r6, lr}
 800b32e:	4e0e      	ldr	r6, [pc, #56]	; (800b368 <sbrk_aligned+0x3c>)
 800b330:	460c      	mov	r4, r1
 800b332:	6831      	ldr	r1, [r6, #0]
 800b334:	4605      	mov	r5, r0
 800b336:	b911      	cbnz	r1, 800b33e <sbrk_aligned+0x12>
 800b338:	f000 fa22 	bl	800b780 <_sbrk_r>
 800b33c:	6030      	str	r0, [r6, #0]
 800b33e:	4621      	mov	r1, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f000 fa1d 	bl	800b780 <_sbrk_r>
 800b346:	1c43      	adds	r3, r0, #1
 800b348:	d00a      	beq.n	800b360 <sbrk_aligned+0x34>
 800b34a:	1cc4      	adds	r4, r0, #3
 800b34c:	f024 0403 	bic.w	r4, r4, #3
 800b350:	42a0      	cmp	r0, r4
 800b352:	d007      	beq.n	800b364 <sbrk_aligned+0x38>
 800b354:	1a21      	subs	r1, r4, r0
 800b356:	4628      	mov	r0, r5
 800b358:	f000 fa12 	bl	800b780 <_sbrk_r>
 800b35c:	3001      	adds	r0, #1
 800b35e:	d101      	bne.n	800b364 <sbrk_aligned+0x38>
 800b360:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b364:	4620      	mov	r0, r4
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	20004fd0 	.word	0x20004fd0

0800b36c <_malloc_r>:
 800b36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b370:	1ccd      	adds	r5, r1, #3
 800b372:	f025 0503 	bic.w	r5, r5, #3
 800b376:	3508      	adds	r5, #8
 800b378:	2d0c      	cmp	r5, #12
 800b37a:	bf38      	it	cc
 800b37c:	250c      	movcc	r5, #12
 800b37e:	2d00      	cmp	r5, #0
 800b380:	4607      	mov	r7, r0
 800b382:	db01      	blt.n	800b388 <_malloc_r+0x1c>
 800b384:	42a9      	cmp	r1, r5
 800b386:	d905      	bls.n	800b394 <_malloc_r+0x28>
 800b388:	230c      	movs	r3, #12
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	2600      	movs	r6, #0
 800b38e:	4630      	mov	r0, r6
 800b390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b394:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b468 <_malloc_r+0xfc>
 800b398:	f000 f868 	bl	800b46c <__malloc_lock>
 800b39c:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a0:	461c      	mov	r4, r3
 800b3a2:	bb5c      	cbnz	r4, 800b3fc <_malloc_r+0x90>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f7ff ffc0 	bl	800b32c <sbrk_aligned>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	d155      	bne.n	800b45e <_malloc_r+0xf2>
 800b3b2:	f8d8 4000 	ldr.w	r4, [r8]
 800b3b6:	4626      	mov	r6, r4
 800b3b8:	2e00      	cmp	r6, #0
 800b3ba:	d145      	bne.n	800b448 <_malloc_r+0xdc>
 800b3bc:	2c00      	cmp	r4, #0
 800b3be:	d048      	beq.n	800b452 <_malloc_r+0xe6>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	eb04 0903 	add.w	r9, r4, r3
 800b3ca:	f000 f9d9 	bl	800b780 <_sbrk_r>
 800b3ce:	4581      	cmp	r9, r0
 800b3d0:	d13f      	bne.n	800b452 <_malloc_r+0xe6>
 800b3d2:	6821      	ldr	r1, [r4, #0]
 800b3d4:	1a6d      	subs	r5, r5, r1
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff ffa7 	bl	800b32c <sbrk_aligned>
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d037      	beq.n	800b452 <_malloc_r+0xe6>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	442b      	add	r3, r5
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d038      	beq.n	800b462 <_malloc_r+0xf6>
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	42a2      	cmp	r2, r4
 800b3f4:	d12b      	bne.n	800b44e <_malloc_r+0xe2>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	e00f      	b.n	800b41c <_malloc_r+0xb0>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	1b52      	subs	r2, r2, r5
 800b400:	d41f      	bmi.n	800b442 <_malloc_r+0xd6>
 800b402:	2a0b      	cmp	r2, #11
 800b404:	d917      	bls.n	800b436 <_malloc_r+0xca>
 800b406:	1961      	adds	r1, r4, r5
 800b408:	42a3      	cmp	r3, r4
 800b40a:	6025      	str	r5, [r4, #0]
 800b40c:	bf18      	it	ne
 800b40e:	6059      	strne	r1, [r3, #4]
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	bf08      	it	eq
 800b414:	f8c8 1000 	streq.w	r1, [r8]
 800b418:	5162      	str	r2, [r4, r5]
 800b41a:	604b      	str	r3, [r1, #4]
 800b41c:	4638      	mov	r0, r7
 800b41e:	f104 060b 	add.w	r6, r4, #11
 800b422:	f000 f829 	bl	800b478 <__malloc_unlock>
 800b426:	f026 0607 	bic.w	r6, r6, #7
 800b42a:	1d23      	adds	r3, r4, #4
 800b42c:	1af2      	subs	r2, r6, r3
 800b42e:	d0ae      	beq.n	800b38e <_malloc_r+0x22>
 800b430:	1b9b      	subs	r3, r3, r6
 800b432:	50a3      	str	r3, [r4, r2]
 800b434:	e7ab      	b.n	800b38e <_malloc_r+0x22>
 800b436:	42a3      	cmp	r3, r4
 800b438:	6862      	ldr	r2, [r4, #4]
 800b43a:	d1dd      	bne.n	800b3f8 <_malloc_r+0x8c>
 800b43c:	f8c8 2000 	str.w	r2, [r8]
 800b440:	e7ec      	b.n	800b41c <_malloc_r+0xb0>
 800b442:	4623      	mov	r3, r4
 800b444:	6864      	ldr	r4, [r4, #4]
 800b446:	e7ac      	b.n	800b3a2 <_malloc_r+0x36>
 800b448:	4634      	mov	r4, r6
 800b44a:	6876      	ldr	r6, [r6, #4]
 800b44c:	e7b4      	b.n	800b3b8 <_malloc_r+0x4c>
 800b44e:	4613      	mov	r3, r2
 800b450:	e7cc      	b.n	800b3ec <_malloc_r+0x80>
 800b452:	230c      	movs	r3, #12
 800b454:	603b      	str	r3, [r7, #0]
 800b456:	4638      	mov	r0, r7
 800b458:	f000 f80e 	bl	800b478 <__malloc_unlock>
 800b45c:	e797      	b.n	800b38e <_malloc_r+0x22>
 800b45e:	6025      	str	r5, [r4, #0]
 800b460:	e7dc      	b.n	800b41c <_malloc_r+0xb0>
 800b462:	605b      	str	r3, [r3, #4]
 800b464:	deff      	udf	#255	; 0xff
 800b466:	bf00      	nop
 800b468:	20004fcc 	.word	0x20004fcc

0800b46c <__malloc_lock>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__malloc_lock+0x8>)
 800b46e:	f000 b9c2 	b.w	800b7f6 <__retarget_lock_acquire_recursive>
 800b472:	bf00      	nop
 800b474:	20005114 	.word	0x20005114

0800b478 <__malloc_unlock>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__malloc_unlock+0x8>)
 800b47a:	f000 b9bd 	b.w	800b7f8 <__retarget_lock_release_recursive>
 800b47e:	bf00      	nop
 800b480:	20005114 	.word	0x20005114

0800b484 <siprintf>:
 800b484:	b40e      	push	{r1, r2, r3}
 800b486:	b500      	push	{lr}
 800b488:	b09c      	sub	sp, #112	; 0x70
 800b48a:	ab1d      	add	r3, sp, #116	; 0x74
 800b48c:	9002      	str	r0, [sp, #8]
 800b48e:	9006      	str	r0, [sp, #24]
 800b490:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b494:	4809      	ldr	r0, [pc, #36]	; (800b4bc <siprintf+0x38>)
 800b496:	9107      	str	r1, [sp, #28]
 800b498:	9104      	str	r1, [sp, #16]
 800b49a:	4909      	ldr	r1, [pc, #36]	; (800b4c0 <siprintf+0x3c>)
 800b49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a0:	9105      	str	r1, [sp, #20]
 800b4a2:	6800      	ldr	r0, [r0, #0]
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	a902      	add	r1, sp, #8
 800b4a8:	f000 fa7a 	bl	800b9a0 <_svfiprintf_r>
 800b4ac:	9b02      	ldr	r3, [sp, #8]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	b01c      	add	sp, #112	; 0x70
 800b4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4b8:	b003      	add	sp, #12
 800b4ba:	4770      	bx	lr
 800b4bc:	20000088 	.word	0x20000088
 800b4c0:	ffff0208 	.word	0xffff0208

0800b4c4 <rand>:
 800b4c4:	4b16      	ldr	r3, [pc, #88]	; (800b520 <rand+0x5c>)
 800b4c6:	b510      	push	{r4, lr}
 800b4c8:	681c      	ldr	r4, [r3, #0]
 800b4ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4cc:	b9b3      	cbnz	r3, 800b4fc <rand+0x38>
 800b4ce:	2018      	movs	r0, #24
 800b4d0:	f7ff ff1c 	bl	800b30c <malloc>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	6320      	str	r0, [r4, #48]	; 0x30
 800b4d8:	b920      	cbnz	r0, 800b4e4 <rand+0x20>
 800b4da:	4b12      	ldr	r3, [pc, #72]	; (800b524 <rand+0x60>)
 800b4dc:	4812      	ldr	r0, [pc, #72]	; (800b528 <rand+0x64>)
 800b4de:	2152      	movs	r1, #82	; 0x52
 800b4e0:	f000 f99a 	bl	800b818 <__assert_func>
 800b4e4:	4911      	ldr	r1, [pc, #68]	; (800b52c <rand+0x68>)
 800b4e6:	4b12      	ldr	r3, [pc, #72]	; (800b530 <rand+0x6c>)
 800b4e8:	e9c0 1300 	strd	r1, r3, [r0]
 800b4ec:	4b11      	ldr	r3, [pc, #68]	; (800b534 <rand+0x70>)
 800b4ee:	6083      	str	r3, [r0, #8]
 800b4f0:	230b      	movs	r3, #11
 800b4f2:	8183      	strh	r3, [r0, #12]
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b4fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4fe:	480e      	ldr	r0, [pc, #56]	; (800b538 <rand+0x74>)
 800b500:	690b      	ldr	r3, [r1, #16]
 800b502:	694c      	ldr	r4, [r1, #20]
 800b504:	4a0d      	ldr	r2, [pc, #52]	; (800b53c <rand+0x78>)
 800b506:	4358      	muls	r0, r3
 800b508:	fb02 0004 	mla	r0, r2, r4, r0
 800b50c:	fba3 3202 	umull	r3, r2, r3, r2
 800b510:	3301      	adds	r3, #1
 800b512:	eb40 0002 	adc.w	r0, r0, r2
 800b516:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b51a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b51e:	bd10      	pop	{r4, pc}
 800b520:	20000088 	.word	0x20000088
 800b524:	0800f3f0 	.word	0x0800f3f0
 800b528:	0800f407 	.word	0x0800f407
 800b52c:	abcd330e 	.word	0xabcd330e
 800b530:	e66d1234 	.word	0xe66d1234
 800b534:	0005deec 	.word	0x0005deec
 800b538:	5851f42d 	.word	0x5851f42d
 800b53c:	4c957f2d 	.word	0x4c957f2d

0800b540 <std>:
 800b540:	2300      	movs	r3, #0
 800b542:	b510      	push	{r4, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	e9c0 3300 	strd	r3, r3, [r0]
 800b54a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b54e:	6083      	str	r3, [r0, #8]
 800b550:	8181      	strh	r1, [r0, #12]
 800b552:	6643      	str	r3, [r0, #100]	; 0x64
 800b554:	81c2      	strh	r2, [r0, #14]
 800b556:	6183      	str	r3, [r0, #24]
 800b558:	4619      	mov	r1, r3
 800b55a:	2208      	movs	r2, #8
 800b55c:	305c      	adds	r0, #92	; 0x5c
 800b55e:	f000 f8b1 	bl	800b6c4 <memset>
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <std+0x58>)
 800b564:	6263      	str	r3, [r4, #36]	; 0x24
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <std+0x5c>)
 800b568:	62a3      	str	r3, [r4, #40]	; 0x28
 800b56a:	4b0d      	ldr	r3, [pc, #52]	; (800b5a0 <std+0x60>)
 800b56c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b56e:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <std+0x64>)
 800b570:	6323      	str	r3, [r4, #48]	; 0x30
 800b572:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <std+0x68>)
 800b574:	6224      	str	r4, [r4, #32]
 800b576:	429c      	cmp	r4, r3
 800b578:	d006      	beq.n	800b588 <std+0x48>
 800b57a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b57e:	4294      	cmp	r4, r2
 800b580:	d002      	beq.n	800b588 <std+0x48>
 800b582:	33d0      	adds	r3, #208	; 0xd0
 800b584:	429c      	cmp	r4, r3
 800b586:	d105      	bne.n	800b594 <std+0x54>
 800b588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b590:	f000 b930 	b.w	800b7f4 <__retarget_lock_init_recursive>
 800b594:	bd10      	pop	{r4, pc}
 800b596:	bf00      	nop
 800b598:	0800c019 	.word	0x0800c019
 800b59c:	0800c03b 	.word	0x0800c03b
 800b5a0:	0800c073 	.word	0x0800c073
 800b5a4:	0800c097 	.word	0x0800c097
 800b5a8:	20004fd4 	.word	0x20004fd4

0800b5ac <stdio_exit_handler>:
 800b5ac:	4a02      	ldr	r2, [pc, #8]	; (800b5b8 <stdio_exit_handler+0xc>)
 800b5ae:	4903      	ldr	r1, [pc, #12]	; (800b5bc <stdio_exit_handler+0x10>)
 800b5b0:	4803      	ldr	r0, [pc, #12]	; (800b5c0 <stdio_exit_handler+0x14>)
 800b5b2:	f000 b869 	b.w	800b688 <_fwalk_sglue>
 800b5b6:	bf00      	nop
 800b5b8:	20000030 	.word	0x20000030
 800b5bc:	0800bfc9 	.word	0x0800bfc9
 800b5c0:	2000003c 	.word	0x2000003c

0800b5c4 <cleanup_stdio>:
 800b5c4:	6841      	ldr	r1, [r0, #4]
 800b5c6:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <cleanup_stdio+0x34>)
 800b5c8:	4299      	cmp	r1, r3
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	d001      	beq.n	800b5d4 <cleanup_stdio+0x10>
 800b5d0:	f000 fcfa 	bl	800bfc8 <_fflush_r>
 800b5d4:	68a1      	ldr	r1, [r4, #8]
 800b5d6:	4b09      	ldr	r3, [pc, #36]	; (800b5fc <cleanup_stdio+0x38>)
 800b5d8:	4299      	cmp	r1, r3
 800b5da:	d002      	beq.n	800b5e2 <cleanup_stdio+0x1e>
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 fcf3 	bl	800bfc8 <_fflush_r>
 800b5e2:	68e1      	ldr	r1, [r4, #12]
 800b5e4:	4b06      	ldr	r3, [pc, #24]	; (800b600 <cleanup_stdio+0x3c>)
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	d004      	beq.n	800b5f4 <cleanup_stdio+0x30>
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f0:	f000 bcea 	b.w	800bfc8 <_fflush_r>
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20004fd4 	.word	0x20004fd4
 800b5fc:	2000503c 	.word	0x2000503c
 800b600:	200050a4 	.word	0x200050a4

0800b604 <global_stdio_init.part.0>:
 800b604:	b510      	push	{r4, lr}
 800b606:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <global_stdio_init.part.0+0x30>)
 800b608:	4c0b      	ldr	r4, [pc, #44]	; (800b638 <global_stdio_init.part.0+0x34>)
 800b60a:	4a0c      	ldr	r2, [pc, #48]	; (800b63c <global_stdio_init.part.0+0x38>)
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	4620      	mov	r0, r4
 800b610:	2200      	movs	r2, #0
 800b612:	2104      	movs	r1, #4
 800b614:	f7ff ff94 	bl	800b540 <std>
 800b618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b61c:	2201      	movs	r2, #1
 800b61e:	2109      	movs	r1, #9
 800b620:	f7ff ff8e 	bl	800b540 <std>
 800b624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b628:	2202      	movs	r2, #2
 800b62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b62e:	2112      	movs	r1, #18
 800b630:	f7ff bf86 	b.w	800b540 <std>
 800b634:	2000510c 	.word	0x2000510c
 800b638:	20004fd4 	.word	0x20004fd4
 800b63c:	0800b5ad 	.word	0x0800b5ad

0800b640 <__sfp_lock_acquire>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__sfp_lock_acquire+0x8>)
 800b642:	f000 b8d8 	b.w	800b7f6 <__retarget_lock_acquire_recursive>
 800b646:	bf00      	nop
 800b648:	20005115 	.word	0x20005115

0800b64c <__sfp_lock_release>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__sfp_lock_release+0x8>)
 800b64e:	f000 b8d3 	b.w	800b7f8 <__retarget_lock_release_recursive>
 800b652:	bf00      	nop
 800b654:	20005115 	.word	0x20005115

0800b658 <__sinit>:
 800b658:	b510      	push	{r4, lr}
 800b65a:	4604      	mov	r4, r0
 800b65c:	f7ff fff0 	bl	800b640 <__sfp_lock_acquire>
 800b660:	6a23      	ldr	r3, [r4, #32]
 800b662:	b11b      	cbz	r3, 800b66c <__sinit+0x14>
 800b664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b668:	f7ff bff0 	b.w	800b64c <__sfp_lock_release>
 800b66c:	4b04      	ldr	r3, [pc, #16]	; (800b680 <__sinit+0x28>)
 800b66e:	6223      	str	r3, [r4, #32]
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <__sinit+0x2c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1f5      	bne.n	800b664 <__sinit+0xc>
 800b678:	f7ff ffc4 	bl	800b604 <global_stdio_init.part.0>
 800b67c:	e7f2      	b.n	800b664 <__sinit+0xc>
 800b67e:	bf00      	nop
 800b680:	0800b5c5 	.word	0x0800b5c5
 800b684:	2000510c 	.word	0x2000510c

0800b688 <_fwalk_sglue>:
 800b688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68c:	4607      	mov	r7, r0
 800b68e:	4688      	mov	r8, r1
 800b690:	4614      	mov	r4, r2
 800b692:	2600      	movs	r6, #0
 800b694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b698:	f1b9 0901 	subs.w	r9, r9, #1
 800b69c:	d505      	bpl.n	800b6aa <_fwalk_sglue+0x22>
 800b69e:	6824      	ldr	r4, [r4, #0]
 800b6a0:	2c00      	cmp	r4, #0
 800b6a2:	d1f7      	bne.n	800b694 <_fwalk_sglue+0xc>
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6aa:	89ab      	ldrh	r3, [r5, #12]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d907      	bls.n	800b6c0 <_fwalk_sglue+0x38>
 800b6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	d003      	beq.n	800b6c0 <_fwalk_sglue+0x38>
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	47c0      	blx	r8
 800b6be:	4306      	orrs	r6, r0
 800b6c0:	3568      	adds	r5, #104	; 0x68
 800b6c2:	e7e9      	b.n	800b698 <_fwalk_sglue+0x10>

0800b6c4 <memset>:
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <_reclaim_reent>:
 800b6d4:	4b29      	ldr	r3, [pc, #164]	; (800b77c <_reclaim_reent+0xa8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4283      	cmp	r3, r0
 800b6da:	b570      	push	{r4, r5, r6, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	d04b      	beq.n	800b778 <_reclaim_reent+0xa4>
 800b6e0:	69c3      	ldr	r3, [r0, #28]
 800b6e2:	b143      	cbz	r3, 800b6f6 <_reclaim_reent+0x22>
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d144      	bne.n	800b774 <_reclaim_reent+0xa0>
 800b6ea:	69e3      	ldr	r3, [r4, #28]
 800b6ec:	6819      	ldr	r1, [r3, #0]
 800b6ee:	b111      	cbz	r1, 800b6f6 <_reclaim_reent+0x22>
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 f8af 	bl	800b854 <_free_r>
 800b6f6:	6961      	ldr	r1, [r4, #20]
 800b6f8:	b111      	cbz	r1, 800b700 <_reclaim_reent+0x2c>
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 f8aa 	bl	800b854 <_free_r>
 800b700:	69e1      	ldr	r1, [r4, #28]
 800b702:	b111      	cbz	r1, 800b70a <_reclaim_reent+0x36>
 800b704:	4620      	mov	r0, r4
 800b706:	f000 f8a5 	bl	800b854 <_free_r>
 800b70a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b70c:	b111      	cbz	r1, 800b714 <_reclaim_reent+0x40>
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 f8a0 	bl	800b854 <_free_r>
 800b714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b716:	b111      	cbz	r1, 800b71e <_reclaim_reent+0x4a>
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 f89b 	bl	800b854 <_free_r>
 800b71e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b720:	b111      	cbz	r1, 800b728 <_reclaim_reent+0x54>
 800b722:	4620      	mov	r0, r4
 800b724:	f000 f896 	bl	800b854 <_free_r>
 800b728:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b72a:	b111      	cbz	r1, 800b732 <_reclaim_reent+0x5e>
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 f891 	bl	800b854 <_free_r>
 800b732:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b734:	b111      	cbz	r1, 800b73c <_reclaim_reent+0x68>
 800b736:	4620      	mov	r0, r4
 800b738:	f000 f88c 	bl	800b854 <_free_r>
 800b73c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b73e:	b111      	cbz	r1, 800b746 <_reclaim_reent+0x72>
 800b740:	4620      	mov	r0, r4
 800b742:	f000 f887 	bl	800b854 <_free_r>
 800b746:	6a23      	ldr	r3, [r4, #32]
 800b748:	b1b3      	cbz	r3, 800b778 <_reclaim_reent+0xa4>
 800b74a:	4620      	mov	r0, r4
 800b74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b750:	4718      	bx	r3
 800b752:	5949      	ldr	r1, [r1, r5]
 800b754:	b941      	cbnz	r1, 800b768 <_reclaim_reent+0x94>
 800b756:	3504      	adds	r5, #4
 800b758:	69e3      	ldr	r3, [r4, #28]
 800b75a:	2d80      	cmp	r5, #128	; 0x80
 800b75c:	68d9      	ldr	r1, [r3, #12]
 800b75e:	d1f8      	bne.n	800b752 <_reclaim_reent+0x7e>
 800b760:	4620      	mov	r0, r4
 800b762:	f000 f877 	bl	800b854 <_free_r>
 800b766:	e7c0      	b.n	800b6ea <_reclaim_reent+0x16>
 800b768:	680e      	ldr	r6, [r1, #0]
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 f872 	bl	800b854 <_free_r>
 800b770:	4631      	mov	r1, r6
 800b772:	e7ef      	b.n	800b754 <_reclaim_reent+0x80>
 800b774:	2500      	movs	r5, #0
 800b776:	e7ef      	b.n	800b758 <_reclaim_reent+0x84>
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	bf00      	nop
 800b77c:	20000088 	.word	0x20000088

0800b780 <_sbrk_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d06      	ldr	r5, [pc, #24]	; (800b79c <_sbrk_r+0x1c>)
 800b784:	2300      	movs	r3, #0
 800b786:	4604      	mov	r4, r0
 800b788:	4608      	mov	r0, r1
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	f7f7 fefa 	bl	8003584 <_sbrk>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_sbrk_r+0x1a>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_sbrk_r+0x1a>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	20005110 	.word	0x20005110

0800b7a0 <__errno>:
 800b7a0:	4b01      	ldr	r3, [pc, #4]	; (800b7a8 <__errno+0x8>)
 800b7a2:	6818      	ldr	r0, [r3, #0]
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	20000088 	.word	0x20000088

0800b7ac <__libc_init_array>:
 800b7ac:	b570      	push	{r4, r5, r6, lr}
 800b7ae:	4d0d      	ldr	r5, [pc, #52]	; (800b7e4 <__libc_init_array+0x38>)
 800b7b0:	4c0d      	ldr	r4, [pc, #52]	; (800b7e8 <__libc_init_array+0x3c>)
 800b7b2:	1b64      	subs	r4, r4, r5
 800b7b4:	10a4      	asrs	r4, r4, #2
 800b7b6:	2600      	movs	r6, #0
 800b7b8:	42a6      	cmp	r6, r4
 800b7ba:	d109      	bne.n	800b7d0 <__libc_init_array+0x24>
 800b7bc:	4d0b      	ldr	r5, [pc, #44]	; (800b7ec <__libc_init_array+0x40>)
 800b7be:	4c0c      	ldr	r4, [pc, #48]	; (800b7f0 <__libc_init_array+0x44>)
 800b7c0:	f000 ffc0 	bl	800c744 <_init>
 800b7c4:	1b64      	subs	r4, r4, r5
 800b7c6:	10a4      	asrs	r4, r4, #2
 800b7c8:	2600      	movs	r6, #0
 800b7ca:	42a6      	cmp	r6, r4
 800b7cc:	d105      	bne.n	800b7da <__libc_init_array+0x2e>
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d4:	4798      	blx	r3
 800b7d6:	3601      	adds	r6, #1
 800b7d8:	e7ee      	b.n	800b7b8 <__libc_init_array+0xc>
 800b7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7de:	4798      	blx	r3
 800b7e0:	3601      	adds	r6, #1
 800b7e2:	e7f2      	b.n	800b7ca <__libc_init_array+0x1e>
 800b7e4:	0800f4d8 	.word	0x0800f4d8
 800b7e8:	0800f4d8 	.word	0x0800f4d8
 800b7ec:	0800f4d8 	.word	0x0800f4d8
 800b7f0:	0800f4dc 	.word	0x0800f4dc

0800b7f4 <__retarget_lock_init_recursive>:
 800b7f4:	4770      	bx	lr

0800b7f6 <__retarget_lock_acquire_recursive>:
 800b7f6:	4770      	bx	lr

0800b7f8 <__retarget_lock_release_recursive>:
 800b7f8:	4770      	bx	lr

0800b7fa <memcpy>:
 800b7fa:	440a      	add	r2, r1
 800b7fc:	4291      	cmp	r1, r2
 800b7fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b802:	d100      	bne.n	800b806 <memcpy+0xc>
 800b804:	4770      	bx	lr
 800b806:	b510      	push	{r4, lr}
 800b808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b80c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b810:	4291      	cmp	r1, r2
 800b812:	d1f9      	bne.n	800b808 <memcpy+0xe>
 800b814:	bd10      	pop	{r4, pc}
	...

0800b818 <__assert_func>:
 800b818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b81a:	4614      	mov	r4, r2
 800b81c:	461a      	mov	r2, r3
 800b81e:	4b09      	ldr	r3, [pc, #36]	; (800b844 <__assert_func+0x2c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4605      	mov	r5, r0
 800b824:	68d8      	ldr	r0, [r3, #12]
 800b826:	b14c      	cbz	r4, 800b83c <__assert_func+0x24>
 800b828:	4b07      	ldr	r3, [pc, #28]	; (800b848 <__assert_func+0x30>)
 800b82a:	9100      	str	r1, [sp, #0]
 800b82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b830:	4906      	ldr	r1, [pc, #24]	; (800b84c <__assert_func+0x34>)
 800b832:	462b      	mov	r3, r5
 800b834:	f000 fc34 	bl	800c0a0 <fiprintf>
 800b838:	f000 fcd4 	bl	800c1e4 <abort>
 800b83c:	4b04      	ldr	r3, [pc, #16]	; (800b850 <__assert_func+0x38>)
 800b83e:	461c      	mov	r4, r3
 800b840:	e7f3      	b.n	800b82a <__assert_func+0x12>
 800b842:	bf00      	nop
 800b844:	20000088 	.word	0x20000088
 800b848:	0800f45f 	.word	0x0800f45f
 800b84c:	0800f46c 	.word	0x0800f46c
 800b850:	0800f49a 	.word	0x0800f49a

0800b854 <_free_r>:
 800b854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b856:	2900      	cmp	r1, #0
 800b858:	d044      	beq.n	800b8e4 <_free_r+0x90>
 800b85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b85e:	9001      	str	r0, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	f1a1 0404 	sub.w	r4, r1, #4
 800b866:	bfb8      	it	lt
 800b868:	18e4      	addlt	r4, r4, r3
 800b86a:	f7ff fdff 	bl	800b46c <__malloc_lock>
 800b86e:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <_free_r+0x94>)
 800b870:	9801      	ldr	r0, [sp, #4]
 800b872:	6813      	ldr	r3, [r2, #0]
 800b874:	b933      	cbnz	r3, 800b884 <_free_r+0x30>
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	6014      	str	r4, [r2, #0]
 800b87a:	b003      	add	sp, #12
 800b87c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b880:	f7ff bdfa 	b.w	800b478 <__malloc_unlock>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d908      	bls.n	800b89a <_free_r+0x46>
 800b888:	6825      	ldr	r5, [r4, #0]
 800b88a:	1961      	adds	r1, r4, r5
 800b88c:	428b      	cmp	r3, r1
 800b88e:	bf01      	itttt	eq
 800b890:	6819      	ldreq	r1, [r3, #0]
 800b892:	685b      	ldreq	r3, [r3, #4]
 800b894:	1949      	addeq	r1, r1, r5
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	e7ed      	b.n	800b876 <_free_r+0x22>
 800b89a:	461a      	mov	r2, r3
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b10b      	cbz	r3, 800b8a4 <_free_r+0x50>
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d9fa      	bls.n	800b89a <_free_r+0x46>
 800b8a4:	6811      	ldr	r1, [r2, #0]
 800b8a6:	1855      	adds	r5, r2, r1
 800b8a8:	42a5      	cmp	r5, r4
 800b8aa:	d10b      	bne.n	800b8c4 <_free_r+0x70>
 800b8ac:	6824      	ldr	r4, [r4, #0]
 800b8ae:	4421      	add	r1, r4
 800b8b0:	1854      	adds	r4, r2, r1
 800b8b2:	42a3      	cmp	r3, r4
 800b8b4:	6011      	str	r1, [r2, #0]
 800b8b6:	d1e0      	bne.n	800b87a <_free_r+0x26>
 800b8b8:	681c      	ldr	r4, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	440c      	add	r4, r1
 800b8c0:	6014      	str	r4, [r2, #0]
 800b8c2:	e7da      	b.n	800b87a <_free_r+0x26>
 800b8c4:	d902      	bls.n	800b8cc <_free_r+0x78>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	e7d6      	b.n	800b87a <_free_r+0x26>
 800b8cc:	6825      	ldr	r5, [r4, #0]
 800b8ce:	1961      	adds	r1, r4, r5
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	bf04      	itt	eq
 800b8d4:	6819      	ldreq	r1, [r3, #0]
 800b8d6:	685b      	ldreq	r3, [r3, #4]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	bf04      	itt	eq
 800b8dc:	1949      	addeq	r1, r1, r5
 800b8de:	6021      	streq	r1, [r4, #0]
 800b8e0:	6054      	str	r4, [r2, #4]
 800b8e2:	e7ca      	b.n	800b87a <_free_r+0x26>
 800b8e4:	b003      	add	sp, #12
 800b8e6:	bd30      	pop	{r4, r5, pc}
 800b8e8:	20004fcc 	.word	0x20004fcc

0800b8ec <__ssputs_r>:
 800b8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f0:	688e      	ldr	r6, [r1, #8]
 800b8f2:	461f      	mov	r7, r3
 800b8f4:	42be      	cmp	r6, r7
 800b8f6:	680b      	ldr	r3, [r1, #0]
 800b8f8:	4682      	mov	sl, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	4690      	mov	r8, r2
 800b8fe:	d82c      	bhi.n	800b95a <__ssputs_r+0x6e>
 800b900:	898a      	ldrh	r2, [r1, #12]
 800b902:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b906:	d026      	beq.n	800b956 <__ssputs_r+0x6a>
 800b908:	6965      	ldr	r5, [r4, #20]
 800b90a:	6909      	ldr	r1, [r1, #16]
 800b90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b910:	eba3 0901 	sub.w	r9, r3, r1
 800b914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b918:	1c7b      	adds	r3, r7, #1
 800b91a:	444b      	add	r3, r9
 800b91c:	106d      	asrs	r5, r5, #1
 800b91e:	429d      	cmp	r5, r3
 800b920:	bf38      	it	cc
 800b922:	461d      	movcc	r5, r3
 800b924:	0553      	lsls	r3, r2, #21
 800b926:	d527      	bpl.n	800b978 <__ssputs_r+0x8c>
 800b928:	4629      	mov	r1, r5
 800b92a:	f7ff fd1f 	bl	800b36c <_malloc_r>
 800b92e:	4606      	mov	r6, r0
 800b930:	b360      	cbz	r0, 800b98c <__ssputs_r+0xa0>
 800b932:	6921      	ldr	r1, [r4, #16]
 800b934:	464a      	mov	r2, r9
 800b936:	f7ff ff60 	bl	800b7fa <memcpy>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	6126      	str	r6, [r4, #16]
 800b948:	6165      	str	r5, [r4, #20]
 800b94a:	444e      	add	r6, r9
 800b94c:	eba5 0509 	sub.w	r5, r5, r9
 800b950:	6026      	str	r6, [r4, #0]
 800b952:	60a5      	str	r5, [r4, #8]
 800b954:	463e      	mov	r6, r7
 800b956:	42be      	cmp	r6, r7
 800b958:	d900      	bls.n	800b95c <__ssputs_r+0x70>
 800b95a:	463e      	mov	r6, r7
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	4632      	mov	r2, r6
 800b960:	4641      	mov	r1, r8
 800b962:	f000 fbde 	bl	800c122 <memmove>
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	1b9b      	subs	r3, r3, r6
 800b96a:	60a3      	str	r3, [r4, #8]
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	4433      	add	r3, r6
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	2000      	movs	r0, #0
 800b974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b978:	462a      	mov	r2, r5
 800b97a:	f000 fba3 	bl	800c0c4 <_realloc_r>
 800b97e:	4606      	mov	r6, r0
 800b980:	2800      	cmp	r0, #0
 800b982:	d1e0      	bne.n	800b946 <__ssputs_r+0x5a>
 800b984:	6921      	ldr	r1, [r4, #16]
 800b986:	4650      	mov	r0, sl
 800b988:	f7ff ff64 	bl	800b854 <_free_r>
 800b98c:	230c      	movs	r3, #12
 800b98e:	f8ca 3000 	str.w	r3, [sl]
 800b992:	89a3      	ldrh	r3, [r4, #12]
 800b994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b99e:	e7e9      	b.n	800b974 <__ssputs_r+0x88>

0800b9a0 <_svfiprintf_r>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	4698      	mov	r8, r3
 800b9a6:	898b      	ldrh	r3, [r1, #12]
 800b9a8:	061b      	lsls	r3, r3, #24
 800b9aa:	b09d      	sub	sp, #116	; 0x74
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	4614      	mov	r4, r2
 800b9b2:	d50e      	bpl.n	800b9d2 <_svfiprintf_r+0x32>
 800b9b4:	690b      	ldr	r3, [r1, #16]
 800b9b6:	b963      	cbnz	r3, 800b9d2 <_svfiprintf_r+0x32>
 800b9b8:	2140      	movs	r1, #64	; 0x40
 800b9ba:	f7ff fcd7 	bl	800b36c <_malloc_r>
 800b9be:	6028      	str	r0, [r5, #0]
 800b9c0:	6128      	str	r0, [r5, #16]
 800b9c2:	b920      	cbnz	r0, 800b9ce <_svfiprintf_r+0x2e>
 800b9c4:	230c      	movs	r3, #12
 800b9c6:	603b      	str	r3, [r7, #0]
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9cc:	e0d0      	b.n	800bb70 <_svfiprintf_r+0x1d0>
 800b9ce:	2340      	movs	r3, #64	; 0x40
 800b9d0:	616b      	str	r3, [r5, #20]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d6:	2320      	movs	r3, #32
 800b9d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9e0:	2330      	movs	r3, #48	; 0x30
 800b9e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb88 <_svfiprintf_r+0x1e8>
 800b9e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9ea:	f04f 0901 	mov.w	r9, #1
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	469a      	mov	sl, r3
 800b9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f6:	b10a      	cbz	r2, 800b9fc <_svfiprintf_r+0x5c>
 800b9f8:	2a25      	cmp	r2, #37	; 0x25
 800b9fa:	d1f9      	bne.n	800b9f0 <_svfiprintf_r+0x50>
 800b9fc:	ebba 0b04 	subs.w	fp, sl, r4
 800ba00:	d00b      	beq.n	800ba1a <_svfiprintf_r+0x7a>
 800ba02:	465b      	mov	r3, fp
 800ba04:	4622      	mov	r2, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	4638      	mov	r0, r7
 800ba0a:	f7ff ff6f 	bl	800b8ec <__ssputs_r>
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f000 80a9 	beq.w	800bb66 <_svfiprintf_r+0x1c6>
 800ba14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba16:	445a      	add	r2, fp
 800ba18:	9209      	str	r2, [sp, #36]	; 0x24
 800ba1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80a1 	beq.w	800bb66 <_svfiprintf_r+0x1c6>
 800ba24:	2300      	movs	r3, #0
 800ba26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba2e:	f10a 0a01 	add.w	sl, sl, #1
 800ba32:	9304      	str	r3, [sp, #16]
 800ba34:	9307      	str	r3, [sp, #28]
 800ba36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ba3c:	4654      	mov	r4, sl
 800ba3e:	2205      	movs	r2, #5
 800ba40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba44:	4850      	ldr	r0, [pc, #320]	; (800bb88 <_svfiprintf_r+0x1e8>)
 800ba46:	f7f4 fbfb 	bl	8000240 <memchr>
 800ba4a:	9a04      	ldr	r2, [sp, #16]
 800ba4c:	b9d8      	cbnz	r0, 800ba86 <_svfiprintf_r+0xe6>
 800ba4e:	06d0      	lsls	r0, r2, #27
 800ba50:	bf44      	itt	mi
 800ba52:	2320      	movmi	r3, #32
 800ba54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba58:	0711      	lsls	r1, r2, #28
 800ba5a:	bf44      	itt	mi
 800ba5c:	232b      	movmi	r3, #43	; 0x2b
 800ba5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba62:	f89a 3000 	ldrb.w	r3, [sl]
 800ba66:	2b2a      	cmp	r3, #42	; 0x2a
 800ba68:	d015      	beq.n	800ba96 <_svfiprintf_r+0xf6>
 800ba6a:	9a07      	ldr	r2, [sp, #28]
 800ba6c:	4654      	mov	r4, sl
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f04f 0c0a 	mov.w	ip, #10
 800ba74:	4621      	mov	r1, r4
 800ba76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba7a:	3b30      	subs	r3, #48	; 0x30
 800ba7c:	2b09      	cmp	r3, #9
 800ba7e:	d94d      	bls.n	800bb1c <_svfiprintf_r+0x17c>
 800ba80:	b1b0      	cbz	r0, 800bab0 <_svfiprintf_r+0x110>
 800ba82:	9207      	str	r2, [sp, #28]
 800ba84:	e014      	b.n	800bab0 <_svfiprintf_r+0x110>
 800ba86:	eba0 0308 	sub.w	r3, r0, r8
 800ba8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	9304      	str	r3, [sp, #16]
 800ba92:	46a2      	mov	sl, r4
 800ba94:	e7d2      	b.n	800ba3c <_svfiprintf_r+0x9c>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	1d19      	adds	r1, r3, #4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	9103      	str	r1, [sp, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	bfbb      	ittet	lt
 800baa2:	425b      	neglt	r3, r3
 800baa4:	f042 0202 	orrlt.w	r2, r2, #2
 800baa8:	9307      	strge	r3, [sp, #28]
 800baaa:	9307      	strlt	r3, [sp, #28]
 800baac:	bfb8      	it	lt
 800baae:	9204      	strlt	r2, [sp, #16]
 800bab0:	7823      	ldrb	r3, [r4, #0]
 800bab2:	2b2e      	cmp	r3, #46	; 0x2e
 800bab4:	d10c      	bne.n	800bad0 <_svfiprintf_r+0x130>
 800bab6:	7863      	ldrb	r3, [r4, #1]
 800bab8:	2b2a      	cmp	r3, #42	; 0x2a
 800baba:	d134      	bne.n	800bb26 <_svfiprintf_r+0x186>
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	1d1a      	adds	r2, r3, #4
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	9203      	str	r2, [sp, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	bfb8      	it	lt
 800bac8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bacc:	3402      	adds	r4, #2
 800bace:	9305      	str	r3, [sp, #20]
 800bad0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bb98 <_svfiprintf_r+0x1f8>
 800bad4:	7821      	ldrb	r1, [r4, #0]
 800bad6:	2203      	movs	r2, #3
 800bad8:	4650      	mov	r0, sl
 800bada:	f7f4 fbb1 	bl	8000240 <memchr>
 800bade:	b138      	cbz	r0, 800baf0 <_svfiprintf_r+0x150>
 800bae0:	9b04      	ldr	r3, [sp, #16]
 800bae2:	eba0 000a 	sub.w	r0, r0, sl
 800bae6:	2240      	movs	r2, #64	; 0x40
 800bae8:	4082      	lsls	r2, r0
 800baea:	4313      	orrs	r3, r2
 800baec:	3401      	adds	r4, #1
 800baee:	9304      	str	r3, [sp, #16]
 800baf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf4:	4825      	ldr	r0, [pc, #148]	; (800bb8c <_svfiprintf_r+0x1ec>)
 800baf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bafa:	2206      	movs	r2, #6
 800bafc:	f7f4 fba0 	bl	8000240 <memchr>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d038      	beq.n	800bb76 <_svfiprintf_r+0x1d6>
 800bb04:	4b22      	ldr	r3, [pc, #136]	; (800bb90 <_svfiprintf_r+0x1f0>)
 800bb06:	bb1b      	cbnz	r3, 800bb50 <_svfiprintf_r+0x1b0>
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	3307      	adds	r3, #7
 800bb0c:	f023 0307 	bic.w	r3, r3, #7
 800bb10:	3308      	adds	r3, #8
 800bb12:	9303      	str	r3, [sp, #12]
 800bb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb16:	4433      	add	r3, r6
 800bb18:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1a:	e768      	b.n	800b9ee <_svfiprintf_r+0x4e>
 800bb1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb20:	460c      	mov	r4, r1
 800bb22:	2001      	movs	r0, #1
 800bb24:	e7a6      	b.n	800ba74 <_svfiprintf_r+0xd4>
 800bb26:	2300      	movs	r3, #0
 800bb28:	3401      	adds	r4, #1
 800bb2a:	9305      	str	r3, [sp, #20]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	f04f 0c0a 	mov.w	ip, #10
 800bb32:	4620      	mov	r0, r4
 800bb34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb38:	3a30      	subs	r2, #48	; 0x30
 800bb3a:	2a09      	cmp	r2, #9
 800bb3c:	d903      	bls.n	800bb46 <_svfiprintf_r+0x1a6>
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d0c6      	beq.n	800bad0 <_svfiprintf_r+0x130>
 800bb42:	9105      	str	r1, [sp, #20]
 800bb44:	e7c4      	b.n	800bad0 <_svfiprintf_r+0x130>
 800bb46:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e7f0      	b.n	800bb32 <_svfiprintf_r+0x192>
 800bb50:	ab03      	add	r3, sp, #12
 800bb52:	9300      	str	r3, [sp, #0]
 800bb54:	462a      	mov	r2, r5
 800bb56:	4b0f      	ldr	r3, [pc, #60]	; (800bb94 <_svfiprintf_r+0x1f4>)
 800bb58:	a904      	add	r1, sp, #16
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	f3af 8000 	nop.w
 800bb60:	1c42      	adds	r2, r0, #1
 800bb62:	4606      	mov	r6, r0
 800bb64:	d1d6      	bne.n	800bb14 <_svfiprintf_r+0x174>
 800bb66:	89ab      	ldrh	r3, [r5, #12]
 800bb68:	065b      	lsls	r3, r3, #25
 800bb6a:	f53f af2d 	bmi.w	800b9c8 <_svfiprintf_r+0x28>
 800bb6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb70:	b01d      	add	sp, #116	; 0x74
 800bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb76:	ab03      	add	r3, sp, #12
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <_svfiprintf_r+0x1f4>)
 800bb7e:	a904      	add	r1, sp, #16
 800bb80:	4638      	mov	r0, r7
 800bb82:	f000 f879 	bl	800bc78 <_printf_i>
 800bb86:	e7eb      	b.n	800bb60 <_svfiprintf_r+0x1c0>
 800bb88:	0800f49b 	.word	0x0800f49b
 800bb8c:	0800f4a5 	.word	0x0800f4a5
 800bb90:	00000000 	.word	0x00000000
 800bb94:	0800b8ed 	.word	0x0800b8ed
 800bb98:	0800f4a1 	.word	0x0800f4a1

0800bb9c <_printf_common>:
 800bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	4616      	mov	r6, r2
 800bba2:	4699      	mov	r9, r3
 800bba4:	688a      	ldr	r2, [r1, #8]
 800bba6:	690b      	ldr	r3, [r1, #16]
 800bba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbac:	4293      	cmp	r3, r2
 800bbae:	bfb8      	it	lt
 800bbb0:	4613      	movlt	r3, r2
 800bbb2:	6033      	str	r3, [r6, #0]
 800bbb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbb8:	4607      	mov	r7, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	b10a      	cbz	r2, 800bbc2 <_printf_common+0x26>
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	6033      	str	r3, [r6, #0]
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	0699      	lsls	r1, r3, #26
 800bbc6:	bf42      	ittt	mi
 800bbc8:	6833      	ldrmi	r3, [r6, #0]
 800bbca:	3302      	addmi	r3, #2
 800bbcc:	6033      	strmi	r3, [r6, #0]
 800bbce:	6825      	ldr	r5, [r4, #0]
 800bbd0:	f015 0506 	ands.w	r5, r5, #6
 800bbd4:	d106      	bne.n	800bbe4 <_printf_common+0x48>
 800bbd6:	f104 0a19 	add.w	sl, r4, #25
 800bbda:	68e3      	ldr	r3, [r4, #12]
 800bbdc:	6832      	ldr	r2, [r6, #0]
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	42ab      	cmp	r3, r5
 800bbe2:	dc26      	bgt.n	800bc32 <_printf_common+0x96>
 800bbe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bbe8:	1e13      	subs	r3, r2, #0
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	bf18      	it	ne
 800bbee:	2301      	movne	r3, #1
 800bbf0:	0692      	lsls	r2, r2, #26
 800bbf2:	d42b      	bmi.n	800bc4c <_printf_common+0xb0>
 800bbf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	47c0      	blx	r8
 800bbfe:	3001      	adds	r0, #1
 800bc00:	d01e      	beq.n	800bc40 <_printf_common+0xa4>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	6922      	ldr	r2, [r4, #16]
 800bc06:	f003 0306 	and.w	r3, r3, #6
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	bf02      	ittt	eq
 800bc0e:	68e5      	ldreq	r5, [r4, #12]
 800bc10:	6833      	ldreq	r3, [r6, #0]
 800bc12:	1aed      	subeq	r5, r5, r3
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	bf0c      	ite	eq
 800bc18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc1c:	2500      	movne	r5, #0
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	bfc4      	itt	gt
 800bc22:	1a9b      	subgt	r3, r3, r2
 800bc24:	18ed      	addgt	r5, r5, r3
 800bc26:	2600      	movs	r6, #0
 800bc28:	341a      	adds	r4, #26
 800bc2a:	42b5      	cmp	r5, r6
 800bc2c:	d11a      	bne.n	800bc64 <_printf_common+0xc8>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e008      	b.n	800bc44 <_printf_common+0xa8>
 800bc32:	2301      	movs	r3, #1
 800bc34:	4652      	mov	r2, sl
 800bc36:	4649      	mov	r1, r9
 800bc38:	4638      	mov	r0, r7
 800bc3a:	47c0      	blx	r8
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d103      	bne.n	800bc48 <_printf_common+0xac>
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc48:	3501      	adds	r5, #1
 800bc4a:	e7c6      	b.n	800bbda <_printf_common+0x3e>
 800bc4c:	18e1      	adds	r1, r4, r3
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	2030      	movs	r0, #48	; 0x30
 800bc52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc56:	4422      	add	r2, r4
 800bc58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc60:	3302      	adds	r3, #2
 800bc62:	e7c7      	b.n	800bbf4 <_printf_common+0x58>
 800bc64:	2301      	movs	r3, #1
 800bc66:	4622      	mov	r2, r4
 800bc68:	4649      	mov	r1, r9
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	47c0      	blx	r8
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d0e6      	beq.n	800bc40 <_printf_common+0xa4>
 800bc72:	3601      	adds	r6, #1
 800bc74:	e7d9      	b.n	800bc2a <_printf_common+0x8e>
	...

0800bc78 <_printf_i>:
 800bc78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	7e0f      	ldrb	r7, [r1, #24]
 800bc7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc80:	2f78      	cmp	r7, #120	; 0x78
 800bc82:	4691      	mov	r9, r2
 800bc84:	4680      	mov	r8, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	469a      	mov	sl, r3
 800bc8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc8e:	d807      	bhi.n	800bca0 <_printf_i+0x28>
 800bc90:	2f62      	cmp	r7, #98	; 0x62
 800bc92:	d80a      	bhi.n	800bcaa <_printf_i+0x32>
 800bc94:	2f00      	cmp	r7, #0
 800bc96:	f000 80d4 	beq.w	800be42 <_printf_i+0x1ca>
 800bc9a:	2f58      	cmp	r7, #88	; 0x58
 800bc9c:	f000 80c0 	beq.w	800be20 <_printf_i+0x1a8>
 800bca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bca4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bca8:	e03a      	b.n	800bd20 <_printf_i+0xa8>
 800bcaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcae:	2b15      	cmp	r3, #21
 800bcb0:	d8f6      	bhi.n	800bca0 <_printf_i+0x28>
 800bcb2:	a101      	add	r1, pc, #4	; (adr r1, 800bcb8 <_printf_i+0x40>)
 800bcb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcb8:	0800bd11 	.word	0x0800bd11
 800bcbc:	0800bd25 	.word	0x0800bd25
 800bcc0:	0800bca1 	.word	0x0800bca1
 800bcc4:	0800bca1 	.word	0x0800bca1
 800bcc8:	0800bca1 	.word	0x0800bca1
 800bccc:	0800bca1 	.word	0x0800bca1
 800bcd0:	0800bd25 	.word	0x0800bd25
 800bcd4:	0800bca1 	.word	0x0800bca1
 800bcd8:	0800bca1 	.word	0x0800bca1
 800bcdc:	0800bca1 	.word	0x0800bca1
 800bce0:	0800bca1 	.word	0x0800bca1
 800bce4:	0800be29 	.word	0x0800be29
 800bce8:	0800bd51 	.word	0x0800bd51
 800bcec:	0800bde3 	.word	0x0800bde3
 800bcf0:	0800bca1 	.word	0x0800bca1
 800bcf4:	0800bca1 	.word	0x0800bca1
 800bcf8:	0800be4b 	.word	0x0800be4b
 800bcfc:	0800bca1 	.word	0x0800bca1
 800bd00:	0800bd51 	.word	0x0800bd51
 800bd04:	0800bca1 	.word	0x0800bca1
 800bd08:	0800bca1 	.word	0x0800bca1
 800bd0c:	0800bdeb 	.word	0x0800bdeb
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	1d1a      	adds	r2, r3, #4
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	602a      	str	r2, [r5, #0]
 800bd18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd20:	2301      	movs	r3, #1
 800bd22:	e09f      	b.n	800be64 <_printf_i+0x1ec>
 800bd24:	6820      	ldr	r0, [r4, #0]
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	0607      	lsls	r7, r0, #24
 800bd2a:	f103 0104 	add.w	r1, r3, #4
 800bd2e:	6029      	str	r1, [r5, #0]
 800bd30:	d501      	bpl.n	800bd36 <_printf_i+0xbe>
 800bd32:	681e      	ldr	r6, [r3, #0]
 800bd34:	e003      	b.n	800bd3e <_printf_i+0xc6>
 800bd36:	0646      	lsls	r6, r0, #25
 800bd38:	d5fb      	bpl.n	800bd32 <_printf_i+0xba>
 800bd3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd3e:	2e00      	cmp	r6, #0
 800bd40:	da03      	bge.n	800bd4a <_printf_i+0xd2>
 800bd42:	232d      	movs	r3, #45	; 0x2d
 800bd44:	4276      	negs	r6, r6
 800bd46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4a:	485a      	ldr	r0, [pc, #360]	; (800beb4 <_printf_i+0x23c>)
 800bd4c:	230a      	movs	r3, #10
 800bd4e:	e012      	b.n	800bd76 <_printf_i+0xfe>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	6820      	ldr	r0, [r4, #0]
 800bd54:	1d19      	adds	r1, r3, #4
 800bd56:	6029      	str	r1, [r5, #0]
 800bd58:	0605      	lsls	r5, r0, #24
 800bd5a:	d501      	bpl.n	800bd60 <_printf_i+0xe8>
 800bd5c:	681e      	ldr	r6, [r3, #0]
 800bd5e:	e002      	b.n	800bd66 <_printf_i+0xee>
 800bd60:	0641      	lsls	r1, r0, #25
 800bd62:	d5fb      	bpl.n	800bd5c <_printf_i+0xe4>
 800bd64:	881e      	ldrh	r6, [r3, #0]
 800bd66:	4853      	ldr	r0, [pc, #332]	; (800beb4 <_printf_i+0x23c>)
 800bd68:	2f6f      	cmp	r7, #111	; 0x6f
 800bd6a:	bf0c      	ite	eq
 800bd6c:	2308      	moveq	r3, #8
 800bd6e:	230a      	movne	r3, #10
 800bd70:	2100      	movs	r1, #0
 800bd72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd76:	6865      	ldr	r5, [r4, #4]
 800bd78:	60a5      	str	r5, [r4, #8]
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	bfa2      	ittt	ge
 800bd7e:	6821      	ldrge	r1, [r4, #0]
 800bd80:	f021 0104 	bicge.w	r1, r1, #4
 800bd84:	6021      	strge	r1, [r4, #0]
 800bd86:	b90e      	cbnz	r6, 800bd8c <_printf_i+0x114>
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	d04b      	beq.n	800be24 <_printf_i+0x1ac>
 800bd8c:	4615      	mov	r5, r2
 800bd8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd92:	fb03 6711 	mls	r7, r3, r1, r6
 800bd96:	5dc7      	ldrb	r7, [r0, r7]
 800bd98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd9c:	4637      	mov	r7, r6
 800bd9e:	42bb      	cmp	r3, r7
 800bda0:	460e      	mov	r6, r1
 800bda2:	d9f4      	bls.n	800bd8e <_printf_i+0x116>
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d10b      	bne.n	800bdc0 <_printf_i+0x148>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	07de      	lsls	r6, r3, #31
 800bdac:	d508      	bpl.n	800bdc0 <_printf_i+0x148>
 800bdae:	6923      	ldr	r3, [r4, #16]
 800bdb0:	6861      	ldr	r1, [r4, #4]
 800bdb2:	4299      	cmp	r1, r3
 800bdb4:	bfde      	ittt	le
 800bdb6:	2330      	movle	r3, #48	; 0x30
 800bdb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdbc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bdc0:	1b52      	subs	r2, r2, r5
 800bdc2:	6122      	str	r2, [r4, #16]
 800bdc4:	f8cd a000 	str.w	sl, [sp]
 800bdc8:	464b      	mov	r3, r9
 800bdca:	aa03      	add	r2, sp, #12
 800bdcc:	4621      	mov	r1, r4
 800bdce:	4640      	mov	r0, r8
 800bdd0:	f7ff fee4 	bl	800bb9c <_printf_common>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d14a      	bne.n	800be6e <_printf_i+0x1f6>
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bddc:	b004      	add	sp, #16
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	f043 0320 	orr.w	r3, r3, #32
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	4833      	ldr	r0, [pc, #204]	; (800beb8 <_printf_i+0x240>)
 800bdec:	2778      	movs	r7, #120	; 0x78
 800bdee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	6829      	ldr	r1, [r5, #0]
 800bdf6:	061f      	lsls	r7, r3, #24
 800bdf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdfc:	d402      	bmi.n	800be04 <_printf_i+0x18c>
 800bdfe:	065f      	lsls	r7, r3, #25
 800be00:	bf48      	it	mi
 800be02:	b2b6      	uxthmi	r6, r6
 800be04:	07df      	lsls	r7, r3, #31
 800be06:	bf48      	it	mi
 800be08:	f043 0320 	orrmi.w	r3, r3, #32
 800be0c:	6029      	str	r1, [r5, #0]
 800be0e:	bf48      	it	mi
 800be10:	6023      	strmi	r3, [r4, #0]
 800be12:	b91e      	cbnz	r6, 800be1c <_printf_i+0x1a4>
 800be14:	6823      	ldr	r3, [r4, #0]
 800be16:	f023 0320 	bic.w	r3, r3, #32
 800be1a:	6023      	str	r3, [r4, #0]
 800be1c:	2310      	movs	r3, #16
 800be1e:	e7a7      	b.n	800bd70 <_printf_i+0xf8>
 800be20:	4824      	ldr	r0, [pc, #144]	; (800beb4 <_printf_i+0x23c>)
 800be22:	e7e4      	b.n	800bdee <_printf_i+0x176>
 800be24:	4615      	mov	r5, r2
 800be26:	e7bd      	b.n	800bda4 <_printf_i+0x12c>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	6826      	ldr	r6, [r4, #0]
 800be2c:	6961      	ldr	r1, [r4, #20]
 800be2e:	1d18      	adds	r0, r3, #4
 800be30:	6028      	str	r0, [r5, #0]
 800be32:	0635      	lsls	r5, r6, #24
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	d501      	bpl.n	800be3c <_printf_i+0x1c4>
 800be38:	6019      	str	r1, [r3, #0]
 800be3a:	e002      	b.n	800be42 <_printf_i+0x1ca>
 800be3c:	0670      	lsls	r0, r6, #25
 800be3e:	d5fb      	bpl.n	800be38 <_printf_i+0x1c0>
 800be40:	8019      	strh	r1, [r3, #0]
 800be42:	2300      	movs	r3, #0
 800be44:	6123      	str	r3, [r4, #16]
 800be46:	4615      	mov	r5, r2
 800be48:	e7bc      	b.n	800bdc4 <_printf_i+0x14c>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	1d1a      	adds	r2, r3, #4
 800be4e:	602a      	str	r2, [r5, #0]
 800be50:	681d      	ldr	r5, [r3, #0]
 800be52:	6862      	ldr	r2, [r4, #4]
 800be54:	2100      	movs	r1, #0
 800be56:	4628      	mov	r0, r5
 800be58:	f7f4 f9f2 	bl	8000240 <memchr>
 800be5c:	b108      	cbz	r0, 800be62 <_printf_i+0x1ea>
 800be5e:	1b40      	subs	r0, r0, r5
 800be60:	6060      	str	r0, [r4, #4]
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	6123      	str	r3, [r4, #16]
 800be66:	2300      	movs	r3, #0
 800be68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be6c:	e7aa      	b.n	800bdc4 <_printf_i+0x14c>
 800be6e:	6923      	ldr	r3, [r4, #16]
 800be70:	462a      	mov	r2, r5
 800be72:	4649      	mov	r1, r9
 800be74:	4640      	mov	r0, r8
 800be76:	47d0      	blx	sl
 800be78:	3001      	adds	r0, #1
 800be7a:	d0ad      	beq.n	800bdd8 <_printf_i+0x160>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	079b      	lsls	r3, r3, #30
 800be80:	d413      	bmi.n	800beaa <_printf_i+0x232>
 800be82:	68e0      	ldr	r0, [r4, #12]
 800be84:	9b03      	ldr	r3, [sp, #12]
 800be86:	4298      	cmp	r0, r3
 800be88:	bfb8      	it	lt
 800be8a:	4618      	movlt	r0, r3
 800be8c:	e7a6      	b.n	800bddc <_printf_i+0x164>
 800be8e:	2301      	movs	r3, #1
 800be90:	4632      	mov	r2, r6
 800be92:	4649      	mov	r1, r9
 800be94:	4640      	mov	r0, r8
 800be96:	47d0      	blx	sl
 800be98:	3001      	adds	r0, #1
 800be9a:	d09d      	beq.n	800bdd8 <_printf_i+0x160>
 800be9c:	3501      	adds	r5, #1
 800be9e:	68e3      	ldr	r3, [r4, #12]
 800bea0:	9903      	ldr	r1, [sp, #12]
 800bea2:	1a5b      	subs	r3, r3, r1
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	dcf2      	bgt.n	800be8e <_printf_i+0x216>
 800bea8:	e7eb      	b.n	800be82 <_printf_i+0x20a>
 800beaa:	2500      	movs	r5, #0
 800beac:	f104 0619 	add.w	r6, r4, #25
 800beb0:	e7f5      	b.n	800be9e <_printf_i+0x226>
 800beb2:	bf00      	nop
 800beb4:	0800f4ac 	.word	0x0800f4ac
 800beb8:	0800f4bd 	.word	0x0800f4bd

0800bebc <__sflush_r>:
 800bebc:	898a      	ldrh	r2, [r1, #12]
 800bebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec2:	4605      	mov	r5, r0
 800bec4:	0710      	lsls	r0, r2, #28
 800bec6:	460c      	mov	r4, r1
 800bec8:	d458      	bmi.n	800bf7c <__sflush_r+0xc0>
 800beca:	684b      	ldr	r3, [r1, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	dc05      	bgt.n	800bedc <__sflush_r+0x20>
 800bed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dc02      	bgt.n	800bedc <__sflush_r+0x20>
 800bed6:	2000      	movs	r0, #0
 800bed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bede:	2e00      	cmp	r6, #0
 800bee0:	d0f9      	beq.n	800bed6 <__sflush_r+0x1a>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bee8:	682f      	ldr	r7, [r5, #0]
 800beea:	6a21      	ldr	r1, [r4, #32]
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	d032      	beq.n	800bf56 <__sflush_r+0x9a>
 800bef0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	075a      	lsls	r2, r3, #29
 800bef6:	d505      	bpl.n	800bf04 <__sflush_r+0x48>
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	1ac0      	subs	r0, r0, r3
 800befc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800befe:	b10b      	cbz	r3, 800bf04 <__sflush_r+0x48>
 800bf00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf02:	1ac0      	subs	r0, r0, r3
 800bf04:	2300      	movs	r3, #0
 800bf06:	4602      	mov	r2, r0
 800bf08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf0a:	6a21      	ldr	r1, [r4, #32]
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	47b0      	blx	r6
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	d106      	bne.n	800bf24 <__sflush_r+0x68>
 800bf16:	6829      	ldr	r1, [r5, #0]
 800bf18:	291d      	cmp	r1, #29
 800bf1a:	d82b      	bhi.n	800bf74 <__sflush_r+0xb8>
 800bf1c:	4a29      	ldr	r2, [pc, #164]	; (800bfc4 <__sflush_r+0x108>)
 800bf1e:	410a      	asrs	r2, r1
 800bf20:	07d6      	lsls	r6, r2, #31
 800bf22:	d427      	bmi.n	800bf74 <__sflush_r+0xb8>
 800bf24:	2200      	movs	r2, #0
 800bf26:	6062      	str	r2, [r4, #4]
 800bf28:	04d9      	lsls	r1, r3, #19
 800bf2a:	6922      	ldr	r2, [r4, #16]
 800bf2c:	6022      	str	r2, [r4, #0]
 800bf2e:	d504      	bpl.n	800bf3a <__sflush_r+0x7e>
 800bf30:	1c42      	adds	r2, r0, #1
 800bf32:	d101      	bne.n	800bf38 <__sflush_r+0x7c>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	b903      	cbnz	r3, 800bf3a <__sflush_r+0x7e>
 800bf38:	6560      	str	r0, [r4, #84]	; 0x54
 800bf3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf3c:	602f      	str	r7, [r5, #0]
 800bf3e:	2900      	cmp	r1, #0
 800bf40:	d0c9      	beq.n	800bed6 <__sflush_r+0x1a>
 800bf42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf46:	4299      	cmp	r1, r3
 800bf48:	d002      	beq.n	800bf50 <__sflush_r+0x94>
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7ff fc82 	bl	800b854 <_free_r>
 800bf50:	2000      	movs	r0, #0
 800bf52:	6360      	str	r0, [r4, #52]	; 0x34
 800bf54:	e7c0      	b.n	800bed8 <__sflush_r+0x1c>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4628      	mov	r0, r5
 800bf5a:	47b0      	blx	r6
 800bf5c:	1c41      	adds	r1, r0, #1
 800bf5e:	d1c8      	bne.n	800bef2 <__sflush_r+0x36>
 800bf60:	682b      	ldr	r3, [r5, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0c5      	beq.n	800bef2 <__sflush_r+0x36>
 800bf66:	2b1d      	cmp	r3, #29
 800bf68:	d001      	beq.n	800bf6e <__sflush_r+0xb2>
 800bf6a:	2b16      	cmp	r3, #22
 800bf6c:	d101      	bne.n	800bf72 <__sflush_r+0xb6>
 800bf6e:	602f      	str	r7, [r5, #0]
 800bf70:	e7b1      	b.n	800bed6 <__sflush_r+0x1a>
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	e7ad      	b.n	800bed8 <__sflush_r+0x1c>
 800bf7c:	690f      	ldr	r7, [r1, #16]
 800bf7e:	2f00      	cmp	r7, #0
 800bf80:	d0a9      	beq.n	800bed6 <__sflush_r+0x1a>
 800bf82:	0793      	lsls	r3, r2, #30
 800bf84:	680e      	ldr	r6, [r1, #0]
 800bf86:	bf08      	it	eq
 800bf88:	694b      	ldreq	r3, [r1, #20]
 800bf8a:	600f      	str	r7, [r1, #0]
 800bf8c:	bf18      	it	ne
 800bf8e:	2300      	movne	r3, #0
 800bf90:	eba6 0807 	sub.w	r8, r6, r7
 800bf94:	608b      	str	r3, [r1, #8]
 800bf96:	f1b8 0f00 	cmp.w	r8, #0
 800bf9a:	dd9c      	ble.n	800bed6 <__sflush_r+0x1a>
 800bf9c:	6a21      	ldr	r1, [r4, #32]
 800bf9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfa0:	4643      	mov	r3, r8
 800bfa2:	463a      	mov	r2, r7
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	47b0      	blx	r6
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	dc06      	bgt.n	800bfba <__sflush_r+0xfe>
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfb8:	e78e      	b.n	800bed8 <__sflush_r+0x1c>
 800bfba:	4407      	add	r7, r0
 800bfbc:	eba8 0800 	sub.w	r8, r8, r0
 800bfc0:	e7e9      	b.n	800bf96 <__sflush_r+0xda>
 800bfc2:	bf00      	nop
 800bfc4:	dfbffffe 	.word	0xdfbffffe

0800bfc8 <_fflush_r>:
 800bfc8:	b538      	push	{r3, r4, r5, lr}
 800bfca:	690b      	ldr	r3, [r1, #16]
 800bfcc:	4605      	mov	r5, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	b913      	cbnz	r3, 800bfd8 <_fflush_r+0x10>
 800bfd2:	2500      	movs	r5, #0
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	b118      	cbz	r0, 800bfe2 <_fflush_r+0x1a>
 800bfda:	6a03      	ldr	r3, [r0, #32]
 800bfdc:	b90b      	cbnz	r3, 800bfe2 <_fflush_r+0x1a>
 800bfde:	f7ff fb3b 	bl	800b658 <__sinit>
 800bfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0f3      	beq.n	800bfd2 <_fflush_r+0xa>
 800bfea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfec:	07d0      	lsls	r0, r2, #31
 800bfee:	d404      	bmi.n	800bffa <_fflush_r+0x32>
 800bff0:	0599      	lsls	r1, r3, #22
 800bff2:	d402      	bmi.n	800bffa <_fflush_r+0x32>
 800bff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bff6:	f7ff fbfe 	bl	800b7f6 <__retarget_lock_acquire_recursive>
 800bffa:	4628      	mov	r0, r5
 800bffc:	4621      	mov	r1, r4
 800bffe:	f7ff ff5d 	bl	800bebc <__sflush_r>
 800c002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c004:	07da      	lsls	r2, r3, #31
 800c006:	4605      	mov	r5, r0
 800c008:	d4e4      	bmi.n	800bfd4 <_fflush_r+0xc>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	059b      	lsls	r3, r3, #22
 800c00e:	d4e1      	bmi.n	800bfd4 <_fflush_r+0xc>
 800c010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c012:	f7ff fbf1 	bl	800b7f8 <__retarget_lock_release_recursive>
 800c016:	e7dd      	b.n	800bfd4 <_fflush_r+0xc>

0800c018 <__sread>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	460c      	mov	r4, r1
 800c01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c020:	f000 f8bc 	bl	800c19c <_read_r>
 800c024:	2800      	cmp	r0, #0
 800c026:	bfab      	itete	ge
 800c028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c02a:	89a3      	ldrhlt	r3, [r4, #12]
 800c02c:	181b      	addge	r3, r3, r0
 800c02e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c032:	bfac      	ite	ge
 800c034:	6563      	strge	r3, [r4, #84]	; 0x54
 800c036:	81a3      	strhlt	r3, [r4, #12]
 800c038:	bd10      	pop	{r4, pc}

0800c03a <__swrite>:
 800c03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	461f      	mov	r7, r3
 800c040:	898b      	ldrh	r3, [r1, #12]
 800c042:	05db      	lsls	r3, r3, #23
 800c044:	4605      	mov	r5, r0
 800c046:	460c      	mov	r4, r1
 800c048:	4616      	mov	r6, r2
 800c04a:	d505      	bpl.n	800c058 <__swrite+0x1e>
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	2302      	movs	r3, #2
 800c052:	2200      	movs	r2, #0
 800c054:	f000 f890 	bl	800c178 <_lseek_r>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06e:	f000 b8a7 	b.w	800c1c0 <_write_r>

0800c072 <__sseek>:
 800c072:	b510      	push	{r4, lr}
 800c074:	460c      	mov	r4, r1
 800c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07a:	f000 f87d 	bl	800c178 <_lseek_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	bf15      	itete	ne
 800c084:	6560      	strne	r0, [r4, #84]	; 0x54
 800c086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c08a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08e:	81a3      	strheq	r3, [r4, #12]
 800c090:	bf18      	it	ne
 800c092:	81a3      	strhne	r3, [r4, #12]
 800c094:	bd10      	pop	{r4, pc}

0800c096 <__sclose>:
 800c096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c09a:	f000 b85d 	b.w	800c158 <_close_r>
	...

0800c0a0 <fiprintf>:
 800c0a0:	b40e      	push	{r1, r2, r3}
 800c0a2:	b503      	push	{r0, r1, lr}
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	ab03      	add	r3, sp, #12
 800c0a8:	4805      	ldr	r0, [pc, #20]	; (800c0c0 <fiprintf+0x20>)
 800c0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0ae:	6800      	ldr	r0, [r0, #0]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	f000 f8c7 	bl	800c244 <_vfiprintf_r>
 800c0b6:	b002      	add	sp, #8
 800c0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0bc:	b003      	add	sp, #12
 800c0be:	4770      	bx	lr
 800c0c0:	20000088 	.word	0x20000088

0800c0c4 <_realloc_r>:
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	4680      	mov	r8, r0
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	b921      	cbnz	r1, 800c0da <_realloc_r+0x16>
 800c0d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	f7ff b949 	b.w	800b36c <_malloc_r>
 800c0da:	b92a      	cbnz	r2, 800c0e8 <_realloc_r+0x24>
 800c0dc:	f7ff fbba 	bl	800b854 <_free_r>
 800c0e0:	4625      	mov	r5, r4
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	f000 f9c6 	bl	800c478 <_malloc_usable_size_r>
 800c0ec:	4284      	cmp	r4, r0
 800c0ee:	4607      	mov	r7, r0
 800c0f0:	d802      	bhi.n	800c0f8 <_realloc_r+0x34>
 800c0f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0f6:	d812      	bhi.n	800c11e <_realloc_r+0x5a>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7ff f936 	bl	800b36c <_malloc_r>
 800c100:	4605      	mov	r5, r0
 800c102:	2800      	cmp	r0, #0
 800c104:	d0ed      	beq.n	800c0e2 <_realloc_r+0x1e>
 800c106:	42bc      	cmp	r4, r7
 800c108:	4622      	mov	r2, r4
 800c10a:	4631      	mov	r1, r6
 800c10c:	bf28      	it	cs
 800c10e:	463a      	movcs	r2, r7
 800c110:	f7ff fb73 	bl	800b7fa <memcpy>
 800c114:	4631      	mov	r1, r6
 800c116:	4640      	mov	r0, r8
 800c118:	f7ff fb9c 	bl	800b854 <_free_r>
 800c11c:	e7e1      	b.n	800c0e2 <_realloc_r+0x1e>
 800c11e:	4635      	mov	r5, r6
 800c120:	e7df      	b.n	800c0e2 <_realloc_r+0x1e>

0800c122 <memmove>:
 800c122:	4288      	cmp	r0, r1
 800c124:	b510      	push	{r4, lr}
 800c126:	eb01 0402 	add.w	r4, r1, r2
 800c12a:	d902      	bls.n	800c132 <memmove+0x10>
 800c12c:	4284      	cmp	r4, r0
 800c12e:	4623      	mov	r3, r4
 800c130:	d807      	bhi.n	800c142 <memmove+0x20>
 800c132:	1e43      	subs	r3, r0, #1
 800c134:	42a1      	cmp	r1, r4
 800c136:	d008      	beq.n	800c14a <memmove+0x28>
 800c138:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c13c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c140:	e7f8      	b.n	800c134 <memmove+0x12>
 800c142:	4402      	add	r2, r0
 800c144:	4601      	mov	r1, r0
 800c146:	428a      	cmp	r2, r1
 800c148:	d100      	bne.n	800c14c <memmove+0x2a>
 800c14a:	bd10      	pop	{r4, pc}
 800c14c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c150:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c154:	e7f7      	b.n	800c146 <memmove+0x24>
	...

0800c158 <_close_r>:
 800c158:	b538      	push	{r3, r4, r5, lr}
 800c15a:	4d06      	ldr	r5, [pc, #24]	; (800c174 <_close_r+0x1c>)
 800c15c:	2300      	movs	r3, #0
 800c15e:	4604      	mov	r4, r0
 800c160:	4608      	mov	r0, r1
 800c162:	602b      	str	r3, [r5, #0]
 800c164:	f7f7 f9d9 	bl	800351a <_close>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_close_r+0x1a>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_close_r+0x1a>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	20005110 	.word	0x20005110

0800c178 <_lseek_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4d07      	ldr	r5, [pc, #28]	; (800c198 <_lseek_r+0x20>)
 800c17c:	4604      	mov	r4, r0
 800c17e:	4608      	mov	r0, r1
 800c180:	4611      	mov	r1, r2
 800c182:	2200      	movs	r2, #0
 800c184:	602a      	str	r2, [r5, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	f7f7 f9ee 	bl	8003568 <_lseek>
 800c18c:	1c43      	adds	r3, r0, #1
 800c18e:	d102      	bne.n	800c196 <_lseek_r+0x1e>
 800c190:	682b      	ldr	r3, [r5, #0]
 800c192:	b103      	cbz	r3, 800c196 <_lseek_r+0x1e>
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	20005110 	.word	0x20005110

0800c19c <_read_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d07      	ldr	r5, [pc, #28]	; (800c1bc <_read_r+0x20>)
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	4608      	mov	r0, r1
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	602a      	str	r2, [r5, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f7f7 f97c 	bl	80034a8 <_read>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_read_r+0x1e>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_read_r+0x1e>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20005110 	.word	0x20005110

0800c1c0 <_write_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4d07      	ldr	r5, [pc, #28]	; (800c1e0 <_write_r+0x20>)
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	4608      	mov	r0, r1
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f7f7 f987 	bl	80034e2 <_write>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_write_r+0x1e>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_write_r+0x1e>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20005110 	.word	0x20005110

0800c1e4 <abort>:
 800c1e4:	b508      	push	{r3, lr}
 800c1e6:	2006      	movs	r0, #6
 800c1e8:	f000 fa90 	bl	800c70c <raise>
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	f7f7 f951 	bl	8003494 <_exit>

0800c1f2 <__sfputc_r>:
 800c1f2:	6893      	ldr	r3, [r2, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	b410      	push	{r4}
 800c1fa:	6093      	str	r3, [r2, #8]
 800c1fc:	da08      	bge.n	800c210 <__sfputc_r+0x1e>
 800c1fe:	6994      	ldr	r4, [r2, #24]
 800c200:	42a3      	cmp	r3, r4
 800c202:	db01      	blt.n	800c208 <__sfputc_r+0x16>
 800c204:	290a      	cmp	r1, #10
 800c206:	d103      	bne.n	800c210 <__sfputc_r+0x1e>
 800c208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c20c:	f000 b93c 	b.w	800c488 <__swbuf_r>
 800c210:	6813      	ldr	r3, [r2, #0]
 800c212:	1c58      	adds	r0, r3, #1
 800c214:	6010      	str	r0, [r2, #0]
 800c216:	7019      	strb	r1, [r3, #0]
 800c218:	4608      	mov	r0, r1
 800c21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <__sfputs_r>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	4606      	mov	r6, r0
 800c224:	460f      	mov	r7, r1
 800c226:	4614      	mov	r4, r2
 800c228:	18d5      	adds	r5, r2, r3
 800c22a:	42ac      	cmp	r4, r5
 800c22c:	d101      	bne.n	800c232 <__sfputs_r+0x12>
 800c22e:	2000      	movs	r0, #0
 800c230:	e007      	b.n	800c242 <__sfputs_r+0x22>
 800c232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c236:	463a      	mov	r2, r7
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff ffda 	bl	800c1f2 <__sfputc_r>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	d1f3      	bne.n	800c22a <__sfputs_r+0xa>
 800c242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c244 <_vfiprintf_r>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	460d      	mov	r5, r1
 800c24a:	b09d      	sub	sp, #116	; 0x74
 800c24c:	4614      	mov	r4, r2
 800c24e:	4698      	mov	r8, r3
 800c250:	4606      	mov	r6, r0
 800c252:	b118      	cbz	r0, 800c25c <_vfiprintf_r+0x18>
 800c254:	6a03      	ldr	r3, [r0, #32]
 800c256:	b90b      	cbnz	r3, 800c25c <_vfiprintf_r+0x18>
 800c258:	f7ff f9fe 	bl	800b658 <__sinit>
 800c25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c25e:	07d9      	lsls	r1, r3, #31
 800c260:	d405      	bmi.n	800c26e <_vfiprintf_r+0x2a>
 800c262:	89ab      	ldrh	r3, [r5, #12]
 800c264:	059a      	lsls	r2, r3, #22
 800c266:	d402      	bmi.n	800c26e <_vfiprintf_r+0x2a>
 800c268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c26a:	f7ff fac4 	bl	800b7f6 <__retarget_lock_acquire_recursive>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	071b      	lsls	r3, r3, #28
 800c272:	d501      	bpl.n	800c278 <_vfiprintf_r+0x34>
 800c274:	692b      	ldr	r3, [r5, #16]
 800c276:	b99b      	cbnz	r3, 800c2a0 <_vfiprintf_r+0x5c>
 800c278:	4629      	mov	r1, r5
 800c27a:	4630      	mov	r0, r6
 800c27c:	f000 f942 	bl	800c504 <__swsetup_r>
 800c280:	b170      	cbz	r0, 800c2a0 <_vfiprintf_r+0x5c>
 800c282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c284:	07dc      	lsls	r4, r3, #31
 800c286:	d504      	bpl.n	800c292 <_vfiprintf_r+0x4e>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c28c:	b01d      	add	sp, #116	; 0x74
 800c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	0598      	lsls	r0, r3, #22
 800c296:	d4f7      	bmi.n	800c288 <_vfiprintf_r+0x44>
 800c298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c29a:	f7ff faad 	bl	800b7f8 <__retarget_lock_release_recursive>
 800c29e:	e7f3      	b.n	800c288 <_vfiprintf_r+0x44>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a4:	2320      	movs	r3, #32
 800c2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ae:	2330      	movs	r3, #48	; 0x30
 800c2b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c464 <_vfiprintf_r+0x220>
 800c2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2b8:	f04f 0901 	mov.w	r9, #1
 800c2bc:	4623      	mov	r3, r4
 800c2be:	469a      	mov	sl, r3
 800c2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c4:	b10a      	cbz	r2, 800c2ca <_vfiprintf_r+0x86>
 800c2c6:	2a25      	cmp	r2, #37	; 0x25
 800c2c8:	d1f9      	bne.n	800c2be <_vfiprintf_r+0x7a>
 800c2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ce:	d00b      	beq.n	800c2e8 <_vfiprintf_r+0xa4>
 800c2d0:	465b      	mov	r3, fp
 800c2d2:	4622      	mov	r2, r4
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	f7ff ffa2 	bl	800c220 <__sfputs_r>
 800c2dc:	3001      	adds	r0, #1
 800c2de:	f000 80a9 	beq.w	800c434 <_vfiprintf_r+0x1f0>
 800c2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e4:	445a      	add	r2, fp
 800c2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80a1 	beq.w	800c434 <_vfiprintf_r+0x1f0>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2fc:	f10a 0a01 	add.w	sl, sl, #1
 800c300:	9304      	str	r3, [sp, #16]
 800c302:	9307      	str	r3, [sp, #28]
 800c304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c308:	931a      	str	r3, [sp, #104]	; 0x68
 800c30a:	4654      	mov	r4, sl
 800c30c:	2205      	movs	r2, #5
 800c30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c312:	4854      	ldr	r0, [pc, #336]	; (800c464 <_vfiprintf_r+0x220>)
 800c314:	f7f3 ff94 	bl	8000240 <memchr>
 800c318:	9a04      	ldr	r2, [sp, #16]
 800c31a:	b9d8      	cbnz	r0, 800c354 <_vfiprintf_r+0x110>
 800c31c:	06d1      	lsls	r1, r2, #27
 800c31e:	bf44      	itt	mi
 800c320:	2320      	movmi	r3, #32
 800c322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c326:	0713      	lsls	r3, r2, #28
 800c328:	bf44      	itt	mi
 800c32a:	232b      	movmi	r3, #43	; 0x2b
 800c32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c330:	f89a 3000 	ldrb.w	r3, [sl]
 800c334:	2b2a      	cmp	r3, #42	; 0x2a
 800c336:	d015      	beq.n	800c364 <_vfiprintf_r+0x120>
 800c338:	9a07      	ldr	r2, [sp, #28]
 800c33a:	4654      	mov	r4, sl
 800c33c:	2000      	movs	r0, #0
 800c33e:	f04f 0c0a 	mov.w	ip, #10
 800c342:	4621      	mov	r1, r4
 800c344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c348:	3b30      	subs	r3, #48	; 0x30
 800c34a:	2b09      	cmp	r3, #9
 800c34c:	d94d      	bls.n	800c3ea <_vfiprintf_r+0x1a6>
 800c34e:	b1b0      	cbz	r0, 800c37e <_vfiprintf_r+0x13a>
 800c350:	9207      	str	r2, [sp, #28]
 800c352:	e014      	b.n	800c37e <_vfiprintf_r+0x13a>
 800c354:	eba0 0308 	sub.w	r3, r0, r8
 800c358:	fa09 f303 	lsl.w	r3, r9, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	46a2      	mov	sl, r4
 800c362:	e7d2      	b.n	800c30a <_vfiprintf_r+0xc6>
 800c364:	9b03      	ldr	r3, [sp, #12]
 800c366:	1d19      	adds	r1, r3, #4
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	9103      	str	r1, [sp, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bfbb      	ittet	lt
 800c370:	425b      	neglt	r3, r3
 800c372:	f042 0202 	orrlt.w	r2, r2, #2
 800c376:	9307      	strge	r3, [sp, #28]
 800c378:	9307      	strlt	r3, [sp, #28]
 800c37a:	bfb8      	it	lt
 800c37c:	9204      	strlt	r2, [sp, #16]
 800c37e:	7823      	ldrb	r3, [r4, #0]
 800c380:	2b2e      	cmp	r3, #46	; 0x2e
 800c382:	d10c      	bne.n	800c39e <_vfiprintf_r+0x15a>
 800c384:	7863      	ldrb	r3, [r4, #1]
 800c386:	2b2a      	cmp	r3, #42	; 0x2a
 800c388:	d134      	bne.n	800c3f4 <_vfiprintf_r+0x1b0>
 800c38a:	9b03      	ldr	r3, [sp, #12]
 800c38c:	1d1a      	adds	r2, r3, #4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	9203      	str	r2, [sp, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	bfb8      	it	lt
 800c396:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c39a:	3402      	adds	r4, #2
 800c39c:	9305      	str	r3, [sp, #20]
 800c39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c474 <_vfiprintf_r+0x230>
 800c3a2:	7821      	ldrb	r1, [r4, #0]
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	4650      	mov	r0, sl
 800c3a8:	f7f3 ff4a 	bl	8000240 <memchr>
 800c3ac:	b138      	cbz	r0, 800c3be <_vfiprintf_r+0x17a>
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	eba0 000a 	sub.w	r0, r0, sl
 800c3b4:	2240      	movs	r2, #64	; 0x40
 800c3b6:	4082      	lsls	r2, r0
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	3401      	adds	r4, #1
 800c3bc:	9304      	str	r3, [sp, #16]
 800c3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c2:	4829      	ldr	r0, [pc, #164]	; (800c468 <_vfiprintf_r+0x224>)
 800c3c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3c8:	2206      	movs	r2, #6
 800c3ca:	f7f3 ff39 	bl	8000240 <memchr>
 800c3ce:	2800      	cmp	r0, #0
 800c3d0:	d03f      	beq.n	800c452 <_vfiprintf_r+0x20e>
 800c3d2:	4b26      	ldr	r3, [pc, #152]	; (800c46c <_vfiprintf_r+0x228>)
 800c3d4:	bb1b      	cbnz	r3, 800c41e <_vfiprintf_r+0x1da>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	3307      	adds	r3, #7
 800c3da:	f023 0307 	bic.w	r3, r3, #7
 800c3de:	3308      	adds	r3, #8
 800c3e0:	9303      	str	r3, [sp, #12]
 800c3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e4:	443b      	add	r3, r7
 800c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e8:	e768      	b.n	800c2bc <_vfiprintf_r+0x78>
 800c3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	e7a6      	b.n	800c342 <_vfiprintf_r+0xfe>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9305      	str	r3, [sp, #20]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f04f 0c0a 	mov.w	ip, #10
 800c400:	4620      	mov	r0, r4
 800c402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c406:	3a30      	subs	r2, #48	; 0x30
 800c408:	2a09      	cmp	r2, #9
 800c40a:	d903      	bls.n	800c414 <_vfiprintf_r+0x1d0>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0c6      	beq.n	800c39e <_vfiprintf_r+0x15a>
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	e7c4      	b.n	800c39e <_vfiprintf_r+0x15a>
 800c414:	fb0c 2101 	mla	r1, ip, r1, r2
 800c418:	4604      	mov	r4, r0
 800c41a:	2301      	movs	r3, #1
 800c41c:	e7f0      	b.n	800c400 <_vfiprintf_r+0x1bc>
 800c41e:	ab03      	add	r3, sp, #12
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	462a      	mov	r2, r5
 800c424:	4b12      	ldr	r3, [pc, #72]	; (800c470 <_vfiprintf_r+0x22c>)
 800c426:	a904      	add	r1, sp, #16
 800c428:	4630      	mov	r0, r6
 800c42a:	f3af 8000 	nop.w
 800c42e:	4607      	mov	r7, r0
 800c430:	1c78      	adds	r0, r7, #1
 800c432:	d1d6      	bne.n	800c3e2 <_vfiprintf_r+0x19e>
 800c434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c436:	07d9      	lsls	r1, r3, #31
 800c438:	d405      	bmi.n	800c446 <_vfiprintf_r+0x202>
 800c43a:	89ab      	ldrh	r3, [r5, #12]
 800c43c:	059a      	lsls	r2, r3, #22
 800c43e:	d402      	bmi.n	800c446 <_vfiprintf_r+0x202>
 800c440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c442:	f7ff f9d9 	bl	800b7f8 <__retarget_lock_release_recursive>
 800c446:	89ab      	ldrh	r3, [r5, #12]
 800c448:	065b      	lsls	r3, r3, #25
 800c44a:	f53f af1d 	bmi.w	800c288 <_vfiprintf_r+0x44>
 800c44e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c450:	e71c      	b.n	800c28c <_vfiprintf_r+0x48>
 800c452:	ab03      	add	r3, sp, #12
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	462a      	mov	r2, r5
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_vfiprintf_r+0x22c>)
 800c45a:	a904      	add	r1, sp, #16
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff fc0b 	bl	800bc78 <_printf_i>
 800c462:	e7e4      	b.n	800c42e <_vfiprintf_r+0x1ea>
 800c464:	0800f49b 	.word	0x0800f49b
 800c468:	0800f4a5 	.word	0x0800f4a5
 800c46c:	00000000 	.word	0x00000000
 800c470:	0800c221 	.word	0x0800c221
 800c474:	0800f4a1 	.word	0x0800f4a1

0800c478 <_malloc_usable_size_r>:
 800c478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c47c:	1f18      	subs	r0, r3, #4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	bfbc      	itt	lt
 800c482:	580b      	ldrlt	r3, [r1, r0]
 800c484:	18c0      	addlt	r0, r0, r3
 800c486:	4770      	bx	lr

0800c488 <__swbuf_r>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	460e      	mov	r6, r1
 800c48c:	4614      	mov	r4, r2
 800c48e:	4605      	mov	r5, r0
 800c490:	b118      	cbz	r0, 800c49a <__swbuf_r+0x12>
 800c492:	6a03      	ldr	r3, [r0, #32]
 800c494:	b90b      	cbnz	r3, 800c49a <__swbuf_r+0x12>
 800c496:	f7ff f8df 	bl	800b658 <__sinit>
 800c49a:	69a3      	ldr	r3, [r4, #24]
 800c49c:	60a3      	str	r3, [r4, #8]
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	071a      	lsls	r2, r3, #28
 800c4a2:	d525      	bpl.n	800c4f0 <__swbuf_r+0x68>
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	b31b      	cbz	r3, 800c4f0 <__swbuf_r+0x68>
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	6922      	ldr	r2, [r4, #16]
 800c4ac:	1a98      	subs	r0, r3, r2
 800c4ae:	6963      	ldr	r3, [r4, #20]
 800c4b0:	b2f6      	uxtb	r6, r6
 800c4b2:	4283      	cmp	r3, r0
 800c4b4:	4637      	mov	r7, r6
 800c4b6:	dc04      	bgt.n	800c4c2 <__swbuf_r+0x3a>
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7ff fd84 	bl	800bfc8 <_fflush_r>
 800c4c0:	b9e0      	cbnz	r0, 800c4fc <__swbuf_r+0x74>
 800c4c2:	68a3      	ldr	r3, [r4, #8]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	60a3      	str	r3, [r4, #8]
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	1c5a      	adds	r2, r3, #1
 800c4cc:	6022      	str	r2, [r4, #0]
 800c4ce:	701e      	strb	r6, [r3, #0]
 800c4d0:	6962      	ldr	r2, [r4, #20]
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d004      	beq.n	800c4e2 <__swbuf_r+0x5a>
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	07db      	lsls	r3, r3, #31
 800c4dc:	d506      	bpl.n	800c4ec <__swbuf_r+0x64>
 800c4de:	2e0a      	cmp	r6, #10
 800c4e0:	d104      	bne.n	800c4ec <__swbuf_r+0x64>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f7ff fd6f 	bl	800bfc8 <_fflush_r>
 800c4ea:	b938      	cbnz	r0, 800c4fc <__swbuf_r+0x74>
 800c4ec:	4638      	mov	r0, r7
 800c4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f000 f806 	bl	800c504 <__swsetup_r>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d0d5      	beq.n	800c4a8 <__swbuf_r+0x20>
 800c4fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c500:	e7f4      	b.n	800c4ec <__swbuf_r+0x64>
	...

0800c504 <__swsetup_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4b2a      	ldr	r3, [pc, #168]	; (800c5b0 <__swsetup_r+0xac>)
 800c508:	4605      	mov	r5, r0
 800c50a:	6818      	ldr	r0, [r3, #0]
 800c50c:	460c      	mov	r4, r1
 800c50e:	b118      	cbz	r0, 800c518 <__swsetup_r+0x14>
 800c510:	6a03      	ldr	r3, [r0, #32]
 800c512:	b90b      	cbnz	r3, 800c518 <__swsetup_r+0x14>
 800c514:	f7ff f8a0 	bl	800b658 <__sinit>
 800c518:	89a3      	ldrh	r3, [r4, #12]
 800c51a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c51e:	0718      	lsls	r0, r3, #28
 800c520:	d422      	bmi.n	800c568 <__swsetup_r+0x64>
 800c522:	06d9      	lsls	r1, r3, #27
 800c524:	d407      	bmi.n	800c536 <__swsetup_r+0x32>
 800c526:	2309      	movs	r3, #9
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c52e:	81a3      	strh	r3, [r4, #12]
 800c530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c534:	e034      	b.n	800c5a0 <__swsetup_r+0x9c>
 800c536:	0758      	lsls	r0, r3, #29
 800c538:	d512      	bpl.n	800c560 <__swsetup_r+0x5c>
 800c53a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c53c:	b141      	cbz	r1, 800c550 <__swsetup_r+0x4c>
 800c53e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c542:	4299      	cmp	r1, r3
 800c544:	d002      	beq.n	800c54c <__swsetup_r+0x48>
 800c546:	4628      	mov	r0, r5
 800c548:	f7ff f984 	bl	800b854 <_free_r>
 800c54c:	2300      	movs	r3, #0
 800c54e:	6363      	str	r3, [r4, #52]	; 0x34
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	2300      	movs	r3, #0
 800c55a:	6063      	str	r3, [r4, #4]
 800c55c:	6923      	ldr	r3, [r4, #16]
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	f043 0308 	orr.w	r3, r3, #8
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	6923      	ldr	r3, [r4, #16]
 800c56a:	b94b      	cbnz	r3, 800c580 <__swsetup_r+0x7c>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c576:	d003      	beq.n	800c580 <__swsetup_r+0x7c>
 800c578:	4621      	mov	r1, r4
 800c57a:	4628      	mov	r0, r5
 800c57c:	f000 f840 	bl	800c600 <__smakebuf_r>
 800c580:	89a0      	ldrh	r0, [r4, #12]
 800c582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c586:	f010 0301 	ands.w	r3, r0, #1
 800c58a:	d00a      	beq.n	800c5a2 <__swsetup_r+0x9e>
 800c58c:	2300      	movs	r3, #0
 800c58e:	60a3      	str	r3, [r4, #8]
 800c590:	6963      	ldr	r3, [r4, #20]
 800c592:	425b      	negs	r3, r3
 800c594:	61a3      	str	r3, [r4, #24]
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	b943      	cbnz	r3, 800c5ac <__swsetup_r+0xa8>
 800c59a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c59e:	d1c4      	bne.n	800c52a <__swsetup_r+0x26>
 800c5a0:	bd38      	pop	{r3, r4, r5, pc}
 800c5a2:	0781      	lsls	r1, r0, #30
 800c5a4:	bf58      	it	pl
 800c5a6:	6963      	ldrpl	r3, [r4, #20]
 800c5a8:	60a3      	str	r3, [r4, #8]
 800c5aa:	e7f4      	b.n	800c596 <__swsetup_r+0x92>
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e7f7      	b.n	800c5a0 <__swsetup_r+0x9c>
 800c5b0:	20000088 	.word	0x20000088

0800c5b4 <__swhatbuf_r>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	b096      	sub	sp, #88	; 0x58
 800c5c0:	4615      	mov	r5, r2
 800c5c2:	461e      	mov	r6, r3
 800c5c4:	da0d      	bge.n	800c5e2 <__swhatbuf_r+0x2e>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c5cc:	f04f 0100 	mov.w	r1, #0
 800c5d0:	bf0c      	ite	eq
 800c5d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c5d6:	2340      	movne	r3, #64	; 0x40
 800c5d8:	2000      	movs	r0, #0
 800c5da:	6031      	str	r1, [r6, #0]
 800c5dc:	602b      	str	r3, [r5, #0]
 800c5de:	b016      	add	sp, #88	; 0x58
 800c5e0:	bd70      	pop	{r4, r5, r6, pc}
 800c5e2:	466a      	mov	r2, sp
 800c5e4:	f000 f848 	bl	800c678 <_fstat_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	dbec      	blt.n	800c5c6 <__swhatbuf_r+0x12>
 800c5ec:	9901      	ldr	r1, [sp, #4]
 800c5ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c5f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c5f6:	4259      	negs	r1, r3
 800c5f8:	4159      	adcs	r1, r3
 800c5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5fe:	e7eb      	b.n	800c5d8 <__swhatbuf_r+0x24>

0800c600 <__smakebuf_r>:
 800c600:	898b      	ldrh	r3, [r1, #12]
 800c602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c604:	079d      	lsls	r5, r3, #30
 800c606:	4606      	mov	r6, r0
 800c608:	460c      	mov	r4, r1
 800c60a:	d507      	bpl.n	800c61c <__smakebuf_r+0x1c>
 800c60c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	2301      	movs	r3, #1
 800c616:	6163      	str	r3, [r4, #20]
 800c618:	b002      	add	sp, #8
 800c61a:	bd70      	pop	{r4, r5, r6, pc}
 800c61c:	ab01      	add	r3, sp, #4
 800c61e:	466a      	mov	r2, sp
 800c620:	f7ff ffc8 	bl	800c5b4 <__swhatbuf_r>
 800c624:	9900      	ldr	r1, [sp, #0]
 800c626:	4605      	mov	r5, r0
 800c628:	4630      	mov	r0, r6
 800c62a:	f7fe fe9f 	bl	800b36c <_malloc_r>
 800c62e:	b948      	cbnz	r0, 800c644 <__smakebuf_r+0x44>
 800c630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c634:	059a      	lsls	r2, r3, #22
 800c636:	d4ef      	bmi.n	800c618 <__smakebuf_r+0x18>
 800c638:	f023 0303 	bic.w	r3, r3, #3
 800c63c:	f043 0302 	orr.w	r3, r3, #2
 800c640:	81a3      	strh	r3, [r4, #12]
 800c642:	e7e3      	b.n	800c60c <__smakebuf_r+0xc>
 800c644:	89a3      	ldrh	r3, [r4, #12]
 800c646:	6020      	str	r0, [r4, #0]
 800c648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c64c:	81a3      	strh	r3, [r4, #12]
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	6163      	str	r3, [r4, #20]
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	6120      	str	r0, [r4, #16]
 800c656:	b15b      	cbz	r3, 800c670 <__smakebuf_r+0x70>
 800c658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c65c:	4630      	mov	r0, r6
 800c65e:	f000 f81d 	bl	800c69c <_isatty_r>
 800c662:	b128      	cbz	r0, 800c670 <__smakebuf_r+0x70>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	f023 0303 	bic.w	r3, r3, #3
 800c66a:	f043 0301 	orr.w	r3, r3, #1
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	89a3      	ldrh	r3, [r4, #12]
 800c672:	431d      	orrs	r5, r3
 800c674:	81a5      	strh	r5, [r4, #12]
 800c676:	e7cf      	b.n	800c618 <__smakebuf_r+0x18>

0800c678 <_fstat_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d07      	ldr	r5, [pc, #28]	; (800c698 <_fstat_r+0x20>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	f7f6 ff54 	bl	8003532 <_fstat>
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d102      	bne.n	800c694 <_fstat_r+0x1c>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	b103      	cbz	r3, 800c694 <_fstat_r+0x1c>
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	20005110 	.word	0x20005110

0800c69c <_isatty_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d06      	ldr	r5, [pc, #24]	; (800c6b8 <_isatty_r+0x1c>)
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	602b      	str	r3, [r5, #0]
 800c6a8:	f7f6 ff53 	bl	8003552 <_isatty>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_isatty_r+0x1a>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_isatty_r+0x1a>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	20005110 	.word	0x20005110

0800c6bc <_raise_r>:
 800c6bc:	291f      	cmp	r1, #31
 800c6be:	b538      	push	{r3, r4, r5, lr}
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	d904      	bls.n	800c6d0 <_raise_r+0x14>
 800c6c6:	2316      	movs	r3, #22
 800c6c8:	6003      	str	r3, [r0, #0]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c6d2:	b112      	cbz	r2, 800c6da <_raise_r+0x1e>
 800c6d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6d8:	b94b      	cbnz	r3, 800c6ee <_raise_r+0x32>
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 f830 	bl	800c740 <_getpid_r>
 800c6e0:	462a      	mov	r2, r5
 800c6e2:	4601      	mov	r1, r0
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ea:	f000 b817 	b.w	800c71c <_kill_r>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d00a      	beq.n	800c708 <_raise_r+0x4c>
 800c6f2:	1c59      	adds	r1, r3, #1
 800c6f4:	d103      	bne.n	800c6fe <_raise_r+0x42>
 800c6f6:	2316      	movs	r3, #22
 800c6f8:	6003      	str	r3, [r0, #0]
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7e7      	b.n	800c6ce <_raise_r+0x12>
 800c6fe:	2400      	movs	r4, #0
 800c700:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c704:	4628      	mov	r0, r5
 800c706:	4798      	blx	r3
 800c708:	2000      	movs	r0, #0
 800c70a:	e7e0      	b.n	800c6ce <_raise_r+0x12>

0800c70c <raise>:
 800c70c:	4b02      	ldr	r3, [pc, #8]	; (800c718 <raise+0xc>)
 800c70e:	4601      	mov	r1, r0
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	f7ff bfd3 	b.w	800c6bc <_raise_r>
 800c716:	bf00      	nop
 800c718:	20000088 	.word	0x20000088

0800c71c <_kill_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	; (800c73c <_kill_r+0x20>)
 800c720:	2300      	movs	r3, #0
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	4611      	mov	r1, r2
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	f7f6 fea3 	bl	8003474 <_kill>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	d102      	bne.n	800c738 <_kill_r+0x1c>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	b103      	cbz	r3, 800c738 <_kill_r+0x1c>
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop
 800c73c:	20005110 	.word	0x20005110

0800c740 <_getpid_r>:
 800c740:	f7f6 be90 	b.w	8003464 <_getpid>

0800c744 <_init>:
 800c744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c746:	bf00      	nop
 800c748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c74a:	bc08      	pop	{r3}
 800c74c:	469e      	mov	lr, r3
 800c74e:	4770      	bx	lr

0800c750 <_fini>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr
