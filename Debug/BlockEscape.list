
BlockEscape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d4c  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c934  0800c934  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c934  0800c934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c93c  0800c93c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c940  0800c940  0001c940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005068  20000070  0800c9b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d8  0800c9b4  000250d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028990  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ce7  00000000  00000000  00048a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  0004e758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018b0  00000000  00000000  00050790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000355b0  00000000  00000000  00052040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b17e  00000000  00000000  000875f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001331b6  00000000  00000000  000b276e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008844  00000000  00000000  001e5924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001ee168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800abd0 	.word	0x0800abd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800abd0 	.word	0x0800abd0

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8000540:	2001      	movs	r0, #1
 8000542:	f000 f803 	bl	800054c <BSP_LCD_InitEx>
 8000546:	4603      	mov	r3, r0
}
 8000548:	4618      	mov	r0, r3
 800054a:	bd80      	pop	{r7, pc}

0800054c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8000556:	f646 3325 	movw	r3, #27429	; 0x6b25
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8000564:	f000 f934 	bl	80007d0 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8000568:	f000 faea 	bl	8000b40 <LCD_IO_GetID>
 800056c:	4603      	mov	r3, r0
 800056e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8000570:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000572:	2b11      	cmp	r3, #17
 8000574:	d001      	beq.n	800057a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8000576:	2301      	movs	r3, #1
 8000578:	e111      	b.n	800079e <BSP_LCD_InitEx+0x252>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800057a:	f000 fae9 	bl	8000b50 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800057e:	4b8a      	ldr	r3, [pc, #552]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000580:	4a8a      	ldr	r2, [pc, #552]	; (80007ac <BSP_LCD_InitEx+0x260>)
 8000582:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8000584:	4888      	ldr	r0, [pc, #544]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000586:	f003 fbdf 	bl	8003d48 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800058a:	2364      	movs	r3, #100	; 0x64
 800058c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800058e:	2305      	movs	r3, #5
 8000590:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8000596:	f24f 4324 	movw	r3, #62500	; 0xf424
 800059a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800059c:	4b82      	ldr	r3, [pc, #520]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80005a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a4:	089b      	lsrs	r3, r3, #2
 80005a6:	4a82      	ldr	r2, [pc, #520]	; (80007b0 <BSP_LCD_InitEx+0x264>)
 80005a8:	fba2 2303 	umull	r2, r3, r2, r3
 80005ac:	0a9b      	lsrs	r3, r3, #10
 80005ae:	4a7e      	ldr	r2, [pc, #504]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80005b0:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	487b      	ldr	r0, [pc, #492]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80005ba:	f003 faa9 	bl	8003b10 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d108      	bne.n	80005d6 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80005c4:	4b7b      	ldr	r3, [pc, #492]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005ca:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80005cc:	4b7a      	ldr	r3, [pc, #488]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e007      	b.n	80005e6 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80005d6:	4b77      	ldr	r3, [pc, #476]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80005dc:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80005de:	4b76      	ldr	r3, [pc, #472]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005e4:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80005ec:	4b72      	ldr	r3, [pc, #456]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80005f2:	2301      	movs	r3, #1
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80005f6:	230f      	movs	r3, #15
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80005fa:	2310      	movs	r3, #16
 80005fc:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8000602:	2322      	movs	r3, #34	; 0x22
 8000604:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8000606:	2322      	movs	r3, #34	; 0x22
 8000608:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800060a:	4b6c      	ldr	r3, [pc, #432]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8000610:	4b6a      	ldr	r3, [pc, #424]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000612:	2205      	movs	r2, #5
 8000614:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000616:	4b69      	ldr	r3, [pc, #420]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800061c:	4b67      	ldr	r3, [pc, #412]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8000622:	4b66      	ldr	r3, [pc, #408]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8000628:	4b64      	ldr	r3, [pc, #400]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800062a:	2202      	movs	r2, #2
 800062c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800062e:	4b63      	ldr	r3, [pc, #396]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000630:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000634:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8000636:	4b61      	ldr	r3, [pc, #388]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800063c:	4a5f      	ldr	r2, [pc, #380]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800063e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000640:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000646:	fb03 f202 	mul.w	r2, r3, r2
 800064a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	4a5a      	ldr	r2, [pc, #360]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000652:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000658:	fb03 f202 	mul.w	r2, r3, r2
 800065c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	4a56      	ldr	r2, [pc, #344]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8000666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	441a      	add	r2, r3
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	441a      	add	r2, r3
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000676:	fb03 f202 	mul.w	r2, r3, r2
 800067a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000680:	4a4e      	ldr	r2, [pc, #312]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8000684:	4a4d      	ldr	r2, [pc, #308]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000688:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800068a:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8000696:	4a49      	ldr	r2, [pc, #292]	; (80007bc <BSP_LCD_InitEx+0x270>)
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800069c:	4b47      	ldr	r3, [pc, #284]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800069e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80006aa:	4b44      	ldr	r3, [pc, #272]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80006b0:	4b42      	ldr	r3, [pc, #264]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b6:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80006b8:	4b40      	ldr	r3, [pc, #256]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006be:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c6:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80006c8:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ce:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80006d0:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 80006d8:	4b38      	ldr	r3, [pc, #224]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80006e0:	4936      	ldr	r1, [pc, #216]	; (80007bc <BSP_LCD_InitEx+0x270>)
 80006e2:	4831      	ldr	r0, [pc, #196]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 80006e4:	f003 fc88 	bl	8003ff8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a34      	ldr	r2, [pc, #208]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 80006ee:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80006f0:	69fa      	ldr	r2, [r7, #28]
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	4413      	add	r3, r2
 80006f6:	3b01      	subs	r3, #1
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 80006fa:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	441a      	add	r2, r3
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	4413      	add	r3, r2
 8000708:	3b01      	subs	r3, #1
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800070c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	441a      	add	r2, r3
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	441a      	add	r2, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	4413      	add	r3, r2
 800071e:	3b01      	subs	r3, #1
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000722:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <BSP_LCD_InitEx+0x268>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a25      	ldr	r2, [pc, #148]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800072a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <BSP_LCD_InitEx+0x26c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000732:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000736:	2208      	movs	r2, #8
 8000738:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 800073c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000740:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000744:	2207      	movs	r2, #7
 8000746:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800074e:	481d      	ldr	r0, [pc, #116]	; (80007c4 <BSP_LCD_InitEx+0x278>)
 8000750:	f005 fbc8 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <BSP_LCD_InitEx+0x27c>)
 8000776:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8000778:	4910      	ldr	r1, [pc, #64]	; (80007bc <BSP_LCD_InitEx+0x270>)
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 800077c:	f004 fe50 	bl	8005420 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <BSP_LCD_InitEx+0x274>)
 8000782:	f004 fba5 	bl	8004ed0 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <BSP_LCD_InitEx+0x25c>)
 8000788:	f003 ff90 	bl	80046ac <HAL_DSI_Start>
  /* Initialize the SDRAM */
  //BSP_SDRAM_Init();
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <BSP_LCD_InitEx+0x280>)
 800078e:	f000 f911 	bl	80009b4 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4619      	mov	r1, r3
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa7c 	bl	8000c94 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3740      	adds	r7, #64	; 0x40
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200001f8 	.word	0x200001f8
 80007ac:	40016c00 	.word	0x40016c00
 80007b0:	43215e57 	.word	0x43215e57
 80007b4:	20000000 	.word	0x20000000
 80007b8:	20000004 	.word	0x20000004
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	20000150 	.word	0x20000150
 80007c4:	20000230 	.word	0x20000230
 80007c8:	40016800 	.word	0x40016800
 80007cc:	20000008 	.word	0x20000008

080007d0 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <BSP_LCD_Reset+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80007ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f2:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000806:	f004 f875 	bl	80048f4 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	480a      	ldr	r0, [pc, #40]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000812:	f004 fa1b 	bl	8004c4c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8000816:	2014      	movs	r0, #20
 8000818:	f002 f98a 	bl	8002b30 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <BSP_LCD_Reset+0x6c>)
 8000824:	f004 fa12 	bl	8004c4c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f002 f981 	bl	8002b30 <HAL_Delay>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40022400 	.word	0x40022400

08000840 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <BSP_LCD_GetXSize+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <BSP_LCD_GetYSize+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000004 	.word	0x20000004

08000870 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	; 0x40
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8000880:	f7ff ffde 	bl	8000840 <BSP_LCD_GetXSize>
 8000884:	4603      	mov	r3, r0
 8000886:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800088c:	f7ff ffe4 	bl	8000858 <BSP_LCD_GetYSize>
 8000890:	4603      	mov	r3, r0
 8000892:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800089c:	23ff      	movs	r3, #255	; 0xff
 800089e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80008b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80008bc:	2307      	movs	r3, #7
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80008c0:	f7ff ffbe 	bl	8000840 <BSP_LCD_GetXSize>
 80008c4:	4603      	mov	r3, r0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80008c8:	f7ff ffc6 	bl	8000858 <BSP_LCD_GetYSize>
 80008cc:	4603      	mov	r3, r0
 80008ce:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <BSP_LCD_LayerDefaultInit+0xb4>)
 80008da:	f004 fbc9 	bl	8005070 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80008de:	88fa      	ldrh	r2, [r7, #6]
 80008e0:	4911      	ldr	r1, [pc, #68]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	3304      	adds	r3, #4
 80008ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80008f4:	88fa      	ldrh	r2, [r7, #6]
 80008f6:	490c      	ldr	r1, [pc, #48]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	3308      	adds	r3, #8
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <BSP_LCD_LayerDefaultInit+0xbc>)
 8000906:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8000908:	88fa      	ldrh	r2, [r7, #6]
 800090a:	4907      	ldr	r1, [pc, #28]	; (8000928 <BSP_LCD_LayerDefaultInit+0xb8>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800091a:	601a      	str	r2, [r3, #0]
}
 800091c:	bf00      	nop
 800091e:	3740      	adds	r7, #64	; 0x40
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000150 	.word	0x20000150
 8000928:	20000218 	.word	0x20000218
 800092c:	20000008 	.word	0x20000008

08000930 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <BSP_LCD_SelectLayer+0x1c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000214 	.word	0x20000214

08000950 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <BSP_LCD_SetTextColor+0x28>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <BSP_LCD_SetTextColor+0x2c>)
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000214 	.word	0x20000214
 800097c:	20000218 	.word	0x20000218

08000980 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <BSP_LCD_SetBackColor+0x2c>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4908      	ldr	r1, [pc, #32]	; (80009b0 <BSP_LCD_SetBackColor+0x30>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	440b      	add	r3, r1
 8000998:	3304      	adds	r3, #4
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000214 	.word	0x20000214
 80009b0:	20000218 	.word	0x20000218

080009b4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <BSP_LCD_SetFont+0x2c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <BSP_LCD_SetFont+0x30>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3308      	adds	r3, #8
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000214 	.word	0x20000214
 80009e4:	20000218 	.word	0x20000218

080009e8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <BSP_LCD_Clear+0x48>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <BSP_LCD_Clear+0x48>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <BSP_LCD_Clear+0x4c>)
 80009fa:	2134      	movs	r1, #52	; 0x34
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	4413      	add	r3, r2
 8000a02:	335c      	adds	r3, #92	; 0x5c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461e      	mov	r6, r3
 8000a08:	f7ff ff1a 	bl	8000840 <BSP_LCD_GetXSize>
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	f7ff ff23 	bl	8000858 <BSP_LCD_GetYSize>
 8000a12:	4602      	mov	r2, r0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	462a      	mov	r2, r5
 8000a20:	4631      	mov	r1, r6
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 f8fe 	bl	8000c24 <LL_FillBuffer>
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	20000214 	.word	0x20000214
 8000a34:	20000150 	.word	0x20000150

08000a38 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8000a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af02      	add	r7, sp, #8
 8000a40:	4604      	mov	r4, r0
 8000a42:	4608      	mov	r0, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	461a      	mov	r2, r3
 8000a48:	4623      	mov	r3, r4
 8000a4a:	80fb      	strh	r3, [r7, #6]
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	80bb      	strh	r3, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	4613      	mov	r3, r2
 8000a56:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4920      	ldr	r1, [pc, #128]	; (8000ae4 <BSP_LCD_FillRect+0xac>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff ff6e 	bl	8000950 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <BSP_LCD_FillRect+0xb0>)
 8000a7a:	2134      	movs	r1, #52	; 0x34
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	4413      	add	r3, r2
 8000a82:	335c      	adds	r3, #92	; 0x5c
 8000a84:	681c      	ldr	r4, [r3, #0]
 8000a86:	f7ff fedb 	bl	8000840 <BSP_LCD_GetXSize>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	fb03 f202 	mul.w	r2, r3, r2
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4423      	add	r3, r4
 8000a9a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	68fd      	ldr	r5, [r7, #12]
 8000aa2:	887e      	ldrh	r6, [r7, #2]
 8000aa4:	f8b7 8000 	ldrh.w	r8, [r7]
 8000aa8:	f7ff feca 	bl	8000840 <BSP_LCD_GetXSize>
 8000aac:	4602      	mov	r2, r0
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	1ad1      	subs	r1, r2, r3
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <BSP_LCD_FillRect+0xa8>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <BSP_LCD_FillRect+0xac>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	9100      	str	r1, [sp, #0]
 8000ac8:	4643      	mov	r3, r8
 8000aca:	4632      	mov	r2, r6
 8000acc:	4629      	mov	r1, r5
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 f8a8 	bl	8000c24 <LL_FillBuffer>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000214 	.word	0x20000214
 8000ae4:	20000218 	.word	0x20000218
 8000ae8:	20000150 	.word	0x20000150

08000aec <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d80d      	bhi.n	8000b18 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	2215      	movs	r2, #21
 8000b0e:	2100      	movs	r1, #0
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <DSI_IO_WriteCmd+0x50>)
 8000b12:	f003 fe07 	bl	8004724 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8000b16:	e00d      	b.n	8000b34 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	9301      	str	r3, [sp, #4]
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2239      	movs	r2, #57	; 0x39
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <DSI_IO_WriteCmd+0x50>)
 8000b30:	f003 fe1a 	bl	8004768 <HAL_DSI_LongWrite>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001f8 	.word	0x200001f8

08000b40 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8000b44:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	4a2b      	ldr	r2, [pc, #172]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b78:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000b84:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000bb4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bd8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <BSP_LCD_MspInit+0xd0>)
 8000be0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000be4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2103      	movs	r1, #3
 8000bea:	2058      	movs	r0, #88	; 0x58
 8000bec:	f002 fc76 	bl	80034dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000bf0:	2058      	movs	r0, #88	; 0x58
 8000bf2:	f002 fc8f 	bl	8003514 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	205a      	movs	r0, #90	; 0x5a
 8000bfc:	f002 fc6e 	bl	80034dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000c00:	205a      	movs	r0, #90	; 0x5a
 8000c02:	f002 fc87 	bl	8003514 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2103      	movs	r1, #3
 8000c0a:	2062      	movs	r0, #98	; 0x62
 8000c0c:	f002 fc66 	bl	80034dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000c10:	2062      	movs	r0, #98	; 0x62
 8000c12:	f002 fc7f 	bl	8003514 <HAL_NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c38:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c48:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <LL_FillBuffer+0x6c>)
 8000c4a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c4e:	f002 fc6f 	bl	8003530 <HAL_DMA2D_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d115      	bne.n	8000c84 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8000c58:	68f9      	ldr	r1, [r7, #12]
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c5c:	f002 fdd6 	bl	800380c <HAL_DMA2D_ConfigLayer>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10e      	bne.n	8000c84 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69f9      	ldr	r1, [r7, #28]
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c72:	f002 fcb7 	bl	80035e4 <HAL_DMA2D_Start>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8000c7c:	210a      	movs	r1, #10
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <LL_FillBuffer+0x68>)
 8000c80:	f002 fcdb 	bl	800363a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000f8 	.word	0x200000f8
 8000c90:	4002b000 	.word	0x4002b000

08000c94 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c9e:	49c1      	ldr	r1, [pc, #772]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff23 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000ca6:	49c0      	ldr	r1, [pc, #768]	; (8000fa8 <OTM8009A_Init+0x314>)
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f7ff ff1f 	bl	8000aec <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000cae:	49bf      	ldr	r1, [pc, #764]	; (8000fac <OTM8009A_Init+0x318>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff1b 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000cb6:	49be      	ldr	r1, [pc, #760]	; (8000fb0 <OTM8009A_Init+0x31c>)
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f7ff ff17 	bl	8000aec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000cbe:	49bb      	ldr	r1, [pc, #748]	; (8000fac <OTM8009A_Init+0x318>)
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff ff13 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000cc6:	49bb      	ldr	r1, [pc, #748]	; (8000fb4 <OTM8009A_Init+0x320>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ff0f 	bl	8000aec <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10); DANY
  HAL_Delay(10);
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f001 ff2e 	bl	8002b30 <HAL_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000cd4:	49b8      	ldr	r1, [pc, #736]	; (8000fb8 <OTM8009A_Init+0x324>)
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff08 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000cdc:	49b7      	ldr	r1, [pc, #732]	; (8000fbc <OTM8009A_Init+0x328>)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff04 	bl	8000aec <DSI_IO_WriteCmd>
  //OTM8009A_IO_Delay(10);  DANY
  HAL_Delay(10);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f001 ff23 	bl	8002b30 <HAL_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000cea:	49b5      	ldr	r1, [pc, #724]	; (8000fc0 <OTM8009A_Init+0x32c>)
 8000cec:	2000      	movs	r0, #0
 8000cee:	f7ff fefd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000cf2:	49b4      	ldr	r1, [pc, #720]	; (8000fc4 <OTM8009A_Init+0x330>)
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fef9 	bl	8000aec <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000cfa:	49b3      	ldr	r1, [pc, #716]	; (8000fc8 <OTM8009A_Init+0x334>)
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fef5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000d02:	49b2      	ldr	r1, [pc, #712]	; (8000fcc <OTM8009A_Init+0x338>)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fef1 	bl	8000aec <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000d0a:	49b1      	ldr	r1, [pc, #708]	; (8000fd0 <OTM8009A_Init+0x33c>)
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff feed 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000d12:	49b0      	ldr	r1, [pc, #704]	; (8000fd4 <OTM8009A_Init+0x340>)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff fee9 	bl	8000aec <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d1a:	49a2      	ldr	r1, [pc, #648]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fee5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000d22:	49ad      	ldr	r1, [pc, #692]	; (8000fd8 <OTM8009A_Init+0x344>)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fee1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000d2a:	49ac      	ldr	r1, [pc, #688]	; (8000fdc <OTM8009A_Init+0x348>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fedd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000d32:	49ab      	ldr	r1, [pc, #684]	; (8000fe0 <OTM8009A_Init+0x34c>)
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fed9 	bl	8000aec <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000d3a:	49aa      	ldr	r1, [pc, #680]	; (8000fe4 <OTM8009A_Init+0x350>)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff fed5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000d42:	49a9      	ldr	r1, [pc, #676]	; (8000fe8 <OTM8009A_Init+0x354>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fed1 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000d4a:	49a8      	ldr	r1, [pc, #672]	; (8000fec <OTM8009A_Init+0x358>)
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fecd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000d52:	49a7      	ldr	r1, [pc, #668]	; (8000ff0 <OTM8009A_Init+0x35c>)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fec9 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000d5a:	49a6      	ldr	r1, [pc, #664]	; (8000ff4 <OTM8009A_Init+0x360>)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fec5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000d62:	499a      	ldr	r1, [pc, #616]	; (8000fcc <OTM8009A_Init+0x338>)
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fec1 	bl	8000aec <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d6a:	498e      	ldr	r1, [pc, #568]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff febd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000d72:	49a1      	ldr	r1, [pc, #644]	; (8000ff8 <OTM8009A_Init+0x364>)
 8000d74:	2002      	movs	r0, #2
 8000d76:	f7ff feb9 	bl	8000aec <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000d7a:	49a0      	ldr	r1, [pc, #640]	; (8000ffc <OTM8009A_Init+0x368>)
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff feb5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000d82:	499f      	ldr	r1, [pc, #636]	; (8001000 <OTM8009A_Init+0x36c>)
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff feb1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000d8a:	499e      	ldr	r1, [pc, #632]	; (8001004 <OTM8009A_Init+0x370>)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fead 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8000d92:	499d      	ldr	r1, [pc, #628]	; (8001008 <OTM8009A_Init+0x374>)
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fea9 	bl	8000aec <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000d9a:	499c      	ldr	r1, [pc, #624]	; (800100c <OTM8009A_Init+0x378>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fea5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000da2:	499b      	ldr	r1, [pc, #620]	; (8001010 <OTM8009A_Init+0x37c>)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fea1 	bl	8000aec <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000daa:	498c      	ldr	r1, [pc, #560]	; (8000fdc <OTM8009A_Init+0x348>)
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff fe9d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000db2:	4998      	ldr	r1, [pc, #608]	; (8001014 <OTM8009A_Init+0x380>)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fe99 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000dba:	498a      	ldr	r1, [pc, #552]	; (8000fe4 <OTM8009A_Init+0x350>)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff fe95 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000dc2:	4995      	ldr	r1, [pc, #596]	; (8001018 <OTM8009A_Init+0x384>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fe91 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000dca:	4994      	ldr	r1, [pc, #592]	; (800101c <OTM8009A_Init+0x388>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fe8d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000dd2:	4993      	ldr	r1, [pc, #588]	; (8001020 <OTM8009A_Init+0x38c>)
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f7ff fe89 	bl	8000aec <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000dda:	4974      	ldr	r1, [pc, #464]	; (8000fac <OTM8009A_Init+0x318>)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff fe85 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000de2:	4990      	ldr	r1, [pc, #576]	; (8001024 <OTM8009A_Init+0x390>)
 8000de4:	2006      	movs	r0, #6
 8000de6:	f7ff fe81 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000dea:	498f      	ldr	r1, [pc, #572]	; (8001028 <OTM8009A_Init+0x394>)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fe7d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000df2:	498e      	ldr	r1, [pc, #568]	; (800102c <OTM8009A_Init+0x398>)
 8000df4:	200e      	movs	r0, #14
 8000df6:	f7ff fe79 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000dfa:	498d      	ldr	r1, [pc, #564]	; (8001030 <OTM8009A_Init+0x39c>)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fe75 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000e02:	498c      	ldr	r1, [pc, #560]	; (8001034 <OTM8009A_Init+0x3a0>)
 8000e04:	200e      	movs	r0, #14
 8000e06:	f7ff fe71 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000e0a:	498b      	ldr	r1, [pc, #556]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fe6d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000e12:	498a      	ldr	r1, [pc, #552]	; (800103c <OTM8009A_Init+0x3a8>)
 8000e14:	200a      	movs	r0, #10
 8000e16:	f7ff fe69 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000e1a:	4989      	ldr	r1, [pc, #548]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fe65 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000e22:	4988      	ldr	r1, [pc, #544]	; (8001044 <OTM8009A_Init+0x3b0>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff fe61 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000e2a:	4960      	ldr	r1, [pc, #384]	; (8000fac <OTM8009A_Init+0x318>)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fe5d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000e32:	4985      	ldr	r1, [pc, #532]	; (8001048 <OTM8009A_Init+0x3b4>)
 8000e34:	200a      	movs	r0, #10
 8000e36:	f7ff fe59 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000e3a:	4984      	ldr	r1, [pc, #528]	; (800104c <OTM8009A_Init+0x3b8>)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fe55 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000e42:	4983      	ldr	r1, [pc, #524]	; (8001050 <OTM8009A_Init+0x3bc>)
 8000e44:	200f      	movs	r0, #15
 8000e46:	f7ff fe51 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000e4a:	4977      	ldr	r1, [pc, #476]	; (8001028 <OTM8009A_Init+0x394>)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fe4d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000e52:	4980      	ldr	r1, [pc, #512]	; (8001054 <OTM8009A_Init+0x3c0>)
 8000e54:	200f      	movs	r0, #15
 8000e56:	f7ff fe49 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000e5a:	4975      	ldr	r1, [pc, #468]	; (8001030 <OTM8009A_Init+0x39c>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fe45 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000e62:	497d      	ldr	r1, [pc, #500]	; (8001058 <OTM8009A_Init+0x3c4>)
 8000e64:	200a      	movs	r0, #10
 8000e66:	f7ff fe41 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000e6a:	4973      	ldr	r1, [pc, #460]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff fe3d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000e72:	497a      	ldr	r1, [pc, #488]	; (800105c <OTM8009A_Init+0x3c8>)
 8000e74:	200f      	movs	r0, #15
 8000e76:	f7ff fe39 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000e7a:	4971      	ldr	r1, [pc, #452]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fe35 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000e82:	4977      	ldr	r1, [pc, #476]	; (8001060 <OTM8009A_Init+0x3cc>)
 8000e84:	200f      	movs	r0, #15
 8000e86:	f7ff fe31 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000e8a:	4976      	ldr	r1, [pc, #472]	; (8001064 <OTM8009A_Init+0x3d0>)
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff fe2d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000e92:	4975      	ldr	r1, [pc, #468]	; (8001068 <OTM8009A_Init+0x3d4>)
 8000e94:	200a      	movs	r0, #10
 8000e96:	f7ff fe29 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000e9a:	4974      	ldr	r1, [pc, #464]	; (800106c <OTM8009A_Init+0x3d8>)
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fe25 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000ea2:	4973      	ldr	r1, [pc, #460]	; (8001070 <OTM8009A_Init+0x3dc>)
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f7ff fe21 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000eaa:	4940      	ldr	r1, [pc, #256]	; (8000fac <OTM8009A_Init+0x318>)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fe1d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000eb2:	4970      	ldr	r1, [pc, #448]	; (8001074 <OTM8009A_Init+0x3e0>)
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f7ff fe19 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000eba:	4964      	ldr	r1, [pc, #400]	; (800104c <OTM8009A_Init+0x3b8>)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fe15 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000ec2:	496d      	ldr	r1, [pc, #436]	; (8001078 <OTM8009A_Init+0x3e4>)
 8000ec4:	200f      	movs	r0, #15
 8000ec6:	f7ff fe11 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000eca:	4957      	ldr	r1, [pc, #348]	; (8001028 <OTM8009A_Init+0x394>)
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fe0d 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000ed2:	496a      	ldr	r1, [pc, #424]	; (800107c <OTM8009A_Init+0x3e8>)
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f7ff fe09 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000eda:	4955      	ldr	r1, [pc, #340]	; (8001030 <OTM8009A_Init+0x39c>)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fe05 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000ee2:	4967      	ldr	r1, [pc, #412]	; (8001080 <OTM8009A_Init+0x3ec>)
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f7ff fe01 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000eea:	4953      	ldr	r1, [pc, #332]	; (8001038 <OTM8009A_Init+0x3a4>)
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fdfd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000ef2:	4964      	ldr	r1, [pc, #400]	; (8001084 <OTM8009A_Init+0x3f0>)
 8000ef4:	200f      	movs	r0, #15
 8000ef6:	f7ff fdf9 	bl	8000aec <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000efa:	4951      	ldr	r1, [pc, #324]	; (8001040 <OTM8009A_Init+0x3ac>)
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fdf5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000f02:	4961      	ldr	r1, [pc, #388]	; (8001088 <OTM8009A_Init+0x3f4>)
 8000f04:	200f      	movs	r0, #15
 8000f06:	f7ff fdf1 	bl	8000aec <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000f0a:	4934      	ldr	r1, [pc, #208]	; (8000fdc <OTM8009A_Init+0x348>)
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f7ff fded 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000f12:	495e      	ldr	r1, [pc, #376]	; (800108c <OTM8009A_Init+0x3f8>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fde9 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000f1a:	495d      	ldr	r1, [pc, #372]	; (8001090 <OTM8009A_Init+0x3fc>)
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fde5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000f22:	495c      	ldr	r1, [pc, #368]	; (8001094 <OTM8009A_Init+0x400>)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff fde1 	bl	8000aec <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000f2a:	495b      	ldr	r1, [pc, #364]	; (8001098 <OTM8009A_Init+0x404>)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f7ff fddd 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000f32:	495a      	ldr	r1, [pc, #360]	; (800109c <OTM8009A_Init+0x408>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fdd9 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f3a:	491a      	ldr	r1, [pc, #104]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fdd5 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000f42:	4957      	ldr	r1, [pc, #348]	; (80010a0 <OTM8009A_Init+0x40c>)
 8000f44:	2003      	movs	r0, #3
 8000f46:	f7ff fdd1 	bl	8000aec <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f4a:	4916      	ldr	r1, [pc, #88]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fdcd 	bl	8000aec <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f52:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fdc9 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000f5a:	4952      	ldr	r1, [pc, #328]	; (80010a4 <OTM8009A_Init+0x410>)
 8000f5c:	2010      	movs	r0, #16
 8000f5e:	f7ff fdc5 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f62:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <OTM8009A_Init+0x310>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fdc1 	bl	8000aec <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000f6a:	494f      	ldr	r1, [pc, #316]	; (80010a8 <OTM8009A_Init+0x414>)
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f7ff fdbd 	bl	8000aec <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000f72:	494e      	ldr	r1, [pc, #312]	; (80010ac <OTM8009A_Init+0x418>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff fdb9 	bl	8000aec <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  // OTM8009A_IO_Delay(120); DANY
  HAL_Delay(120);
 8000f7a:	2078      	movs	r0, #120	; 0x78
 8000f7c:	f001 fdd8 	bl	8002b30 <HAL_Delay>

  switch(ColorCoding)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <OTM8009A_Init+0x304>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	f040 8095 	bne.w	80010b8 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000f8e:	4948      	ldr	r1, [pc, #288]	; (80010b0 <OTM8009A_Init+0x41c>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fdab 	bl	8000aec <DSI_IO_WriteCmd>
    break;
 8000f96:	e090      	b.n	80010ba <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000f98:	4946      	ldr	r1, [pc, #280]	; (80010b4 <OTM8009A_Init+0x420>)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fda6 	bl	8000aec <DSI_IO_WriteCmd>
    break;
 8000fa0:	e08b      	b.n	80010ba <OTM8009A_Init+0x426>
 8000fa2:	bf00      	nop
 8000fa4:	0800ad74 	.word	0x0800ad74
 8000fa8:	0800ac2c 	.word	0x0800ac2c
 8000fac:	0800ad78 	.word	0x0800ad78
 8000fb0:	0800ac30 	.word	0x0800ac30
 8000fb4:	0800ad7c 	.word	0x0800ad7c
 8000fb8:	0800ad80 	.word	0x0800ad80
 8000fbc:	0800ad84 	.word	0x0800ad84
 8000fc0:	0800ad88 	.word	0x0800ad88
 8000fc4:	0800ad8c 	.word	0x0800ad8c
 8000fc8:	0800ad90 	.word	0x0800ad90
 8000fcc:	0800ad94 	.word	0x0800ad94
 8000fd0:	0800ad98 	.word	0x0800ad98
 8000fd4:	0800ad9c 	.word	0x0800ad9c
 8000fd8:	0800ada0 	.word	0x0800ada0
 8000fdc:	0800ada4 	.word	0x0800ada4
 8000fe0:	0800ada8 	.word	0x0800ada8
 8000fe4:	0800adac 	.word	0x0800adac
 8000fe8:	0800adb0 	.word	0x0800adb0
 8000fec:	0800adb4 	.word	0x0800adb4
 8000ff0:	0800adb8 	.word	0x0800adb8
 8000ff4:	0800adbc 	.word	0x0800adbc
 8000ff8:	0800ac5c 	.word	0x0800ac5c
 8000ffc:	0800adc0 	.word	0x0800adc0
 8001000:	0800adc4 	.word	0x0800adc4
 8001004:	0800adc8 	.word	0x0800adc8
 8001008:	0800adcc 	.word	0x0800adcc
 800100c:	0800add0 	.word	0x0800add0
 8001010:	0800add4 	.word	0x0800add4
 8001014:	0800add8 	.word	0x0800add8
 8001018:	0800addc 	.word	0x0800addc
 800101c:	0800ade0 	.word	0x0800ade0
 8001020:	0800ac60 	.word	0x0800ac60
 8001024:	0800ac64 	.word	0x0800ac64
 8001028:	0800ade4 	.word	0x0800ade4
 800102c:	0800ac6c 	.word	0x0800ac6c
 8001030:	0800ade8 	.word	0x0800ade8
 8001034:	0800ac7c 	.word	0x0800ac7c
 8001038:	0800adec 	.word	0x0800adec
 800103c:	0800ac8c 	.word	0x0800ac8c
 8001040:	0800adf0 	.word	0x0800adf0
 8001044:	0800ae28 	.word	0x0800ae28
 8001048:	0800ac98 	.word	0x0800ac98
 800104c:	0800adf4 	.word	0x0800adf4
 8001050:	0800aca4 	.word	0x0800aca4
 8001054:	0800acb4 	.word	0x0800acb4
 8001058:	0800acc4 	.word	0x0800acc4
 800105c:	0800acd0 	.word	0x0800acd0
 8001060:	0800ace0 	.word	0x0800ace0
 8001064:	0800adf8 	.word	0x0800adf8
 8001068:	0800acf0 	.word	0x0800acf0
 800106c:	0800adfc 	.word	0x0800adfc
 8001070:	0800acfc 	.word	0x0800acfc
 8001074:	0800ad08 	.word	0x0800ad08
 8001078:	0800ad14 	.word	0x0800ad14
 800107c:	0800ad24 	.word	0x0800ad24
 8001080:	0800ad34 	.word	0x0800ad34
 8001084:	0800ad40 	.word	0x0800ad40
 8001088:	0800ad50 	.word	0x0800ad50
 800108c:	0800ae2c 	.word	0x0800ae2c
 8001090:	0800ae30 	.word	0x0800ae30
 8001094:	0800ae34 	.word	0x0800ae34
 8001098:	0800ae38 	.word	0x0800ae38
 800109c:	0800ae3c 	.word	0x0800ae3c
 80010a0:	0800ad60 	.word	0x0800ad60
 80010a4:	0800ac34 	.word	0x0800ac34
 80010a8:	0800ac48 	.word	0x0800ac48
 80010ac:	0800ae00 	.word	0x0800ae00
 80010b0:	0800ae04 	.word	0x0800ae04
 80010b4:	0800ae08 	.word	0x0800ae08
  default :
    break;
 80010b8:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10b      	bne.n	80010d8 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80010c0:	4916      	ldr	r1, [pc, #88]	; (800111c <OTM8009A_Init+0x488>)
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fd12 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80010c8:	4915      	ldr	r1, [pc, #84]	; (8001120 <OTM8009A_Init+0x48c>)
 80010ca:	2004      	movs	r0, #4
 80010cc:	f7ff fd0e 	bl	8000aec <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80010d0:	4914      	ldr	r1, [pc, #80]	; (8001124 <OTM8009A_Init+0x490>)
 80010d2:	2004      	movs	r0, #4
 80010d4:	f7ff fd0a 	bl	8000aec <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 80010d8:	4913      	ldr	r1, [pc, #76]	; (8001128 <OTM8009A_Init+0x494>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff fd06 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 80010e0:	4912      	ldr	r1, [pc, #72]	; (800112c <OTM8009A_Init+0x498>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fd02 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <OTM8009A_Init+0x49c>)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fcfe 	bl	8000aec <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 80010f0:	4910      	ldr	r1, [pc, #64]	; (8001134 <OTM8009A_Init+0x4a0>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fcfa 	bl	8000aec <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80010f8:	490f      	ldr	r1, [pc, #60]	; (8001138 <OTM8009A_Init+0x4a4>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fcf6 	bl	8000aec <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <OTM8009A_Init+0x4a8>)
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fcf2 	bl	8000aec <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <OTM8009A_Init+0x4ac>)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fcee 	bl	8000aec <DSI_IO_WriteCmd>

  return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800ae0c 	.word	0x0800ae0c
 8001120:	0800ad64 	.word	0x0800ad64
 8001124:	0800ad6c 	.word	0x0800ad6c
 8001128:	0800ae10 	.word	0x0800ae10
 800112c:	0800ae14 	.word	0x0800ae14
 8001130:	0800ae18 	.word	0x0800ae18
 8001134:	0800ae1c 	.word	0x0800ae1c
 8001138:	0800ae20 	.word	0x0800ae20
 800113c:	0800ad74 	.word	0x0800ad74
 8001140:	0800ae24 	.word	0x0800ae24

08001144 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_ADC1_Init+0x98>)
 8001172:	2201      	movs	r2, #1
 8001174:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_ADC1_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a6:	f001 fce7 	bl	8002b78 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f001 fa22 	bl	80025f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0x98>)
 80011c6:	f001 fe81 	bl	8002ecc <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f001 fa12 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002c0 	.word	0x200002c0
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_ADC2_Init+0x98>)
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <MX_ADC2_Init+0x9c>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_ADC2_Init+0x98>)
 8001202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001206:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_ADC2_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_ADC2_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_ADC2_Init+0x98>)
 8001216:	2201      	movs	r2, #1
 8001218:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_ADC2_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_ADC2_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_ADC2_Init+0x98>)
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_ADC2_Init+0xa0>)
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_ADC2_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_ADC2_Init+0x98>)
 8001236:	2201      	movs	r2, #1
 8001238:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_ADC2_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_ADC2_Init+0x98>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_ADC2_Init+0x98>)
 800124a:	f001 fc95 	bl	8002b78 <HAL_ADC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001254:	f001 f9d0 	bl	80025f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001258:	2306      	movs	r3, #6
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_ADC2_Init+0x98>)
 800126a:	f001 fe2f 	bl	8002ecc <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001274:	f001 f9c0 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000308 	.word	0x20000308
 8001284:	40012100 	.word	0x40012100
 8001288:	0f000001 	.word	0x0f000001

0800128c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <HAL_ADC_MspInit+0xf8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d13c      	bne.n	8001328 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ae:	4b36      	ldr	r3, [pc, #216]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a35      	ldr	r2, [pc, #212]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b33      	ldr	r3, [pc, #204]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a29      	ldr	r2, [pc, #164]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 80012f6:	2304      	movs	r3, #4
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4820      	ldr	r0, [pc, #128]	; (800138c <HAL_ADC_MspInit+0x100>)
 800130a:	f003 faf3 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|GPIO_PIN_6;
 800130e:	2350      	movs	r3, #80	; 0x50
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481b      	ldr	r0, [pc, #108]	; (8001390 <HAL_ADC_MspInit+0x104>)
 8001322:	f003 fae7 	bl	80048f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001326:	e028      	b.n	800137a <HAL_ADC_MspInit+0xee>
  else if(adcHandle->Instance==ADC2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_ADC_MspInit+0x108>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d123      	bne.n	800137a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001362:	2340      	movs	r3, #64	; 0x40
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <HAL_ADC_MspInit+0x104>)
 8001376:	f003 fabd 	bl	80048f4 <HAL_GPIO_Init>
}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012000 	.word	0x40012000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020800 	.word	0x40020800
 8001390:	40020000 	.word	0x40020000
 8001394:	40012100 	.word	0x40012100

08001398 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_DMA2D_Init+0x34>)
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <MX_DMA2D_Init+0x38>)
 80013a0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <MX_DMA2D_Init+0x34>)
 80013a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013a8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_DMA2D_Init+0x34>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_DMA2D_Init+0x34>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_DMA2D_Init+0x34>)
 80013b8:	f002 f8ba 	bl	8003530 <HAL_DMA2D_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80013c2:	f001 f919 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000350 	.word	0x20000350
 80013d0:	4002b000 	.word	0x4002b000

080013d4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <HAL_DMA2D_MspInit+0x38>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10b      	bne.n	80013fe <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_DMA2D_MspInit+0x3c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <HAL_DMA2D_MspInit+0x3c>)
 80013ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_DMA2D_MspInit+0x3c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	4002b000 	.word	0x4002b000
 8001410:	40023800 	.word	0x40023800

08001414 <MX_DSIHOST_DSI_Init>:
DSI_HandleTypeDef hdsi;

/* DSIHOST init function */

void MX_DSIHOST_DSI_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0ae      	sub	sp, #184	; 0xb8
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800141a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001426:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fae4 	bl	800a9fc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001434:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	226c      	movs	r2, #108	; 0x6c
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f009 fad5 	bl	800a9fc <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001454:	4a65      	ldr	r2, [pc, #404]	; (80015ec <MX_DSIHOST_DSI_Init+0x1d8>)
 8001456:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001458:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001460:	2204      	movs	r2, #4
 8001462:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001464:	4b60      	ldr	r3, [pc, #384]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800146a:	2314      	movs	r3, #20
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8001470:	2301      	movs	r3, #1
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800147c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001480:	4619      	mov	r1, r3
 8001482:	4859      	ldr	r0, [pc, #356]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001484:	f002 fb44 	bl	8003b10 <HAL_DSI_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 800148e:	f001 f8b3 	bl	80025f8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80014c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014cc:	4619      	mov	r1, r3
 80014ce:	4846      	ldr	r0, [pc, #280]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80014d0:	f003 f824 	bl	800451c <HAL_DSI_ConfigHostTimeouts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 80014da:	f001 f88d 	bl	80025f8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80014de:	231c      	movs	r3, #28
 80014e0:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 80014e2:	2321      	movs	r3, #33	; 0x21
 80014e4:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 80014ea:	2319      	movs	r3, #25
 80014ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80014fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014fe:	4619      	mov	r1, r3
 8001500:	4839      	ldr	r0, [pc, #228]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001502:	f002 ffa1 	bl	8004448 <HAL_DSI_ConfigPhyTimer>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 800150c:	f001 f874 	bl	80025f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001510:	2104      	movs	r1, #4
 8001512:	4835      	ldr	r0, [pc, #212]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001514:	f002 ff70 	bl	80043f8 <HAL_DSI_ConfigFlowControl>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 800151e:	f001 f86b 	bl	80025f8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001522:	f242 7110 	movw	r1, #10000	; 0x2710
 8001526:	4830      	ldr	r0, [pc, #192]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001528:	f003 f9b6 	bl	8004898 <HAL_DSI_SetLowPowerRXFilter>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8001532:	f001 f861 	bl	80025f8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001536:	2100      	movs	r1, #0
 8001538:	482b      	ldr	r0, [pc, #172]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 800153a:	f002 fc79 	bl	8003e30 <HAL_DSI_ConfigErrorMonitor>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 8001544:	f001 f858 	bl	80025f8 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 800154c:	2305      	movs	r3, #5
 800154e:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 800155c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001560:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001566:	2304      	movs	r3, #4
 8001568:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800156a:	2302      	movs	r3, #2
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 18;
 8001572:	2312      	movs	r3, #18
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 16;
 8001576:	2310      	movs	r3, #16
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 1506;
 800157a:	f240 53e2 	movw	r3, #1506	; 0x5e2
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 8001584:	2302      	movs	r3, #2
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 8001588:	2302      	movs	r3, #2
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 800158c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001590:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80015c0:	f002 fd1a 	bl	8003ff8 <HAL_DSI_ConfigVideoMode>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 80015ca:	f001 f815 	bl	80025f8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_DSIHOST_DSI_Init+0x1d4>)
 80015d2:	f002 fce9 	bl	8003fa8 <HAL_DSI_SetGenericVCID>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 80015dc:	f001 f80c 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	37b8      	adds	r7, #184	; 0xb8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200003a8 	.word	0x200003a8
 80015ec:	40016c00 	.word	0x40016c00

080015f0 <HAL_DSI_MspInit>:

void HAL_DSI_MspInit(DSI_HandleTypeDef* dsiHandle)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_DSI_MspInit+0x38>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10b      	bne.n	800161a <HAL_DSI_MspInit+0x2a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* DSI clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_DSI_MspInit+0x3c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a09      	ldr	r2, [pc, #36]	; (800162c <HAL_DSI_MspInit+0x3c>)
 8001608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <HAL_DSI_MspInit+0x3c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40016c00 	.word	0x40016c00
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_DSI_MspDeInit>:

void HAL_DSI_MspDeInit(DSI_HandleTypeDef* dsiHandle)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  if(dsiHandle->Instance==DSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_DSI_MspDeInit+0x2c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d105      	bne.n	800164e <HAL_DSI_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_DSI_MspDeInit+0x30>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <HAL_DSI_MspDeInit+0x30>)
 8001648:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40016c00 	.word	0x40016c00
 8001660:	40023800 	.word	0x40023800

08001664 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_FMC_Init+0x98>)
 800167e:	4a20      	ldr	r2, [pc, #128]	; (8001700 <MX_FMC_Init+0x9c>)
 8001680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_FMC_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_FMC_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_FMC_Init+0x98>)
 8001690:	2204      	movs	r2, #4
 8001692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_FMC_Init+0x98>)
 8001696:	2220      	movs	r2, #32
 8001698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_FMC_Init+0x98>)
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_FMC_Init+0x98>)
 80016a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80016a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_FMC_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_FMC_Init+0x98>)
 80016b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_FMC_Init+0x98>)
 80016b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_FMC_Init+0x98>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016d0:	2307      	movs	r3, #7
 80016d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016d4:	2303      	movs	r3, #3
 80016d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_FMC_Init+0x98>)
 80016e6:	f005 f825 	bl	8006734 <HAL_SDRAM_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016f0:	f000 ff82 	bl	80025f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003c4 	.word	0x200003c4
 8001700:	a0000140 	.word	0xa0000140

08001704 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_FMC_MspInit+0x104>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d16f      	bne.n	8001800 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_FMC_MspInit+0x104>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_FMC_MspInit+0x108>)
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	4a38      	ldr	r2, [pc, #224]	; (800180c <HAL_FMC_MspInit+0x108>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6393      	str	r3, [r2, #56]	; 0x38
 8001732:	4b36      	ldr	r3, [pc, #216]	; (800180c <HAL_FMC_MspInit+0x108>)
 8001734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800173e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001742:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001750:	230c      	movs	r3, #12
 8001752:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	4619      	mov	r1, r3
 8001758:	482d      	ldr	r0, [pc, #180]	; (8001810 <HAL_FMC_MspInit+0x10c>)
 800175a:	f003 f8cb 	bl	80048f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800175e:	f248 1337 	movw	r3, #33079	; 0x8137
 8001762:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001770:	230c      	movs	r3, #12
 8001772:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4826      	ldr	r0, [pc, #152]	; (8001814 <HAL_FMC_MspInit+0x110>)
 800177a:	f003 f8bb 	bl	80048f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800177e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001782:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001790:	230c      	movs	r3, #12
 8001792:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4619      	mov	r1, r3
 8001798:	481f      	ldr	r0, [pc, #124]	; (8001818 <HAL_FMC_MspInit+0x114>)
 800179a:	f003 f8ab 	bl	80048f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800179e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80017a2:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017b0:	230c      	movs	r3, #12
 80017b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4818      	ldr	r0, [pc, #96]	; (800181c <HAL_FMC_MspInit+0x118>)
 80017ba:	f003 f89b 	bl	80048f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80017be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80017c2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d0:	230c      	movs	r3, #12
 80017d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4811      	ldr	r0, [pc, #68]	; (8001820 <HAL_FMC_MspInit+0x11c>)
 80017da:	f003 f88b 	bl	80048f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 80017de:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80017e2:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017f0:	230c      	movs	r3, #12
 80017f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	480a      	ldr	r0, [pc, #40]	; (8001824 <HAL_FMC_MspInit+0x120>)
 80017fa:	f003 f87b 	bl	80048f4 <HAL_GPIO_Init>
 80017fe:	e000      	b.n	8001802 <HAL_FMC_MspInit+0xfe>
    return;
 8001800:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200003f8 	.word	0x200003f8
 800180c:	40023800 	.word	0x40023800
 8001810:	40021000 	.word	0x40021000
 8001814:	40021800 	.word	0x40021800
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40022000 	.word	0x40022000
 8001820:	40021400 	.word	0x40021400
 8001824:	40021c00 	.word	0x40021c00

08001828 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001830:	f7ff ff68 	bl	8001704 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <MX_FREERTOS_Init+0x18>)
 8001842:	2100      	movs	r1, #0
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_FREERTOS_Init+0x1c>)
 8001846:	f006 f8af 	bl	80079a8 <osThreadNew>
 800184a:	4603      	mov	r3, r0
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <MX_FREERTOS_Init+0x20>)
 800184e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	0800c8f8 	.word	0x0800c8f8
 8001858:	08001861 	.word	0x08001861
 800185c:	200003fc 	.word	0x200003fc

08001860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f006 f943 	bl	8007af4 <osDelay>
 800186e:	e7fb      	b.n	8001868 <StartDefaultTask+0x8>

08001870 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b090      	sub	sp, #64	; 0x40
 8001874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	4bac      	ldr	r3, [pc, #688]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4aab      	ldr	r2, [pc, #684]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4ba9      	ldr	r3, [pc, #676]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800189e:	4ba6      	ldr	r3, [pc, #664]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4aa5      	ldr	r2, [pc, #660]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a9f      	ldr	r2, [pc, #636]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
 80018cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a99      	ldr	r2, [pc, #612]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b97      	ldr	r3, [pc, #604]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b94      	ldr	r3, [pc, #592]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a93      	ldr	r2, [pc, #588]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	4b8e      	ldr	r3, [pc, #568]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a8d      	ldr	r2, [pc, #564]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a87      	ldr	r2, [pc, #540]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800191c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800192e:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a81      	ldr	r2, [pc, #516]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001946:	4b7c      	ldr	r3, [pc, #496]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a7b      	ldr	r2, [pc, #492]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800194c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800195e:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a75      	ldr	r2, [pc, #468]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001964:	f043 0320 	orr.w	r3, r3, #32
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a6f      	ldr	r2, [pc, #444]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <MX_GPIO_Init+0x2c8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 800198e:	2378      	movs	r3, #120	; 0x78
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800199e:	2306      	movs	r3, #6
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	4864      	ldr	r0, [pc, #400]	; (8001b3c <MX_GPIO_Init+0x2cc>)
 80019aa:	f002 ffa3 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80019ae:	2304      	movs	r3, #4
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80019be:	2309      	movs	r3, #9
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c6:	4619      	mov	r1, r3
 80019c8:	485c      	ldr	r0, [pc, #368]	; (8001b3c <MX_GPIO_Init+0x2cc>)
 80019ca:	f002 ff93 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80019ce:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e0:	230b      	movs	r3, #11
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4855      	ldr	r0, [pc, #340]	; (8001b40 <MX_GPIO_Init+0x2d0>)
 80019ec:	f002 ff82 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80019f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a02:	2304      	movs	r3, #4
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	484d      	ldr	r0, [pc, #308]	; (8001b44 <MX_GPIO_Init+0x2d4>)
 8001a0e:	f002 ff71 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001a12:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a24:	230a      	movs	r3, #10
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4845      	ldr	r0, [pc, #276]	; (8001b44 <MX_GPIO_Init+0x2d4>)
 8001a30:	f002 ff60 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_D3_Pin;
 8001a34:	2310      	movs	r3, #16
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001a44:	230a      	movs	r3, #10
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(uSD_D3_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	483d      	ldr	r0, [pc, #244]	; (8001b44 <MX_GPIO_Init+0x2d4>)
 8001a50:	f002 ff50 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001a54:	23c0      	movs	r3, #192	; 0xc0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001a64:	230b      	movs	r3, #11
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4836      	ldr	r0, [pc, #216]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001a70:	f002 ff40 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a86:	2308      	movs	r3, #8
 8001a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	482e      	ldr	r0, [pc, #184]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001a92:	f002 ff2f 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a96:	2340      	movs	r3, #64	; 0x40
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4824      	ldr	r0, [pc, #144]	; (8001b44 <MX_GPIO_Init+0x2d4>)
 8001ab2:	f002 ff1f 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|Audio_INT_Pin|WIFI_RST_Pin|ARD_D8_Pin
 8001ab6:	f247 033b 	movw	r3, #28731	; 0x703b
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LD_USER2_Pin|ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4821      	ldr	r0, [pc, #132]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 8001acc:	f002 ff12 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8001ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aea:	4619      	mov	r1, r3
 8001aec:	4817      	ldr	r0, [pc, #92]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001aee:	f002 ff01 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8001af2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b04:	2309      	movs	r3, #9
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480f      	ldr	r0, [pc, #60]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001b10:	f002 fef0 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b26:	2305      	movs	r3, #5
 8001b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8001b2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <MX_GPIO_Init+0x2e4>)
 8001b32:	f002 fedf 	bl	80048f4 <HAL_GPIO_Init>
 8001b36:	e00f      	b.n	8001b58 <MX_GPIO_Init+0x2e8>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021800 	.word	0x40021800
 8001b44:	40020400 	.word	0x40020400
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40022400 	.word	0x40022400
 8001b54:	40020000 	.word	0x40020000

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin;
 8001b58:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	48bb      	ldr	r0, [pc, #748]	; (8001e5c <MX_GPIO_Init+0x5ec>)
 8001b6e:	f002 fec1 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001b72:	23f8      	movs	r3, #248	; 0xf8
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	48b6      	ldr	r0, [pc, #728]	; (8001e60 <MX_GPIO_Init+0x5f0>)
 8001b86:	f002 feb5 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	48af      	ldr	r0, [pc, #700]	; (8001e64 <MX_GPIO_Init+0x5f4>)
 8001ba8:	f002 fea4 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001bac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001bbe:	230b      	movs	r3, #11
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	48a6      	ldr	r0, [pc, #664]	; (8001e64 <MX_GPIO_Init+0x5f4>)
 8001bca:	f002 fe93 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001bce:	2330      	movs	r3, #48	; 0x30
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	48a1      	ldr	r0, [pc, #644]	; (8001e68 <MX_GPIO_Init+0x5f8>)
 8001be2:	f002 fe87 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8001be6:	2308      	movs	r3, #8
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4899      	ldr	r0, [pc, #612]	; (8001e68 <MX_GPIO_Init+0x5f8>)
 8001c02:	f002 fe77 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8001c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c20:	4619      	mov	r1, r3
 8001c22:	4892      	ldr	r0, [pc, #584]	; (8001e6c <MX_GPIO_Init+0x5fc>)
 8001c24:	f002 fe66 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c40:	4619      	mov	r1, r3
 8001c42:	4889      	ldr	r0, [pc, #548]	; (8001e68 <MX_GPIO_Init+0x5f8>)
 8001c44:	f002 fe56 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	4619      	mov	r1, r3
 8001c64:	4881      	ldr	r0, [pc, #516]	; (8001e6c <MX_GPIO_Init+0x5fc>)
 8001c66:	f002 fe45 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	4879      	ldr	r0, [pc, #484]	; (8001e6c <MX_GPIO_Init+0x5fc>)
 8001c88:	f002 fe34 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001c8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	486c      	ldr	r0, [pc, #432]	; (8001e5c <MX_GPIO_Init+0x5ec>)
 8001caa:	f002 fe23 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8001cae:	23c0      	movs	r3, #192	; 0xc0
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4869      	ldr	r0, [pc, #420]	; (8001e70 <MX_GPIO_Init+0x600>)
 8001cca:	f002 fe13 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cde:	230a      	movs	r3, #10
 8001ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4862      	ldr	r0, [pc, #392]	; (8001e74 <MX_GPIO_Init+0x604>)
 8001cea:	f002 fe03 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cfe:	2306      	movs	r3, #6
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4856      	ldr	r0, [pc, #344]	; (8001e64 <MX_GPIO_Init+0x5f4>)
 8001d0a:	f002 fdf3 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8001d0e:	2348      	movs	r3, #72	; 0x48
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4850      	ldr	r0, [pc, #320]	; (8001e64 <MX_GPIO_Init+0x5f4>)
 8001d22:	f002 fde7 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d36:	2303      	movs	r3, #3
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	484d      	ldr	r0, [pc, #308]	; (8001e78 <MX_GPIO_Init+0x608>)
 8001d42:	f002 fdd7 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d56:	2303      	movs	r3, #3
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4845      	ldr	r0, [pc, #276]	; (8001e78 <MX_GPIO_Init+0x608>)
 8001d62:	f002 fdc7 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8001d66:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	483f      	ldr	r0, [pc, #252]	; (8001e78 <MX_GPIO_Init+0x608>)
 8001d7c:	f002 fdba 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d90:	230a      	movs	r3, #10
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4835      	ldr	r0, [pc, #212]	; (8001e70 <MX_GPIO_Init+0x600>)
 8001d9c:	f002 fdaa 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001da0:	2332      	movs	r3, #50	; 0x32
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db0:	230b      	movs	r3, #11
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db8:	4619      	mov	r1, r3
 8001dba:	482d      	ldr	r0, [pc, #180]	; (8001e70 <MX_GPIO_Init+0x600>)
 8001dbc:	f002 fd9a 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001dd0:	2309      	movs	r3, #9
 8001dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4828      	ldr	r0, [pc, #160]	; (8001e7c <MX_GPIO_Init+0x60c>)
 8001ddc:	f002 fd8a 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8001de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001df2:	2309      	movs	r3, #9
 8001df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <MX_GPIO_Init+0x5f8>)
 8001dfe:	f002 fd79 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e02:	2386      	movs	r3, #134	; 0x86
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e12:	230b      	movs	r3, #11
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4813      	ldr	r0, [pc, #76]	; (8001e6c <MX_GPIO_Init+0x5fc>)
 8001e1e:	f002 fd69 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001e22:	2301      	movs	r3, #1
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_GPIO_Init+0x5fc>)
 8001e38:	f002 fd5c 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	e012      	b.n	8001e80 <MX_GPIO_Init+0x610>
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000
 8001e60:	40022800 	.word	0x40022800
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40021c00 	.word	0x40021c00
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	4821      	ldr	r0, [pc, #132]	; (8001f08 <MX_GPIO_Init+0x698>)
 8001e82:	f002 fd37 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4619      	mov	r1, r3
 8001e98:	481c      	ldr	r0, [pc, #112]	; (8001f0c <MX_GPIO_Init+0x69c>)
 8001e9a:	f002 fd2b 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e9e:	2328      	movs	r3, #40	; 0x28
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001eae:	230a      	movs	r3, #10
 8001eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <MX_GPIO_Init+0x6a0>)
 8001eba:	f002 fd1b 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ece:	2309      	movs	r3, #9
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_GPIO_Init+0x69c>)
 8001eda:	f002 fd0b 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001ede:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MX_GPIO_Init+0x6a4>)
 8001efc:	f002 fcfa 	bl	80048f4 <HAL_GPIO_Init>

}
 8001f00:	bf00      	nop
 8001f02:	3740      	adds	r7, #64	; 0x40
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021c00 	.word	0x40021c00
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400

08001f18 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <MX_I2C4_Init+0x78>)
 8001f20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <MX_I2C4_Init+0x7c>)
 8001f26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001f52:	480e      	ldr	r0, [pc, #56]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f54:	f002 fe94 	bl	8004c80 <HAL_I2C_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001f5e:	f000 fb4b 	bl	80025f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f66:	f002 ff1b 	bl	8004da0 <HAL_I2CEx_ConfigAnalogFilter>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f000 fb42 	bl	80025f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_I2C4_Init+0x74>)
 8001f78:	f002 ff5d 	bl	8004e36 <HAL_I2CEx_ConfigDigitalFilter>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001f82:	f000 fb39 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000400 	.word	0x20000400
 8001f90:	40006000 	.word	0x40006000
 8001f94:	00c0eaff 	.word	0x00c0eaff

08001f98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b0ae      	sub	sp, #184	; 0xb8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2290      	movs	r2, #144	; 0x90
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f008 fd1f 	bl	800a9fc <memset>
  if(i2cHandle->Instance==I2C4)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a33      	ldr	r2, [pc, #204]	; (8002090 <HAL_I2C_MspInit+0xf8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d15e      	bne.n	8002086 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 ff83 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001fe4:	f000 fb08 	bl	80025f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a29      	ldr	r2, [pc, #164]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8001fee:	f043 0302 	orr.w	r3, r3, #2
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6313      	str	r3, [r2, #48]	; 0x30
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800201e:	2312      	movs	r3, #18
 8002020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002024:	2301      	movs	r3, #1
 8002026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8002030:	230b      	movs	r3, #11
 8002032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800203a:	4619      	mov	r1, r3
 800203c:	4816      	ldr	r0, [pc, #88]	; (8002098 <HAL_I2C_MspInit+0x100>)
 800203e:	f002 fc59 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002050:	2301      	movs	r3, #1
 8002052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800205c:	2304      	movs	r3, #4
 800205e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002066:	4619      	mov	r1, r3
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <HAL_I2C_MspInit+0x104>)
 800206a:	f002 fc43 	bl	80048f4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 8002074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_I2C_MspInit+0xfc>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8002086:	bf00      	nop
 8002088:	37b8      	adds	r7, #184	; 0xb8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40006000 	.word	0x40006000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400
 800209c:	40020c00 	.word	0x40020c00

080020a0 <readJoystick>:
uint16_t readValueY = 0;

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;

void readJoystick(){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0

	 // Enable ADC for joystick
	HAL_ADC_Start(&hadc1);
 80020a4:	480f      	ldr	r0, [pc, #60]	; (80020e4 <readJoystick+0x44>)
 80020a6:	f000 fdab 	bl	8002c00 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 80020aa:	480f      	ldr	r0, [pc, #60]	; (80020e8 <readJoystick+0x48>)
 80020ac:	f000 fda8 	bl	8002c00 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1,1000);
 80020b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b4:	480b      	ldr	r0, [pc, #44]	; (80020e4 <readJoystick+0x44>)
 80020b6:	f000 fe71 	bl	8002d9c <HAL_ADC_PollForConversion>
	readValueX = HAL_ADC_GetValue(&hadc1);
 80020ba:	480a      	ldr	r0, [pc, #40]	; (80020e4 <readJoystick+0x44>)
 80020bc:	f000 fef9 	bl	8002eb2 <HAL_ADC_GetValue>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <readJoystick+0x4c>)
 80020c6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc2,1000);
 80020c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <readJoystick+0x48>)
 80020ce:	f000 fe65 	bl	8002d9c <HAL_ADC_PollForConversion>
    readValueY = HAL_ADC_GetValue(&hadc2);
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <readJoystick+0x48>)
 80020d4:	f000 feed 	bl	8002eb2 <HAL_ADC_GetValue>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <readJoystick+0x50>)
 80020de:	801a      	strh	r2, [r3, #0]
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200002c0 	.word	0x200002c0
 80020e8:	20000308 	.word	0x20000308
 80020ec:	20000454 	.word	0x20000454
 80020f0:	20000456 	.word	0x20000456

080020f4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b09a      	sub	sp, #104	; 0x68
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80020fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020fe:	2234      	movs	r2, #52	; 0x34
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f008 fc7a 	bl	800a9fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2234      	movs	r2, #52	; 0x34
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f008 fc74 	bl	800a9fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002114:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002116:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <MX_LTDC_Init+0x160>)
 8002118:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800211a:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <MX_LTDC_Init+0x15c>)
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002128:	2200      	movs	r2, #0
 800212a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800212c:	4b48      	ldr	r3, [pc, #288]	; (8002250 <MX_LTDC_Init+0x15c>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002134:	2207      	movs	r2, #7
 8002136:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <MX_LTDC_Init+0x15c>)
 800213a:	2203      	movs	r2, #3
 800213c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002140:	220e      	movs	r2, #14
 8002142:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002144:	4b42      	ldr	r3, [pc, #264]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002146:	2205      	movs	r2, #5
 8002148:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <MX_LTDC_Init+0x15c>)
 800214c:	f240 228e 	movw	r2, #654	; 0x28e
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002154:	f240 12e5 	movw	r2, #485	; 0x1e5
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <MX_LTDC_Init+0x15c>)
 800215c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002164:	f240 12e7 	movw	r2, #487	; 0x1e7
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800216a:	4b39      	ldr	r3, [pc, #228]	; (8002250 <MX_LTDC_Init+0x15c>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <MX_LTDC_Init+0x15c>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002182:	4833      	ldr	r0, [pc, #204]	; (8002250 <MX_LTDC_Init+0x15c>)
 8002184:	f002 fea4 	bl	8004ed0 <HAL_LTDC_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800218e:	f000 fa33 	bl	80025f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021a2:	2300      	movs	r3, #0
 80021a4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80021ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80021b4:	2305      	movs	r3, #5
 80021b6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80021d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	481c      	ldr	r0, [pc, #112]	; (8002250 <MX_LTDC_Init+0x15c>)
 80021e0:	f002 ff46 	bl	8005070 <HAL_LTDC_ConfigLayer>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80021ea:	f000 fa05 	bl	80025f8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002210:	2305      	movs	r3, #5
 8002212:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002232:	463b      	mov	r3, r7
 8002234:	2201      	movs	r2, #1
 8002236:	4619      	mov	r1, r3
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_LTDC_Init+0x15c>)
 800223a:	f002 ff19 	bl	8005070 <HAL_LTDC_ConfigLayer>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002244:	f000 f9d8 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	3768      	adds	r7, #104	; 0x68
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000458 	.word	0x20000458
 8002254:	40016800 	.word	0x40016800

08002258 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0a8      	sub	sp, #160	; 0xa0
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	2290      	movs	r2, #144	; 0x90
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f008 fbc7 	bl	800a9fc <memset>
  if(ltdcHandle->Instance==LTDC)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_LTDC_MspInit+0x74>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d124      	bne.n	80022c2 <HAL_LTDC_MspInit+0x6a>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002278:	2308      	movs	r3, #8
 800227a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800227c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002282:	2307      	movs	r3, #7
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8002286:	2303      	movs	r3, #3
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800228a:	2300      	movs	r3, #0
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800228e:	2301      	movs	r3, #1
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002292:	2300      	movs	r3, #0
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fe22 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_LTDC_MspInit+0x52>
    {
      Error_Handler();
 80022a6:	f000 f9a7 	bl	80025f8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_LTDC_MspInit+0x78>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <HAL_LTDC_MspInit+0x78>)
 80022b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_LTDC_MspInit+0x78>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80022c2:	bf00      	nop
 80022c4:	37a0      	adds	r7, #160	; 0xa0
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40016800 	.word	0x40016800
 80022d0:	40023800 	.word	0x40023800

080022d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022d8:	f3bf 8f4f 	dsb	sy
}
 80022dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022de:	f3bf 8f6f 	isb	sy
}
 80022e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <SCB_EnableICache+0x48>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80022ec:	f3bf 8f4f 	dsb	sy
}
 80022f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022f2:	f3bf 8f6f 	isb	sy
}
 80022f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <SCB_EnableICache+0x48>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <SCB_EnableICache+0x48>)
 80022fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002302:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002304:	f3bf 8f4f 	dsb	sy
}
 8002308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800230a:	f3bf 8f6f 	isb	sy
}
 800230e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002326:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <SCB_EnableDCache+0x84>)
 8002328:	2200      	movs	r2, #0
 800232a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800232e:	f3bf 8f4f 	dsb	sy
}
 8002332:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <SCB_EnableDCache+0x84>)
 8002336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800233a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0b5b      	lsrs	r3, r3, #13
 8002340:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002344:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	08db      	lsrs	r3, r3, #3
 800234a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002358:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800235e:	4911      	ldr	r1, [pc, #68]	; (80023a4 <SCB_EnableDCache+0x84>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60ba      	str	r2, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ef      	bne.n	8002350 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	60fa      	str	r2, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800237a:	f3bf 8f4f 	dsb	sy
}
 800237e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <SCB_EnableDCache+0x84>)
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <SCB_EnableDCache+0x84>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800238c:	f3bf 8f4f 	dsb	sy
}
 8002390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002392:	f3bf 8f6f 	isb	sy
}
 8002396:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80023ac:	f7ff ff92 	bl	80022d4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80023b0:	f7ff ffb6 	bl	8002320 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b4:	f000 fb86 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b8:	f000 f83a 	bl	8002430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023bc:	f7ff fa58 	bl	8001870 <MX_GPIO_Init>
  MX_FMC_Init();
 80023c0:	f7ff f950 	bl	8001664 <MX_FMC_Init>
  MX_I2C4_Init();
 80023c4:	f7ff fda8 	bl	8001f18 <MX_I2C4_Init>
  MX_TIM3_Init();
 80023c8:	f000 faa0 	bl	800290c <MX_TIM3_Init>
  MX_DMA2D_Init();
 80023cc:	f7fe ffe4 	bl	8001398 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80023d0:	f7ff f820 	bl	8001414 <MX_DSIHOST_DSI_Init>
  MX_LTDC_Init();
 80023d4:	f7ff fe8e 	bl	80020f4 <MX_LTDC_Init>
  MX_ADC1_Init();
 80023d8:	f7fe feb4 	bl	8001144 <MX_ADC1_Init>
  MX_ADC2_Init();
 80023dc:	f7fe ff04 	bl	80011e8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  //Configure the RAM chip
  BSP_SDRAM_Initialization_sequence(0xFFFF);
 80023e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023e4:	f000 f896 	bl	8002514 <BSP_SDRAM_Initialization_sequence>

  /* Initialize the LCD */
  BSP_LCD_Init();
 80023e8:	f7fe f8a8 	bl	800053c <BSP_LCD_Init>

  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 80023ec:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7fe fa3d 	bl	8000870 <BSP_LCD_LayerDefaultInit>

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7fe fa9a 	bl	8000930 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <main+0x84>)
 80023fe:	f7fe fad9 	bl	80009b4 <BSP_LCD_SetFont>

  BSP_LCD_Clear(LCD_COLOR_BLACK);			//LCD_COLOR_WHITE = 0xFFFFFFFF
 8002402:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002406:	f7fe faef 	bl	80009e8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800240a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800240e:	f7fe fab7 	bl	8000980 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002416:	f7fe fa9b 	bl	8000950 <BSP_LCD_SetTextColor>

  freeRTOS_user_init();
 800241a:	f000 f8f3 	bl	8002604 <freeRTOS_user_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800241e:	f005 fa59 	bl	80078d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002422:	f7ff fa0b 	bl	800183c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002426:	f005 fa89 	bl	800793c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800242a:	e7fe      	b.n	800242a <main+0x82>
 800242c:	20000008 	.word	0x20000008

08002430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b094      	sub	sp, #80	; 0x50
 8002434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	2234      	movs	r2, #52	; 0x34
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f008 fadc 	bl	800a9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002454:	f003 f834 	bl	80054c0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <SystemClock_Config+0xdc>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a2b      	ldr	r2, [pc, #172]	; (800250c <SystemClock_Config+0xdc>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <SystemClock_Config+0xdc>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <SystemClock_Config+0xe0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a26      	ldr	r2, [pc, #152]	; (8002510 <SystemClock_Config+0xe0>)
 8002476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <SystemClock_Config+0xe0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002488:	2301      	movs	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800248c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002490:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002492:	2302      	movs	r3, #2
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800249c:	2319      	movs	r3, #25
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 400;
 80024a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a6:	2302      	movs	r3, #2
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024aa:	2304      	movs	r3, #4
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 7;
 80024ae:	2307      	movs	r3, #7
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 f862 	bl	8005580 <HAL_RCC_OscConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024c2:	f000 f899 	bl	80025f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024c6:	f003 f80b 	bl	80054e0 <HAL_PWREx_EnableOverDrive>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80024d0:	f000 f892 	bl	80025f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d4:	230f      	movs	r3, #15
 80024d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d8:	2302      	movs	r3, #2
 80024da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	2106      	movs	r1, #6
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 faf2 	bl	8005adc <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80024fe:	f000 f87b 	bl	80025f8 <Error_Handler>
  }
}
 8002502:	bf00      	nop
 8002504:	3750      	adds	r7, #80	; 0x50
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000

08002514 <BSP_SDRAM_Initialization_sequence>:

/* USER CODE BEGIN 4 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002526:	4b29      	ldr	r3, [pc, #164]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002528:	2210      	movs	r2, #16
 800252a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800252e:	2201      	movs	r2, #1
 8002530:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253c:	4923      	ldr	r1, [pc, #140]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800253e:	4824      	ldr	r0, [pc, #144]	; (80025d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002540:	f004 f92c 	bl	800679c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f000 faf3 	bl	8002b30 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800254c:	2202      	movs	r2, #2
 800254e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002552:	2210      	movs	r2, #16
 8002554:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002558:	2201      	movs	r2, #1
 800255a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002566:	4919      	ldr	r1, [pc, #100]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002568:	4819      	ldr	r0, [pc, #100]	; (80025d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800256a:	f004 f917 	bl	800679c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002570:	2203      	movs	r2, #3
 8002572:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002576:	2210      	movs	r2, #16
 8002578:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800257c:	2208      	movs	r2, #8
 800257e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8002586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258a:	4910      	ldr	r1, [pc, #64]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800258c:	4810      	ldr	r0, [pc, #64]	; (80025d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800258e:	f004 f905 	bl	800679c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002592:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002596:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800259a:	2204      	movs	r2, #4
 800259c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a0:	2210      	movs	r2, #16
 80025a2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025ae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80025b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b4:	4905      	ldr	r1, [pc, #20]	; (80025cc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80025b6:	4806      	ldr	r0, [pc, #24]	; (80025d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025b8:	f004 f8f0 	bl	800679c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80025c0:	f004 f921 	bl	8006806 <HAL_SDRAM_ProgramRefreshRate>
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000500 	.word	0x20000500
 80025d0:	200003c4 	.word	0x200003c4

080025d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025e6:	f000 fa83 	bl	8002af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40001000 	.word	0x40001000

080025f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002600:	e7fe      	b.n	8002600 <Error_Handler+0x8>
	...

08002604 <freeRTOS_user_init>:
/* Functions definition ------------------------------------------------------*/
/**
  * @brief Create the FreeRTOS objects and tasks.
  * @return true if the tasks are created, false otherwise.
  */
void freeRTOS_user_init(void){
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af02      	add	r7, sp, #8
	bool retval = true;
 800260a:	2301      	movs	r3, #1
 800260c:	71fb      	strb	r3, [r7, #7]

	lcd_mut = xSemaphoreCreateMutex();			//Create mutex (LCD access)
 800260e:	2001      	movs	r0, #1
 8002610:	f005 fcf1 	bl	8007ff6 <xQueueCreateMutex>
 8002614:	4603      	mov	r3, r0
 8002616:	4a19      	ldr	r2, [pc, #100]	; (800267c <freeRTOS_user_init+0x78>)
 8002618:	6013      	str	r3, [r2, #0]
	if(lcd_mut == NULL)
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <freeRTOS_user_init+0x78>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <freeRTOS_user_init+0x22>
		retval = false;
 8002622:	2300      	movs	r3, #0
 8002624:	71fb      	strb	r3, [r7, #7]

	retval &= xTaskCreate( task_draw_fct,		//Task function
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <freeRTOS_user_init+0x7c>)
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2301      	movs	r3, #1
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002634:	4913      	ldr	r1, [pc, #76]	; (8002684 <freeRTOS_user_init+0x80>)
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <freeRTOS_user_init+0x84>)
 8002638:	f006 fa7f 	bl	8008b3a <xTaskCreate>
 800263c:	4602      	mov	r2, r0
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4013      	ands	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	71fb      	strb	r3, [r7, #7]
				256,							//Task stack dimension (1kB)
				NULL,							//Task parameter
				1,								//Task priority
				&task_draw_handle );			//Task handle

	retval &= xTaskCreate( task_readJoystick_fct,		//Task function
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <freeRTOS_user_init+0x88>)
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2301      	movs	r3, #1
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2300      	movs	r3, #0
 8002656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265a:	490d      	ldr	r1, [pc, #52]	; (8002690 <freeRTOS_user_init+0x8c>)
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <freeRTOS_user_init+0x90>)
 800265e:	f006 fa6c 	bl	8008b3a <xTaskCreate>
 8002662:	4602      	mov	r2, r0
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	71fb      	strb	r3, [r7, #7]
					"Task read joystick",					//Task function comment
					256,							//Task stack dimension (1kB)
					NULL,							//Task parameter
					1,								//Task priority
					&task_readJoystick_handle );			//Task handle
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000518 	.word	0x20000518
 8002680:	20000510 	.word	0x20000510
 8002684:	0800abf4 	.word	0x0800abf4
 8002688:	080026ad 	.word	0x080026ad
 800268c:	20000514 	.word	0x20000514
 8002690:	0800ac00 	.word	0x0800ac00
 8002694:	08002699 	.word	0x08002699

08002698 <task_readJoystick_fct>:

static void task_readJoystick_fct( void *pvParameters ){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	while(1){
		readJoystick();
 80026a0:	f7ff fcfe 	bl	80020a0 <readJoystick>
		vTaskDelay(pdMS_TO_TICKS(200));
 80026a4:	20c8      	movs	r0, #200	; 0xc8
 80026a6:	f006 fba5 	bl	8008df4 <vTaskDelay>
		readJoystick();
 80026aa:	e7f9      	b.n	80026a0 <task_readJoystick_fct+0x8>

080026ac <task_draw_fct>:
	}
}

static void task_draw_fct( void *pvParameters ){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

	uint16_t x = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	82fb      	strh	r3, [r7, #22]
	uint16_t y = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	82bb      	strh	r3, [r7, #20]
	uint16_t gap = 10;
 80026bc:	230a      	movs	r3, #10
 80026be:	827b      	strh	r3, [r7, #18]
	BaseType_t ret;

	while(1){
		ret = xSemaphoreTake(lcd_mut, portMAX_DELAY);	//Lock Mutex
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <task_draw_fct+0x78>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026c8:	4618      	mov	r0, r3
 80026ca:	f005 ff39 	bl	8008540 <xQueueSemaphoreTake>
 80026ce:	60f8      	str	r0, [r7, #12]
		if (ret == pdTRUE){
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d121      	bne.n	800271a <task_draw_fct+0x6e>
			draw_filled_square(x, y, CUBE_SIDE_LEN, CUBE_SIDE_LEN);
 80026d6:	8ab9      	ldrh	r1, [r7, #20]
 80026d8:	8af8      	ldrh	r0, [r7, #22]
 80026da:	2314      	movs	r3, #20
 80026dc:	2214      	movs	r2, #20
 80026de:	f000 f823 	bl	8002728 <draw_filled_square>

			if(x + gap + CUBE_SIDE_LEN < DISP_X_SIZE){
 80026e2:	8afa      	ldrh	r2, [r7, #22]
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	4413      	add	r3, r2
 80026e8:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 80026ec:	da06      	bge.n	80026fc <task_draw_fct+0x50>
				x += gap + CUBE_SIDE_LEN;
 80026ee:	8a7a      	ldrh	r2, [r7, #18]
 80026f0:	8afb      	ldrh	r3, [r7, #22]
 80026f2:	4413      	add	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3314      	adds	r3, #20
 80026f8:	82fb      	strh	r3, [r7, #22]
 80026fa:	e007      	b.n	800270c <task_draw_fct+0x60>
			}else{
				x = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	82fb      	strh	r3, [r7, #22]
				y += gap + CUBE_SIDE_LEN;
 8002700:	8a7a      	ldrh	r2, [r7, #18]
 8002702:	8abb      	ldrh	r3, [r7, #20]
 8002704:	4413      	add	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	3314      	adds	r3, #20
 800270a:	82bb      	strh	r3, [r7, #20]
			}
			xSemaphoreGive(lcd_mut);					//Unlock Mutex
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <task_draw_fct+0x78>)
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	f005 fc87 	bl	8008028 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(500));
 800271a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800271e:	f006 fb69 	bl	8008df4 <vTaskDelay>
		ret = xSemaphoreTake(lcd_mut, portMAX_DELAY);	//Lock Mutex
 8002722:	e7cd      	b.n	80026c0 <task_draw_fct+0x14>
 8002724:	20000518 	.word	0x20000518

08002728 <draw_filled_square>:
	}
}

static void draw_filled_square(uint16_t x, uint16_t y, uint16_t width, uint16_t height){
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	80fb      	strh	r3, [r7, #6]
 800273a:	4603      	mov	r3, r0
 800273c:	80bb      	strh	r3, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
 8002742:	4613      	mov	r3, r2
 8002744:	803b      	strh	r3, [r7, #0]
	BSP_LCD_SetTextColor(COLOR_C);	//Set border color
 8002746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800274a:	f7fe f901 	bl	8000950 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(x, y, width, height); //Draw the circle border outline
 800274e:	883b      	ldrh	r3, [r7, #0]
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	88b9      	ldrh	r1, [r7, #4]
 8002754:	88f8      	ldrh	r0, [r7, #6]
 8002756:	f7fe f96f 	bl	8000a38 <BSP_LCD_FillRect>
	//BSP_LCD_DrawCircle(x, y, r);
	//BSP_LCD_SetTextColor(COLOR_T);		//Set the filling color
	//BSP_LCD_FillCircle(x, y, r-1);	//Draw the filled circle
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bd90      	pop	{r4, r7, pc}
	...

08002764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_MspInit+0x4c>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_MspInit+0x4c>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_MspInit+0x4c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_MspInit+0x4c>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_MspInit+0x4c>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	210f      	movs	r1, #15
 800279e:	f06f 0001 	mvn.w	r0, #1
 80027a2:	f000 fe9b 	bl	80034dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_InitTick+0xe0>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_InitTick+0xe0>)
 80027ca:	f043 0310 	orr.w	r3, r3, #16
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_InitTick+0xe0>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027dc:	f107 0210 	add.w	r2, r7, #16
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fb4a 	bl	8005e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027f6:	f003 fb2f 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 80027fa:	6378      	str	r0, [r7, #52]	; 0x34
 80027fc:	e004      	b.n	8002808 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027fe:	f003 fb2b 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
 8002802:	4603      	mov	r3, r0
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_InitTick+0xe4>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	3b01      	subs	r3, #1
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_InitTick+0xe8>)
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_InitTick+0xec>)
 800281a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800281c:	4b1f      	ldr	r3, [pc, #124]	; (800289c <HAL_InitTick+0xe8>)
 800281e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002822:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_InitTick+0xe8>)
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_InitTick+0xe8>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <HAL_InitTick+0xe8>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_InitTick+0xe8>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800283c:	4817      	ldr	r0, [pc, #92]	; (800289c <HAL_InitTick+0xe8>)
 800283e:	f004 f80a 	bl	8006856 <HAL_TIM_Base_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002848:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11b      	bne.n	8002888 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002850:	4812      	ldr	r0, [pc, #72]	; (800289c <HAL_InitTick+0xe8>)
 8002852:	f004 f861 	bl	8006918 <HAL_TIM_Base_Start_IT>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800285c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002860:	2b00      	cmp	r3, #0
 8002862:	d111      	bne.n	8002888 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002864:	2036      	movs	r0, #54	; 0x36
 8002866:	f000 fe55 	bl	8003514 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b0f      	cmp	r3, #15
 800286e:	d808      	bhi.n	8002882 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002870:	2200      	movs	r2, #0
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	2036      	movs	r0, #54	; 0x36
 8002876:	f000 fe31 	bl	80034dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_InitTick+0xf0>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e002      	b.n	8002888 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002888:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800288c:	4618      	mov	r0, r3
 800288e:	3738      	adds	r7, #56	; 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	431bde83 	.word	0x431bde83
 800289c:	2000051c 	.word	0x2000051c
 80028a0:	40001000 	.word	0x40001000
 80028a4:	20000014 	.word	0x20000014

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <NMI_Handler+0x4>

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <TIM6_DAC_IRQHandler+0x10>)
 80028da:	f004 f8ec 	bl	8006ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000051c 	.word	0x2000051c

080028e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <SystemInit+0x20>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <SystemInit+0x20>)
 80028f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800291e:	463b      	mov	r3, r7
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	615a      	str	r2, [r3, #20]
 800292e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002932:	4a22      	ldr	r2, [pc, #136]	; (80029bc <MX_TIM3_Init+0xb0>)
 8002934:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002938:	2200      	movs	r2, #0
 800293a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_TIM3_Init+0xac>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002948:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_TIM3_Init+0xac>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002956:	4818      	ldr	r0, [pc, #96]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002958:	f004 f856 	bl	8006a08 <HAL_TIM_PWM_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002962:	f7ff fe49 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <MX_TIM3_Init+0xac>)
 8002976:	f004 fdf7 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002980:	f7ff fe3a 	bl	80025f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002984:	2360      	movs	r3, #96	; 0x60
 8002986:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002994:	463b      	mov	r3, r7
 8002996:	2208      	movs	r2, #8
 8002998:	4619      	mov	r1, r3
 800299a:	4807      	ldr	r0, [pc, #28]	; (80029b8 <MX_TIM3_Init+0xac>)
 800299c:	f004 f9aa 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80029a6:	f7ff fe27 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029aa:	4803      	ldr	r0, [pc, #12]	; (80029b8 <MX_TIM3_Init+0xac>)
 80029ac:	f000 f828 	bl	8002a00 <HAL_TIM_MspPostInit>

}
 80029b0:	bf00      	nop
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000568 	.word	0x20000568
 80029bc:	40000400 	.word	0x40000400

080029c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_TIM_PWM_MspInit+0x38>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10b      	bne.n	80029ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_TIM_PWM_MspInit+0x3c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_TIM_PWM_MspInit+0x3c>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <HAL_TIM_PWM_MspInit+0x3c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40023800 	.word	0x40023800

08002a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <HAL_TIM_MspPostInit+0x64>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d11c      	bne.n	8002a5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_TIM_MspPostInit+0x68>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a10      	ldr	r2, [pc, #64]	; (8002a68 <HAL_TIM_MspPostInit+0x68>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <HAL_TIM_MspPostInit+0x68>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8002a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	4619      	mov	r1, r3
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_TIM_MspPostInit+0x6c>)
 8002a58:	f001 ff4c 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	3720      	adds	r7, #32
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40000400 	.word	0x40000400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020800 	.word	0x40020800

08002a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a9a:	f7ff ff25 	bl	80028e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a9e:	f008 f80b 	bl	800aab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa2:	f7ff fc81 	bl	80023a8 <main>
  bx  lr    
 8002aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002aa8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ab4:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 8002ab8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002abc:	200050d8 	.word	0x200050d8

08002ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_Init+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_Init+0x28>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 fcf6 	bl	80034c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	200f      	movs	r0, #15
 8002adc:	f7ff fe6a 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fe40 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00

08002af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_IncTick+0x20>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x24>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_IncTick+0x24>)
 8002b02:	6013      	str	r3, [r2, #0]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000018 	.word	0x20000018
 8002b14:	200005b4 	.word	0x200005b4

08002b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_GetTick+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	200005b4 	.word	0x200005b4

08002b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b38:	f7ff ffee 	bl	8002b18 <HAL_GetTick>
 8002b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b48:	d005      	beq.n	8002b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_Delay+0x44>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b56:	bf00      	nop
 8002b58:	f7ff ffde 	bl	8002b18 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d8f7      	bhi.n	8002b58 <HAL_Delay+0x28>
  {
  }
}
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000018 	.word	0x20000018

08002b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e031      	b.n	8002bf2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fb78 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_ADC_Init+0x84>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fad6 	bl	8003178 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
 8002be2:	e001      	b.n	8002be8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	ffffeefd 	.word	0xffffeefd

08002c00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Start+0x1a>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0ad      	b.n	8002d76 <HAL_ADC_Start+0x176>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d018      	beq.n	8002c62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_ADC_Start+0x184>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_ADC_Start+0x188>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9a      	lsrs	r2, r3, #18
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f9      	bne.n	8002c56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d175      	bne.n	8002d5c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c74:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <HAL_ADC_Start+0x18c>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f023 0206 	bic.w	r2, r3, #6
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cb8:	e002      	b.n	8002cc0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cd0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002cd2:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <HAL_ADC_Start+0x190>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d143      	bne.n	8002d74 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e03a      	b.n	8002d74 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <HAL_ADC_Start+0x194>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10e      	bne.n	8002d26 <HAL_ADC_Start+0x126>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d107      	bne.n	8002d26 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d24:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_ADC_Start+0x190>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d120      	bne.n	8002d74 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_ADC_Start+0x198>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_ADC_Start+0x174>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d114      	bne.n	8002d74 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0210 	orr.w	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000010 	.word	0x20000010
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	fffff8fe 	.word	0xfffff8fe
 8002d90:	40012300 	.word	0x40012300
 8002d94:	40012000 	.word	0x40012000
 8002d98:	40012200 	.word	0x40012200

08002d9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d113      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc8:	d10b      	bne.n	8002de2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e063      	b.n	8002eaa <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002de2:	f7ff fe99 	bl	8002b18 <HAL_GetTick>
 8002de6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002de8:	e021      	b.n	8002e2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df0:	d01d      	beq.n	8002e2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_ADC_PollForConversion+0x6c>
 8002df8:	f7ff fe8e 	bl	8002b18 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d212      	bcs.n	8002e2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d00b      	beq.n	8002e2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e03d      	b.n	8002eaa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d1d6      	bne.n	8002dea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0212 	mvn.w	r2, #18
 8002e44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d123      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11f      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e136      	b.n	8003156 <HAL_ADC_ConfigChannel+0x28a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	d93a      	bls.n	8002f6e <HAL_ADC_ConfigChannel+0xa2>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f00:	d035      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	3b1e      	subs	r3, #30
 8002f18:	2207      	movs	r2, #7
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a8d      	ldr	r2, [pc, #564]	; (8003164 <HAL_ADC_ConfigChannel+0x298>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10a      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68d9      	ldr	r1, [r3, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	061a      	lsls	r2, r3, #24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f46:	e035      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68d9      	ldr	r1, [r3, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4403      	add	r3, r0
 8002f60:	3b1e      	subs	r3, #30
 8002f62:	409a      	lsls	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f6c:	e022      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6919      	ldr	r1, [r3, #16]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4403      	add	r3, r0
 8002faa:	409a      	lsls	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d824      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b05      	subs	r3, #5
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b05      	subs	r3, #5
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	635a      	str	r2, [r3, #52]	; 0x34
 8003004:	e04c      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d824      	bhi.n	8003058 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3b23      	subs	r3, #35	; 0x23
 8003020:	221f      	movs	r2, #31
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	400a      	ands	r2, r1
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	3b23      	subs	r3, #35	; 0x23
 800304a:	fa00 f203 	lsl.w	r2, r0, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
 8003056:	e023      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b41      	subs	r3, #65	; 0x41
 800306a:	221f      	movs	r2, #31
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b41      	subs	r3, #65	; 0x41
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_ADC_ConfigChannel+0x29c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10a      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1f4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030b2:	d105      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80030be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a28      	ldr	r2, [pc, #160]	; (8003168 <HAL_ADC_ConfigChannel+0x29c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10f      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b12      	cmp	r3, #18
 80030d0:	d10b      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a25      	ldr	r2, [pc, #148]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 80030e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <HAL_ADC_ConfigChannel+0x29c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d12b      	bne.n	800314c <HAL_ADC_ConfigChannel+0x280>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_ADC_ConfigChannel+0x298>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x23a>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b11      	cmp	r3, #17
 8003104:	d122      	bne.n	800314c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 800310c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003110:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <HAL_ADC_ConfigChannel+0x2a0>)
 8003118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800311c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a10      	ldr	r2, [pc, #64]	; (8003164 <HAL_ADC_ConfigChannel+0x298>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d111      	bne.n	800314c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_ADC_ConfigChannel+0x2a4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a11      	ldr	r2, [pc, #68]	; (8003174 <HAL_ADC_ConfigChannel+0x2a8>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9a      	lsrs	r2, r3, #18
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800313e:	e002      	b.n	8003146 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f9      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	10000012 	.word	0x10000012
 8003168:	40012000 	.word	0x40012000
 800316c:	40012300 	.word	0x40012300
 8003170:	20000010 	.word	0x20000010
 8003174:	431bde83 	.word	0x431bde83

08003178 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003180:	4b78      	ldr	r3, [pc, #480]	; (8003364 <ADC_Init+0x1ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a77      	ldr	r2, [pc, #476]	; (8003364 <ADC_Init+0x1ec>)
 8003186:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800318a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <ADC_Init+0x1ec>)
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4973      	ldr	r1, [pc, #460]	; (8003364 <ADC_Init+0x1ec>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	021a      	lsls	r2, r3, #8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	4a58      	ldr	r2, [pc, #352]	; (8003368 <ADC_Init+0x1f0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d022      	beq.n	8003252 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800321a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800323c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	e00f      	b.n	8003272 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0202 	bic.w	r2, r2, #2
 8003280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	005a      	lsls	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	3b01      	subs	r3, #1
 80032cc:	035a      	lsls	r2, r3, #13
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e007      	b.n	80032e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	3b01      	subs	r3, #1
 8003304:	051a      	lsls	r2, r3, #20
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800331c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6899      	ldr	r1, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800332a:	025a      	lsls	r2, r3, #9
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	029a      	lsls	r2, r3, #10
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40012300 	.word	0x40012300
 8003368:	0f000001 	.word	0x0f000001

0800336c <__NVIC_SetPriorityGrouping>:
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <__NVIC_SetPriorityGrouping+0x40>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003388:	4013      	ands	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	4313      	orrs	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339a:	4a04      	ldr	r2, [pc, #16]	; (80033ac <__NVIC_SetPriorityGrouping+0x40>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	60d3      	str	r3, [r2, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00
 80033b0:	05fa0000 	.word	0x05fa0000

080033b4 <__NVIC_GetPriorityGrouping>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <__NVIC_GetPriorityGrouping+0x18>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f003 0307 	and.w	r3, r3, #7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_EnableIRQ>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	db0b      	blt.n	80033fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <__NVIC_EnableIRQ+0x38>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2001      	movs	r0, #1
 80033f2:	fa00 f202 	lsl.w	r2, r0, r2
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000e100 	.word	0xe000e100

0800340c <__NVIC_SetPriority>:
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff4c 	bl	800336c <__NVIC_SetPriorityGrouping>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ee:	f7ff ff61 	bl	80033b4 <__NVIC_GetPriorityGrouping>
 80034f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	6978      	ldr	r0, [r7, #20]
 80034fa:	f7ff ffb1 	bl	8003460 <NVIC_EncodePriority>
 80034fe:	4602      	mov	r2, r0
 8003500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff80 	bl	800340c <__NVIC_SetPriority>
}
 800350c:	bf00      	nop
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff54 	bl	80033d0 <__NVIC_EnableIRQ>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd ff3c 	bl	80013d4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	f023 0107 	bic.w	r1, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_DMA2D_Init+0xb0>)
 8003598:	4013      	ands	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68d1      	ldr	r1, [r2, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	051a      	lsls	r2, r3, #20
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	055b      	lsls	r3, r3, #21
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	ffffc000 	.word	0xffffc000

080035e4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_DMA2D_Start+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e018      	b.n	8003632 <HAL_DMA2D_Start+0x4e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f994 	bl	8003948 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d056      	beq.n	8003704 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003656:	f7ff fa5f 	bl	8002b18 <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800365c:	e04b      	b.n	80036f6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2221      	movs	r2, #33	; 0x21
 80036a2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2204      	movs	r2, #4
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a5      	b.n	8003804 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036be:	d01a      	beq.n	80036f6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c0:	f7ff fa2a 	bl	8002b18 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <HAL_DMA2D_PollForTransfer+0x9c>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10f      	bne.n	80036f6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2203      	movs	r2, #3
 80036e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e086      	b.n	8003804 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ac      	beq.n	800365e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d061      	beq.n	80037ea <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003726:	f7ff f9f7 	bl	8002b18 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800372c:	e056      	b.n	80037dc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800373c:	2b00      	cmp	r3, #0
 800373e:	d02e      	beq.n	800379e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0202 	orr.w	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2229      	movs	r2, #41	; 0x29
 8003788:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e032      	b.n	8003804 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a4:	d01a      	beq.n	80037dc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7ff f9b7 	bl	8002b18 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <HAL_DMA2D_PollForTransfer+0x182>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10f      	bne.n	80037dc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2203      	movs	r2, #3
 80037cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e013      	b.n	8003804 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0a1      	beq.n	800372e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2212      	movs	r2, #18
 80037f0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_DMA2D_ConfigLayer+0x20>
 8003828:	2302      	movs	r3, #2
 800382a:	e084      	b.n	8003936 <HAL_DMA2D_ConfigLayer+0x12a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	3320      	adds	r3, #32
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	041b      	lsls	r3, r3, #16
 8003858:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003860:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <HAL_DMA2D_ConfigLayer+0x138>)
 800386e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0a      	cmp	r3, #10
 8003876:	d003      	beq.n	8003880 <HAL_DMA2D_ConfigLayer+0x74>
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b09      	cmp	r3, #9
 800387e:	d107      	bne.n	8003890 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e005      	b.n	800389c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d120      	bne.n	80038e4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	ea02 0103 	and.w	r1, r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b0a      	cmp	r3, #10
 80038ca:	d003      	beq.n	80038d4 <HAL_DMA2D_ConfigLayer+0xc8>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d127      	bne.n	8003924 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
 80038e2:	e01f      	b.n	8003924 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	ea02 0103 	and.w	r1, r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b0a      	cmp	r3, #10
 800390c:	d003      	beq.n	8003916 <HAL_DMA2D_ConfigLayer+0x10a>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b09      	cmp	r3, #9
 8003914:	d106      	bne.n	8003924 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003922:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	ff33000f 	.word	0xff33000f

08003948 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003948:	b480      	push	{r7}
 800394a:	b08b      	sub	sp, #44	; 0x2c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003966:	431a      	orrs	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003980:	d174      	bne.n	8003a6c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003988:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003990:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003998:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
 80039b8:	e053      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	e048      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d111      	bne.n	80039fc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	0cdb      	lsrs	r3, r3, #19
 80039dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	0a9b      	lsrs	r3, r3, #10
 80039e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08db      	lsrs	r3, r3, #3
 80039e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	02db      	lsls	r3, r3, #11
 80039f2:	4313      	orrs	r3, r2
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e032      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d117      	bne.n	8003a34 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	0fdb      	lsrs	r3, r3, #31
 8003a08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	0cdb      	lsrs	r3, r3, #19
 8003a0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	431a      	orrs	r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	03db      	lsls	r3, r3, #15
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e016      	b.n	8003a62 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	0f1b      	lsrs	r3, r3, #28
 8003a38:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	0d1b      	lsrs	r3, r3, #20
 8003a3e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	011a      	lsls	r2, r3, #4
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	431a      	orrs	r2, r3
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003a6a:	e003      	b.n	8003a74 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	60da      	str	r2, [r3, #12]
}
 8003a74:	bf00      	nop
 8003a76:	372c      	adds	r7, #44	; 0x2c
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	019a      	lsls	r2, r3, #6
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac0:	f7ff f82a 	bl	8002b18 <HAL_GetTick>
 8003ac4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ac6:	e009      	b.n	8003adc <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003ac8:	f7ff f826 	bl	8002b18 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad6:	d901      	bls.n	8003adc <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e015      	b.n	8003b08 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ee      	beq.n	8003ac8 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	019a      	lsls	r2, r3, #6
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	ea42 0103 	orr.w	r1, r2, r3
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e109      	b.n	8003d38 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7c5b      	ldrb	r3, [r3, #17]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fd5e 	bl	80015f0 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2203      	movs	r2, #3
 8003b38:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b4e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b62:	f7fe ffd9 	bl	8002b18 <HAL_GetTick>
 8003b66:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b68:	e009      	b.n	8003b7e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003b6a:	f7fe ffd5 	bl	8002b18 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b78:	d901      	bls.n	8003b7e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0dc      	b.n	8003d38 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ed      	beq.n	8003b6a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b69      	ldr	r3, [pc, #420]	; (8003d40 <HAL_DSI_Init+0x230>)
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bb6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003bbe:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f7fe ff9c 	bl	8002b30 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bf8:	f7fe ff8e 	bl	8002b18 <HAL_GetTick>
 8003bfc:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003bfe:	e009      	b.n	8003c14 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003c00:	f7fe ff8a 	bl	8002b18 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0e:	d901      	bls.n	8003c14 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e091      	b.n	8003d38 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ed      	beq.n	8003c00 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0206 	orr.w	r2, r2, #6
 8003c34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0203 	bic.w	r2, r2, #3
 8003c48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0203 	bic.w	r2, r2, #3
 8003c76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c9e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_DSI_Init+0x1b0>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	e000      	b.n	8003cc2 <HAL_DSI_Init+0x1b2>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <HAL_DSI_Init+0x234>)
 8003cc8:	fb03 f202 	mul.w	r2, r3, r2
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003cf8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	fffc8603 	.word	0xfffc8603
 8003d44:	003d0900 	.word	0x003d0900

08003d48 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e066      	b.n	8003e28 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0208 	bic.w	r2, r2, #8
 8003d74:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0206 	bic.w	r2, r2, #6
 8003dba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003dfa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd fc0e 	bl	8001630 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	7c1b      	ldrb	r3, [r3, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0aa      	b.n	8003f9c <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e80:	430b      	orrs	r3, r1
 8003e82:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003ea0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0202 	orr.w	r2, r2, #2
 8003edc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 020c 	orr.w	r2, r2, #12
 8003efa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d009      	beq.n	8003f1c <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0210 	orr.w	r2, r2, #16
 8003f18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0220 	orr.w	r2, r2, #32
 8003f36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003f90:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	7c1b      	ldrb	r3, [r3, #16]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_DSI_SetGenericVCID+0x16>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e016      	b.n	8003fec <HAL_DSI_SetGenericVCID+0x44>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0203 	bic.w	r2, r2, #3
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	7c1b      	ldrb	r3, [r3, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_DSI_ConfigVideoMode+0x16>
 800400a:	2302      	movs	r3, #2
 800400c:	e1ee      	b.n	80043ec <HAL_DSI_ConfigVideoMode+0x3f4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0203 	bic.w	r2, r2, #3
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b8b      	ldr	r3, [pc, #556]	; (8004294 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004066:	400b      	ands	r3, r1
 8004068:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b84      	ldr	r3, [pc, #528]	; (8004298 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004088:	400b      	ands	r3, r1
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b7b      	ldr	r3, [pc, #492]	; (8004298 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0203 	bic.w	r2, r2, #3
 80040ce:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0207 	bic.w	r2, r2, #7
 80040f0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6959      	ldr	r1, [r3, #20]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	431a      	orrs	r2, r3
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 020f 	bic.w	r2, r2, #15
 800411e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6919      	ldr	r1, [r3, #16]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020e 	bic.w	r2, r2, #14
 8004142:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	005a      	lsls	r2, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d110      	bne.n	8004188 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004174:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6919      	ldr	r1, [r3, #16]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b42      	ldr	r3, [pc, #264]	; (800429c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004194:	400b      	ands	r3, r1
 8004196:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_DSI_ConfigVideoMode+0x2a4>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_DSI_ConfigVideoMode+0x2a8>)
 80041d8:	400b      	ands	r3, r1
 80041da:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80041fa:	400b      	ands	r3, r1
 80041fc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800421c:	400b      	ands	r3, r1
 800421e:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800423e:	400b      	ands	r3, r1
 8004240:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004260:	400b      	ands	r3, r1
 8004262:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004290:	e00a      	b.n	80042a8 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004292:	bf00      	nop
 8004294:	ffffc000 	.word	0xffffc000
 8004298:	ffffe000 	.word	0xffffe000
 800429c:	fffff000 	.word	0xfffff000
 80042a0:	ffff8000 	.word	0xffff8000
 80042a4:	fffffc00 	.word	0xfffffc00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80042be:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6999      	ldr	r1, [r3, #24]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	041a      	lsls	r2, r3, #16
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042e2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6999      	ldr	r1, [r3, #24]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7c1b      	ldrb	r3, [r3, #16]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_DSI_ConfigFlowControl+0x16>
 800440a:	2302      	movs	r3, #2
 800440c:	e016      	b.n	800443c <HAL_DSI_ConfigFlowControl+0x44>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 021f 	bic.w	r2, r2, #31
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7c1b      	ldrb	r3, [r3, #16]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_DSI_ConfigPhyTimer+0x16>
 800445a:	2302      	movs	r3, #2
 800445c:	e058      	b.n	8004510 <HAL_DSI_ConfigPhyTimer+0xc8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4293      	cmp	r3, r2
 800446e:	bf38      	it	cc
 8004470:	4613      	movcc	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004484:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	041a      	lsls	r2, r3, #16
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80044b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7c1b      	ldrb	r3, [r3, #16]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_DSI_ConfigHostTimeouts+0x16>
 800452e:	2302      	movs	r3, #2
 8004530:	e0b4      	b.n	800469c <HAL_DSI_ConfigHostTimeouts+0x180>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004546:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	b292      	uxth	r2, r2
 8004568:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b47      	ldr	r3, [pc, #284]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800458a:	400b      	ands	r3, r1
 800458c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b3f      	ldr	r3, [pc, #252]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045ac:	400b      	ands	r3, r1
 80045ae:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045d0:	400b      	ands	r3, r1
 80045d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800464e:	400b      	ands	r3, r1
 8004650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	69da      	ldr	r2, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004678:	400b      	ands	r3, r1
 800467a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	ffff0000 	.word	0xffff0000

080046ac <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	7c1b      	ldrb	r3, [r3, #16]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_DSI_Start+0x14>
 80046bc:	2302      	movs	r3, #2
 80046be:	e02b      	b.n	8004718 <HAL_DSI_Start+0x6c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80046c6:	2300      	movs	r3, #0
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0208 	orr.w	r2, r2, #8
 80046fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	7c1b      	ldrb	r3, [r3, #16]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_DSI_ShortWrite+0x1a>
 800473a:	2302      	movs	r3, #2
 800473c:	e010      	b.n	8004760 <HAL_DSI_ShortWrite+0x3c>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff f9af 	bl	8003ab2 <DSI_ShortWrite>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	741a      	strb	r2, [r3, #16]

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	7c1b      	ldrb	r3, [r3, #16]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_DSI_LongWrite+0x1e>
 8004782:	2302      	movs	r3, #2
 8004784:	e084      	b.n	8004890 <HAL_DSI_LongWrite+0x128>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7fe f9c4 	bl	8002b18 <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004792:	e00c      	b.n	80047ae <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004794:	f7fe f9c0 	bl	8002b18 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a2:	d904      	bls.n	80047ae <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e070      	b.n	8004890 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0eb      	beq.n	8004794 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	bf28      	it	cs
 80047c6:	2303      	movcs	r3, #3
 80047c8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e00f      	b.n	80047f0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	4413      	add	r3, r2
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	3301      	adds	r3, #1
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	3301      	adds	r3, #1
 80047ee:	623b      	str	r3, [r7, #32]
 80047f0:	6a3a      	ldr	r2, [r7, #32]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d3eb      	bcc.n	80047d0 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4413      	add	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004810:	e028      	b.n	8004864 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b04      	cmp	r3, #4
 8004816:	bf28      	it	cs
 8004818:	2304      	movcs	r3, #4
 800481a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004820:	2300      	movs	r3, #0
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	e00e      	b.n	8004844 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	3301      	adds	r3, #1
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	429a      	cmp	r2, r3
 800484a:	d3ec      	bcc.n	8004826 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1d3      	bne.n	8004812 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004872:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800487a:	b2db      	uxtb	r3, r3
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	f7ff f8fc 	bl	8003a80 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7c1b      	ldrb	r3, [r3, #16]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_DSI_SetLowPowerRXFilter+0x16>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e01b      	b.n	80048e6 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80048c4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	065a      	lsls	r2, r3, #25
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e175      	b.n	8004c00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004914:	2201      	movs	r2, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	f040 8164 	bne.w	8004bfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d005      	beq.n	800494a <HAL_GPIO_Init+0x56>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d130      	bne.n	80049ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	2203      	movs	r2, #3
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004980:	2201      	movs	r2, #1
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 0201 	and.w	r2, r3, #1
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d017      	beq.n	80049e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d123      	bne.n	8004a3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	08da      	lsrs	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3208      	adds	r2, #8
 80049fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	08da      	lsrs	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	69b9      	ldr	r1, [r7, #24]
 8004a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2203      	movs	r2, #3
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 0203 	and.w	r2, r3, #3
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80be 	beq.w	8004bfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <HAL_GPIO_Init+0x324>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	4a65      	ldr	r2, [pc, #404]	; (8004c18 <HAL_GPIO_Init+0x324>)
 8004a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a88:	6453      	str	r3, [r2, #68]	; 0x44
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_GPIO_Init+0x324>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a96:	4a61      	ldr	r2, [pc, #388]	; (8004c1c <HAL_GPIO_Init+0x328>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a58      	ldr	r2, [pc, #352]	; (8004c20 <HAL_GPIO_Init+0x32c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d037      	beq.n	8004b32 <HAL_GPIO_Init+0x23e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a57      	ldr	r2, [pc, #348]	; (8004c24 <HAL_GPIO_Init+0x330>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d031      	beq.n	8004b2e <HAL_GPIO_Init+0x23a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a56      	ldr	r2, [pc, #344]	; (8004c28 <HAL_GPIO_Init+0x334>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d02b      	beq.n	8004b2a <HAL_GPIO_Init+0x236>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a55      	ldr	r2, [pc, #340]	; (8004c2c <HAL_GPIO_Init+0x338>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d025      	beq.n	8004b26 <HAL_GPIO_Init+0x232>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a54      	ldr	r2, [pc, #336]	; (8004c30 <HAL_GPIO_Init+0x33c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01f      	beq.n	8004b22 <HAL_GPIO_Init+0x22e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a53      	ldr	r2, [pc, #332]	; (8004c34 <HAL_GPIO_Init+0x340>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d019      	beq.n	8004b1e <HAL_GPIO_Init+0x22a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_GPIO_Init+0x344>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <HAL_GPIO_Init+0x226>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a51      	ldr	r2, [pc, #324]	; (8004c3c <HAL_GPIO_Init+0x348>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00d      	beq.n	8004b16 <HAL_GPIO_Init+0x222>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a50      	ldr	r2, [pc, #320]	; (8004c40 <HAL_GPIO_Init+0x34c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <HAL_GPIO_Init+0x21e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a4f      	ldr	r2, [pc, #316]	; (8004c44 <HAL_GPIO_Init+0x350>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <HAL_GPIO_Init+0x21a>
 8004b0a:	2309      	movs	r3, #9
 8004b0c:	e012      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b0e:	230a      	movs	r3, #10
 8004b10:	e010      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b12:	2308      	movs	r3, #8
 8004b14:	e00e      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b16:	2307      	movs	r3, #7
 8004b18:	e00c      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b1a:	2306      	movs	r3, #6
 8004b1c:	e00a      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b1e:	2305      	movs	r3, #5
 8004b20:	e008      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b22:	2304      	movs	r3, #4
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b26:	2303      	movs	r3, #3
 8004b28:	e004      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e002      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <HAL_GPIO_Init+0x240>
 8004b32:	2300      	movs	r3, #0
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	f002 0203 	and.w	r2, r2, #3
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	4093      	lsls	r3, r2
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b44:	4935      	ldr	r1, [pc, #212]	; (8004c1c <HAL_GPIO_Init+0x328>)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b76:	4a34      	ldr	r2, [pc, #208]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b7c:	4b32      	ldr	r3, [pc, #200]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ba0:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ba6:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bca:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd0:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <HAL_GPIO_Init+0x354>)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	f67f ae86 	bls.w	8004914 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40020000 	.word	0x40020000
 8004c24:	40020400 	.word	0x40020400
 8004c28:	40020800 	.word	0x40020800
 8004c2c:	40020c00 	.word	0x40020c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40021400 	.word	0x40021400
 8004c38:	40021800 	.word	0x40021800
 8004c3c:	40021c00 	.word	0x40021c00
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40022400 	.word	0x40022400
 8004c48:	40013c00 	.word	0x40013c00

08004c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c5c:	787b      	ldrb	r3, [r7, #1]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c68:	e003      	b.n	8004c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	041a      	lsls	r2, r3, #16
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	619a      	str	r2, [r3, #24]
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e07f      	b.n	8004d92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd f976 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e006      	b.n	8004d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d104      	bne.n	8004d1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_I2C_Init+0x11c>)
 8004d26:	430b      	orrs	r3, r1
 8004d28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691a      	ldr	r2, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1a      	ldr	r2, [r3, #32]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	02008000 	.word	0x02008000

08004da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d138      	bne.n	8004e28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e032      	b.n	8004e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004df2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d139      	bne.n	8004ec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e033      	b.n	8004ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2224      	movs	r2, #36	; 0x24
 8004e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0bf      	b.n	8005062 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd f9ae 	bl	8002258 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6999      	ldr	r1, [r3, #24]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6899      	ldr	r1, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b4a      	ldr	r3, [pc, #296]	; (800506c <HAL_LTDC_Init+0x19c>)
 8004f44:	400b      	ands	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68d9      	ldr	r1, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b3e      	ldr	r3, [pc, #248]	; (800506c <HAL_LTDC_Init+0x19c>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68d9      	ldr	r1, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6919      	ldr	r1, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <HAL_LTDC_Init+0x19c>)
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6959      	ldr	r1, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	4b27      	ldr	r3, [pc, #156]	; (800506c <HAL_LTDC_Init+0x19c>)
 8004fce:	400b      	ands	r3, r1
 8004fd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6959      	ldr	r1, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0206 	orr.w	r2, r2, #6
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	f000f800 	.word	0xf000f800

08005070 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005070:	b5b0      	push	{r4, r5, r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_LTDC_ConfigLayer+0x1a>
 8005086:	2302      	movs	r3, #2
 8005088:	e02c      	b.n	80050e4 <HAL_LTDC_ConfigLayer+0x74>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2134      	movs	r1, #52	; 0x34
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f811 	bl	80050ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bdb0      	pop	{r4, r5, r7, pc}

080050ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005108:	4413      	add	r3, r2
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	01db      	lsls	r3, r3, #7
 8005118:	4413      	add	r3, r2
 800511a:	3384      	adds	r3, #132	; 0x84
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	4611      	mov	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	01d2      	lsls	r2, r2, #7
 8005128:	440a      	add	r2, r1
 800512a:	3284      	adds	r2, #132	; 0x84
 800512c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005130:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005142:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005144:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4619      	mov	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	01db      	lsls	r3, r3, #7
 8005150:	440b      	add	r3, r1
 8005152:	3384      	adds	r3, #132	; 0x84
 8005154:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800515a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800516a:	4413      	add	r3, r2
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	01db      	lsls	r3, r3, #7
 800517a:	4413      	add	r3, r2
 800517c:	3384      	adds	r3, #132	; 0x84
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	4611      	mov	r1, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	01d2      	lsls	r2, r2, #7
 800518a:	440a      	add	r2, r1
 800518c:	3284      	adds	r2, #132	; 0x84
 800518e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005192:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a2:	4413      	add	r3, r2
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	01db      	lsls	r3, r3, #7
 80051b0:	440b      	add	r3, r1
 80051b2:	3384      	adds	r3, #132	; 0x84
 80051b4:	4619      	mov	r1, r3
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	01db      	lsls	r3, r3, #7
 80051c6:	4413      	add	r3, r2
 80051c8:	3384      	adds	r3, #132	; 0x84
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	4611      	mov	r1, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	01d2      	lsls	r2, r2, #7
 80051d6:	440a      	add	r2, r1
 80051d8:	3284      	adds	r2, #132	; 0x84
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	01db      	lsls	r3, r3, #7
 80051ea:	4413      	add	r3, r2
 80051ec:	3384      	adds	r3, #132	; 0x84
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005206:	041b      	lsls	r3, r3, #16
 8005208:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	01db      	lsls	r3, r3, #7
 800521c:	4413      	add	r3, r2
 800521e:	3384      	adds	r3, #132	; 0x84
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	01db      	lsls	r3, r3, #7
 800522c:	4413      	add	r3, r2
 800522e:	3384      	adds	r3, #132	; 0x84
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800523c:	461a      	mov	r2, r3
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	431a      	orrs	r2, r3
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	431a      	orrs	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	01db      	lsls	r3, r3, #7
 8005250:	440b      	add	r3, r1
 8005252:	3384      	adds	r3, #132	; 0x84
 8005254:	4619      	mov	r1, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	01db      	lsls	r3, r3, #7
 8005266:	4413      	add	r3, r2
 8005268:	3384      	adds	r3, #132	; 0x84
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	4611      	mov	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	01d2      	lsls	r2, r2, #7
 8005276:	440a      	add	r2, r1
 8005278:	3284      	adds	r2, #132	; 0x84
 800527a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800527e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	01db      	lsls	r3, r3, #7
 800528a:	4413      	add	r3, r2
 800528c:	3384      	adds	r3, #132	; 0x84
 800528e:	461a      	mov	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	4413      	add	r3, r2
 80052a2:	3384      	adds	r3, #132	; 0x84
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	01db      	lsls	r3, r3, #7
 80052b0:	440b      	add	r3, r1
 80052b2:	3384      	adds	r3, #132	; 0x84
 80052b4:	4619      	mov	r1, r3
 80052b6:	4b58      	ldr	r3, [pc, #352]	; (8005418 <LTDC_SetConfig+0x32c>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	69da      	ldr	r2, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	6809      	ldr	r1, [r1, #0]
 80052c8:	4608      	mov	r0, r1
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	01c9      	lsls	r1, r1, #7
 80052ce:	4401      	add	r1, r0
 80052d0:	3184      	adds	r1, #132	; 0x84
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	01db      	lsls	r3, r3, #7
 80052e0:	4413      	add	r3, r2
 80052e2:	3384      	adds	r3, #132	; 0x84
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	461a      	mov	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	01db      	lsls	r3, r3, #7
 8005304:	4413      	add	r3, r2
 8005306:	3384      	adds	r3, #132	; 0x84
 8005308:	461a      	mov	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005318:	2304      	movs	r3, #4
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e01b      	b.n	8005356 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d102      	bne.n	800532c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005326:	2303      	movs	r3, #3
 8005328:	61fb      	str	r3, [r7, #28]
 800532a:	e014      	b.n	8005356 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d00b      	beq.n	800534c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005338:	2b02      	cmp	r3, #2
 800533a:	d007      	beq.n	800534c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005340:	2b03      	cmp	r3, #3
 8005342:	d003      	beq.n	800534c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005348:	2b07      	cmp	r3, #7
 800534a:	d102      	bne.n	8005352 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800534c:	2302      	movs	r3, #2
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e001      	b.n	8005356 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005352:	2301      	movs	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	01db      	lsls	r3, r3, #7
 8005360:	4413      	add	r3, r2
 8005362:	3384      	adds	r3, #132	; 0x84
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	4611      	mov	r1, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	01d2      	lsls	r2, r2, #7
 8005370:	440a      	add	r2, r1
 8005372:	3284      	adds	r2, #132	; 0x84
 8005374:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005378:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	fb02 f303 	mul.w	r3, r2, r3
 8005384:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1acb      	subs	r3, r1, r3
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	6809      	ldr	r1, [r1, #0]
 800539c:	4608      	mov	r0, r1
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	01c9      	lsls	r1, r1, #7
 80053a2:	4401      	add	r1, r0
 80053a4:	3184      	adds	r1, #132	; 0x84
 80053a6:	4313      	orrs	r3, r2
 80053a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	01db      	lsls	r3, r3, #7
 80053b4:	4413      	add	r3, r2
 80053b6:	3384      	adds	r3, #132	; 0x84
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4619      	mov	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	01db      	lsls	r3, r3, #7
 80053c4:	440b      	add	r3, r1
 80053c6:	3384      	adds	r3, #132	; 0x84
 80053c8:	4619      	mov	r1, r3
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <LTDC_SetConfig+0x330>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	4413      	add	r3, r2
 80053dc:	3384      	adds	r3, #132	; 0x84
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	4413      	add	r3, r2
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4611      	mov	r1, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	01d2      	lsls	r2, r2, #7
 8005400:	440a      	add	r2, r1
 8005402:	3284      	adds	r2, #132	; 0x84
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	6013      	str	r3, [r2, #0]
}
 800540a:	bf00      	nop
 800540c:	3724      	adds	r7, #36	; 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	fffff8f8 	.word	0xfffff8f8
 800541c:	fffff800 	.word	0xfffff800

08005420 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8005432:	2200      	movs	r2, #0
 8005434:	e001      	b.n	800543a <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8005436:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8005446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800544a:	e000      	b.n	800544e <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800544c:	2200      	movs	r2, #0
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d102      	bne.n	8005460 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800545a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800545e:	e000      	b.n	8005462 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8005460:	2200      	movs	r2, #0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	4413      	add	r3, r2
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800548e:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8005490:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80054a4:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	4413      	add	r3, r2
 80054ac:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a04      	ldr	r2, [pc, #16]	; (80054dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ce:	6013      	str	r3, [r2, #0]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40007000 	.word	0x40007000

080054e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b23      	ldr	r3, [pc, #140]	; (8005578 <HAL_PWREx_EnableOverDrive+0x98>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_PWREx_EnableOverDrive+0x98>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_PWREx_EnableOverDrive+0x98>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1d      	ldr	r2, [pc, #116]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800550e:	f7fd fb03 	bl	8002b18 <HAL_GetTick>
 8005512:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005514:	e009      	b.n	800552a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005516:	f7fd faff 	bl	8002b18 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005524:	d901      	bls.n	800552a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e022      	b.n	8005570 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005536:	d1ee      	bne.n	8005516 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a0f      	ldr	r2, [pc, #60]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 800553e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005542:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005544:	f7fd fae8 	bl	8002b18 <HAL_GetTick>
 8005548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800554a:	e009      	b.n	8005560 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800554c:	f7fd fae4 	bl	8002b18 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555a:	d901      	bls.n	8005560 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e007      	b.n	8005570 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800556c:	d1ee      	bne.n	800554c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40023800 	.word	0x40023800
 800557c:	40007000 	.word	0x40007000

08005580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e29b      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8087 	beq.w	80056b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	4b96      	ldr	r3, [pc, #600]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00c      	beq.n	80055ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b0:	4b93      	ldr	r3, [pc, #588]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d112      	bne.n	80055e2 <HAL_RCC_OscConfig+0x62>
 80055bc:	4b90      	ldr	r3, [pc, #576]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ca:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d06c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x130>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d168      	bne.n	80056b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e275      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x7a>
 80055ec:	4b84      	ldr	r3, [pc, #528]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a83      	ldr	r2, [pc, #524]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e02e      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x9c>
 8005602:	4b7f      	ldr	r3, [pc, #508]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a7e      	ldr	r2, [pc, #504]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b7c      	ldr	r3, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7b      	ldr	r2, [pc, #492]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e01d      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0xc0>
 8005626:	4b76      	ldr	r3, [pc, #472]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a75      	ldr	r2, [pc, #468]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800562c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b73      	ldr	r3, [pc, #460]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a72      	ldr	r2, [pc, #456]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e00b      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b6c      	ldr	r3, [pc, #432]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a6b      	ldr	r2, [pc, #428]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fd fa5a 	bl	8002b18 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fd fa56 	bl	8002b18 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e229      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0xe8>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fd fa46 	bl	8002b18 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fd fa42 	bl	8002b18 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e215      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	4b57      	ldr	r3, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x110>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d069      	beq.n	8005792 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056be:	4b50      	ldr	r3, [pc, #320]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d11c      	bne.n	8005710 <HAL_RCC_OscConfig+0x190>
 80056d6:	4b4a      	ldr	r3, [pc, #296]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_RCC_OscConfig+0x17a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e1e9      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	493d      	ldr	r1, [pc, #244]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	e040      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fd f9f8 	bl	8002b18 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fd f9f4 	bl	8002b18 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1c7      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b30      	ldr	r3, [pc, #192]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4929      	ldr	r1, [pc, #164]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]
 800575e:	e018      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fd f9d4 	bl	8002b18 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005774:	f7fd f9d0 	bl	8002b18 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1a3      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d038      	beq.n	8005810 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d019      	beq.n	80057da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fd f9b1 	bl	8002b18 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fd f9ad 	bl	8002b18 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e180      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x23a>
 80057d8:	e01a      	b.n	8005810 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fd f997 	bl	8002b18 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fd f993 	bl	8002b18 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d903      	bls.n	8005804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e166      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
 8005800:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005804:	4b92      	ldr	r3, [pc, #584]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ee      	bne.n	80057ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a4 	beq.w	8005966 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b8c      	ldr	r3, [pc, #560]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	4b89      	ldr	r3, [pc, #548]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	4a88      	ldr	r2, [pc, #544]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005834:	6413      	str	r3, [r2, #64]	; 0x40
 8005836:	4b86      	ldr	r3, [pc, #536]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005846:	4b83      	ldr	r3, [pc, #524]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d118      	bne.n	8005884 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005852:	4b80      	ldr	r3, [pc, #512]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7f      	ldr	r2, [pc, #508]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585e:	f7fd f95b 	bl	8002b18 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005866:	f7fd f957 	bl	8002b18 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b64      	cmp	r3, #100	; 0x64
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e12a      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005878:	4b76      	ldr	r3, [pc, #472]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x31a>
 800588c:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	4a6f      	ldr	r2, [pc, #444]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
 8005898:	e02d      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0x33c>
 80058a2:	4b6b      	ldr	r3, [pc, #428]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	6713      	str	r3, [r2, #112]	; 0x70
 80058ae:	4b68      	ldr	r3, [pc, #416]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ba:	e01c      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d10c      	bne.n	80058de <HAL_RCC_OscConfig+0x35e>
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a61      	ldr	r2, [pc, #388]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a5e      	ldr	r2, [pc, #376]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	e00b      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 80058de:	4b5c      	ldr	r3, [pc, #368]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a5b      	ldr	r2, [pc, #364]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	4b59      	ldr	r3, [pc, #356]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058f0:	f023 0304 	bic.w	r3, r3, #4
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d015      	beq.n	800592a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fd f90b 	bl	8002b18 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fd f907 	bl	8002b18 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0d8      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591c:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ee      	beq.n	8005906 <HAL_RCC_OscConfig+0x386>
 8005928:	e014      	b.n	8005954 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fd f8f5 	bl	8002b18 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005930:	e00a      	b.n	8005948 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fd f8f1 	bl	8002b18 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0c2      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ee      	bne.n	8005932 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595a:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80ae 	beq.w	8005acc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005970:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b08      	cmp	r3, #8
 800597a:	d06d      	beq.n	8005a58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d14b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a31      	ldr	r2, [pc, #196]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd f8c2 	bl	8002b18 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fd f8be 	bl	8002b18 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e091      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	3b01      	subs	r3, #1
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	491b      	ldr	r1, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fd f890 	bl	8002b18 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fd f88c 	bl	8002b18 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e05f      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x47c>
 8005a1a:	e057      	b.n	8005acc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fd f876 	bl	8002b18 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fd f872 	bl	8002b18 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e045      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x4b0>
 8005a4e:	e03d      	b.n	8005acc <HAL_RCC_OscConfig+0x54c>
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a58:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <HAL_RCC_OscConfig+0x558>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d030      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d129      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d122      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d119      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800

08005adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0d0      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d910      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b67      	ldr	r3, [pc, #412]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4965      	ldr	r1, [pc, #404]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b63      	ldr	r3, [pc, #396]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0b8      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d020      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b3c:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a58      	ldr	r2, [pc, #352]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b54:	4b53      	ldr	r3, [pc, #332]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a52      	ldr	r2, [pc, #328]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b60:	4b50      	ldr	r3, [pc, #320]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	494d      	ldr	r1, [pc, #308]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d040      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07f      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e073      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06b      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4936      	ldr	r1, [pc, #216]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd0:	f7fc ffa2 	bl	8002b18 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fc ff9e 	bl	8002b18 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e053      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d210      	bcs.n	8005c30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	4922      	ldr	r1, [pc, #136]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e032      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4916      	ldr	r1, [pc, #88]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c6e:	f000 f821 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	490a      	ldr	r1, [pc, #40]	; (8005ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8005c80:	5ccb      	ldrb	r3, [r1, r3]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <HAL_RCC_ClockConfig+0x1d0>)
 8005c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_ClockConfig+0x1d4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fc fd90 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023c00 	.word	0x40023c00
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	0800c91c 	.word	0x0800c91c
 8005cac:	20000010 	.word	0x20000010
 8005cb0:	20000014 	.word	0x20000014

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb8:	b090      	sub	sp, #64	; 0x40
 8005cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ccc:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	f200 80a1 	bhi.w	8005e20 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0x3a>
 8005ce6:	e09b      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b53      	ldr	r3, [pc, #332]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cec:	e09b      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cee:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8005cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cf2:	e098      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cf4:	4b4f      	ldr	r3, [pc, #316]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cfe:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d028      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d0a:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	2200      	movs	r2, #0
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	627a      	str	r2, [r7, #36]	; 0x24
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4b47      	ldr	r3, [pc, #284]	; (8005e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8005d20:	fb03 f201 	mul.w	r2, r3, r1
 8005d24:	2300      	movs	r3, #0
 8005d26:	fb00 f303 	mul.w	r3, r0, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4a43      	ldr	r2, [pc, #268]	; (8005e3c <HAL_RCC_GetSysClockFreq+0x188>)
 8005d2e:	fba0 1202 	umull	r1, r2, r0, r2
 8005d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d34:	460a      	mov	r2, r1
 8005d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3a:	4413      	add	r3, r2
 8005d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	2200      	movs	r2, #0
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	61fa      	str	r2, [r7, #28]
 8005d46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d4e:	f7fa fa77 	bl	8000240 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4613      	mov	r3, r2
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d5a:	e053      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5c:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	2200      	movs	r2, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	617a      	str	r2, [r7, #20]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d6e:	f04f 0b00 	mov.w	fp, #0
 8005d72:	4652      	mov	r2, sl
 8005d74:	465b      	mov	r3, fp
 8005d76:	f04f 0000 	mov.w	r0, #0
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	0159      	lsls	r1, r3, #5
 8005d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d84:	0150      	lsls	r0, r2, #5
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	ebb2 080a 	subs.w	r8, r2, sl
 8005d8e:	eb63 090b 	sbc.w	r9, r3, fp
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005da2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005da6:	ebb2 0408 	subs.w	r4, r2, r8
 8005daa:	eb63 0509 	sbc.w	r5, r3, r9
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	00eb      	lsls	r3, r5, #3
 8005db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dbc:	00e2      	lsls	r2, r4, #3
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	eb14 030a 	adds.w	r3, r4, sl
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	eb45 030b 	adc.w	r3, r5, fp
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dda:	4629      	mov	r1, r5
 8005ddc:	028b      	lsls	r3, r1, #10
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005de4:	4621      	mov	r1, r4
 8005de6:	028a      	lsls	r2, r1, #10
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dee:	2200      	movs	r2, #0
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	60fa      	str	r2, [r7, #12]
 8005df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df8:	f7fa fa22 	bl	8000240 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3740      	adds	r7, #64	; 0x40
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	00f42400 	.word	0x00f42400
 8005e3c:	017d7840 	.word	0x017d7840

08005e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e46:	681b      	ldr	r3, [r3, #0]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000010 	.word	0x20000010

08005e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e5c:	f7ff fff0 	bl	8005e40 <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	0a9b      	lsrs	r3, r3, #10
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	; (8005e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800c92c 	.word	0x0800c92c

08005e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	220f      	movs	r2, #15
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e90:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0203 	and.w	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e9c:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCC_GetClockConfig+0x5c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ec2:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <HAL_RCC_GetClockConfig+0x60>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	40023c00 	.word	0x40023c00

08005ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d012      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f0c:	4b69      	ldr	r3, [pc, #420]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a68      	ldr	r2, [pc, #416]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f16:	6093      	str	r3, [r2, #8]
 8005f18:	4b66      	ldr	r3, [pc, #408]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	4964      	ldr	r1, [pc, #400]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d017      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3e:	4b5d      	ldr	r3, [pc, #372]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	4959      	ldr	r1, [pc, #356]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f7a:	4b4e      	ldr	r3, [pc, #312]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	494a      	ldr	r1, [pc, #296]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f98:	d101      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 808b 	beq.w	80060de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fc8:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	4a39      	ldr	r2, [pc, #228]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd4:	4b37      	ldr	r3, [pc, #220]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fe0:	4b35      	ldr	r3, [pc, #212]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fc fd94 	bl	8002b18 <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff4:	f7fc fd90 	bl	8002b18 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	; 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e38f      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006006:	4b2c      	ldr	r3, [pc, #176]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006012:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d035      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	429a      	cmp	r2, r3
 800602e:	d02e      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006030:	4b20      	ldr	r3, [pc, #128]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800603a:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006046:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006058:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d114      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006064:	f7fc fd58 	bl	8002b18 <HAL_GetTick>
 8006068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606a:	e00a      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800606c:	f7fc fd54 	bl	8002b18 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	f241 3288 	movw	r2, #5000	; 0x1388
 800607a:	4293      	cmp	r3, r2
 800607c:	d901      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e351      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ee      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609a:	d111      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060aa:	400b      	ands	r3, r1
 80060ac:	4901      	ldr	r1, [pc, #4]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	e00b      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060b4:	40023800 	.word	0x40023800
 80060b8:	40007000 	.word	0x40007000
 80060bc:	0ffffcff 	.word	0x0ffffcff
 80060c0:	4bac      	ldr	r3, [pc, #688]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4aab      	ldr	r2, [pc, #684]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060ca:	6093      	str	r3, [r2, #8]
 80060cc:	4ba9      	ldr	r3, [pc, #676]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d8:	49a6      	ldr	r1, [pc, #664]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060ea:	4ba2      	ldr	r3, [pc, #648]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	4aa0      	ldr	r2, [pc, #640]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060fa:	4b9e      	ldr	r3, [pc, #632]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	499b      	ldr	r1, [pc, #620]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006118:	4b96      	ldr	r3, [pc, #600]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006126:	4993      	ldr	r1, [pc, #588]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800613a:	4b8e      	ldr	r3, [pc, #568]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006148:	498a      	ldr	r1, [pc, #552]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800615c:	4b85      	ldr	r3, [pc, #532]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616a:	4982      	ldr	r1, [pc, #520]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616c:	4313      	orrs	r3, r2
 800616e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800617e:	4b7d      	ldr	r3, [pc, #500]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618c:	4979      	ldr	r1, [pc, #484]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061a0:	4b74      	ldr	r3, [pc, #464]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f023 0203 	bic.w	r2, r3, #3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	4971      	ldr	r1, [pc, #452]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00a      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061c2:	4b6c      	ldr	r3, [pc, #432]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	f023 020c 	bic.w	r2, r3, #12
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d0:	4968      	ldr	r1, [pc, #416]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061e4:	4b63      	ldr	r3, [pc, #396]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f2:	4960      	ldr	r1, [pc, #384]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006206:	4b5b      	ldr	r3, [pc, #364]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006214:	4957      	ldr	r1, [pc, #348]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006228:	4b52      	ldr	r3, [pc, #328]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	494f      	ldr	r1, [pc, #316]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800624a:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	4946      	ldr	r1, [pc, #280]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800626c:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627a:	493e      	ldr	r1, [pc, #248]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800628e:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800629c:	4935      	ldr	r1, [pc, #212]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062b0:	4b30      	ldr	r3, [pc, #192]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062be:	492d      	ldr	r1, [pc, #180]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d011      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e0:	4924      	ldr	r1, [pc, #144]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f0:	d101      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062f2:	2301      	movs	r3, #1
 80062f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0308 	and.w	r3, r3, #8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006320:	4914      	ldr	r1, [pc, #80]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006334:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006344:	490b      	ldr	r1, [pc, #44]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006346:	4313      	orrs	r3, r2
 8006348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006368:	4902      	ldr	r1, [pc, #8]	; (8006374 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006370:	e002      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006372:	bf00      	nop
 8006374:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006384:	4b8a      	ldr	r3, [pc, #552]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800638a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	4986      	ldr	r1, [pc, #536]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00b      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063a8:	4b81      	ldr	r3, [pc, #516]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b8:	497d      	ldr	r1, [pc, #500]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d006      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80d6 	beq.w	8006580 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063d4:	4b76      	ldr	r3, [pc, #472]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a75      	ldr	r2, [pc, #468]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e0:	f7fc fb9a 	bl	8002b18 <HAL_GetTick>
 80063e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063e8:	f7fc fb96 	bl	8002b18 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b64      	cmp	r3, #100	; 0x64
 80063f4:	d901      	bls.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e195      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063fa:	4b6d      	ldr	r3, [pc, #436]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d021      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11d      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800641a:	4b65      	ldr	r3, [pc, #404]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006420:	0c1b      	lsrs	r3, r3, #16
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800642e:	0e1b      	lsrs	r3, r3, #24
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	019a      	lsls	r2, r3, #6
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	431a      	orrs	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	061b      	lsls	r3, r3, #24
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	4958      	ldr	r1, [pc, #352]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d004      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646a:	d00a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006474:	2b00      	cmp	r3, #0
 8006476:	d02e      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006480:	d129      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006482:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006490:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006496:	0f1b      	lsrs	r3, r3, #28
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	019a      	lsls	r2, r3, #6
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	431a      	orrs	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	071b      	lsls	r3, r3, #28
 80064b6:	493e      	ldr	r1, [pc, #248]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064be:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c4:	f023 021f 	bic.w	r2, r3, #31
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	3b01      	subs	r3, #1
 80064ce:	4938      	ldr	r1, [pc, #224]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01d      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064e2:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	0e1b      	lsrs	r3, r3, #24
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064f0:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f6:	0f1b      	lsrs	r3, r3, #28
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	019a      	lsls	r2, r3, #6
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	431a      	orrs	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	061b      	lsls	r3, r3, #24
 8006510:	431a      	orrs	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	071b      	lsls	r3, r3, #28
 8006516:	4926      	ldr	r1, [pc, #152]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d011      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	061b      	lsls	r3, r3, #24
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	071b      	lsls	r3, r3, #28
 8006546:	491a      	ldr	r1, [pc, #104]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800654e:	4b18      	ldr	r3, [pc, #96]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655a:	f7fc fadd 	bl	8002b18 <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006560:	e008      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006562:	f7fc fad9 	bl	8002b18 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b64      	cmp	r3, #100	; 0x64
 800656e:	d901      	bls.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e0d8      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006574:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2b01      	cmp	r3, #1
 8006584:	f040 80ce 	bne.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fc fac0 	bl	8002b18 <HAL_GetTick>
 8006598:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800659a:	e00b      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800659c:	f7fc fabc 	bl	8002b18 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b64      	cmp	r3, #100	; 0x64
 80065a8:	d904      	bls.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0bb      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065b4:	4b5e      	ldr	r3, [pc, #376]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c0:	d0ec      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02e      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d12a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065ea:	4b51      	ldr	r3, [pc, #324]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065f8:	4b4d      	ldr	r3, [pc, #308]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	0f1b      	lsrs	r3, r3, #28
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	019a      	lsls	r2, r3, #6
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	071b      	lsls	r3, r3, #28
 800661e:	4944      	ldr	r1, [pc, #272]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006626:	4b42      	ldr	r3, [pc, #264]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	3b01      	subs	r3, #1
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	493d      	ldr	r1, [pc, #244]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d022      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006654:	d11d      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006656:	4b36      	ldr	r3, [pc, #216]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665c:	0e1b      	lsrs	r3, r3, #24
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006664:	4b32      	ldr	r3, [pc, #200]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666a:	0f1b      	lsrs	r3, r3, #28
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	019a      	lsls	r2, r3, #6
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	431a      	orrs	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	431a      	orrs	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	071b      	lsls	r3, r3, #28
 800668a:	4929      	ldr	r1, [pc, #164]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b00      	cmp	r3, #0
 800669c:	d028      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800669e:	4b24      	ldr	r3, [pc, #144]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a4:	0e1b      	lsrs	r3, r3, #24
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066ac:	4b20      	ldr	r3, [pc, #128]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	019a      	lsls	r2, r3, #6
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	431a      	orrs	r2, r3
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	061b      	lsls	r3, r3, #24
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	071b      	lsls	r3, r3, #28
 80066d2:	4917      	ldr	r1, [pc, #92]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066da:	4b15      	ldr	r3, [pc, #84]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	4911      	ldr	r1, [pc, #68]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066f0:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066fc:	f7fc fa0c 	bl	8002b18 <HAL_GetTick>
 8006700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006704:	f7fc fa08 	bl	8002b18 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b64      	cmp	r3, #100	; 0x64
 8006710:	d901      	bls.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e007      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800671e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006722:	d1ef      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	40023800 	.word	0x40023800

08006734 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e025      	b.n	8006794 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7fb f863 	bl	8001828 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	3304      	adds	r3, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f000 ffa3 	bl	80076c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	461a      	mov	r2, r3
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	f000 fff7 	bl	8007778 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ae:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d101      	bne.n	80067ba <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
 80067b8:	e021      	b.n	80067fe <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d002      	beq.n	80067c6 <HAL_SDRAM_SendCommand+0x2a>
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d118      	bne.n	80067f8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f838 	bl	800784c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d104      	bne.n	80067ee <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2205      	movs	r2, #5
 80067e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067ec:	e006      	b.n	80067fc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067f6:	e001      	b.n	80067fc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d101      	bne.n	8006820 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
 800681e:	e016      	b.n	800684e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d10f      	bne.n	800684c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f82a 	bl	8007894 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
 800684a:	e000      	b.n	800684e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e049      	b.n	80068fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d106      	bne.n	8006882 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 f841 	bl	8006904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	4619      	mov	r1, r3
 8006894:	4610      	mov	r0, r2
 8006896:	f000 fb69 	bl	8006f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b01      	cmp	r3, #1
 800692a:	d001      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e054      	b.n	80069da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d022      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d01d      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a22      	ldr	r2, [pc, #136]	; (80069ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a21      	ldr	r2, [pc, #132]	; (80069f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1f      	ldr	r2, [pc, #124]	; (80069f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <HAL_TIM_Base_Start_IT+0xe4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_Base_Start_IT+0x80>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <HAL_TIM_Base_Start_IT+0xe8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d115      	bne.n	80069c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_TIM_Base_Start_IT+0xec>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d015      	beq.n	80069d6 <HAL_TIM_Base_Start_IT+0xbe>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b0:	d011      	beq.n	80069d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0201 	orr.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	e008      	b.n	80069d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 0201 	orr.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e000      	b.n	80069d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40001800 	.word	0x40001800
 8006a04:	00010007 	.word	0x00010007

08006a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e049      	b.n	8006aae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb ffc6 	bl	80029c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f000 fa90 	bl	8006f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d122      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d11b      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0202 	mvn.w	r2, #2
 8006ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa19 	bl	8006f30 <HAL_TIM_IC_CaptureCallback>
 8006afe:	e005      	b.n	8006b0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa0b 	bl	8006f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa1c 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d122      	bne.n	8006b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d11b      	bne.n	8006b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0204 	mvn.w	r2, #4
 8006b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f9ef 	bl	8006f30 <HAL_TIM_IC_CaptureCallback>
 8006b52:	e005      	b.n	8006b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f9e1 	bl	8006f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9f2 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d122      	bne.n	8006bba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11b      	bne.n	8006bba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f06f 0208 	mvn.w	r2, #8
 8006b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9c5 	bl	8006f30 <HAL_TIM_IC_CaptureCallback>
 8006ba6:	e005      	b.n	8006bb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f9b7 	bl	8006f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9c8 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d122      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0310 	and.w	r3, r3, #16
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d11b      	bne.n	8006c0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f06f 0210 	mvn.w	r2, #16
 8006bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2208      	movs	r2, #8
 8006be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d003      	beq.n	8006bfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f99b 	bl	8006f30 <HAL_TIM_IC_CaptureCallback>
 8006bfa:	e005      	b.n	8006c08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f98d 	bl	8006f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f99e 	bl	8006f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d10e      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d107      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f06f 0201 	mvn.w	r2, #1
 8006c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7fb fccd 	bl	80025d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d10e      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d107      	bne.n	8006c66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fd19 	bl	8007698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fd0c 	bl	80076ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f94c 	bl	8006f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d10e      	bne.n	8006cec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d107      	bne.n	8006cec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0220 	mvn.w	r2, #32
 8006ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fccc 	bl	8007684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e0ff      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b14      	cmp	r3, #20
 8006d1e:	f200 80f0 	bhi.w	8006f02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d7d 	.word	0x08006d7d
 8006d2c:	08006f03 	.word	0x08006f03
 8006d30:	08006f03 	.word	0x08006f03
 8006d34:	08006f03 	.word	0x08006f03
 8006d38:	08006dbd 	.word	0x08006dbd
 8006d3c:	08006f03 	.word	0x08006f03
 8006d40:	08006f03 	.word	0x08006f03
 8006d44:	08006f03 	.word	0x08006f03
 8006d48:	08006dff 	.word	0x08006dff
 8006d4c:	08006f03 	.word	0x08006f03
 8006d50:	08006f03 	.word	0x08006f03
 8006d54:	08006f03 	.word	0x08006f03
 8006d58:	08006e3f 	.word	0x08006e3f
 8006d5c:	08006f03 	.word	0x08006f03
 8006d60:	08006f03 	.word	0x08006f03
 8006d64:	08006f03 	.word	0x08006f03
 8006d68:	08006e81 	.word	0x08006e81
 8006d6c:	08006f03 	.word	0x08006f03
 8006d70:	08006f03 	.word	0x08006f03
 8006d74:	08006f03 	.word	0x08006f03
 8006d78:	08006ec1 	.word	0x08006ec1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f992 	bl	80070ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0208 	orr.w	r2, r2, #8
 8006d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0204 	bic.w	r2, r2, #4
 8006da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6999      	ldr	r1, [r3, #24]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	691a      	ldr	r2, [r3, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	619a      	str	r2, [r3, #24]
      break;
 8006dba:	e0a5      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f9e4 	bl	8007190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6999      	ldr	r1, [r3, #24]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	021a      	lsls	r2, r3, #8
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	619a      	str	r2, [r3, #24]
      break;
 8006dfc:	e084      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fa3b 	bl	8007280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0208 	orr.w	r2, r2, #8
 8006e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0204 	bic.w	r2, r2, #4
 8006e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69d9      	ldr	r1, [r3, #28]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	61da      	str	r2, [r3, #28]
      break;
 8006e3c:	e064      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fa91 	bl	800736c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69da      	ldr	r2, [r3, #28]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69d9      	ldr	r1, [r3, #28]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	021a      	lsls	r2, r3, #8
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	61da      	str	r2, [r3, #28]
      break;
 8006e7e:	e043      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fac8 	bl	800741c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 0208 	orr.w	r2, r2, #8
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0204 	bic.w	r2, r2, #4
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ebe:	e023      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fafa 	bl	80074c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f00:	e002      	b.n	8006f08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
      break;
 8006f06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a40      	ldr	r2, [pc, #256]	; (8007080 <TIM_Base_SetConfig+0x114>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8a:	d00f      	beq.n	8006fac <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3d      	ldr	r2, [pc, #244]	; (8007084 <TIM_Base_SetConfig+0x118>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d00b      	beq.n	8006fac <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3c      	ldr	r2, [pc, #240]	; (8007088 <TIM_Base_SetConfig+0x11c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d007      	beq.n	8006fac <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a3b      	ldr	r2, [pc, #236]	; (800708c <TIM_Base_SetConfig+0x120>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_Base_SetConfig+0x40>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a3a      	ldr	r2, [pc, #232]	; (8007090 <TIM_Base_SetConfig+0x124>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d108      	bne.n	8006fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2f      	ldr	r2, [pc, #188]	; (8007080 <TIM_Base_SetConfig+0x114>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d02b      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fcc:	d027      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <TIM_Base_SetConfig+0x118>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d023      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2b      	ldr	r2, [pc, #172]	; (8007088 <TIM_Base_SetConfig+0x11c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01f      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	; (800708c <TIM_Base_SetConfig+0x120>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01b      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a29      	ldr	r2, [pc, #164]	; (8007090 <TIM_Base_SetConfig+0x124>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d017      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a28      	ldr	r2, [pc, #160]	; (8007094 <TIM_Base_SetConfig+0x128>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a27      	ldr	r2, [pc, #156]	; (8007098 <TIM_Base_SetConfig+0x12c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00f      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a26      	ldr	r2, [pc, #152]	; (800709c <TIM_Base_SetConfig+0x130>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00b      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a25      	ldr	r2, [pc, #148]	; (80070a0 <TIM_Base_SetConfig+0x134>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d007      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <TIM_Base_SetConfig+0x138>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d003      	beq.n	800701e <TIM_Base_SetConfig+0xb2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a23      	ldr	r2, [pc, #140]	; (80070a8 <TIM_Base_SetConfig+0x13c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d108      	bne.n	8007030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	4313      	orrs	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <TIM_Base_SetConfig+0x114>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_Base_SetConfig+0xf8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <TIM_Base_SetConfig+0x124>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d103      	bne.n	800706c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	615a      	str	r2, [r3, #20]
}
 8007072:	bf00      	nop
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40010000 	.word	0x40010000
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800
 800708c:	40000c00 	.word	0x40000c00
 8007090:	40010400 	.word	0x40010400
 8007094:	40014000 	.word	0x40014000
 8007098:	40014400 	.word	0x40014400
 800709c:	40014800 	.word	0x40014800
 80070a0:	40001800 	.word	0x40001800
 80070a4:	40001c00 	.word	0x40001c00
 80070a8:	40002000 	.word	0x40002000

080070ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	f023 0201 	bic.w	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <TIM_OC1_SetConfig+0xd8>)
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f023 0302 	bic.w	r3, r3, #2
 80070f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a21      	ldr	r2, [pc, #132]	; (8007188 <TIM_OC1_SetConfig+0xdc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_OC1_SetConfig+0x64>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a20      	ldr	r2, [pc, #128]	; (800718c <TIM_OC1_SetConfig+0xe0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10c      	bne.n	800712a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0308 	bic.w	r3, r3, #8
 8007116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 0304 	bic.w	r3, r3, #4
 8007128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a16      	ldr	r2, [pc, #88]	; (8007188 <TIM_OC1_SetConfig+0xdc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d003      	beq.n	800713a <TIM_OC1_SetConfig+0x8e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a15      	ldr	r2, [pc, #84]	; (800718c <TIM_OC1_SetConfig+0xe0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d111      	bne.n	800715e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	621a      	str	r2, [r3, #32]
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	fffeff8f 	.word	0xfffeff8f
 8007188:	40010000 	.word	0x40010000
 800718c:	40010400 	.word	0x40010400

08007190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0210 	bic.w	r2, r3, #16
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4b2e      	ldr	r3, [pc, #184]	; (8007274 <TIM_OC2_SetConfig+0xe4>)
 80071bc:	4013      	ands	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f023 0320 	bic.w	r3, r3, #32
 80071da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a23      	ldr	r2, [pc, #140]	; (8007278 <TIM_OC2_SetConfig+0xe8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC2_SetConfig+0x68>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a22      	ldr	r2, [pc, #136]	; (800727c <TIM_OC2_SetConfig+0xec>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d10d      	bne.n	8007214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	4313      	orrs	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a18      	ldr	r2, [pc, #96]	; (8007278 <TIM_OC2_SetConfig+0xe8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_OC2_SetConfig+0x94>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a17      	ldr	r2, [pc, #92]	; (800727c <TIM_OC2_SetConfig+0xec>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d113      	bne.n	800724c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	feff8fff 	.word	0xfeff8fff
 8007278:	40010000 	.word	0x40010000
 800727c:	40010400 	.word	0x40010400

08007280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <TIM_OC3_SetConfig+0xe0>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a22      	ldr	r2, [pc, #136]	; (8007364 <TIM_OC3_SetConfig+0xe4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0x66>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a21      	ldr	r2, [pc, #132]	; (8007368 <TIM_OC3_SetConfig+0xe8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d10d      	bne.n	8007302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC3_SetConfig+0xe4>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_OC3_SetConfig+0x92>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a16      	ldr	r2, [pc, #88]	; (8007368 <TIM_OC3_SetConfig+0xe8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d113      	bne.n	800733a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	621a      	str	r2, [r3, #32]
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	fffeff8f 	.word	0xfffeff8f
 8007364:	40010000 	.word	0x40010000
 8007368:	40010400 	.word	0x40010400

0800736c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <TIM_OC4_SetConfig+0xa4>)
 8007398:	4013      	ands	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	031b      	lsls	r3, r3, #12
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a13      	ldr	r2, [pc, #76]	; (8007414 <TIM_OC4_SetConfig+0xa8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC4_SetConfig+0x68>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a12      	ldr	r2, [pc, #72]	; (8007418 <TIM_OC4_SetConfig+0xac>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d109      	bne.n	80073e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	019b      	lsls	r3, r3, #6
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	feff8fff 	.word	0xfeff8fff
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400

0800741c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <TIM_OC5_SetConfig+0x98>)
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800745c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <TIM_OC5_SetConfig+0x9c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_OC5_SetConfig+0x5e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a11      	ldr	r2, [pc, #68]	; (80074bc <TIM_OC5_SetConfig+0xa0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d109      	bne.n	800748e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	621a      	str	r2, [r3, #32]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	fffeff8f 	.word	0xfffeff8f
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40010400 	.word	0x40010400

080074c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4b1c      	ldr	r3, [pc, #112]	; (800755c <TIM_OC6_SetConfig+0x9c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	051b      	lsls	r3, r3, #20
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a13      	ldr	r2, [pc, #76]	; (8007560 <TIM_OC6_SetConfig+0xa0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC6_SetConfig+0x60>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a12      	ldr	r2, [pc, #72]	; (8007564 <TIM_OC6_SetConfig+0xa4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d109      	bne.n	8007534 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	029b      	lsls	r3, r3, #10
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	621a      	str	r2, [r3, #32]
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	feff8fff 	.word	0xfeff8fff
 8007560:	40010000 	.word	0x40010000
 8007564:	40010400 	.word	0x40010400

08007568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800757c:	2302      	movs	r3, #2
 800757e:	e06d      	b.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a30      	ldr	r2, [pc, #192]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d004      	beq.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2f      	ldr	r2, [pc, #188]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a20      	ldr	r2, [pc, #128]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d022      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f2:	d01d      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a15      	ldr	r2, [pc, #84]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d10c      	bne.n	800764a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007636:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	4313      	orrs	r3, r2
 8007640:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	40010000 	.word	0x40010000
 800766c:	40010400 	.word	0x40010400
 8007670:	40000400 	.word	0x40000400
 8007674:	40000800 	.word	0x40000800
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40014000 	.word	0x40014000
 8007680:	40001800 	.word	0x40001800

08007684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d121      	bne.n	8007716 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b27      	ldr	r3, [pc, #156]	; (8007774 <FMC_SDRAM_Init+0xb4>)
 80076d8:	4013      	ands	r3, r2
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	6851      	ldr	r1, [r2, #4]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	6892      	ldr	r2, [r2, #8]
 80076e2:	4311      	orrs	r1, r2
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	68d2      	ldr	r2, [r2, #12]
 80076e8:	4311      	orrs	r1, r2
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	6912      	ldr	r2, [r2, #16]
 80076ee:	4311      	orrs	r1, r2
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	6952      	ldr	r2, [r2, #20]
 80076f4:	4311      	orrs	r1, r2
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	6992      	ldr	r2, [r2, #24]
 80076fa:	4311      	orrs	r1, r2
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	69d2      	ldr	r2, [r2, #28]
 8007700:	4311      	orrs	r1, r2
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	6a12      	ldr	r2, [r2, #32]
 8007706:	4311      	orrs	r1, r2
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800770c:	430a      	orrs	r2, r1
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e026      	b.n	8007764 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	69d9      	ldr	r1, [r3, #28]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	4319      	orrs	r1, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	430b      	orrs	r3, r1
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <FMC_SDRAM_Init+0xb4>)
 800773a:	4013      	ands	r3, r2
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	6851      	ldr	r1, [r2, #4]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	6892      	ldr	r2, [r2, #8]
 8007744:	4311      	orrs	r1, r2
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	68d2      	ldr	r2, [r2, #12]
 800774a:	4311      	orrs	r1, r2
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	6912      	ldr	r2, [r2, #16]
 8007750:	4311      	orrs	r1, r2
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	6952      	ldr	r2, [r2, #20]
 8007756:	4311      	orrs	r1, r2
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	6992      	ldr	r2, [r2, #24]
 800775c:	430a      	orrs	r2, r1
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	ffff8000 	.word	0xffff8000

08007778 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d128      	bne.n	80077dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	1e59      	subs	r1, r3, #1
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	3b01      	subs	r3, #1
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	4319      	orrs	r1, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	4319      	orrs	r1, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	031b      	lsls	r3, r3, #12
 80077b4:	4319      	orrs	r1, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	4319      	orrs	r1, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	051b      	lsls	r3, r3, #20
 80077c8:	4319      	orrs	r1, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	430b      	orrs	r3, r1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	e02d      	b.n	8007838 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	4b19      	ldr	r3, [pc, #100]	; (8007848 <FMC_SDRAM_Timing_Init+0xd0>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	68d2      	ldr	r2, [r2, #12]
 80077e8:	3a01      	subs	r2, #1
 80077ea:	0311      	lsls	r1, r2, #12
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	6952      	ldr	r2, [r2, #20]
 80077f0:	3a01      	subs	r2, #1
 80077f2:	0512      	lsls	r2, r2, #20
 80077f4:	430a      	orrs	r2, r1
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	1e59      	subs	r1, r3, #1
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	3b01      	subs	r3, #1
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	4319      	orrs	r1, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	3b01      	subs	r3, #1
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	4319      	orrs	r1, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	3b01      	subs	r3, #1
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	4319      	orrs	r1, r3
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	3b01      	subs	r3, #1
 800782e:	061b      	lsls	r3, r3, #24
 8007830:	430b      	orrs	r3, r1
 8007832:	431a      	orrs	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	ff0f0fff 	.word	0xff0f0fff

0800784c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	4b0c      	ldr	r3, [pc, #48]	; (8007890 <FMC_SDRAM_SendCommand+0x44>)
 800785e:	4013      	ands	r3, r2
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	6811      	ldr	r1, [r2, #0]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	6852      	ldr	r2, [r2, #4]
 8007868:	4311      	orrs	r1, r2
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	6892      	ldr	r2, [r2, #8]
 800786e:	3a01      	subs	r2, #1
 8007870:	0152      	lsls	r2, r2, #5
 8007872:	4311      	orrs	r1, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	68d2      	ldr	r2, [r2, #12]
 8007878:	0252      	lsls	r2, r2, #9
 800787a:	430a      	orrs	r2, r1
 800787c:	431a      	orrs	r2, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	ffc00000 	.word	0xffc00000

08007894 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	0052      	lsls	r2, r2, #1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	ffffc001 	.word	0xffffc001

080078c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80078c8:	bf00      	nop
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078da:	f3ef 8305 	mrs	r3, IPSR
 80078de:	60bb      	str	r3, [r7, #8]
  return(result);
 80078e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10f      	bne.n	8007906 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e6:	f3ef 8310 	mrs	r3, PRIMASK
 80078ea:	607b      	str	r3, [r7, #4]
  return(result);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d105      	bne.n	80078fe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f2:	f3ef 8311 	mrs	r3, BASEPRI
 80078f6:	603b      	str	r3, [r7, #0]
  return(result);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d007      	beq.n	800790e <osKernelInitialize+0x3a>
 80078fe:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <osKernelInitialize+0x64>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b02      	cmp	r3, #2
 8007904:	d103      	bne.n	800790e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007906:	f06f 0305 	mvn.w	r3, #5
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e00c      	b.n	8007928 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <osKernelInitialize+0x64>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007916:	4b08      	ldr	r3, [pc, #32]	; (8007938 <osKernelInitialize+0x64>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e002      	b.n	8007928 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007926:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007928:	68fb      	ldr	r3, [r7, #12]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200005b8 	.word	0x200005b8

0800793c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007942:	f3ef 8305 	mrs	r3, IPSR
 8007946:	60bb      	str	r3, [r7, #8]
  return(result);
 8007948:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800794e:	f3ef 8310 	mrs	r3, PRIMASK
 8007952:	607b      	str	r3, [r7, #4]
  return(result);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800795a:	f3ef 8311 	mrs	r3, BASEPRI
 800795e:	603b      	str	r3, [r7, #0]
  return(result);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <osKernelStart+0x3a>
 8007966:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <osKernelStart+0x68>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d103      	bne.n	8007976 <osKernelStart+0x3a>
    stat = osErrorISR;
 800796e:	f06f 0305 	mvn.w	r3, #5
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e010      	b.n	8007998 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <osKernelStart+0x68>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d109      	bne.n	8007992 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800797e:	f7ff ffa1 	bl	80078c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <osKernelStart+0x68>)
 8007984:	2202      	movs	r2, #2
 8007986:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007988:	f001 fa6a 	bl	8008e60 <vTaskStartScheduler>
      stat = osOK;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e002      	b.n	8007998 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007996:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007998:	68fb      	ldr	r3, [r7, #12]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	200005b8 	.word	0x200005b8

080079a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b090      	sub	sp, #64	; 0x40
 80079ac:	af04      	add	r7, sp, #16
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b8:	f3ef 8305 	mrs	r3, IPSR
 80079bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80079be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 808f 	bne.w	8007ae4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c6:	f3ef 8310 	mrs	r3, PRIMASK
 80079ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079d2:	f3ef 8311 	mrs	r3, BASEPRI
 80079d6:	617b      	str	r3, [r7, #20]
  return(result);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <osThreadNew+0x3e>
 80079de:	4b44      	ldr	r3, [pc, #272]	; (8007af0 <osThreadNew+0x148>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d07e      	beq.n	8007ae4 <osThreadNew+0x13c>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d07b      	beq.n	8007ae4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80079f0:	2318      	movs	r3, #24
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80079f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d045      	beq.n	8007a90 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <osThreadNew+0x6a>
        name = attr->name;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <osThreadNew+0x90>
 8007a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a28:	2b38      	cmp	r3, #56	; 0x38
 8007a2a:	d805      	bhi.n	8007a38 <osThreadNew+0x90>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <osThreadNew+0x94>
        return (NULL);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e054      	b.n	8007ae6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	089b      	lsrs	r3, r3, #2
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00e      	beq.n	8007a72 <osThreadNew+0xca>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2ba7      	cmp	r3, #167	; 0xa7
 8007a5a:	d90a      	bls.n	8007a72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d002      	beq.n	8007a72 <osThreadNew+0xca>
        mem = 1;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	623b      	str	r3, [r7, #32]
 8007a70:	e010      	b.n	8007a94 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10c      	bne.n	8007a94 <osThreadNew+0xec>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d108      	bne.n	8007a94 <osThreadNew+0xec>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <osThreadNew+0xec>
          mem = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	e001      	b.n	8007a94 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a90:	2300      	movs	r3, #0
 8007a92:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d110      	bne.n	8007abc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007aa2:	9202      	str	r2, [sp, #8]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 ffdf 	bl	8008a74 <xTaskCreateStatic>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	e013      	b.n	8007ae4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d110      	bne.n	8007ae4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	f107 0310 	add.w	r3, r7, #16
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 f830 	bl	8008b3a <xTaskCreate>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d001      	beq.n	8007ae4 <osThreadNew+0x13c>
          hTask = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007ae4:	693b      	ldr	r3, [r7, #16]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3730      	adds	r7, #48	; 0x30
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	200005b8 	.word	0x200005b8

08007af4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007afc:	f3ef 8305 	mrs	r3, IPSR
 8007b00:	613b      	str	r3, [r7, #16]
  return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b08:	f3ef 8310 	mrs	r3, PRIMASK
 8007b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d105      	bne.n	8007b20 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b14:	f3ef 8311 	mrs	r3, BASEPRI
 8007b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <osDelay+0x3c>
 8007b20:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <osDelay+0x58>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d103      	bne.n	8007b30 <osDelay+0x3c>
    stat = osErrorISR;
 8007b28:	f06f 0305 	mvn.w	r3, #5
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e007      	b.n	8007b40 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d002      	beq.n	8007b40 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f001 f95a 	bl	8008df4 <vTaskDelay>
    }
  }

  return (stat);
 8007b40:	697b      	ldr	r3, [r7, #20]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	200005b8 	.word	0x200005b8

08007b50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a07      	ldr	r2, [pc, #28]	; (8007b7c <vApplicationGetIdleTaskMemory+0x2c>)
 8007b60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <vApplicationGetIdleTaskMemory+0x30>)
 8007b66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2280      	movs	r2, #128	; 0x80
 8007b6c:	601a      	str	r2, [r3, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	200005bc 	.word	0x200005bc
 8007b80:	20000664 	.word	0x20000664

08007b84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a07      	ldr	r2, [pc, #28]	; (8007bb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a06      	ldr	r2, [pc, #24]	; (8007bb4 <vApplicationGetTimerTaskMemory+0x30>)
 8007b9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20000864 	.word	0x20000864
 8007bb4:	2000090c 	.word	0x2000090c

08007bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f103 0208 	add.w	r2, r3, #8
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f103 0208 	add.w	r2, r3, #8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0208 	add.w	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c70:	d103      	bne.n	8007c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e00c      	b.n	8007c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e002      	b.n	8007c88 <vListInsert+0x2e>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d2f6      	bcs.n	8007c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6892      	ldr	r2, [r2, #8]
 8007ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6852      	ldr	r2, [r2, #4]
 8007cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d103      	bne.n	8007d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1e5a      	subs	r2, r3, #1
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	b672      	cpsid	i
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	b662      	cpsie	i
 8007d48:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007d4e:	f002 fb45 	bl	800a3dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5a:	68f9      	ldr	r1, [r7, #12]
 8007d5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d5e:	fb01 f303 	mul.w	r3, r1, r3
 8007d62:	441a      	add	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	68f9      	ldr	r1, [r7, #12]
 8007d82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22ff      	movs	r2, #255	; 0xff
 8007d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	22ff      	movs	r2, #255	; 0xff
 8007d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d114      	bne.n	8007dce <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3310      	adds	r3, #16
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 fafd 	bl	80093b0 <xTaskRemoveFromEventList>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d012      	beq.n	8007de2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dbc:	4b0c      	ldr	r3, [pc, #48]	; (8007df0 <xQueueGenericReset+0xd0>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	e009      	b.n	8007de2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fef0 	bl	8007bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff feeb 	bl	8007bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007de2:	f002 fb2f 	bl	800a444 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007de6:	2301      	movs	r3, #1
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08e      	sub	sp, #56	; 0x38
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10c      	bne.n	8007e22 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	b672      	cpsid	i
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	b662      	cpsie	i
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10c      	bne.n	8007e42 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	b672      	cpsid	i
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	b662      	cpsie	i
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <xQueueGenericCreateStatic+0x5a>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <xQueueGenericCreateStatic+0x5e>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <xQueueGenericCreateStatic+0x60>
 8007e52:	2300      	movs	r3, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10c      	bne.n	8007e72 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	b672      	cpsid	i
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	b662      	cpsie	i
 8007e6c:	623b      	str	r3, [r7, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <xQueueGenericCreateStatic+0x8a>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <xQueueGenericCreateStatic+0x8e>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e000      	b.n	8007e84 <xQueueGenericCreateStatic+0x90>
 8007e82:	2300      	movs	r3, #0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10c      	bne.n	8007ea2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	b672      	cpsid	i
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	b662      	cpsie	i
 8007e9c:	61fb      	str	r3, [r7, #28]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ea2:	2350      	movs	r3, #80	; 0x50
 8007ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b50      	cmp	r3, #80	; 0x50
 8007eaa:	d00c      	beq.n	8007ec6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	b672      	cpsid	i
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	b662      	cpsie	i
 8007ec0:	61bb      	str	r3, [r7, #24]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f847 	bl	8007f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3730      	adds	r7, #48	; 0x30
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	613b      	str	r3, [r7, #16]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	e004      	b.n	8007f3c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	fb02 f303 	mul.w	r3, r2, r3
 8007f3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	3350      	adds	r3, #80	; 0x50
 8007f40:	4618      	mov	r0, r3
 8007f42:	f002 fb77 	bl	800a634 <pvPortMalloc>
 8007f46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d011      	beq.n	8007f72 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	3350      	adds	r3, #80	; 0x50
 8007f56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f60:	79fa      	ldrb	r2, [r7, #7]
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f805 	bl	8007f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f72:	69bb      	ldr	r3, [r7, #24]
	}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3720      	adds	r7, #32
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007faa:	2101      	movs	r1, #1
 8007fac:	69b8      	ldr	r0, [r7, #24]
 8007fae:	f7ff feb7 	bl	8007d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fba:	bf00      	nop
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00e      	beq.n	8007fee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f81d 	bl	8008028 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	461a      	mov	r2, r3
 800800c:	6939      	ldr	r1, [r7, #16]
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7ff ff72 	bl	8007ef8 <xQueueGenericCreate>
 8008014:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff ffd3 	bl	8007fc2 <prvInitialiseMutex>

		return xNewQueue;
 800801c:	68fb      	ldr	r3, [r7, #12]
	}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008036:	2300      	movs	r3, #0
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10c      	bne.n	800805e <xQueueGenericSend+0x36>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	b672      	cpsid	i
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	b662      	cpsie	i
 8008058:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <xQueueGenericSend+0x44>
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <xQueueGenericSend+0x48>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <xQueueGenericSend+0x4a>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10c      	bne.n	8008090 <xQueueGenericSend+0x68>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	b672      	cpsid	i
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	b662      	cpsie	i
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d103      	bne.n	800809e <xQueueGenericSend+0x76>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <xQueueGenericSend+0x7a>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueGenericSend+0x7c>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10c      	bne.n	80080c2 <xQueueGenericSend+0x9a>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	b672      	cpsid	i
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	b662      	cpsie	i
 80080bc:	623b      	str	r3, [r7, #32]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080c2:	f001 fb3f 	bl	8009744 <xTaskGetSchedulerState>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xQueueGenericSend+0xaa>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <xQueueGenericSend+0xae>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e000      	b.n	80080d8 <xQueueGenericSend+0xb0>
 80080d6:	2300      	movs	r3, #0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10c      	bne.n	80080f6 <xQueueGenericSend+0xce>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	b672      	cpsid	i
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	b662      	cpsie	i
 80080f0:	61fb      	str	r3, [r7, #28]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080f6:	f002 f971 	bl	800a3dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <xQueueGenericSend+0xe4>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d129      	bne.n	8008160 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008112:	f000 fb41 	bl	8008798 <prvCopyDataToQueue>
 8008116:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b00      	cmp	r3, #0
 800811e:	d010      	beq.n	8008142 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	3324      	adds	r3, #36	; 0x24
 8008124:	4618      	mov	r0, r3
 8008126:	f001 f943 	bl	80093b0 <xTaskRemoveFromEventList>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d013      	beq.n	8008158 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008130:	4b3f      	ldr	r3, [pc, #252]	; (8008230 <xQueueGenericSend+0x208>)
 8008132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	e00a      	b.n	8008158 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008148:	4b39      	ldr	r3, [pc, #228]	; (8008230 <xQueueGenericSend+0x208>)
 800814a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008158:	f002 f974 	bl	800a444 <vPortExitCritical>
				return pdPASS;
 800815c:	2301      	movs	r3, #1
 800815e:	e063      	b.n	8008228 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d103      	bne.n	800816e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008166:	f002 f96d 	bl	800a444 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800816a:	2300      	movs	r3, #0
 800816c:	e05c      	b.n	8008228 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	4618      	mov	r0, r3
 800817a:	f001 f97f 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800817e:	2301      	movs	r3, #1
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008182:	f002 f95f 	bl	800a444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008186:	f000 fedf 	bl	8008f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800818a:	f002 f927 	bl	800a3dc <vPortEnterCritical>
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008194:	b25b      	sxtb	r3, r3
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800819a:	d103      	bne.n	80081a4 <xQueueGenericSend+0x17c>
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081aa:	b25b      	sxtb	r3, r3
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b0:	d103      	bne.n	80081ba <xQueueGenericSend+0x192>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ba:	f002 f943 	bl	800a444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081be:	1d3a      	adds	r2, r7, #4
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f96e 	bl	80094a8 <xTaskCheckForTimeOut>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d124      	bne.n	800821c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081d4:	f000 fbd8 	bl	8008988 <prvIsQueueFull>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	3310      	adds	r3, #16
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f88e 	bl	8009308 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ee:	f000 fb63 	bl	80088b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081f2:	f000 feb7 	bl	8008f64 <xTaskResumeAll>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f47f af7c 	bne.w	80080f6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80081fe:	4b0c      	ldr	r3, [pc, #48]	; (8008230 <xQueueGenericSend+0x208>)
 8008200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	e772      	b.n	80080f6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008212:	f000 fb51 	bl	80088b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008216:	f000 fea5 	bl	8008f64 <xTaskResumeAll>
 800821a:	e76c      	b.n	80080f6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800821c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800821e:	f000 fb4b 	bl	80088b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008222:	f000 fe9f 	bl	8008f64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008226:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008228:	4618      	mov	r0, r3
 800822a:	3738      	adds	r7, #56	; 0x38
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10c      	bne.n	8008266 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	b672      	cpsid	i
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	b662      	cpsie	i
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008262:	bf00      	nop
 8008264:	e7fe      	b.n	8008264 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <xQueueGenericSendFromISR+0x40>
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <xQueueGenericSendFromISR+0x44>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <xQueueGenericSendFromISR+0x46>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10c      	bne.n	8008298 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	b672      	cpsid	i
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	b662      	cpsie	i
 8008292:	623b      	str	r3, [r7, #32]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d103      	bne.n	80082a6 <xQueueGenericSendFromISR+0x72>
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <xQueueGenericSendFromISR+0x76>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <xQueueGenericSendFromISR+0x78>
 80082aa:	2300      	movs	r3, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10c      	bne.n	80082ca <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	b672      	cpsid	i
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	b662      	cpsie	i
 80082c4:	61fb      	str	r3, [r7, #28]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082ca:	f002 f96f 	bl	800a5ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082ce:	f3ef 8211 	mrs	r2, BASEPRI
 80082d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d6:	b672      	cpsid	i
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	b662      	cpsie	i
 80082e6:	61ba      	str	r2, [r7, #24]
 80082e8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <xQueueGenericSendFromISR+0xcc>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d12c      	bne.n	800835a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008310:	f000 fa42 	bl	8008798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008314:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831c:	d112      	bne.n	8008344 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d016      	beq.n	8008354 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f001 f840 	bl	80093b0 <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e007      	b.n	8008354 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008348:	3301      	adds	r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	b25a      	sxtb	r2, r3
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008354:	2301      	movs	r3, #1
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008358:	e001      	b.n	800835e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800835a:	2300      	movs	r3, #0
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008360:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008368:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800836c:	4618      	mov	r0, r3
 800836e:	3738      	adds	r7, #56	; 0x38
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	; 0x30
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10c      	bne.n	80083a8 <xQueueReceive+0x34>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	b672      	cpsid	i
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	b662      	cpsie	i
 80083a2:	623b      	str	r3, [r7, #32]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <xQueueReceive+0x42>
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <xQueueReceive+0x46>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <xQueueReceive+0x48>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <xQueueReceive+0x66>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	61fb      	str	r3, [r7, #28]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083da:	f001 f9b3 	bl	8009744 <xTaskGetSchedulerState>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <xQueueReceive+0x76>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <xQueueReceive+0x7a>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <xQueueReceive+0x7c>
 80083ee:	2300      	movs	r3, #0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10c      	bne.n	800840e <xQueueReceive+0x9a>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	b672      	cpsid	i
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	b662      	cpsie	i
 8008408:	61bb      	str	r3, [r7, #24]
}
 800840a:	bf00      	nop
 800840c:	e7fe      	b.n	800840c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800840e:	f001 ffe5 	bl	800a3dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01f      	beq.n	800845e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008422:	f000 fa23 	bl	800886c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00f      	beq.n	8008456 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	3310      	adds	r3, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ffb8 	bl	80093b0 <xTaskRemoveFromEventList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008446:	4b3d      	ldr	r3, [pc, #244]	; (800853c <xQueueReceive+0x1c8>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008456:	f001 fff5 	bl	800a444 <vPortExitCritical>
				return pdPASS;
 800845a:	2301      	movs	r3, #1
 800845c:	e069      	b.n	8008532 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008464:	f001 ffee 	bl	800a444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008468:	2300      	movs	r3, #0
 800846a:	e062      	b.n	8008532 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008472:	f107 0310 	add.w	r3, r7, #16
 8008476:	4618      	mov	r0, r3
 8008478:	f001 f800 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008480:	f001 ffe0 	bl	800a444 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008484:	f000 fd60 	bl	8008f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008488:	f001 ffa8 	bl	800a3dc <vPortEnterCritical>
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008492:	b25b      	sxtb	r3, r3
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008498:	d103      	bne.n	80084a2 <xQueueReceive+0x12e>
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084a8:	b25b      	sxtb	r3, r3
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ae:	d103      	bne.n	80084b8 <xQueueReceive+0x144>
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084b8:	f001 ffc4 	bl	800a444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084bc:	1d3a      	adds	r2, r7, #4
 80084be:	f107 0310 	add.w	r3, r7, #16
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 ffef 	bl	80094a8 <xTaskCheckForTimeOut>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d123      	bne.n	8008518 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f000 fa43 	bl	800895c <prvIsQueueEmpty>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d017      	beq.n	800850c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	3324      	adds	r3, #36	; 0x24
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 ff0f 	bl	8009308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ec:	f000 f9e4 	bl	80088b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084f0:	f000 fd38 	bl	8008f64 <xTaskResumeAll>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d189      	bne.n	800840e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80084fa:	4b10      	ldr	r3, [pc, #64]	; (800853c <xQueueReceive+0x1c8>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	e780      	b.n	800840e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800850c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800850e:	f000 f9d3 	bl	80088b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008512:	f000 fd27 	bl	8008f64 <xTaskResumeAll>
 8008516:	e77a      	b.n	800840e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851a:	f000 f9cd 	bl	80088b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800851e:	f000 fd21 	bl	8008f64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008524:	f000 fa1a 	bl	800895c <prvIsQueueEmpty>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f af6f 	beq.w	800840e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008532:	4618      	mov	r0, r3
 8008534:	3730      	adds	r7, #48	; 0x30
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08e      	sub	sp, #56	; 0x38
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008552:	2300      	movs	r3, #0
 8008554:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10c      	bne.n	8008576 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	b672      	cpsid	i
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	b662      	cpsie	i
 8008570:	623b      	str	r3, [r7, #32]
}
 8008572:	bf00      	nop
 8008574:	e7fe      	b.n	8008574 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00c      	beq.n	8008598 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008582:	b672      	cpsid	i
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	b662      	cpsie	i
 8008592:	61fb      	str	r3, [r7, #28]
}
 8008594:	bf00      	nop
 8008596:	e7fe      	b.n	8008596 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008598:	f001 f8d4 	bl	8009744 <xTaskGetSchedulerState>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <xQueueSemaphoreTake+0x68>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <xQueueSemaphoreTake+0x6c>
 80085a8:	2301      	movs	r3, #1
 80085aa:	e000      	b.n	80085ae <xQueueSemaphoreTake+0x6e>
 80085ac:	2300      	movs	r3, #0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10c      	bne.n	80085cc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	b672      	cpsid	i
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	b662      	cpsie	i
 80085c6:	61bb      	str	r3, [r7, #24]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085cc:	f001 ff06 	bl	800a3dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d024      	beq.n	8008626 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	1e5a      	subs	r2, r3, #1
 80085e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085ec:	f001 fa28 	bl	8009a40 <pvTaskIncrementMutexHeldCount>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00f      	beq.n	800861e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	3310      	adds	r3, #16
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fed4 	bl	80093b0 <xTaskRemoveFromEventList>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800860e:	4b55      	ldr	r3, [pc, #340]	; (8008764 <xQueueSemaphoreTake+0x224>)
 8008610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800861e:	f001 ff11 	bl	800a444 <vPortExitCritical>
				return pdPASS;
 8008622:	2301      	movs	r3, #1
 8008624:	e099      	b.n	800875a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d113      	bne.n	8008654 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00c      	beq.n	800864c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	b672      	cpsid	i
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	b662      	cpsie	i
 8008646:	617b      	str	r3, [r7, #20]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800864c:	f001 fefa 	bl	800a444 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008650:	2300      	movs	r3, #0
 8008652:	e082      	b.n	800875a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4618      	mov	r0, r3
 8008660:	f000 ff0c 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008664:	2301      	movs	r3, #1
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008668:	f001 feec 	bl	800a444 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800866c:	f000 fc6c 	bl	8008f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008670:	f001 feb4 	bl	800a3dc <vPortEnterCritical>
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800867a:	b25b      	sxtb	r3, r3
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008680:	d103      	bne.n	800868a <xQueueSemaphoreTake+0x14a>
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008690:	b25b      	sxtb	r3, r3
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008696:	d103      	bne.n	80086a0 <xQueueSemaphoreTake+0x160>
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	2200      	movs	r2, #0
 800869c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a0:	f001 fed0 	bl	800a444 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086a4:	463a      	mov	r2, r7
 80086a6:	f107 030c 	add.w	r3, r7, #12
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fefb 	bl	80094a8 <xTaskCheckForTimeOut>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d132      	bne.n	800871e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ba:	f000 f94f 	bl	800895c <prvIsQueueEmpty>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d026      	beq.n	8008712 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80086cc:	f001 fe86 	bl	800a3dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f001 f853 	bl	8009780 <xTaskPriorityInherit>
 80086da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80086dc:	f001 feb2 	bl	800a444 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fe0d 	bl	8009308 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f0:	f000 f8e2 	bl	80088b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086f4:	f000 fc36 	bl	8008f64 <xTaskResumeAll>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f47f af66 	bne.w	80085cc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008700:	4b18      	ldr	r3, [pc, #96]	; (8008764 <xQueueSemaphoreTake+0x224>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	e75c      	b.n	80085cc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008714:	f000 f8d0 	bl	80088b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008718:	f000 fc24 	bl	8008f64 <xTaskResumeAll>
 800871c:	e756      	b.n	80085cc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800871e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008720:	f000 f8ca 	bl	80088b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008724:	f000 fc1e 	bl	8008f64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008728:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800872a:	f000 f917 	bl	800895c <prvIsQueueEmpty>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	f43f af4b 	beq.w	80085cc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00d      	beq.n	8008758 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800873c:	f001 fe4e 	bl	800a3dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008742:	f000 f811 	bl	8008768 <prvGetDisinheritPriorityAfterTimeout>
 8008746:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f001 f8f0 	bl	8009934 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008754:	f001 fe76 	bl	800a444 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008758:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800875a:	4618      	mov	r0, r3
 800875c:	3738      	adds	r7, #56	; 0x38
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	e000ed04 	.word	0xe000ed04

08008768 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b00      	cmp	r3, #0
 8008776:	d006      	beq.n	8008786 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	e001      	b.n	800878a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800878a:	68fb      	ldr	r3, [r7, #12]
	}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d14d      	bne.n	800885a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 f844 	bl	8009850 <xTaskPriorityDisinherit>
 80087c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	e043      	b.n	800885a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d119      	bne.n	800880c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6858      	ldr	r0, [r3, #4]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	461a      	mov	r2, r3
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	f002 f98e 	bl	800ab04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	441a      	add	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d32b      	bcc.n	800885a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	e026      	b.n	800885a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68d8      	ldr	r0, [r3, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	461a      	mov	r2, r3
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	f002 f974 	bl	800ab04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	425b      	negs	r3, r3
 8008826:	441a      	add	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d207      	bcs.n	8008848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	425b      	negs	r3, r3
 8008842:	441a      	add	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d105      	bne.n	800885a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	3b01      	subs	r3, #1
 8008858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008862:	697b      	ldr	r3, [r7, #20]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d018      	beq.n	80088b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	441a      	add	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	d303      	bcc.n	80088a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68d9      	ldr	r1, [r3, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	461a      	mov	r2, r3
 80088aa:	6838      	ldr	r0, [r7, #0]
 80088ac:	f002 f92a 	bl	800ab04 <memcpy>
	}
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088c0:	f001 fd8c 	bl	800a3dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088cc:	e011      	b.n	80088f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d012      	beq.n	80088fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3324      	adds	r3, #36	; 0x24
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 fd68 	bl	80093b0 <xTaskRemoveFromEventList>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088e6:	f000 fe45 	bl	8009574 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dce9      	bgt.n	80088ce <prvUnlockQueue+0x16>
 80088fa:	e000      	b.n	80088fe <prvUnlockQueue+0x46>
					break;
 80088fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	22ff      	movs	r2, #255	; 0xff
 8008902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008906:	f001 fd9d 	bl	800a444 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800890a:	f001 fd67 	bl	800a3dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008916:	e011      	b.n	800893c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d012      	beq.n	8008946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3310      	adds	r3, #16
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fd43 	bl	80093b0 <xTaskRemoveFromEventList>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008930:	f000 fe20 	bl	8009574 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	3b01      	subs	r3, #1
 8008938:	b2db      	uxtb	r3, r3
 800893a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800893c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	dce9      	bgt.n	8008918 <prvUnlockQueue+0x60>
 8008944:	e000      	b.n	8008948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	22ff      	movs	r2, #255	; 0xff
 800894c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008950:	f001 fd78 	bl	800a444 <vPortExitCritical>
}
 8008954:	bf00      	nop
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008964:	f001 fd3a 	bl	800a3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008970:	2301      	movs	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e001      	b.n	800897a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800897a:	f001 fd63 	bl	800a444 <vPortExitCritical>

	return xReturn;
 800897e:	68fb      	ldr	r3, [r7, #12]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008990:	f001 fd24 	bl	800a3dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800899c:	429a      	cmp	r2, r3
 800899e:	d102      	bne.n	80089a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e001      	b.n	80089aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089aa:	f001 fd4b 	bl	800a444 <vPortExitCritical>

	return xReturn;
 80089ae:	68fb      	ldr	r3, [r7, #12]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c2:	2300      	movs	r3, #0
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e014      	b.n	80089f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089c8:	4a0f      	ldr	r2, [pc, #60]	; (8008a08 <vQueueAddToRegistry+0x50>)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089d4:	490c      	ldr	r1, [pc, #48]	; (8008a08 <vQueueAddToRegistry+0x50>)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <vQueueAddToRegistry+0x50>)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	4413      	add	r3, r2
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089ea:	e006      	b.n	80089fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b07      	cmp	r3, #7
 80089f6:	d9e7      	bls.n	80089c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000d0c 	.word	0x20000d0c

08008a0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a1c:	f001 fcde 	bl	800a3dc <vPortEnterCritical>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2c:	d103      	bne.n	8008a36 <vQueueWaitForMessageRestricted+0x2a>
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a3c:	b25b      	sxtb	r3, r3
 8008a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a42:	d103      	bne.n	8008a4c <vQueueWaitForMessageRestricted+0x40>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a4c:	f001 fcfa 	bl	800a444 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	3324      	adds	r3, #36	; 0x24
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fc77 	bl	8009354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a66:	6978      	ldr	r0, [r7, #20]
 8008a68:	f7ff ff26 	bl	80088b8 <prvUnlockQueue>
	}
 8008a6c:	bf00      	nop
 8008a6e:	3718      	adds	r7, #24
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08e      	sub	sp, #56	; 0x38
 8008a78:	af04      	add	r7, sp, #16
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10c      	bne.n	8008aa2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	b672      	cpsid	i
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	b662      	cpsie	i
 8008a9c:	623b      	str	r3, [r7, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10c      	bne.n	8008ac2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	b672      	cpsid	i
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	b662      	cpsie	i
 8008abc:	61fb      	str	r3, [r7, #28]
}
 8008abe:	bf00      	nop
 8008ac0:	e7fe      	b.n	8008ac0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ac2:	23a8      	movs	r3, #168	; 0xa8
 8008ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2ba8      	cmp	r3, #168	; 0xa8
 8008aca:	d00c      	beq.n	8008ae6 <xTaskCreateStatic+0x72>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	61bb      	str	r3, [r7, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ae6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d01e      	beq.n	8008b2c <xTaskCreateStatic+0xb8>
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01b      	beq.n	8008b2c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	2202      	movs	r2, #2
 8008b02:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b06:	2300      	movs	r3, #0
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	f107 0314 	add.w	r3, r7, #20
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f850 	bl	8008bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b26:	f000 f8f5 	bl	8008d14 <prvAddNewTaskToReadyList>
 8008b2a:	e001      	b.n	8008b30 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b30:	697b      	ldr	r3, [r7, #20]
	}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3728      	adds	r7, #40	; 0x28
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b08c      	sub	sp, #48	; 0x30
 8008b3e:	af04      	add	r7, sp, #16
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	603b      	str	r3, [r7, #0]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fd70 	bl	800a634 <pvPortMalloc>
 8008b54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00e      	beq.n	8008b7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b5c:	20a8      	movs	r0, #168	; 0xa8
 8008b5e:	f001 fd69 	bl	800a634 <pvPortMalloc>
 8008b62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b70:	e005      	b.n	8008b7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f001 fe28 	bl	800a7c8 <vPortFree>
 8008b78:	e001      	b.n	8008b7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d017      	beq.n	8008bb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b8c:	88fa      	ldrh	r2, [r7, #6]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f80e 	bl	8008bc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ba8:	69f8      	ldr	r0, [r7, #28]
 8008baa:	f000 f8b3 	bl	8008d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	e002      	b.n	8008bba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bba:	69bb      	ldr	r3, [r7, #24]
	}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	21a5      	movs	r1, #165	; 0xa5
 8008bde:	f001 ff0d 	bl	800a9fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bec:	440b      	add	r3, r1
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f023 0307 	bic.w	r3, r3, #7
 8008bfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00c      	beq.n	8008c20 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	b672      	cpsid	i
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	b662      	cpsie	i
 8008c1a:	617b      	str	r3, [r7, #20]
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d01f      	beq.n	8008c66 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c26:	2300      	movs	r3, #0
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	e012      	b.n	8008c52 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	7819      	ldrb	r1, [r3, #0]
 8008c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	4413      	add	r3, r2
 8008c3a:	3334      	adds	r3, #52	; 0x34
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	4413      	add	r3, r2
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b0f      	cmp	r3, #15
 8008c56:	d9e9      	bls.n	8008c2c <prvInitialiseNewTask+0x68>
 8008c58:	e000      	b.n	8008c5c <prvInitialiseNewTask+0x98>
			{
				break;
 8008c5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c64:	e003      	b.n	8008c6e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	2b37      	cmp	r3, #55	; 0x37
 8008c72:	d901      	bls.n	8008c78 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c74:	2337      	movs	r3, #55	; 0x37
 8008c76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe ffb2 	bl	8007bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	3318      	adds	r3, #24
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe ffad 	bl	8007bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	3354      	adds	r3, #84	; 0x54
 8008cc8:	224c      	movs	r2, #76	; 0x4c
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fe95 	bl	800a9fc <memset>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	4a0c      	ldr	r2, [pc, #48]	; (8008d08 <prvInitialiseNewTask+0x144>)
 8008cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <prvInitialiseNewTask+0x148>)
 8008cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	4a0b      	ldr	r2, [pc, #44]	; (8008d10 <prvInitialiseNewTask+0x14c>)
 8008ce2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	69b8      	ldr	r0, [r7, #24]
 8008cea:	f001 fa6d 	bl	800a1c8 <pxPortInitialiseStack>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d00:	bf00      	nop
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20004f98 	.word	0x20004f98
 8008d0c:	20005000 	.word	0x20005000
 8008d10:	20005068 	.word	0x20005068

08008d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d1c:	f001 fb5e 	bl	800a3dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d20:	4b2d      	ldr	r3, [pc, #180]	; (8008dd8 <prvAddNewTaskToReadyList+0xc4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a2c      	ldr	r2, [pc, #176]	; (8008dd8 <prvAddNewTaskToReadyList+0xc4>)
 8008d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d2a:	4b2c      	ldr	r3, [pc, #176]	; (8008ddc <prvAddNewTaskToReadyList+0xc8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d32:	4a2a      	ldr	r2, [pc, #168]	; (8008ddc <prvAddNewTaskToReadyList+0xc8>)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d38:	4b27      	ldr	r3, [pc, #156]	; (8008dd8 <prvAddNewTaskToReadyList+0xc4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d110      	bne.n	8008d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d40:	f000 fc3c 	bl	80095bc <prvInitialiseTaskLists>
 8008d44:	e00d      	b.n	8008d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d46:	4b26      	ldr	r3, [pc, #152]	; (8008de0 <prvAddNewTaskToReadyList+0xcc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d4e:	4b23      	ldr	r3, [pc, #140]	; (8008ddc <prvAddNewTaskToReadyList+0xc8>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d802      	bhi.n	8008d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d5c:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <prvAddNewTaskToReadyList+0xc8>)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d62:	4b20      	ldr	r3, [pc, #128]	; (8008de4 <prvAddNewTaskToReadyList+0xd0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	4a1e      	ldr	r2, [pc, #120]	; (8008de4 <prvAddNewTaskToReadyList+0xd0>)
 8008d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d6c:	4b1d      	ldr	r3, [pc, #116]	; (8008de4 <prvAddNewTaskToReadyList+0xd0>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d78:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <prvAddNewTaskToReadyList+0xd4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d903      	bls.n	8008d88 <prvAddNewTaskToReadyList+0x74>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <prvAddNewTaskToReadyList+0xd4>)
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4a15      	ldr	r2, [pc, #84]	; (8008dec <prvAddNewTaskToReadyList+0xd8>)
 8008d96:	441a      	add	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4610      	mov	r0, r2
 8008da0:	f7fe ff37 	bl	8007c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008da4:	f001 fb4e 	bl	800a444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008da8:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <prvAddNewTaskToReadyList+0xcc>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvAddNewTaskToReadyList+0xc8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d207      	bcs.n	8008dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <prvAddNewTaskToReadyList+0xdc>)
 8008dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20001220 	.word	0x20001220
 8008ddc:	20000d4c 	.word	0x20000d4c
 8008de0:	2000122c 	.word	0x2000122c
 8008de4:	2000123c 	.word	0x2000123c
 8008de8:	20001228 	.word	0x20001228
 8008dec:	20000d50 	.word	0x20000d50
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d019      	beq.n	8008e3a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e06:	4b14      	ldr	r3, [pc, #80]	; (8008e58 <vTaskDelay+0x64>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00c      	beq.n	8008e28 <vTaskDelay+0x34>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	b672      	cpsid	i
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	b662      	cpsie	i
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e28:	f000 f88e 	bl	8008f48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fe1a 	bl	8009a68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e34:	f000 f896 	bl	8008f64 <xTaskResumeAll>
 8008e38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d107      	bne.n	8008e50 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008e40:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <vTaskDelay+0x68>)
 8008e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20001248 	.word	0x20001248
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e6e:	463a      	mov	r2, r7
 8008e70:	1d39      	adds	r1, r7, #4
 8008e72:	f107 0308 	add.w	r3, r7, #8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fe6a 	bl	8007b50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	9202      	str	r2, [sp, #8]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	2300      	movs	r3, #0
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	460a      	mov	r2, r1
 8008e8e:	4926      	ldr	r1, [pc, #152]	; (8008f28 <vTaskStartScheduler+0xc8>)
 8008e90:	4826      	ldr	r0, [pc, #152]	; (8008f2c <vTaskStartScheduler+0xcc>)
 8008e92:	f7ff fdef 	bl	8008a74 <xTaskCreateStatic>
 8008e96:	4603      	mov	r3, r0
 8008e98:	4a25      	ldr	r2, [pc, #148]	; (8008f30 <vTaskStartScheduler+0xd0>)
 8008e9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e9c:	4b24      	ldr	r3, [pc, #144]	; (8008f30 <vTaskStartScheduler+0xd0>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e001      	b.n	8008eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d102      	bne.n	8008eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008eb4:	f000 fe2c 	bl	8009b10 <xTimerCreateTimerTask>
 8008eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d11d      	bne.n	8008efc <vTaskStartScheduler+0x9c>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ed8:	4b16      	ldr	r3, [pc, #88]	; (8008f34 <vTaskStartScheduler+0xd4>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3354      	adds	r3, #84	; 0x54
 8008ede:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <vTaskStartScheduler+0xd8>)
 8008ee0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ee2:	4b16      	ldr	r3, [pc, #88]	; (8008f3c <vTaskStartScheduler+0xdc>)
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <vTaskStartScheduler+0xe0>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ef0:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <vTaskStartScheduler+0xe4>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ef6:	f001 f9f3 	bl	800a2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008efa:	e010      	b.n	8008f1e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f02:	d10c      	bne.n	8008f1e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	60fb      	str	r3, [r7, #12]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <vTaskStartScheduler+0xbc>
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	0800ac14 	.word	0x0800ac14
 8008f2c:	0800958d 	.word	0x0800958d
 8008f30:	20001244 	.word	0x20001244
 8008f34:	20000d4c 	.word	0x20000d4c
 8008f38:	2000006c 	.word	0x2000006c
 8008f3c:	20001240 	.word	0x20001240
 8008f40:	2000122c 	.word	0x2000122c
 8008f44:	20001224 	.word	0x20001224

08008f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <vTaskSuspendAll+0x18>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	4a03      	ldr	r2, [pc, #12]	; (8008f60 <vTaskSuspendAll+0x18>)
 8008f54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f56:	bf00      	nop
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	20001248 	.word	0x20001248

08008f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f72:	4b43      	ldr	r3, [pc, #268]	; (8009080 <xTaskResumeAll+0x11c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10c      	bne.n	8008f94 <xTaskResumeAll+0x30>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	b672      	cpsid	i
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	b662      	cpsie	i
 8008f8e:	603b      	str	r3, [r7, #0]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f94:	f001 fa22 	bl	800a3dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f98:	4b39      	ldr	r3, [pc, #228]	; (8009080 <xTaskResumeAll+0x11c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	4a38      	ldr	r2, [pc, #224]	; (8009080 <xTaskResumeAll+0x11c>)
 8008fa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa2:	4b37      	ldr	r3, [pc, #220]	; (8009080 <xTaskResumeAll+0x11c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d162      	bne.n	8009070 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008faa:	4b36      	ldr	r3, [pc, #216]	; (8009084 <xTaskResumeAll+0x120>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d05e      	beq.n	8009070 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fb2:	e02f      	b.n	8009014 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb4:	4b34      	ldr	r3, [pc, #208]	; (8009088 <xTaskResumeAll+0x124>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3318      	adds	r3, #24
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe fe83 	bl	8007ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fe7e 	bl	8007ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4b2d      	ldr	r3, [pc, #180]	; (800908c <xTaskResumeAll+0x128>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d903      	bls.n	8008fe4 <xTaskResumeAll+0x80>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	4a2a      	ldr	r2, [pc, #168]	; (800908c <xTaskResumeAll+0x128>)
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4a27      	ldr	r2, [pc, #156]	; (8009090 <xTaskResumeAll+0x12c>)
 8008ff2:	441a      	add	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f7fe fe09 	bl	8007c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009004:	4b23      	ldr	r3, [pc, #140]	; (8009094 <xTaskResumeAll+0x130>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800900e:	4b22      	ldr	r3, [pc, #136]	; (8009098 <xTaskResumeAll+0x134>)
 8009010:	2201      	movs	r2, #1
 8009012:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009014:	4b1c      	ldr	r3, [pc, #112]	; (8009088 <xTaskResumeAll+0x124>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1cb      	bne.n	8008fb4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009022:	f000 fb6f 	bl	8009704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009026:	4b1d      	ldr	r3, [pc, #116]	; (800909c <xTaskResumeAll+0x138>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009032:	f000 f847 	bl	80090c4 <xTaskIncrementTick>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800903c:	4b16      	ldr	r3, [pc, #88]	; (8009098 <xTaskResumeAll+0x134>)
 800903e:	2201      	movs	r2, #1
 8009040:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f1      	bne.n	8009032 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800904e:	4b13      	ldr	r3, [pc, #76]	; (800909c <xTaskResumeAll+0x138>)
 8009050:	2200      	movs	r2, #0
 8009052:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009054:	4b10      	ldr	r3, [pc, #64]	; (8009098 <xTaskResumeAll+0x134>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800905c:	2301      	movs	r3, #1
 800905e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <xTaskResumeAll+0x13c>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009070:	f001 f9e8 	bl	800a444 <vPortExitCritical>

	return xAlreadyYielded;
 8009074:	68bb      	ldr	r3, [r7, #8]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20001248 	.word	0x20001248
 8009084:	20001220 	.word	0x20001220
 8009088:	200011e0 	.word	0x200011e0
 800908c:	20001228 	.word	0x20001228
 8009090:	20000d50 	.word	0x20000d50
 8009094:	20000d4c 	.word	0x20000d4c
 8009098:	20001234 	.word	0x20001234
 800909c:	20001230 	.word	0x20001230
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <xTaskGetTickCount+0x1c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090b0:	687b      	ldr	r3, [r7, #4]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	20001224 	.word	0x20001224

080090c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ce:	4b50      	ldr	r3, [pc, #320]	; (8009210 <xTaskIncrementTick+0x14c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 808b 	bne.w	80091ee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090d8:	4b4e      	ldr	r3, [pc, #312]	; (8009214 <xTaskIncrementTick+0x150>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090e0:	4a4c      	ldr	r2, [pc, #304]	; (8009214 <xTaskIncrementTick+0x150>)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d122      	bne.n	8009132 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80090ec:	4b4a      	ldr	r3, [pc, #296]	; (8009218 <xTaskIncrementTick+0x154>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <xTaskIncrementTick+0x4c>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	b672      	cpsid	i
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	b662      	cpsie	i
 800910a:	603b      	str	r3, [r7, #0]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xTaskIncrementTick+0x4a>
 8009110:	4b41      	ldr	r3, [pc, #260]	; (8009218 <xTaskIncrementTick+0x154>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	4b41      	ldr	r3, [pc, #260]	; (800921c <xTaskIncrementTick+0x158>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a3f      	ldr	r2, [pc, #252]	; (8009218 <xTaskIncrementTick+0x154>)
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	4a3f      	ldr	r2, [pc, #252]	; (800921c <xTaskIncrementTick+0x158>)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	4b3e      	ldr	r3, [pc, #248]	; (8009220 <xTaskIncrementTick+0x15c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	4a3d      	ldr	r2, [pc, #244]	; (8009220 <xTaskIncrementTick+0x15c>)
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	f000 fae9 	bl	8009704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009132:	4b3c      	ldr	r3, [pc, #240]	; (8009224 <xTaskIncrementTick+0x160>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	429a      	cmp	r2, r3
 800913a:	d349      	bcc.n	80091d0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913c:	4b36      	ldr	r3, [pc, #216]	; (8009218 <xTaskIncrementTick+0x154>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009146:	4b37      	ldr	r3, [pc, #220]	; (8009224 <xTaskIncrementTick+0x160>)
 8009148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800914c:	601a      	str	r2, [r3, #0]
					break;
 800914e:	e03f      	b.n	80091d0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009150:	4b31      	ldr	r3, [pc, #196]	; (8009218 <xTaskIncrementTick+0x154>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	429a      	cmp	r2, r3
 8009166:	d203      	bcs.n	8009170 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009168:	4a2e      	ldr	r2, [pc, #184]	; (8009224 <xTaskIncrementTick+0x160>)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800916e:	e02f      	b.n	80091d0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	3304      	adds	r3, #4
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fda9 	bl	8007ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d004      	beq.n	800918c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3318      	adds	r3, #24
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fda0 	bl	8007ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <xTaskIncrementTick+0x164>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	429a      	cmp	r2, r3
 8009196:	d903      	bls.n	80091a0 <xTaskIncrementTick+0xdc>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	4a22      	ldr	r2, [pc, #136]	; (8009228 <xTaskIncrementTick+0x164>)
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4a1f      	ldr	r2, [pc, #124]	; (800922c <xTaskIncrementTick+0x168>)
 80091ae:	441a      	add	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4619      	mov	r1, r3
 80091b6:	4610      	mov	r0, r2
 80091b8:	f7fe fd2b 	bl	8007c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c0:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <xTaskIncrementTick+0x16c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d3b8      	bcc.n	800913c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80091ca:	2301      	movs	r3, #1
 80091cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ce:	e7b5      	b.n	800913c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091d0:	4b17      	ldr	r3, [pc, #92]	; (8009230 <xTaskIncrementTick+0x16c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d6:	4915      	ldr	r1, [pc, #84]	; (800922c <xTaskIncrementTick+0x168>)
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	440b      	add	r3, r1
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d907      	bls.n	80091f8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80091e8:	2301      	movs	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	e004      	b.n	80091f8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091ee:	4b11      	ldr	r3, [pc, #68]	; (8009234 <xTaskIncrementTick+0x170>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a0f      	ldr	r2, [pc, #60]	; (8009234 <xTaskIncrementTick+0x170>)
 80091f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <xTaskIncrementTick+0x174>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009200:	2301      	movs	r3, #1
 8009202:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009204:	697b      	ldr	r3, [r7, #20]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20001248 	.word	0x20001248
 8009214:	20001224 	.word	0x20001224
 8009218:	200011d8 	.word	0x200011d8
 800921c:	200011dc 	.word	0x200011dc
 8009220:	20001238 	.word	0x20001238
 8009224:	20001240 	.word	0x20001240
 8009228:	20001228 	.word	0x20001228
 800922c:	20000d50 	.word	0x20000d50
 8009230:	20000d4c 	.word	0x20000d4c
 8009234:	20001230 	.word	0x20001230
 8009238:	20001234 	.word	0x20001234

0800923c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009242:	4b2b      	ldr	r3, [pc, #172]	; (80092f0 <vTaskSwitchContext+0xb4>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800924a:	4b2a      	ldr	r3, [pc, #168]	; (80092f4 <vTaskSwitchContext+0xb8>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009250:	e048      	b.n	80092e4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009252:	4b28      	ldr	r3, [pc, #160]	; (80092f4 <vTaskSwitchContext+0xb8>)
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009258:	4b27      	ldr	r3, [pc, #156]	; (80092f8 <vTaskSwitchContext+0xbc>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	e012      	b.n	8009286 <vTaskSwitchContext+0x4a>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10c      	bne.n	8009280 <vTaskSwitchContext+0x44>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	b672      	cpsid	i
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	b662      	cpsie	i
 800927a:	607b      	str	r3, [r7, #4]
}
 800927c:	bf00      	nop
 800927e:	e7fe      	b.n	800927e <vTaskSwitchContext+0x42>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3b01      	subs	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	491d      	ldr	r1, [pc, #116]	; (80092fc <vTaskSwitchContext+0xc0>)
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4613      	mov	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0e2      	beq.n	8009260 <vTaskSwitchContext+0x24>
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4a15      	ldr	r2, [pc, #84]	; (80092fc <vTaskSwitchContext+0xc0>)
 80092a6:	4413      	add	r3, r2
 80092a8:	60bb      	str	r3, [r7, #8]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	3308      	adds	r3, #8
 80092bc:	429a      	cmp	r2, r3
 80092be:	d104      	bne.n	80092ca <vTaskSwitchContext+0x8e>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	605a      	str	r2, [r3, #4]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	4a0b      	ldr	r2, [pc, #44]	; (8009300 <vTaskSwitchContext+0xc4>)
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	4a08      	ldr	r2, [pc, #32]	; (80092f8 <vTaskSwitchContext+0xbc>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <vTaskSwitchContext+0xc4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3354      	adds	r3, #84	; 0x54
 80092e0:	4a08      	ldr	r2, [pc, #32]	; (8009304 <vTaskSwitchContext+0xc8>)
 80092e2:	6013      	str	r3, [r2, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20001248 	.word	0x20001248
 80092f4:	20001234 	.word	0x20001234
 80092f8:	20001228 	.word	0x20001228
 80092fc:	20000d50 	.word	0x20000d50
 8009300:	20000d4c 	.word	0x20000d4c
 8009304:	2000006c 	.word	0x2000006c

08009308 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10c      	bne.n	8009332 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009332:	4b07      	ldr	r3, [pc, #28]	; (8009350 <vTaskPlaceOnEventList+0x48>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3318      	adds	r3, #24
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7fe fc8d 	bl	8007c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009340:	2101      	movs	r1, #1
 8009342:	6838      	ldr	r0, [r7, #0]
 8009344:	f000 fb90 	bl	8009a68 <prvAddCurrentTaskToDelayedList>
}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000d4c 	.word	0x20000d4c

08009354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10c      	bne.n	8009380 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	617b      	str	r3, [r7, #20]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009380:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <vTaskPlaceOnEventListRestricted+0x58>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3318      	adds	r3, #24
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f7fe fc42 	bl	8007c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009398:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	68b8      	ldr	r0, [r7, #8]
 800939e:	f000 fb63 	bl	8009a68 <prvAddCurrentTaskToDelayedList>
	}
 80093a2:	bf00      	nop
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000d4c 	.word	0x20000d4c

080093b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10c      	bne.n	80093e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80093c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ca:	b672      	cpsid	i
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	b662      	cpsie	i
 80093da:	60fb      	str	r3, [r7, #12]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	3318      	adds	r3, #24
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fc71 	bl	8007ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ea:	4b1e      	ldr	r3, [pc, #120]	; (8009464 <xTaskRemoveFromEventList+0xb4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d11d      	bne.n	800942e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fe fc68 	bl	8007ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009400:	4b19      	ldr	r3, [pc, #100]	; (8009468 <xTaskRemoveFromEventList+0xb8>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d903      	bls.n	8009410 <xTaskRemoveFromEventList+0x60>
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <xTaskRemoveFromEventList+0xb8>)
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4a13      	ldr	r2, [pc, #76]	; (800946c <xTaskRemoveFromEventList+0xbc>)
 800941e:	441a      	add	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	3304      	adds	r3, #4
 8009424:	4619      	mov	r1, r3
 8009426:	4610      	mov	r0, r2
 8009428:	f7fe fbf3 	bl	8007c12 <vListInsertEnd>
 800942c:	e005      	b.n	800943a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	3318      	adds	r3, #24
 8009432:	4619      	mov	r1, r3
 8009434:	480e      	ldr	r0, [pc, #56]	; (8009470 <xTaskRemoveFromEventList+0xc0>)
 8009436:	f7fe fbec 	bl	8007c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943e:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <xTaskRemoveFromEventList+0xc4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d905      	bls.n	8009454 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <xTaskRemoveFromEventList+0xc8>)
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e001      	b.n	8009458 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20001248 	.word	0x20001248
 8009468:	20001228 	.word	0x20001228
 800946c:	20000d50 	.word	0x20000d50
 8009470:	200011e0 	.word	0x200011e0
 8009474:	20000d4c 	.word	0x20000d4c
 8009478:	20001234 	.word	0x20001234

0800947c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009484:	4b06      	ldr	r3, [pc, #24]	; (80094a0 <vTaskInternalSetTimeOutState+0x24>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <vTaskInternalSetTimeOutState+0x28>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20001238 	.word	0x20001238
 80094a4:	20001224 	.word	0x20001224

080094a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10c      	bne.n	80094d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	b672      	cpsid	i
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	b662      	cpsie	i
 80094cc:	613b      	str	r3, [r7, #16]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10c      	bne.n	80094f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
 80094ec:	60fb      	str	r3, [r7, #12]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80094f2:	f000 ff73 	bl	800a3dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094f6:	4b1d      	ldr	r3, [pc, #116]	; (800956c <xTaskCheckForTimeOut+0xc4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950e:	d102      	bne.n	8009516 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
 8009514:	e023      	b.n	800955e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	4b15      	ldr	r3, [pc, #84]	; (8009570 <xTaskCheckForTimeOut+0xc8>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	429a      	cmp	r2, r3
 8009520:	d007      	beq.n	8009532 <xTaskCheckForTimeOut+0x8a>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	429a      	cmp	r2, r3
 800952a:	d302      	bcc.n	8009532 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	e015      	b.n	800955e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	429a      	cmp	r2, r3
 800953a:	d20b      	bcs.n	8009554 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff ff97 	bl	800947c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	61fb      	str	r3, [r7, #28]
 8009552:	e004      	b.n	800955e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800955a:	2301      	movs	r3, #1
 800955c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800955e:	f000 ff71 	bl	800a444 <vPortExitCritical>

	return xReturn;
 8009562:	69fb      	ldr	r3, [r7, #28]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3720      	adds	r7, #32
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20001224 	.word	0x20001224
 8009570:	20001238 	.word	0x20001238

08009574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009578:	4b03      	ldr	r3, [pc, #12]	; (8009588 <vTaskMissedYield+0x14>)
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
}
 800957e:	bf00      	nop
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20001234 	.word	0x20001234

0800958c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009594:	f000 f852 	bl	800963c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009598:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <prvIdleTask+0x28>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d9f9      	bls.n	8009594 <prvIdleTask+0x8>
			{
				taskYIELD();
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <prvIdleTask+0x2c>)
 80095a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095b0:	e7f0      	b.n	8009594 <prvIdleTask+0x8>
 80095b2:	bf00      	nop
 80095b4:	20000d50 	.word	0x20000d50
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
 80095c6:	e00c      	b.n	80095e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4a12      	ldr	r2, [pc, #72]	; (800961c <prvInitialiseTaskLists+0x60>)
 80095d4:	4413      	add	r3, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe faee 	bl	8007bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3301      	adds	r3, #1
 80095e0:	607b      	str	r3, [r7, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b37      	cmp	r3, #55	; 0x37
 80095e6:	d9ef      	bls.n	80095c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095e8:	480d      	ldr	r0, [pc, #52]	; (8009620 <prvInitialiseTaskLists+0x64>)
 80095ea:	f7fe fae5 	bl	8007bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ee:	480d      	ldr	r0, [pc, #52]	; (8009624 <prvInitialiseTaskLists+0x68>)
 80095f0:	f7fe fae2 	bl	8007bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095f4:	480c      	ldr	r0, [pc, #48]	; (8009628 <prvInitialiseTaskLists+0x6c>)
 80095f6:	f7fe fadf 	bl	8007bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095fa:	480c      	ldr	r0, [pc, #48]	; (800962c <prvInitialiseTaskLists+0x70>)
 80095fc:	f7fe fadc 	bl	8007bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009600:	480b      	ldr	r0, [pc, #44]	; (8009630 <prvInitialiseTaskLists+0x74>)
 8009602:	f7fe fad9 	bl	8007bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009606:	4b0b      	ldr	r3, [pc, #44]	; (8009634 <prvInitialiseTaskLists+0x78>)
 8009608:	4a05      	ldr	r2, [pc, #20]	; (8009620 <prvInitialiseTaskLists+0x64>)
 800960a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <prvInitialiseTaskLists+0x7c>)
 800960e:	4a05      	ldr	r2, [pc, #20]	; (8009624 <prvInitialiseTaskLists+0x68>)
 8009610:	601a      	str	r2, [r3, #0]
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000d50 	.word	0x20000d50
 8009620:	200011b0 	.word	0x200011b0
 8009624:	200011c4 	.word	0x200011c4
 8009628:	200011e0 	.word	0x200011e0
 800962c:	200011f4 	.word	0x200011f4
 8009630:	2000120c 	.word	0x2000120c
 8009634:	200011d8 	.word	0x200011d8
 8009638:	200011dc 	.word	0x200011dc

0800963c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009642:	e019      	b.n	8009678 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009644:	f000 feca 	bl	800a3dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009648:	4b10      	ldr	r3, [pc, #64]	; (800968c <prvCheckTasksWaitingTermination+0x50>)
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fb39 	bl	8007ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800965a:	4b0d      	ldr	r3, [pc, #52]	; (8009690 <prvCheckTasksWaitingTermination+0x54>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3b01      	subs	r3, #1
 8009660:	4a0b      	ldr	r2, [pc, #44]	; (8009690 <prvCheckTasksWaitingTermination+0x54>)
 8009662:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009664:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <prvCheckTasksWaitingTermination+0x58>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3b01      	subs	r3, #1
 800966a:	4a0a      	ldr	r2, [pc, #40]	; (8009694 <prvCheckTasksWaitingTermination+0x58>)
 800966c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800966e:	f000 fee9 	bl	800a444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f810 	bl	8009698 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009678:	4b06      	ldr	r3, [pc, #24]	; (8009694 <prvCheckTasksWaitingTermination+0x58>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e1      	bne.n	8009644 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	200011f4 	.word	0x200011f4
 8009690:	20001220 	.word	0x20001220
 8009694:	20001208 	.word	0x20001208

08009698 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3354      	adds	r3, #84	; 0x54
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 f9b1 	bl	800aa0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 f885 	bl	800a7c8 <vPortFree>
				vPortFree( pxTCB );
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 f882 	bl	800a7c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096c4:	e01a      	b.n	80096fc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d103      	bne.n	80096d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 f879 	bl	800a7c8 <vPortFree>
	}
 80096d6:	e011      	b.n	80096fc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d00c      	beq.n	80096fc <prvDeleteTCB+0x64>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	b672      	cpsid	i
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	b662      	cpsie	i
 80096f6:	60fb      	str	r3, [r7, #12]
}
 80096f8:	bf00      	nop
 80096fa:	e7fe      	b.n	80096fa <prvDeleteTCB+0x62>
	}
 80096fc:	bf00      	nop
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <prvResetNextTaskUnblockTime+0x38>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009714:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <prvResetNextTaskUnblockTime+0x3c>)
 8009716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800971a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800971c:	e008      	b.n	8009730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971e:	4b07      	ldr	r3, [pc, #28]	; (800973c <prvResetNextTaskUnblockTime+0x38>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	68db      	ldr	r3, [r3, #12]
 8009726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	4a04      	ldr	r2, [pc, #16]	; (8009740 <prvResetNextTaskUnblockTime+0x3c>)
 800972e:	6013      	str	r3, [r2, #0]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	200011d8 	.word	0x200011d8
 8009740:	20001240 	.word	0x20001240

08009744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800974a:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <xTaskGetSchedulerState+0x34>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009752:	2301      	movs	r3, #1
 8009754:	607b      	str	r3, [r7, #4]
 8009756:	e008      	b.n	800976a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009758:	4b08      	ldr	r3, [pc, #32]	; (800977c <xTaskGetSchedulerState+0x38>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009760:	2302      	movs	r3, #2
 8009762:	607b      	str	r3, [r7, #4]
 8009764:	e001      	b.n	800976a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800976a:	687b      	ldr	r3, [r7, #4]
	}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	2000122c 	.word	0x2000122c
 800977c:	20001248 	.word	0x20001248

08009780 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d051      	beq.n	800983a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979a:	4b2a      	ldr	r3, [pc, #168]	; (8009844 <xTaskPriorityInherit+0xc4>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d241      	bcs.n	8009828 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	db06      	blt.n	80097ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ac:	4b25      	ldr	r3, [pc, #148]	; (8009844 <xTaskPriorityInherit+0xc4>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	6959      	ldr	r1, [r3, #20]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	4613      	mov	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <xTaskPriorityInherit+0xc8>)
 80097cc:	4413      	add	r3, r2
 80097ce:	4299      	cmp	r1, r3
 80097d0:	d122      	bne.n	8009818 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fa78 	bl	8007ccc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <xTaskPriorityInherit+0xc4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ea:	4b18      	ldr	r3, [pc, #96]	; (800984c <xTaskPriorityInherit+0xcc>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d903      	bls.n	80097fa <xTaskPriorityInherit+0x7a>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	4a15      	ldr	r2, [pc, #84]	; (800984c <xTaskPriorityInherit+0xcc>)
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4a10      	ldr	r2, [pc, #64]	; (8009848 <xTaskPriorityInherit+0xc8>)
 8009808:	441a      	add	r2, r3
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	3304      	adds	r3, #4
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f7fe f9fe 	bl	8007c12 <vListInsertEnd>
 8009816:	e004      	b.n	8009822 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009818:	4b0a      	ldr	r3, [pc, #40]	; (8009844 <xTaskPriorityInherit+0xc4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009822:	2301      	movs	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e008      	b.n	800983a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800982c:	4b05      	ldr	r3, [pc, #20]	; (8009844 <xTaskPriorityInherit+0xc4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009832:	429a      	cmp	r2, r3
 8009834:	d201      	bcs.n	800983a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009836:	2301      	movs	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800983a:	68fb      	ldr	r3, [r7, #12]
	}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000d4c 	.word	0x20000d4c
 8009848:	20000d50 	.word	0x20000d50
 800984c:	20001228 	.word	0x20001228

08009850 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d05a      	beq.n	800991c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009866:	4b30      	ldr	r3, [pc, #192]	; (8009928 <xTaskPriorityDisinherit+0xd8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	429a      	cmp	r2, r3
 800986e:	d00c      	beq.n	800988a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10c      	bne.n	80098ac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	60bb      	str	r3, [r7, #8]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b0:	1e5a      	subs	r2, r3, #1
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098be:	429a      	cmp	r2, r3
 80098c0:	d02c      	beq.n	800991c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d128      	bne.n	800991c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe f9fc 	bl	8007ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	4b0f      	ldr	r3, [pc, #60]	; (800992c <xTaskPriorityDisinherit+0xdc>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d903      	bls.n	80098fc <xTaskPriorityDisinherit+0xac>
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f8:	4a0c      	ldr	r2, [pc, #48]	; (800992c <xTaskPriorityDisinherit+0xdc>)
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4a09      	ldr	r2, [pc, #36]	; (8009930 <xTaskPriorityDisinherit+0xe0>)
 800990a:	441a      	add	r2, r3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	3304      	adds	r3, #4
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fe f97d 	bl	8007c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800991c:	697b      	ldr	r3, [r7, #20]
	}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000d4c 	.word	0x20000d4c
 800992c:	20001228 	.word	0x20001228
 8009930:	20000d50 	.word	0x20000d50

08009934 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009942:	2301      	movs	r3, #1
 8009944:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d06e      	beq.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10c      	bne.n	800996e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	b672      	cpsid	i
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	b662      	cpsie	i
 8009968:	60fb      	str	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	e7fe      	b.n	800996c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d902      	bls.n	800997e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	61fb      	str	r3, [r7, #28]
 800997c:	e002      	b.n	8009984 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009982:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	429a      	cmp	r2, r3
 800998c:	d04d      	beq.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	429a      	cmp	r2, r3
 8009996:	d148      	bne.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009998:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d10c      	bne.n	80099bc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	b672      	cpsid	i
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	b662      	cpsie	i
 80099b6:	60bb      	str	r3, [r7, #8]
}
 80099b8:	bf00      	nop
 80099ba:	e7fe      	b.n	80099ba <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	db04      	blt.n	80099da <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	6959      	ldr	r1, [r3, #20]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4613      	mov	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4413      	add	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4a13      	ldr	r2, [pc, #76]	; (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80099ea:	4413      	add	r3, r2
 80099ec:	4299      	cmp	r1, r3
 80099ee:	d11c      	bne.n	8009a2a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe f969 	bl	8007ccc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d903      	bls.n	8009a0e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4a07      	ldr	r2, [pc, #28]	; (8009a38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a1c:	441a      	add	r2, r3
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7fe f8f4 	bl	8007c12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a2a:	bf00      	nop
 8009a2c:	3720      	adds	r7, #32
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000d4c 	.word	0x20000d4c
 8009a38:	20000d50 	.word	0x20000d50
 8009a3c:	20001228 	.word	0x20001228

08009a40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a40:	b480      	push	{r7}
 8009a42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a44:	4b07      	ldr	r3, [pc, #28]	; (8009a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a4c:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a52:	3201      	adds	r2, #1
 8009a54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009a56:	4b03      	ldr	r3, [pc, #12]	; (8009a64 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a58:	681b      	ldr	r3, [r3, #0]
	}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	20000d4c 	.word	0x20000d4c

08009a68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a72:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a78:	4b20      	ldr	r3, [pc, #128]	; (8009afc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe f924 	bl	8007ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a8a:	d10a      	bne.n	8009aa2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d007      	beq.n	8009aa2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a92:	4b1a      	ldr	r3, [pc, #104]	; (8009afc <prvAddCurrentTaskToDelayedList+0x94>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4819      	ldr	r0, [pc, #100]	; (8009b00 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a9c:	f7fe f8b9 	bl	8007c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aa0:	e026      	b.n	8009af0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aaa:	4b14      	ldr	r3, [pc, #80]	; (8009afc <prvAddCurrentTaskToDelayedList+0x94>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d209      	bcs.n	8009ace <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aba:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b0f      	ldr	r3, [pc, #60]	; (8009afc <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7fe f8c7 	bl	8007c5a <vListInsert>
}
 8009acc:	e010      	b.n	8009af0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ace:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f7fe f8bd 	bl	8007c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d202      	bcs.n	8009af0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009aea:	4a08      	ldr	r2, [pc, #32]	; (8009b0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	6013      	str	r3, [r2, #0]
}
 8009af0:	bf00      	nop
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20001224 	.word	0x20001224
 8009afc:	20000d4c 	.word	0x20000d4c
 8009b00:	2000120c 	.word	0x2000120c
 8009b04:	200011dc 	.word	0x200011dc
 8009b08:	200011d8 	.word	0x200011d8
 8009b0c:	20001240 	.word	0x20001240

08009b10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b1a:	f000 fb15 	bl	800a148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <xTimerCreateTimerTask+0x84>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d021      	beq.n	8009b6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b2e:	1d3a      	adds	r2, r7, #4
 8009b30:	f107 0108 	add.w	r1, r7, #8
 8009b34:	f107 030c 	add.w	r3, r7, #12
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe f823 	bl	8007b84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	9202      	str	r2, [sp, #8]
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	2302      	movs	r3, #2
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	460a      	mov	r2, r1
 8009b50:	4911      	ldr	r1, [pc, #68]	; (8009b98 <xTimerCreateTimerTask+0x88>)
 8009b52:	4812      	ldr	r0, [pc, #72]	; (8009b9c <xTimerCreateTimerTask+0x8c>)
 8009b54:	f7fe ff8e 	bl	8008a74 <xTaskCreateStatic>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4a11      	ldr	r2, [pc, #68]	; (8009ba0 <xTimerCreateTimerTask+0x90>)
 8009b5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b5e:	4b10      	ldr	r3, [pc, #64]	; (8009ba0 <xTimerCreateTimerTask+0x90>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b66:	2301      	movs	r3, #1
 8009b68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10c      	bne.n	8009b8a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	b672      	cpsid	i
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	b662      	cpsie	i
 8009b84:	613b      	str	r3, [r7, #16]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009b8a:	697b      	ldr	r3, [r7, #20]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	2000127c 	.word	0x2000127c
 8009b98:	0800ac1c 	.word	0x0800ac1c
 8009b9c:	08009ce1 	.word	0x08009ce1
 8009ba0:	20001280 	.word	0x20001280

08009ba4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	; 0x28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10c      	bne.n	8009bd6 <xTimerGenericCommand+0x32>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	b672      	cpsid	i
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	b662      	cpsie	i
 8009bd0:	623b      	str	r3, [r7, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	; (8009c40 <xTimerGenericCommand+0x9c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02a      	beq.n	8009c34 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b05      	cmp	r3, #5
 8009bee:	dc18      	bgt.n	8009c22 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bf0:	f7ff fda8 	bl	8009744 <xTaskGetSchedulerState>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d109      	bne.n	8009c0e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <xTimerGenericCommand+0x9c>)
 8009bfc:	6818      	ldr	r0, [r3, #0]
 8009bfe:	f107 0110 	add.w	r1, r7, #16
 8009c02:	2300      	movs	r3, #0
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	f7fe fa0f 	bl	8008028 <xQueueGenericSend>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8009c0c:	e012      	b.n	8009c34 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c0e:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <xTimerGenericCommand+0x9c>)
 8009c10:	6818      	ldr	r0, [r3, #0]
 8009c12:	f107 0110 	add.w	r1, r7, #16
 8009c16:	2300      	movs	r3, #0
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f7fe fa05 	bl	8008028 <xQueueGenericSend>
 8009c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8009c20:	e008      	b.n	8009c34 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <xTimerGenericCommand+0x9c>)
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	f107 0110 	add.w	r1, r7, #16
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	f7fe fb01 	bl	8008234 <xQueueGenericSendFromISR>
 8009c32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3728      	adds	r7, #40	; 0x28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	2000127c 	.word	0x2000127c

08009c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4e:	4b23      	ldr	r3, [pc, #140]	; (8009cdc <prvProcessExpiredTimer+0x98>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe f835 	bl	8007ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d024      	beq.n	8009cba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	18d1      	adds	r1, r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	6978      	ldr	r0, [r7, #20]
 8009c7e:	f000 f8d3 	bl	8009e28 <prvInsertTimerInActiveList>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d021      	beq.n	8009ccc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	6978      	ldr	r0, [r7, #20]
 8009c94:	f7ff ff86 	bl	8009ba4 <xTimerGenericCommand>
 8009c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d115      	bne.n	8009ccc <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	b672      	cpsid	i
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	b662      	cpsie	i
 8009cb4:	60fb      	str	r3, [r7, #12]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cc0:	f023 0301 	bic.w	r3, r3, #1
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	6978      	ldr	r0, [r7, #20]
 8009cd2:	4798      	blx	r3
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20001274 	.word	0x20001274

08009ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f857 	bl	8009da0 <prvGetNextExpireTime>
 8009cf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f803 	bl	8009d04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cfe:	f000 f8d5 	bl	8009eac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d02:	e7f1      	b.n	8009ce8 <prvTimerTask+0x8>

08009d04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d0e:	f7ff f91b 	bl	8008f48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f866 	bl	8009de8 <prvSampleTimeNow>
 8009d1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d130      	bne.n	8009d86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <prvProcessTimerOrBlockTask+0x3c>
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d806      	bhi.n	8009d40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d32:	f7ff f917 	bl	8008f64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d36:	68f9      	ldr	r1, [r7, #12]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff ff83 	bl	8009c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d3e:	e024      	b.n	8009d8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d008      	beq.n	8009d58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <prvProcessTimerOrBlockTask+0x90>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <prvProcessTimerOrBlockTask+0x50>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <prvProcessTimerOrBlockTask+0x52>
 8009d54:	2300      	movs	r3, #0
 8009d56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <prvProcessTimerOrBlockTask+0x94>)
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4619      	mov	r1, r3
 8009d66:	f7fe fe51 	bl	8008a0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d6a:	f7ff f8fb 	bl	8008f64 <xTaskResumeAll>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d74:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <prvProcessTimerOrBlockTask+0x98>)
 8009d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7a:	601a      	str	r2, [r3, #0]
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	f3bf 8f6f 	isb	sy
}
 8009d84:	e001      	b.n	8009d8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d86:	f7ff f8ed 	bl	8008f64 <xTaskResumeAll>
}
 8009d8a:	bf00      	nop
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001278 	.word	0x20001278
 8009d98:	2000127c 	.word	0x2000127c
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009da8:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <prvGetNextExpireTime+0x44>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <prvGetNextExpireTime+0x16>
 8009db2:	2201      	movs	r2, #1
 8009db4:	e000      	b.n	8009db8 <prvGetNextExpireTime+0x18>
 8009db6:	2200      	movs	r2, #0
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc4:	4b07      	ldr	r3, [pc, #28]	; (8009de4 <prvGetNextExpireTime+0x44>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	e001      	b.n	8009dd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20001274 	.word	0x20001274

08009de8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009df0:	f7ff f958 	bl	80090a4 <xTaskGetTickCount>
 8009df4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <prvSampleTimeNow+0x3c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d205      	bcs.n	8009e0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e00:	f000 f93c 	bl	800a07c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	e002      	b.n	8009e12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e12:	4a04      	ldr	r2, [pc, #16]	; (8009e24 <prvSampleTimeNow+0x3c>)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e18:	68fb      	ldr	r3, [r7, #12]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20001284 	.word	0x20001284

08009e28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d812      	bhi.n	8009e74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	1ad2      	subs	r2, r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d302      	bcc.n	8009e62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e01b      	b.n	8009e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	4b10      	ldr	r3, [pc, #64]	; (8009ea4 <prvInsertTimerInActiveList+0x7c>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fd fef4 	bl	8007c5a <vListInsert>
 8009e72:	e012      	b.n	8009e9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d206      	bcs.n	8009e8a <prvInsertTimerInActiveList+0x62>
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d302      	bcc.n	8009e8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e007      	b.n	8009e9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e8a:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <prvInsertTimerInActiveList+0x80>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4610      	mov	r0, r2
 8009e96:	f7fd fee0 	bl	8007c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e9a:	697b      	ldr	r3, [r7, #20]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20001278 	.word	0x20001278
 8009ea8:	20001274 	.word	0x20001274

08009eac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08e      	sub	sp, #56	; 0x38
 8009eb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eb2:	e0d0      	b.n	800a056 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	da1a      	bge.n	8009ef0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009eba:	1d3b      	adds	r3, r7, #4
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10c      	bne.n	8009ee0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	b672      	cpsid	i
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	b662      	cpsie	i
 8009eda:	61fb      	str	r3, [r7, #28]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ee6:	6850      	ldr	r0, [r2, #4]
 8009ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eea:	6892      	ldr	r2, [r2, #8]
 8009eec:	4611      	mov	r1, r2
 8009eee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f2c0 80af 	blt.w	800a056 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d004      	beq.n	8009f0e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	3304      	adds	r3, #4
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fd fedf 	bl	8007ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f0e:	463b      	mov	r3, r7
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7ff ff69 	bl	8009de8 <prvSampleTimeNow>
 8009f16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b09      	cmp	r3, #9
 8009f1c:	f200 809a 	bhi.w	800a054 <prvProcessReceivedCommands+0x1a8>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <prvProcessReceivedCommands+0x7c>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f51 	.word	0x08009f51
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f51 	.word	0x08009f51
 8009f34:	08009fc9 	.word	0x08009fc9
 8009f38:	08009fdd 	.word	0x08009fdd
 8009f3c:	0800a02b 	.word	0x0800a02b
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009f51 	.word	0x08009f51
 8009f48:	08009fc9 	.word	0x08009fc9
 8009f4c:	08009fdd 	.word	0x08009fdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	18d1      	adds	r1, r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f70:	f7ff ff5a 	bl	8009e28 <prvInsertTimerInActiveList>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d06d      	beq.n	800a056 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d062      	beq.n	800a056 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	441a      	add	r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa2:	f7ff fdff 	bl	8009ba4 <xTimerGenericCommand>
 8009fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d153      	bne.n	800a056 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	b672      	cpsid	i
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	b662      	cpsie	i
 8009fc2:	61bb      	str	r3, [r7, #24]
}
 8009fc4:	bf00      	nop
 8009fc6:	e7fe      	b.n	8009fc6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009fda:	e03c      	b.n	800a056 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10c      	bne.n	800a016 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a000:	b672      	cpsid	i
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	b662      	cpsie	i
 800a010:	617b      	str	r3, [r7, #20]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	18d1      	adds	r1, r2, r3
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a024:	f7ff ff00 	bl	8009e28 <prvInsertTimerInActiveList>
					break;
 800a028:	e015      	b.n	800a056 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d103      	bne.n	800a040 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03a:	f000 fbc5 	bl	800a7c8 <vPortFree>
 800a03e:	e00a      	b.n	800a056 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a046:	f023 0301 	bic.w	r3, r3, #1
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a052:	e000      	b.n	800a056 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <prvProcessReceivedCommands+0x1cc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	1d39      	adds	r1, r7, #4
 800a05c:	2200      	movs	r2, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe f988 	bl	8008374 <xQueueReceive>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	f47f af24 	bne.w	8009eb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	3730      	adds	r7, #48	; 0x30
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000127c 	.word	0x2000127c

0800a07c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a082:	e04a      	b.n	800a11a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a084:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a08e:	4b2c      	ldr	r3, [pc, #176]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fd fe15 	bl	8007ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d030      	beq.n	800a11a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d90e      	bls.n	800a0e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fd fdba 	bl	8007c5a <vListInsert>
 800a0e6:	e018      	b.n	800a11a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff fd56 	bl	8009ba4 <xTimerGenericCommand>
 800a0f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10c      	bne.n	800a11a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	603b      	str	r3, [r7, #0]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a11a:	4b09      	ldr	r3, [pc, #36]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1af      	bne.n	800a084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a124:	4b06      	ldr	r3, [pc, #24]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <prvSwitchTimerLists+0xc8>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a04      	ldr	r2, [pc, #16]	; (800a140 <prvSwitchTimerLists+0xc4>)
 800a130:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a132:	4a04      	ldr	r2, [pc, #16]	; (800a144 <prvSwitchTimerLists+0xc8>)
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	6013      	str	r3, [r2, #0]
}
 800a138:	bf00      	nop
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20001274 	.word	0x20001274
 800a144:	20001278 	.word	0x20001278

0800a148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a14e:	f000 f945 	bl	800a3dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d120      	bne.n	800a19c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a15a:	4814      	ldr	r0, [pc, #80]	; (800a1ac <prvCheckForValidListAndQueue+0x64>)
 800a15c:	f7fd fd2c 	bl	8007bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a160:	4813      	ldr	r0, [pc, #76]	; (800a1b0 <prvCheckForValidListAndQueue+0x68>)
 800a162:	f7fd fd29 	bl	8007bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <prvCheckForValidListAndQueue+0x6c>)
 800a168:	4a10      	ldr	r2, [pc, #64]	; (800a1ac <prvCheckForValidListAndQueue+0x64>)
 800a16a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a16c:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <prvCheckForValidListAndQueue+0x70>)
 800a16e:	4a10      	ldr	r2, [pc, #64]	; (800a1b0 <prvCheckForValidListAndQueue+0x68>)
 800a170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a172:	2300      	movs	r3, #0
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <prvCheckForValidListAndQueue+0x74>)
 800a178:	4a11      	ldr	r2, [pc, #68]	; (800a1c0 <prvCheckForValidListAndQueue+0x78>)
 800a17a:	2110      	movs	r1, #16
 800a17c:	200a      	movs	r0, #10
 800a17e:	f7fd fe39 	bl	8007df4 <xQueueGenericCreateStatic>
 800a182:	4603      	mov	r3, r0
 800a184:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a188:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	490b      	ldr	r1, [pc, #44]	; (800a1c4 <prvCheckForValidListAndQueue+0x7c>)
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fc0e 	bl	80089b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a19c:	f000 f952 	bl	800a444 <vPortExitCritical>
}
 800a1a0:	bf00      	nop
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	2000127c 	.word	0x2000127c
 800a1ac:	2000124c 	.word	0x2000124c
 800a1b0:	20001260 	.word	0x20001260
 800a1b4:	20001274 	.word	0x20001274
 800a1b8:	20001278 	.word	0x20001278
 800a1bc:	20001328 	.word	0x20001328
 800a1c0:	20001288 	.word	0x20001288
 800a1c4:	0800ac24 	.word	0x0800ac24

0800a1c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3b04      	subs	r3, #4
 800a1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f023 0201 	bic.w	r2, r3, #1
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1f8:	4a0c      	ldr	r2, [pc, #48]	; (800a22c <pxPortInitialiseStack+0x64>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b14      	subs	r3, #20
 800a202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f06f 0202 	mvn.w	r2, #2
 800a216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b20      	subs	r3, #32
 800a21c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a21e:	68fb      	ldr	r3, [r7, #12]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	0800a231 	.word	0x0800a231

0800a230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a23a:	4b14      	ldr	r3, [pc, #80]	; (800a28c <prvTaskExitError+0x5c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a242:	d00c      	beq.n	800a25e <prvTaskExitError+0x2e>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	b672      	cpsid	i
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	b662      	cpsie	i
 800a258:	60fb      	str	r3, [r7, #12]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <prvTaskExitError+0x2c>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	b672      	cpsid	i
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	b662      	cpsie	i
 800a272:	60bb      	str	r3, [r7, #8]
}
 800a274:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a276:	bf00      	nop
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0fc      	beq.n	800a278 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	2000001c 	.word	0x2000001c

0800a290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <pxCurrentTCBConst2>)
 800a292:	6819      	ldr	r1, [r3, #0]
 800a294:	6808      	ldr	r0, [r1, #0]
 800a296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29a:	f380 8809 	msr	PSP, r0
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f04f 0000 	mov.w	r0, #0
 800a2a6:	f380 8811 	msr	BASEPRI, r0
 800a2aa:	4770      	bx	lr
 800a2ac:	f3af 8000 	nop.w

0800a2b0 <pxCurrentTCBConst2>:
 800a2b0:	20000d4c 	.word	0x20000d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop

0800a2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2b8:	4808      	ldr	r0, [pc, #32]	; (800a2dc <prvPortStartFirstTask+0x24>)
 800a2ba:	6800      	ldr	r0, [r0, #0]
 800a2bc:	6800      	ldr	r0, [r0, #0]
 800a2be:	f380 8808 	msr	MSP, r0
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8814 	msr	CONTROL, r0
 800a2ca:	b662      	cpsie	i
 800a2cc:	b661      	cpsie	f
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	df00      	svc	0
 800a2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2da:	bf00      	nop
 800a2dc:	e000ed08 	.word	0xe000ed08

0800a2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2e6:	4b37      	ldr	r3, [pc, #220]	; (800a3c4 <xPortStartScheduler+0xe4>)
 800a2e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	22ff      	movs	r2, #255	; 0xff
 800a2f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	4b2f      	ldr	r3, [pc, #188]	; (800a3c8 <xPortStartScheduler+0xe8>)
 800a30c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a30e:	4b2f      	ldr	r3, [pc, #188]	; (800a3cc <xPortStartScheduler+0xec>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a314:	e009      	b.n	800a32a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a316:	4b2d      	ldr	r3, [pc, #180]	; (800a3cc <xPortStartScheduler+0xec>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a2b      	ldr	r2, [pc, #172]	; (800a3cc <xPortStartScheduler+0xec>)
 800a31e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	b2db      	uxtb	r3, r3
 800a328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a332:	2b80      	cmp	r3, #128	; 0x80
 800a334:	d0ef      	beq.n	800a316 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a336:	4b25      	ldr	r3, [pc, #148]	; (800a3cc <xPortStartScheduler+0xec>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1c3 0307 	rsb	r3, r3, #7
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d00c      	beq.n	800a35c <xPortStartScheduler+0x7c>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	b672      	cpsid	i
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	b662      	cpsie	i
 800a356:	60bb      	str	r3, [r7, #8]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a35c:	4b1b      	ldr	r3, [pc, #108]	; (800a3cc <xPortStartScheduler+0xec>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	4a1a      	ldr	r2, [pc, #104]	; (800a3cc <xPortStartScheduler+0xec>)
 800a364:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a366:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <xPortStartScheduler+0xec>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a36e:	4a17      	ldr	r2, [pc, #92]	; (800a3cc <xPortStartScheduler+0xec>)
 800a370:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	b2da      	uxtb	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <xPortStartScheduler+0xf0>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a14      	ldr	r2, [pc, #80]	; (800a3d0 <xPortStartScheduler+0xf0>)
 800a380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a386:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <xPortStartScheduler+0xf0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a11      	ldr	r2, [pc, #68]	; (800a3d0 <xPortStartScheduler+0xf0>)
 800a38c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a390:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a392:	f000 f8dd 	bl	800a550 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a396:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <xPortStartScheduler+0xf4>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a39c:	f000 f8fc 	bl	800a598 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <xPortStartScheduler+0xf8>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a0c      	ldr	r2, [pc, #48]	; (800a3d8 <xPortStartScheduler+0xf8>)
 800a3a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3ac:	f7ff ff84 	bl	800a2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3b0:	f7fe ff44 	bl	800923c <vTaskSwitchContext>
	prvTaskExitError();
 800a3b4:	f7ff ff3c 	bl	800a230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	e000e400 	.word	0xe000e400
 800a3c8:	20001378 	.word	0x20001378
 800a3cc:	2000137c 	.word	0x2000137c
 800a3d0:	e000ed20 	.word	0xe000ed20
 800a3d4:	2000001c 	.word	0x2000001c
 800a3d8:	e000ef34 	.word	0xe000ef34

0800a3dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	b672      	cpsid	i
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	b662      	cpsie	i
 800a3f6:	607b      	str	r3, [r7, #4]
}
 800a3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3fa:	4b10      	ldr	r3, [pc, #64]	; (800a43c <vPortEnterCritical+0x60>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	4a0e      	ldr	r2, [pc, #56]	; (800a43c <vPortEnterCritical+0x60>)
 800a402:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a404:	4b0d      	ldr	r3, [pc, #52]	; (800a43c <vPortEnterCritical+0x60>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d111      	bne.n	800a430 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a40c:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <vPortEnterCritical+0x64>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <vPortEnterCritical+0x54>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	b672      	cpsid	i
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	b662      	cpsie	i
 800a42a:	603b      	str	r3, [r7, #0]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <vPortEnterCritical+0x52>
	}
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	2000001c 	.word	0x2000001c
 800a440:	e000ed04 	.word	0xe000ed04

0800a444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a44a:	4b13      	ldr	r3, [pc, #76]	; (800a498 <vPortExitCritical+0x54>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10c      	bne.n	800a46c <vPortExitCritical+0x28>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	b672      	cpsid	i
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	b662      	cpsie	i
 800a466:	607b      	str	r3, [r7, #4]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a46c:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <vPortExitCritical+0x54>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3b01      	subs	r3, #1
 800a472:	4a09      	ldr	r2, [pc, #36]	; (800a498 <vPortExitCritical+0x54>)
 800a474:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a476:	4b08      	ldr	r3, [pc, #32]	; (800a498 <vPortExitCritical+0x54>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d105      	bne.n	800a48a <vPortExitCritical+0x46>
 800a47e:	2300      	movs	r3, #0
 800a480:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f383 8811 	msr	BASEPRI, r3
}
 800a488:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	2000001c 	.word	0x2000001c
 800a49c:	00000000 	.word	0x00000000

0800a4a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4a0:	f3ef 8009 	mrs	r0, PSP
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	4b15      	ldr	r3, [pc, #84]	; (800a500 <pxCurrentTCBConst>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	f01e 0f10 	tst.w	lr, #16
 800a4b0:	bf08      	it	eq
 800a4b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	6010      	str	r0, [r2, #0]
 800a4bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4c4:	b672      	cpsid	i
 800a4c6:	f380 8811 	msr	BASEPRI, r0
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	b662      	cpsie	i
 800a4d4:	f7fe feb2 	bl	800923c <vTaskSwitchContext>
 800a4d8:	f04f 0000 	mov.w	r0, #0
 800a4dc:	f380 8811 	msr	BASEPRI, r0
 800a4e0:	bc09      	pop	{r0, r3}
 800a4e2:	6819      	ldr	r1, [r3, #0]
 800a4e4:	6808      	ldr	r0, [r1, #0]
 800a4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	f01e 0f10 	tst.w	lr, #16
 800a4ee:	bf08      	it	eq
 800a4f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4f4:	f380 8809 	msr	PSP, r0
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop

0800a500 <pxCurrentTCBConst>:
 800a500:	20000d4c 	.word	0x20000d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop

0800a508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	b672      	cpsid	i
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	b662      	cpsie	i
 800a522:	607b      	str	r3, [r7, #4]
}
 800a524:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a526:	f7fe fdcd 	bl	80090c4 <xTaskIncrementTick>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <SysTick_Handler+0x44>)
 800a532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	2300      	movs	r3, #0
 800a53a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	f383 8811 	msr	BASEPRI, r3
}
 800a542:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a550:	b480      	push	{r7}
 800a552:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a554:	4b0b      	ldr	r3, [pc, #44]	; (800a584 <vPortSetupTimerInterrupt+0x34>)
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a55a:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <vPortSetupTimerInterrupt+0x38>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a560:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <vPortSetupTimerInterrupt+0x3c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a0a      	ldr	r2, [pc, #40]	; (800a590 <vPortSetupTimerInterrupt+0x40>)
 800a566:	fba2 2303 	umull	r2, r3, r2, r3
 800a56a:	099b      	lsrs	r3, r3, #6
 800a56c:	4a09      	ldr	r2, [pc, #36]	; (800a594 <vPortSetupTimerInterrupt+0x44>)
 800a56e:	3b01      	subs	r3, #1
 800a570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a572:	4b04      	ldr	r3, [pc, #16]	; (800a584 <vPortSetupTimerInterrupt+0x34>)
 800a574:	2207      	movs	r2, #7
 800a576:	601a      	str	r2, [r3, #0]
}
 800a578:	bf00      	nop
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	e000e010 	.word	0xe000e010
 800a588:	e000e018 	.word	0xe000e018
 800a58c:	20000010 	.word	0x20000010
 800a590:	10624dd3 	.word	0x10624dd3
 800a594:	e000e014 	.word	0xe000e014

0800a598 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a598:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5a8 <vPortEnableVFP+0x10>
 800a59c:	6801      	ldr	r1, [r0, #0]
 800a59e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5a2:	6001      	str	r1, [r0, #0]
 800a5a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5a6:	bf00      	nop
 800a5a8:	e000ed88 	.word	0xe000ed88

0800a5ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5b2:	f3ef 8305 	mrs	r3, IPSR
 800a5b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b0f      	cmp	r3, #15
 800a5bc:	d916      	bls.n	800a5ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5be:	4a19      	ldr	r2, [pc, #100]	; (800a624 <vPortValidateInterruptPriority+0x78>)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5c8:	4b17      	ldr	r3, [pc, #92]	; (800a628 <vPortValidateInterruptPriority+0x7c>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	7afa      	ldrb	r2, [r7, #11]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d20c      	bcs.n	800a5ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	b672      	cpsid	i
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	b662      	cpsie	i
 800a5e6:	607b      	str	r3, [r7, #4]
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5ec:	4b0f      	ldr	r3, [pc, #60]	; (800a62c <vPortValidateInterruptPriority+0x80>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5f4:	4b0e      	ldr	r3, [pc, #56]	; (800a630 <vPortValidateInterruptPriority+0x84>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d90c      	bls.n	800a616 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	b672      	cpsid	i
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	b662      	cpsie	i
 800a610:	603b      	str	r3, [r7, #0]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <vPortValidateInterruptPriority+0x68>
	}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	e000e3f0 	.word	0xe000e3f0
 800a628:	20001378 	.word	0x20001378
 800a62c:	e000ed0c 	.word	0xe000ed0c
 800a630:	2000137c 	.word	0x2000137c

0800a634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a640:	f7fe fc82 	bl	8008f48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a644:	4b5b      	ldr	r3, [pc, #364]	; (800a7b4 <pvPortMalloc+0x180>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a64c:	f000 f91a 	bl	800a884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a650:	4b59      	ldr	r3, [pc, #356]	; (800a7b8 <pvPortMalloc+0x184>)
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4013      	ands	r3, r2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f040 8092 	bne.w	800a782 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d01f      	beq.n	800a6a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a664:	2208      	movs	r2, #8
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4413      	add	r3, r2
 800a66a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	2b00      	cmp	r3, #0
 800a674:	d016      	beq.n	800a6a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f023 0307 	bic.w	r3, r3, #7
 800a67c:	3308      	adds	r3, #8
 800a67e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00c      	beq.n	800a6a4 <pvPortMalloc+0x70>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68e:	b672      	cpsid	i
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	b662      	cpsie	i
 800a69e:	617b      	str	r3, [r7, #20]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d06b      	beq.n	800a782 <pvPortMalloc+0x14e>
 800a6aa:	4b44      	ldr	r3, [pc, #272]	; (800a7bc <pvPortMalloc+0x188>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d866      	bhi.n	800a782 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6b4:	4b42      	ldr	r3, [pc, #264]	; (800a7c0 <pvPortMalloc+0x18c>)
 800a6b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6b8:	4b41      	ldr	r3, [pc, #260]	; (800a7c0 <pvPortMalloc+0x18c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6be:	e004      	b.n	800a6ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d903      	bls.n	800a6dc <pvPortMalloc+0xa8>
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f1      	bne.n	800a6c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6dc:	4b35      	ldr	r3, [pc, #212]	; (800a7b4 <pvPortMalloc+0x180>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d04d      	beq.n	800a782 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	4413      	add	r3, r2
 800a6ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	1ad2      	subs	r2, r2, r3
 800a700:	2308      	movs	r3, #8
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	429a      	cmp	r2, r3
 800a706:	d921      	bls.n	800a74c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4413      	add	r3, r2
 800a70e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	f003 0307 	and.w	r3, r3, #7
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00c      	beq.n	800a734 <pvPortMalloc+0x100>
	__asm volatile
 800a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71e:	b672      	cpsid	i
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	b662      	cpsie	i
 800a72e:	613b      	str	r3, [r7, #16]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	1ad2      	subs	r2, r2, r3
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a746:	69b8      	ldr	r0, [r7, #24]
 800a748:	f000 f8fe 	bl	800a948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a74c:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <pvPortMalloc+0x188>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	4a19      	ldr	r2, [pc, #100]	; (800a7bc <pvPortMalloc+0x188>)
 800a758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a75a:	4b18      	ldr	r3, [pc, #96]	; (800a7bc <pvPortMalloc+0x188>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b19      	ldr	r3, [pc, #100]	; (800a7c4 <pvPortMalloc+0x190>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d203      	bcs.n	800a76e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a766:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <pvPortMalloc+0x188>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a16      	ldr	r2, [pc, #88]	; (800a7c4 <pvPortMalloc+0x190>)
 800a76c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	4b11      	ldr	r3, [pc, #68]	; (800a7b8 <pvPortMalloc+0x184>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	431a      	orrs	r2, r3
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a782:	f7fe fbef 	bl	8008f64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00c      	beq.n	800a7aa <pvPortMalloc+0x176>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	b672      	cpsid	i
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	b662      	cpsie	i
 800a7a4:	60fb      	str	r3, [r7, #12]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <pvPortMalloc+0x174>
	return pvReturn;
 800a7aa:	69fb      	ldr	r3, [r7, #28]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3728      	adds	r7, #40	; 0x28
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	20004f88 	.word	0x20004f88
 800a7b8:	20004f94 	.word	0x20004f94
 800a7bc:	20004f8c 	.word	0x20004f8c
 800a7c0:	20004f80 	.word	0x20004f80
 800a7c4:	20004f90 	.word	0x20004f90

0800a7c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d04c      	beq.n	800a874 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7da:	2308      	movs	r3, #8
 800a7dc:	425b      	negs	r3, r3
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	4b23      	ldr	r3, [pc, #140]	; (800a87c <vPortFree+0xb4>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10c      	bne.n	800a810 <vPortFree+0x48>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	b672      	cpsid	i
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	b662      	cpsie	i
 800a80a:	60fb      	str	r3, [r7, #12]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00c      	beq.n	800a832 <vPortFree+0x6a>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	b672      	cpsid	i
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	b662      	cpsie	i
 800a82c:	60bb      	str	r3, [r7, #8]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	4b11      	ldr	r3, [pc, #68]	; (800a87c <vPortFree+0xb4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4013      	ands	r3, r2
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d019      	beq.n	800a874 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d115      	bne.n	800a874 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <vPortFree+0xb4>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	43db      	mvns	r3, r3
 800a852:	401a      	ands	r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a858:	f7fe fb76 	bl	8008f48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	4b07      	ldr	r3, [pc, #28]	; (800a880 <vPortFree+0xb8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4413      	add	r3, r2
 800a866:	4a06      	ldr	r2, [pc, #24]	; (800a880 <vPortFree+0xb8>)
 800a868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a86a:	6938      	ldr	r0, [r7, #16]
 800a86c:	f000 f86c 	bl	800a948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a870:	f7fe fb78 	bl	8008f64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a874:	bf00      	nop
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20004f94 	.word	0x20004f94
 800a880:	20004f8c 	.word	0x20004f8c

0800a884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a88a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a88e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a890:	4b27      	ldr	r3, [pc, #156]	; (800a930 <prvHeapInit+0xac>)
 800a892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f003 0307 	and.w	r3, r3, #7
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00c      	beq.n	800a8b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3307      	adds	r3, #7
 800a8a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f023 0307 	bic.w	r3, r3, #7
 800a8aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	4a1f      	ldr	r2, [pc, #124]	; (800a930 <prvHeapInit+0xac>)
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8bc:	4a1d      	ldr	r2, [pc, #116]	; (800a934 <prvHeapInit+0xb0>)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <prvHeapInit+0xb0>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0307 	bic.w	r3, r3, #7
 800a8de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4a15      	ldr	r2, [pc, #84]	; (800a938 <prvHeapInit+0xb4>)
 800a8e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8e6:	4b14      	ldr	r3, [pc, #80]	; (800a938 <prvHeapInit+0xb4>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8ee:	4b12      	ldr	r3, [pc, #72]	; (800a938 <prvHeapInit+0xb4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <prvHeapInit+0xb4>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <prvHeapInit+0xb8>)
 800a912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4a09      	ldr	r2, [pc, #36]	; (800a940 <prvHeapInit+0xbc>)
 800a91a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <prvHeapInit+0xc0>)
 800a91e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	20001380 	.word	0x20001380
 800a934:	20004f80 	.word	0x20004f80
 800a938:	20004f88 	.word	0x20004f88
 800a93c:	20004f90 	.word	0x20004f90
 800a940:	20004f8c 	.word	0x20004f8c
 800a944:	20004f94 	.word	0x20004f94

0800a948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a950:	4b28      	ldr	r3, [pc, #160]	; (800a9f4 <prvInsertBlockIntoFreeList+0xac>)
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	e002      	b.n	800a95c <prvInsertBlockIntoFreeList+0x14>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	429a      	cmp	r2, r3
 800a964:	d8f7      	bhi.n	800a956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	4413      	add	r3, r2
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	429a      	cmp	r2, r3
 800a976:	d108      	bne.n	800a98a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	441a      	add	r2, r3
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	441a      	add	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d118      	bne.n	800a9d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	4b15      	ldr	r3, [pc, #84]	; (800a9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d00d      	beq.n	800a9c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	e008      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	e003      	b.n	800a9d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d002      	beq.n	800a9e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20004f80 	.word	0x20004f80
 800a9f8:	20004f88 	.word	0x20004f88

0800a9fc <memset>:
 800a9fc:	4402      	add	r2, r0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d100      	bne.n	800aa06 <memset+0xa>
 800aa04:	4770      	bx	lr
 800aa06:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0a:	e7f9      	b.n	800aa00 <memset+0x4>

0800aa0c <_reclaim_reent>:
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <_reclaim_reent+0xa8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4283      	cmp	r3, r0
 800aa12:	b570      	push	{r4, r5, r6, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	d04b      	beq.n	800aab0 <_reclaim_reent+0xa4>
 800aa18:	69c3      	ldr	r3, [r0, #28]
 800aa1a:	b143      	cbz	r3, 800aa2e <_reclaim_reent+0x22>
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d144      	bne.n	800aaac <_reclaim_reent+0xa0>
 800aa22:	69e3      	ldr	r3, [r4, #28]
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	b111      	cbz	r1, 800aa2e <_reclaim_reent+0x22>
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 f879 	bl	800ab20 <_free_r>
 800aa2e:	6961      	ldr	r1, [r4, #20]
 800aa30:	b111      	cbz	r1, 800aa38 <_reclaim_reent+0x2c>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f874 	bl	800ab20 <_free_r>
 800aa38:	69e1      	ldr	r1, [r4, #28]
 800aa3a:	b111      	cbz	r1, 800aa42 <_reclaim_reent+0x36>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 f86f 	bl	800ab20 <_free_r>
 800aa42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa44:	b111      	cbz	r1, 800aa4c <_reclaim_reent+0x40>
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 f86a 	bl	800ab20 <_free_r>
 800aa4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa4e:	b111      	cbz	r1, 800aa56 <_reclaim_reent+0x4a>
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 f865 	bl	800ab20 <_free_r>
 800aa56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa58:	b111      	cbz	r1, 800aa60 <_reclaim_reent+0x54>
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 f860 	bl	800ab20 <_free_r>
 800aa60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa62:	b111      	cbz	r1, 800aa6a <_reclaim_reent+0x5e>
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 f85b 	bl	800ab20 <_free_r>
 800aa6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa6c:	b111      	cbz	r1, 800aa74 <_reclaim_reent+0x68>
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 f856 	bl	800ab20 <_free_r>
 800aa74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa76:	b111      	cbz	r1, 800aa7e <_reclaim_reent+0x72>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 f851 	bl	800ab20 <_free_r>
 800aa7e:	6a23      	ldr	r3, [r4, #32]
 800aa80:	b1b3      	cbz	r3, 800aab0 <_reclaim_reent+0xa4>
 800aa82:	4620      	mov	r0, r4
 800aa84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa88:	4718      	bx	r3
 800aa8a:	5949      	ldr	r1, [r1, r5]
 800aa8c:	b941      	cbnz	r1, 800aaa0 <_reclaim_reent+0x94>
 800aa8e:	3504      	adds	r5, #4
 800aa90:	69e3      	ldr	r3, [r4, #28]
 800aa92:	2d80      	cmp	r5, #128	; 0x80
 800aa94:	68d9      	ldr	r1, [r3, #12]
 800aa96:	d1f8      	bne.n	800aa8a <_reclaim_reent+0x7e>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 f841 	bl	800ab20 <_free_r>
 800aa9e:	e7c0      	b.n	800aa22 <_reclaim_reent+0x16>
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 f83c 	bl	800ab20 <_free_r>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	e7ef      	b.n	800aa8c <_reclaim_reent+0x80>
 800aaac:	2500      	movs	r5, #0
 800aaae:	e7ef      	b.n	800aa90 <_reclaim_reent+0x84>
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	bf00      	nop
 800aab4:	2000006c 	.word	0x2000006c

0800aab8 <__libc_init_array>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4d0d      	ldr	r5, [pc, #52]	; (800aaf0 <__libc_init_array+0x38>)
 800aabc:	4c0d      	ldr	r4, [pc, #52]	; (800aaf4 <__libc_init_array+0x3c>)
 800aabe:	1b64      	subs	r4, r4, r5
 800aac0:	10a4      	asrs	r4, r4, #2
 800aac2:	2600      	movs	r6, #0
 800aac4:	42a6      	cmp	r6, r4
 800aac6:	d109      	bne.n	800aadc <__libc_init_array+0x24>
 800aac8:	4d0b      	ldr	r5, [pc, #44]	; (800aaf8 <__libc_init_array+0x40>)
 800aaca:	4c0c      	ldr	r4, [pc, #48]	; (800aafc <__libc_init_array+0x44>)
 800aacc:	f000 f880 	bl	800abd0 <_init>
 800aad0:	1b64      	subs	r4, r4, r5
 800aad2:	10a4      	asrs	r4, r4, #2
 800aad4:	2600      	movs	r6, #0
 800aad6:	42a6      	cmp	r6, r4
 800aad8:	d105      	bne.n	800aae6 <__libc_init_array+0x2e>
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aae0:	4798      	blx	r3
 800aae2:	3601      	adds	r6, #1
 800aae4:	e7ee      	b.n	800aac4 <__libc_init_array+0xc>
 800aae6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaea:	4798      	blx	r3
 800aaec:	3601      	adds	r6, #1
 800aaee:	e7f2      	b.n	800aad6 <__libc_init_array+0x1e>
 800aaf0:	0800c93c 	.word	0x0800c93c
 800aaf4:	0800c93c 	.word	0x0800c93c
 800aaf8:	0800c93c 	.word	0x0800c93c
 800aafc:	0800c940 	.word	0x0800c940

0800ab00 <__retarget_lock_acquire_recursive>:
 800ab00:	4770      	bx	lr

0800ab02 <__retarget_lock_release_recursive>:
 800ab02:	4770      	bx	lr

0800ab04 <memcpy>:
 800ab04:	440a      	add	r2, r1
 800ab06:	4291      	cmp	r1, r2
 800ab08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab0c:	d100      	bne.n	800ab10 <memcpy+0xc>
 800ab0e:	4770      	bx	lr
 800ab10:	b510      	push	{r4, lr}
 800ab12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab1a:	4291      	cmp	r1, r2
 800ab1c:	d1f9      	bne.n	800ab12 <memcpy+0xe>
 800ab1e:	bd10      	pop	{r4, pc}

0800ab20 <_free_r>:
 800ab20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab22:	2900      	cmp	r1, #0
 800ab24:	d044      	beq.n	800abb0 <_free_r+0x90>
 800ab26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab2a:	9001      	str	r0, [sp, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab32:	bfb8      	it	lt
 800ab34:	18e4      	addlt	r4, r4, r3
 800ab36:	f000 f83f 	bl	800abb8 <__malloc_lock>
 800ab3a:	4a1e      	ldr	r2, [pc, #120]	; (800abb4 <_free_r+0x94>)
 800ab3c:	9801      	ldr	r0, [sp, #4]
 800ab3e:	6813      	ldr	r3, [r2, #0]
 800ab40:	b933      	cbnz	r3, 800ab50 <_free_r+0x30>
 800ab42:	6063      	str	r3, [r4, #4]
 800ab44:	6014      	str	r4, [r2, #0]
 800ab46:	b003      	add	sp, #12
 800ab48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab4c:	f000 b83a 	b.w	800abc4 <__malloc_unlock>
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	d908      	bls.n	800ab66 <_free_r+0x46>
 800ab54:	6825      	ldr	r5, [r4, #0]
 800ab56:	1961      	adds	r1, r4, r5
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	bf01      	itttt	eq
 800ab5c:	6819      	ldreq	r1, [r3, #0]
 800ab5e:	685b      	ldreq	r3, [r3, #4]
 800ab60:	1949      	addeq	r1, r1, r5
 800ab62:	6021      	streq	r1, [r4, #0]
 800ab64:	e7ed      	b.n	800ab42 <_free_r+0x22>
 800ab66:	461a      	mov	r2, r3
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b10b      	cbz	r3, 800ab70 <_free_r+0x50>
 800ab6c:	42a3      	cmp	r3, r4
 800ab6e:	d9fa      	bls.n	800ab66 <_free_r+0x46>
 800ab70:	6811      	ldr	r1, [r2, #0]
 800ab72:	1855      	adds	r5, r2, r1
 800ab74:	42a5      	cmp	r5, r4
 800ab76:	d10b      	bne.n	800ab90 <_free_r+0x70>
 800ab78:	6824      	ldr	r4, [r4, #0]
 800ab7a:	4421      	add	r1, r4
 800ab7c:	1854      	adds	r4, r2, r1
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	d1e0      	bne.n	800ab46 <_free_r+0x26>
 800ab84:	681c      	ldr	r4, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	6053      	str	r3, [r2, #4]
 800ab8a:	440c      	add	r4, r1
 800ab8c:	6014      	str	r4, [r2, #0]
 800ab8e:	e7da      	b.n	800ab46 <_free_r+0x26>
 800ab90:	d902      	bls.n	800ab98 <_free_r+0x78>
 800ab92:	230c      	movs	r3, #12
 800ab94:	6003      	str	r3, [r0, #0]
 800ab96:	e7d6      	b.n	800ab46 <_free_r+0x26>
 800ab98:	6825      	ldr	r5, [r4, #0]
 800ab9a:	1961      	adds	r1, r4, r5
 800ab9c:	428b      	cmp	r3, r1
 800ab9e:	bf04      	itt	eq
 800aba0:	6819      	ldreq	r1, [r3, #0]
 800aba2:	685b      	ldreq	r3, [r3, #4]
 800aba4:	6063      	str	r3, [r4, #4]
 800aba6:	bf04      	itt	eq
 800aba8:	1949      	addeq	r1, r1, r5
 800abaa:	6021      	streq	r1, [r4, #0]
 800abac:	6054      	str	r4, [r2, #4]
 800abae:	e7ca      	b.n	800ab46 <_free_r+0x26>
 800abb0:	b003      	add	sp, #12
 800abb2:	bd30      	pop	{r4, r5, pc}
 800abb4:	200050d4 	.word	0x200050d4

0800abb8 <__malloc_lock>:
 800abb8:	4801      	ldr	r0, [pc, #4]	; (800abc0 <__malloc_lock+0x8>)
 800abba:	f7ff bfa1 	b.w	800ab00 <__retarget_lock_acquire_recursive>
 800abbe:	bf00      	nop
 800abc0:	200050d0 	.word	0x200050d0

0800abc4 <__malloc_unlock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__malloc_unlock+0x8>)
 800abc6:	f7ff bf9c 	b.w	800ab02 <__retarget_lock_release_recursive>
 800abca:	bf00      	nop
 800abcc:	200050d0 	.word	0x200050d0

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
